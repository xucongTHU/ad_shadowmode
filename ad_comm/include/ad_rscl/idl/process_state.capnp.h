// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: process_state.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cfbbe9302a32eee4);
CAPNP_DECLARE_SCHEMA(813b4fb90d6a7851);
enum class State_813b4fb90d6a7851: uint16_t {
  INITIALIZED,
  SHUTTING_DOWN,
  SUSPENDED,
  SUSPEND_FAILED,
  RESUME_FAILED,
};
CAPNP_DECLARE_ENUM(State, 813b4fb90d6a7851);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace rscl {
namespace idl {

struct ProcessStateInfo {
  ProcessStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::State_813b4fb90d6a7851 State;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfbbe9302a32eee4, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ProcessStateInfo::Reader {
public:
  typedef ProcessStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPid() const;

  inline bool hasHostname() const;
  inline  ::capnp::Text::Reader getHostname() const;

  inline  ::senseAD::rscl::idl::ProcessStateInfo::State getState() const;

  inline  ::uint64_t getSentTimeWallTimeNs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProcessStateInfo::Builder {
public:
  typedef ProcessStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPid();
  inline void setPid( ::uint32_t value);

  inline bool hasHostname();
  inline  ::capnp::Text::Builder getHostname();
  inline void setHostname( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHostname(unsigned int size);
  inline void adoptHostname(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHostname();

  inline  ::senseAD::rscl::idl::ProcessStateInfo::State getState();
  inline void setState( ::senseAD::rscl::idl::ProcessStateInfo::State value);

  inline  ::uint64_t getSentTimeWallTimeNs();
  inline void setSentTimeWallTimeNs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProcessStateInfo::Pipeline {
public:
  typedef ProcessStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t ProcessStateInfo::Reader::getPid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ProcessStateInfo::Builder::getPid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ProcessStateInfo::Builder::setPid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ProcessStateInfo::Reader::hasHostname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ProcessStateInfo::Builder::hasHostname() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProcessStateInfo::Reader::getHostname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProcessStateInfo::Builder::getHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ProcessStateInfo::Builder::setHostname( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProcessStateInfo::Builder::initHostname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ProcessStateInfo::Builder::adoptHostname(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProcessStateInfo::Builder::disownHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::idl::ProcessStateInfo::State ProcessStateInfo::Reader::getState() const {
  return _reader.getDataField< ::senseAD::rscl::idl::ProcessStateInfo::State>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::ProcessStateInfo::State ProcessStateInfo::Builder::getState() {
  return _builder.getDataField< ::senseAD::rscl::idl::ProcessStateInfo::State>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ProcessStateInfo::Builder::setState( ::senseAD::rscl::idl::ProcessStateInfo::State value) {
  _builder.setDataField< ::senseAD::rscl::idl::ProcessStateInfo::State>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ProcessStateInfo::Reader::getSentTimeWallTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ProcessStateInfo::Builder::getSentTimeWallTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ProcessStateInfo::Builder::setSentTimeWallTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

