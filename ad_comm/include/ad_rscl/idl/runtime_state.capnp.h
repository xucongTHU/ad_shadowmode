// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: runtime_state.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cb26ab929cbc0680);
CAPNP_DECLARE_SCHEMA(db304effa553f9aa);
CAPNP_DECLARE_SCHEMA(89f3972ed2b13e05);
CAPNP_DECLARE_SCHEMA(9e6fc307149bfae9);
enum class CtrlRequest_9e6fc307149bfae9: uint16_t {
  NONE,
  READY,
  RESET,
  STOP,
  DRIVING,
  PILOT,
  PARKING,
  SUSPEND,
  RESUME,
};
CAPNP_DECLARE_ENUM(CtrlRequest, 9e6fc307149bfae9);
CAPNP_DECLARE_SCHEMA(a86359caa60c40a3);
CAPNP_DECLARE_SCHEMA(ac9bffd2ae64539b);
enum class Status_ac9bffd2ae64539b: uint16_t {
  WAITING,
  STARTING,
  RUNNING,
  SUSPENDED,
  RESUMING,
  MODE_SWITCHING,
  STOPPING,
  STOPPED,
  FAILED,
  READY,
  RESET,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(Status, ac9bffd2ae64539b);
CAPNP_DECLARE_SCHEMA(cb2ea726a539113d);
enum class Mode_cb2ea726a539113d: uint16_t {
  MANUAL,
  AUTONOMOUS,
  PILOT,
  PARKING,
};
CAPNP_DECLARE_ENUM(Mode, cb2ea726a539113d);
CAPNP_DECLARE_SCHEMA(911b13e1e1ccd9b2);
CAPNP_DECLARE_SCHEMA(89339678fda51171);
CAPNP_DECLARE_SCHEMA(f769bdf46ca9ed99);
CAPNP_DECLARE_SCHEMA(8c1cde47275a923d);
CAPNP_DECLARE_SCHEMA(c1fd6404a394df3e);
CAPNP_DECLARE_SCHEMA(8b4bd0fabcbd8be5);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace rscl {
namespace idl {

struct FunctionCost {
  FunctionCost() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb26ab929cbc0680, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NodeStateCtrlRequest {
  NodeStateCtrlRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db304effa553f9aa, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CtrlInfo {
  CtrlInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CtrlRequest_9e6fc307149bfae9 CtrlRequest;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89f3972ed2b13e05, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ComponentStateInfo {
  ComponentStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_ac9bffd2ae64539b Status;

  typedef ::capnp::schemas::Mode_cb2ea726a539113d Mode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a86359caa60c40a3, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FrameState {
  FrameState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(911b13e1e1ccd9b2, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TopicStateInfo {
  TopicStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89339678fda51171, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NodeStateInfo {
  NodeStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f769bdf46ca9ed99, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ServiceStateInfo {
  ServiceStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct StateMap;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c1cde47275a923d, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ServiceStateInfo::StateMap {
  StateMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1fd6404a394df3e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ServiceStateInfo::StateMap::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b4bd0fabcbd8be5, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FunctionCost::Reader {
public:
  typedef FunctionCost Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFunctionName() const;
  inline  ::capnp::Text::Reader getFunctionName() const;

  inline float getCostTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FunctionCost::Builder {
public:
  typedef FunctionCost Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFunctionName();
  inline  ::capnp::Text::Builder getFunctionName();
  inline void setFunctionName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFunctionName(unsigned int size);
  inline void adoptFunctionName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFunctionName();

  inline float getCostTime();
  inline void setCostTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FunctionCost::Pipeline {
public:
  typedef FunctionCost Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodeStateCtrlRequest::Reader {
public:
  typedef NodeStateCtrlRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasCtrlInfoList() const;
  inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Reader getCtrlInfoList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodeStateCtrlRequest::Builder {
public:
  typedef NodeStateCtrlRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasCtrlInfoList();
  inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Builder getCtrlInfoList();
  inline void setCtrlInfoList( ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Builder initCtrlInfoList(unsigned int size);
  inline void adoptCtrlInfoList(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>> disownCtrlInfoList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodeStateCtrlRequest::Pipeline {
public:
  typedef NodeStateCtrlRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CtrlInfo::Reader {
public:
  typedef CtrlInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeName() const;
  inline  ::capnp::Text::Reader getNodeName() const;

  inline  ::senseAD::rscl::idl::CtrlInfo::CtrlRequest getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CtrlInfo::Builder {
public:
  typedef CtrlInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeName();
  inline  ::capnp::Text::Builder getNodeName();
  inline void setNodeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNodeName(unsigned int size);
  inline void adoptNodeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNodeName();

  inline  ::senseAD::rscl::idl::CtrlInfo::CtrlRequest getRequest();
  inline void setRequest( ::senseAD::rscl::idl::CtrlInfo::CtrlRequest value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CtrlInfo::Pipeline {
public:
  typedef CtrlInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ComponentStateInfo::Reader {
public:
  typedef ComponentStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::senseAD::rscl::idl::ComponentStateInfo::Status getStatus() const;

  inline  ::senseAD::rscl::idl::ComponentStateInfo::Mode getMode() const;

  inline  ::uint32_t getPid() const;

  inline  ::uint64_t getWallTimeNs() const;

  inline bool hasFunctionCostTimeList() const;
  inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Reader getFunctionCostTimeList() const;

  inline  ::uint64_t getNodeCostTime() const;

  inline bool hasExtData() const;
  inline  ::capnp::Data::Reader getExtData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ComponentStateInfo::Builder {
public:
  typedef ComponentStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::senseAD::rscl::idl::ComponentStateInfo::Status getStatus();
  inline void setStatus( ::senseAD::rscl::idl::ComponentStateInfo::Status value);

  inline  ::senseAD::rscl::idl::ComponentStateInfo::Mode getMode();
  inline void setMode( ::senseAD::rscl::idl::ComponentStateInfo::Mode value);

  inline  ::uint32_t getPid();
  inline void setPid( ::uint32_t value);

  inline  ::uint64_t getWallTimeNs();
  inline void setWallTimeNs( ::uint64_t value);

  inline bool hasFunctionCostTimeList();
  inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Builder getFunctionCostTimeList();
  inline void setFunctionCostTimeList( ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Builder initFunctionCostTimeList(unsigned int size);
  inline void adoptFunctionCostTimeList(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>> disownFunctionCostTimeList();

  inline  ::uint64_t getNodeCostTime();
  inline void setNodeCostTime( ::uint64_t value);

  inline bool hasExtData();
  inline  ::capnp::Data::Builder getExtData();
  inline void setExtData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initExtData(unsigned int size);
  inline void adoptExtData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownExtData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ComponentStateInfo::Pipeline {
public:
  typedef ComponentStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FrameState::Reader {
public:
  typedef FrameState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopicName() const;
  inline  ::capnp::Text::Reader getTopicName() const;

  inline float getHz() const;

  inline  ::int64_t getMaxDiffNs() const;

  inline  ::int64_t getLatestDiffNs() const;

  inline float getAvgMsgKb() const;

  inline  ::int64_t getUpdateDelayNs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FrameState::Builder {
public:
  typedef FrameState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopicName();
  inline  ::capnp::Text::Builder getTopicName();
  inline void setTopicName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopicName(unsigned int size);
  inline void adoptTopicName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopicName();

  inline float getHz();
  inline void setHz(float value);

  inline  ::int64_t getMaxDiffNs();
  inline void setMaxDiffNs( ::int64_t value);

  inline  ::int64_t getLatestDiffNs();
  inline void setLatestDiffNs( ::int64_t value);

  inline float getAvgMsgKb();
  inline void setAvgMsgKb(float value);

  inline  ::int64_t getUpdateDelayNs();
  inline void setUpdateDelayNs( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FrameState::Pipeline {
public:
  typedef FrameState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TopicStateInfo::Reader {
public:
  typedef TopicStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPub() const;
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader getPub() const;

  inline bool hasSub() const;
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader getSub() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TopicStateInfo::Builder {
public:
  typedef TopicStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPub();
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder getPub();
  inline void setPub( ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder initPub(unsigned int size);
  inline void adoptPub(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>> disownPub();

  inline bool hasSub();
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder getSub();
  inline void setSub( ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder initSub(unsigned int size);
  inline void adoptSub(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>> disownSub();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TopicStateInfo::Pipeline {
public:
  typedef TopicStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodeStateInfo::Reader {
public:
  typedef NodeStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasTopicState() const;
  inline  ::senseAD::rscl::idl::TopicStateInfo::Reader getTopicState() const;

  inline  ::uint32_t getPid() const;

  inline  ::uint64_t getWallTimeNs() const;

  inline bool hasPlatform() const;
  inline  ::capnp::Text::Reader getPlatform() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodeStateInfo::Builder {
public:
  typedef NodeStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasTopicState();
  inline  ::senseAD::rscl::idl::TopicStateInfo::Builder getTopicState();
  inline void setTopicState( ::senseAD::rscl::idl::TopicStateInfo::Reader value);
  inline  ::senseAD::rscl::idl::TopicStateInfo::Builder initTopicState();
  inline void adoptTopicState(::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo> disownTopicState();

  inline  ::uint32_t getPid();
  inline void setPid( ::uint32_t value);

  inline  ::uint64_t getWallTimeNs();
  inline void setWallTimeNs( ::uint64_t value);

  inline bool hasPlatform();
  inline  ::capnp::Text::Builder getPlatform();
  inline void setPlatform( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlatform(unsigned int size);
  inline void adoptPlatform(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlatform();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodeStateInfo::Pipeline {
public:
  typedef NodeStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::rscl::idl::TopicStateInfo::Pipeline getTopicState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceStateInfo::Reader {
public:
  typedef ServiceStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline bool hasRecvState() const;
  inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Reader getRecvState() const;

  inline  ::uint64_t getForwardBytes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceStateInfo::Builder {
public:
  typedef ServiceStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline bool hasRecvState();
  inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Builder getRecvState();
  inline void setRecvState( ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Reader value);
  inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Builder initRecvState();
  inline void adoptRecvState(::capnp::Orphan< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::idl::ServiceStateInfo::StateMap> disownRecvState();

  inline  ::uint64_t getForwardBytes();
  inline void setForwardBytes( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceStateInfo::Pipeline {
public:
  typedef ServiceStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Pipeline getRecvState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceStateInfo::StateMap::Reader {
public:
  typedef StateMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceStateInfo::StateMap::Builder {
public:
  typedef StateMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries( ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceStateInfo::StateMap::Pipeline {
public:
  typedef StateMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceStateInfo::StateMap::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSourceIp() const;
  inline  ::capnp::Text::Reader getSourceIp() const;

  inline bool hasTopicState() const;
  inline  ::senseAD::rscl::idl::TopicStateInfo::Reader getTopicState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceStateInfo::StateMap::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSourceIp();
  inline  ::capnp::Text::Builder getSourceIp();
  inline void setSourceIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSourceIp(unsigned int size);
  inline void adoptSourceIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSourceIp();

  inline bool hasTopicState();
  inline  ::senseAD::rscl::idl::TopicStateInfo::Builder getTopicState();
  inline void setTopicState( ::senseAD::rscl::idl::TopicStateInfo::Reader value);
  inline  ::senseAD::rscl::idl::TopicStateInfo::Builder initTopicState();
  inline void adoptTopicState(::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo> disownTopicState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceStateInfo::StateMap::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::idl::TopicStateInfo::Pipeline getTopicState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool FunctionCost::Reader::hasFunctionName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FunctionCost::Builder::hasFunctionName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FunctionCost::Reader::getFunctionName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FunctionCost::Builder::getFunctionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FunctionCost::Builder::setFunctionName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FunctionCost::Builder::initFunctionName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FunctionCost::Builder::adoptFunctionName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FunctionCost::Builder::disownFunctionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float FunctionCost::Reader::getCostTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float FunctionCost::Builder::getCostTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FunctionCost::Builder::setCostTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NodeStateCtrlRequest::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateCtrlRequest::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader NodeStateCtrlRequest::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeStateCtrlRequest::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline NodeStateCtrlRequest::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NodeStateCtrlRequest::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeStateCtrlRequest::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NodeStateCtrlRequest::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> NodeStateCtrlRequest::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NodeStateCtrlRequest::Reader::hasCtrlInfoList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateCtrlRequest::Builder::hasCtrlInfoList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Reader NodeStateCtrlRequest::Reader::getCtrlInfoList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Builder NodeStateCtrlRequest::Builder::getCtrlInfoList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NodeStateCtrlRequest::Builder::setCtrlInfoList( ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>::Builder NodeStateCtrlRequest::Builder::initCtrlInfoList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NodeStateCtrlRequest::Builder::adoptCtrlInfoList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>> NodeStateCtrlRequest::Builder::disownCtrlInfoList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::CtrlInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CtrlInfo::Reader::hasNodeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CtrlInfo::Builder::hasNodeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CtrlInfo::Reader::getNodeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CtrlInfo::Builder::getNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CtrlInfo::Builder::setNodeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CtrlInfo::Builder::initNodeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CtrlInfo::Builder::adoptNodeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CtrlInfo::Builder::disownNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::idl::CtrlInfo::CtrlRequest CtrlInfo::Reader::getRequest() const {
  return _reader.getDataField< ::senseAD::rscl::idl::CtrlInfo::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::CtrlInfo::CtrlRequest CtrlInfo::Builder::getRequest() {
  return _builder.getDataField< ::senseAD::rscl::idl::CtrlInfo::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CtrlInfo::Builder::setRequest( ::senseAD::rscl::idl::CtrlInfo::CtrlRequest value) {
  _builder.setDataField< ::senseAD::rscl::idl::CtrlInfo::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ComponentStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ComponentStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ComponentStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ComponentStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ComponentStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ComponentStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ComponentStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ComponentStateInfo::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ComponentStateInfo::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ComponentStateInfo::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ComponentStateInfo::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ComponentStateInfo::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::idl::ComponentStateInfo::Status ComponentStateInfo::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::rscl::idl::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::ComponentStateInfo::Status ComponentStateInfo::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::rscl::idl::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setStatus( ::senseAD::rscl::idl::ComponentStateInfo::Status value) {
  _builder.setDataField< ::senseAD::rscl::idl::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::rscl::idl::ComponentStateInfo::Mode ComponentStateInfo::Reader::getMode() const {
  return _reader.getDataField< ::senseAD::rscl::idl::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::ComponentStateInfo::Mode ComponentStateInfo::Builder::getMode() {
  return _builder.getDataField< ::senseAD::rscl::idl::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setMode( ::senseAD::rscl::idl::ComponentStateInfo::Mode value) {
  _builder.setDataField< ::senseAD::rscl::idl::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ComponentStateInfo::Reader::getPid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ComponentStateInfo::Builder::getPid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setPid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ComponentStateInfo::Reader::getWallTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ComponentStateInfo::Builder::getWallTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setWallTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ComponentStateInfo::Reader::hasFunctionCostTimeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasFunctionCostTimeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Reader ComponentStateInfo::Reader::getFunctionCostTimeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Builder ComponentStateInfo::Builder::getFunctionCostTimeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setFunctionCostTimeList( ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>::Builder ComponentStateInfo::Builder::initFunctionCostTimeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptFunctionCostTimeList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>> ComponentStateInfo::Builder::disownFunctionCostTimeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FunctionCost,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t ComponentStateInfo::Reader::getNodeCostTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ComponentStateInfo::Builder::getNodeCostTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setNodeCostTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ComponentStateInfo::Reader::hasExtData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasExtData() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ComponentStateInfo::Reader::getExtData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ComponentStateInfo::Builder::getExtData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setExtData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ComponentStateInfo::Builder::initExtData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptExtData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ComponentStateInfo::Builder::disownExtData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FrameState::Reader::hasTopicName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FrameState::Builder::hasTopicName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FrameState::Reader::getTopicName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FrameState::Builder::getTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FrameState::Builder::setTopicName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FrameState::Builder::initTopicName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FrameState::Builder::adoptTopicName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FrameState::Builder::disownTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float FrameState::Reader::getHz() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float FrameState::Builder::getHz() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FrameState::Builder::setHz(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameState::Reader::getMaxDiffNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameState::Builder::getMaxDiffNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameState::Builder::setMaxDiffNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameState::Reader::getLatestDiffNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameState::Builder::getLatestDiffNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FrameState::Builder::setLatestDiffNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float FrameState::Reader::getAvgMsgKb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float FrameState::Builder::getAvgMsgKb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FrameState::Builder::setAvgMsgKb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t FrameState::Reader::getUpdateDelayNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t FrameState::Builder::getUpdateDelayNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FrameState::Builder::setUpdateDelayNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TopicStateInfo::Reader::hasPub() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TopicStateInfo::Builder::hasPub() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader TopicStateInfo::Reader::getPub() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder TopicStateInfo::Builder::getPub() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TopicStateInfo::Builder::setPub( ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder TopicStateInfo::Builder::initPub(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TopicStateInfo::Builder::adoptPub(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>> TopicStateInfo::Builder::disownPub() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TopicStateInfo::Reader::hasSub() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TopicStateInfo::Builder::hasSub() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader TopicStateInfo::Reader::getSub() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder TopicStateInfo::Builder::getSub() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TopicStateInfo::Builder::setSub( ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>::Builder TopicStateInfo::Builder::initSub(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TopicStateInfo::Builder::adoptSub(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>> TopicStateInfo::Builder::disownSub() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::FrameState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NodeStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader NodeStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline NodeStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NodeStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NodeStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> NodeStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NodeStateInfo::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateInfo::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NodeStateInfo::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NodeStateInfo::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NodeStateInfo::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NodeStateInfo::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NodeStateInfo::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NodeStateInfo::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NodeStateInfo::Reader::hasTopicState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateInfo::Builder::hasTopicState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Reader NodeStateInfo::Reader::getTopicState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Builder NodeStateInfo::Builder::getTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::idl::TopicStateInfo::Pipeline NodeStateInfo::Pipeline::getTopicState() {
  return  ::senseAD::rscl::idl::TopicStateInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void NodeStateInfo::Builder::setTopicState( ::senseAD::rscl::idl::TopicStateInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Builder NodeStateInfo::Builder::initTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NodeStateInfo::Builder::adoptTopicState(
    ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo> NodeStateInfo::Builder::disownTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t NodeStateInfo::Reader::getPid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t NodeStateInfo::Builder::getPid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NodeStateInfo::Builder::setPid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t NodeStateInfo::Reader::getWallTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t NodeStateInfo::Builder::getWallTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NodeStateInfo::Builder::setWallTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NodeStateInfo::Reader::hasPlatform() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NodeStateInfo::Builder::hasPlatform() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NodeStateInfo::Reader::getPlatform() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NodeStateInfo::Builder::getPlatform() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NodeStateInfo::Builder::setPlatform( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NodeStateInfo::Builder::initPlatform(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void NodeStateInfo::Builder::adoptPlatform(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NodeStateInfo::Builder::disownPlatform() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ServiceStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ServiceStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ServiceStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ServiceStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ServiceStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ServiceStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ServiceStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ServiceStateInfo::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServiceStateInfo::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServiceStateInfo::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServiceStateInfo::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ServiceStateInfo::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServiceStateInfo::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ServiceStateInfo::Reader::hasRecvState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::Builder::hasRecvState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Reader ServiceStateInfo::Reader::getRecvState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Builder ServiceStateInfo::Builder::getRecvState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Pipeline ServiceStateInfo::Pipeline::getRecvState() {
  return  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ServiceStateInfo::Builder::setRecvState( ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Builder ServiceStateInfo::Builder::initRecvState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::Builder::adoptRecvState(
    ::capnp::Orphan< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::idl::ServiceStateInfo::StateMap> ServiceStateInfo::Builder::disownRecvState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::ServiceStateInfo::StateMap>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t ServiceStateInfo::Reader::getForwardBytes() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ServiceStateInfo::Builder::getForwardBytes() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ServiceStateInfo::Builder::setForwardBytes( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ServiceStateInfo::StateMap::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::StateMap::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Reader ServiceStateInfo::StateMap::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Builder ServiceStateInfo::StateMap::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::StateMap::Builder::setEntries( ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>::Builder ServiceStateInfo::StateMap::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ServiceStateInfo::StateMap::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>> ServiceStateInfo::StateMap::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::idl::ServiceStateInfo::StateMap::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ServiceStateInfo::StateMap::Entry::Reader::hasSourceIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::StateMap::Entry::Builder::hasSourceIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ServiceStateInfo::StateMap::Entry::Reader::getSourceIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ServiceStateInfo::StateMap::Entry::Builder::getSourceIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::StateMap::Entry::Builder::setSourceIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ServiceStateInfo::StateMap::Entry::Builder::initSourceIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ServiceStateInfo::StateMap::Entry::Builder::adoptSourceIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ServiceStateInfo::StateMap::Entry::Builder::disownSourceIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ServiceStateInfo::StateMap::Entry::Reader::hasTopicState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ServiceStateInfo::StateMap::Entry::Builder::hasTopicState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Reader ServiceStateInfo::StateMap::Entry::Reader::getTopicState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Builder ServiceStateInfo::StateMap::Entry::Builder::getTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::idl::TopicStateInfo::Pipeline ServiceStateInfo::StateMap::Entry::Pipeline::getTopicState() {
  return  ::senseAD::rscl::idl::TopicStateInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ServiceStateInfo::StateMap::Entry::Builder::setTopicState( ::senseAD::rscl::idl::TopicStateInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::idl::TopicStateInfo::Builder ServiceStateInfo::StateMap::Entry::Builder::initTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ServiceStateInfo::StateMap::Entry::Builder::adoptTopicState(
    ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::idl::TopicStateInfo> ServiceStateInfo::StateMap::Entry::Builder::disownTopicState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::TopicStateInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

