// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_rscl/idl/runtime_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fruntime_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fruntime_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5frscl_2fidl_2fruntime_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5frscl_2fidl_2fruntime_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5frscl_2fidl_2fruntime_5fparam_2eproto;
namespace senseAD {
namespace rscl {
namespace idl {
class ParamOperate;
class ParamOperateDefaultTypeInternal;
extern ParamOperateDefaultTypeInternal _ParamOperate_default_instance_;
class ParamOperate_Param;
class ParamOperate_ParamDefaultTypeInternal;
extern ParamOperate_ParamDefaultTypeInternal _ParamOperate_Param_default_instance_;
}  // namespace idl
}  // namespace rscl
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::rscl::idl::ParamOperate* Arena::CreateMaybeMessage<::senseAD::rscl::idl::ParamOperate>(Arena*);
template<> ::senseAD::rscl::idl::ParamOperate_Param* Arena::CreateMaybeMessage<::senseAD::rscl::idl::ParamOperate_Param>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace rscl {
namespace idl {

enum ParamOperate_Operate : int {
  ParamOperate_Operate_GET = 0,
  ParamOperate_Operate_SET = 1,
  ParamOperate_Operate_DISCOVERY = 2,
  ParamOperate_Operate_GETALL = 3
};
bool ParamOperate_Operate_IsValid(int value);
constexpr ParamOperate_Operate ParamOperate_Operate_Operate_MIN = ParamOperate_Operate_GET;
constexpr ParamOperate_Operate ParamOperate_Operate_Operate_MAX = ParamOperate_Operate_GETALL;
constexpr int ParamOperate_Operate_Operate_ARRAYSIZE = ParamOperate_Operate_Operate_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamOperate_Operate_descriptor();
template<typename T>
inline const std::string& ParamOperate_Operate_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamOperate_Operate>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamOperate_Operate_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamOperate_Operate_descriptor(), enum_t_value);
}
inline bool ParamOperate_Operate_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParamOperate_Operate* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamOperate_Operate>(
    ParamOperate_Operate_descriptor(), name, value);
}
// ===================================================================

class ParamOperate_Param PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.ParamOperate.Param) */ {
 public:
  inline ParamOperate_Param() : ParamOperate_Param(nullptr) {}
  virtual ~ParamOperate_Param();

  ParamOperate_Param(const ParamOperate_Param& from);
  ParamOperate_Param(ParamOperate_Param&& from) noexcept
    : ParamOperate_Param() {
    *this = ::std::move(from);
  }

  inline ParamOperate_Param& operator=(const ParamOperate_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamOperate_Param& operator=(ParamOperate_Param&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamOperate_Param& default_instance();

  static inline const ParamOperate_Param* internal_default_instance() {
    return reinterpret_cast<const ParamOperate_Param*>(
               &_ParamOperate_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParamOperate_Param& a, ParamOperate_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamOperate_Param* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamOperate_Param* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamOperate_Param* New() const final {
    return CreateMaybeMessage<ParamOperate_Param>(nullptr);
  }

  ParamOperate_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamOperate_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamOperate_Param& from);
  void MergeFrom(const ParamOperate_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamOperate_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.ParamOperate.Param";
  }
  protected:
  explicit ParamOperate_Param(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fruntime_5fparam_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fruntime_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 2,
    kNameFieldNumber = 3,
    kValueFieldNumber = 4,
    kOperateFieldNumber = 1,
    kResultFieldNumber = 5,
  };
  // optional string node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const std::string& node() const;
  void set_node(const std::string& value);
  void set_node(std::string&& value);
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  std::string* mutable_node();
  std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .senseAD.rscl.idl.ParamOperate.Operate operate = 1;
  bool has_operate() const;
  private:
  bool _internal_has_operate() const;
  public:
  void clear_operate();
  ::senseAD::rscl::idl::ParamOperate_Operate operate() const;
  void set_operate(::senseAD::rscl::idl::ParamOperate_Operate value);
  private:
  ::senseAD::rscl::idl::ParamOperate_Operate _internal_operate() const;
  void _internal_set_operate(::senseAD::rscl::idl::ParamOperate_Operate value);
  public:

  // optional bool result = 5;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.ParamOperate.Param)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int operate_;
  bool result_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fruntime_5fparam_2eproto;
};
// -------------------------------------------------------------------

class ParamOperate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.ParamOperate) */ {
 public:
  inline ParamOperate() : ParamOperate(nullptr) {}
  virtual ~ParamOperate();

  ParamOperate(const ParamOperate& from);
  ParamOperate(ParamOperate&& from) noexcept
    : ParamOperate() {
    *this = ::std::move(from);
  }

  inline ParamOperate& operator=(const ParamOperate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamOperate& operator=(ParamOperate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamOperate& default_instance();

  static inline const ParamOperate* internal_default_instance() {
    return reinterpret_cast<const ParamOperate*>(
               &_ParamOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParamOperate& a, ParamOperate& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamOperate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamOperate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamOperate* New() const final {
    return CreateMaybeMessage<ParamOperate>(nullptr);
  }

  ParamOperate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamOperate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamOperate& from);
  void MergeFrom(const ParamOperate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamOperate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.ParamOperate";
  }
  protected:
  explicit ParamOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fruntime_5fparam_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fruntime_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ParamOperate_Param Param;

  typedef ParamOperate_Operate Operate;
  static constexpr Operate GET =
    ParamOperate_Operate_GET;
  static constexpr Operate SET =
    ParamOperate_Operate_SET;
  static constexpr Operate DISCOVERY =
    ParamOperate_Operate_DISCOVERY;
  static constexpr Operate GETALL =
    ParamOperate_Operate_GETALL;
  static inline bool Operate_IsValid(int value) {
    return ParamOperate_Operate_IsValid(value);
  }
  static constexpr Operate Operate_MIN =
    ParamOperate_Operate_Operate_MIN;
  static constexpr Operate Operate_MAX =
    ParamOperate_Operate_Operate_MAX;
  static constexpr int Operate_ARRAYSIZE =
    ParamOperate_Operate_Operate_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operate_descriptor() {
    return ParamOperate_Operate_descriptor();
  }
  template<typename T>
  static inline const std::string& Operate_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operate>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operate_Name.");
    return ParamOperate_Operate_Name(enum_t_value);
  }
  static inline bool Operate_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operate* value) {
    return ParamOperate_Operate_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kSrcFieldNumber = 1,
    kDestFieldNumber = 2,
  };
  // repeated .senseAD.rscl.idl.ParamOperate.Param params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::senseAD::rscl::idl::ParamOperate_Param* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senseAD::rscl::idl::ParamOperate_Param >*
      mutable_params();
  private:
  const ::senseAD::rscl::idl::ParamOperate_Param& _internal_params(int index) const;
  ::senseAD::rscl::idl::ParamOperate_Param* _internal_add_params();
  public:
  const ::senseAD::rscl::idl::ParamOperate_Param& params(int index) const;
  ::senseAD::rscl::idl::ParamOperate_Param* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senseAD::rscl::idl::ParamOperate_Param >&
      params() const;

  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string dest = 2;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.ParamOperate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senseAD::rscl::idl::ParamOperate_Param > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fruntime_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParamOperate_Param

// required .senseAD.rscl.idl.ParamOperate.Operate operate = 1;
inline bool ParamOperate_Param::_internal_has_operate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ParamOperate_Param::has_operate() const {
  return _internal_has_operate();
}
inline void ParamOperate_Param::clear_operate() {
  operate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::senseAD::rscl::idl::ParamOperate_Operate ParamOperate_Param::_internal_operate() const {
  return static_cast< ::senseAD::rscl::idl::ParamOperate_Operate >(operate_);
}
inline ::senseAD::rscl::idl::ParamOperate_Operate ParamOperate_Param::operate() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.Param.operate)
  return _internal_operate();
}
inline void ParamOperate_Param::_internal_set_operate(::senseAD::rscl::idl::ParamOperate_Operate value) {
  assert(::senseAD::rscl::idl::ParamOperate_Operate_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  operate_ = value;
}
inline void ParamOperate_Param::set_operate(::senseAD::rscl::idl::ParamOperate_Operate value) {
  _internal_set_operate(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.Param.operate)
}

// optional string node = 2;
inline bool ParamOperate_Param::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParamOperate_Param::has_node() const {
  return _internal_has_node();
}
inline void ParamOperate_Param::clear_node() {
  node_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParamOperate_Param::node() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.Param.node)
  return _internal_node();
}
inline void ParamOperate_Param::set_node(const std::string& value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.Param.node)
}
inline std::string* ParamOperate_Param::mutable_node() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.Param.node)
  return _internal_mutable_node();
}
inline const std::string& ParamOperate_Param::_internal_node() const {
  return node_.Get();
}
inline void ParamOperate_Param::_internal_set_node(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParamOperate_Param::set_node(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  node_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ParamOperate.Param.node)
}
inline void ParamOperate_Param::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ParamOperate.Param.node)
}
inline void ParamOperate_Param::set_node(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ParamOperate.Param.node)
}
inline std::string* ParamOperate_Param::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  return node_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParamOperate_Param::release_node() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ParamOperate.Param.node)
  if (!_internal_has_node()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return node_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamOperate_Param::set_allocated_node(std::string* node) {
  if (node != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ParamOperate.Param.node)
}

// optional string name = 3;
inline bool ParamOperate_Param::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParamOperate_Param::has_name() const {
  return _internal_has_name();
}
inline void ParamOperate_Param::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParamOperate_Param::name() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.Param.name)
  return _internal_name();
}
inline void ParamOperate_Param::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.Param.name)
}
inline std::string* ParamOperate_Param::mutable_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.Param.name)
  return _internal_mutable_name();
}
inline const std::string& ParamOperate_Param::_internal_name() const {
  return name_.Get();
}
inline void ParamOperate_Param::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParamOperate_Param::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ParamOperate.Param.name)
}
inline void ParamOperate_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ParamOperate.Param.name)
}
inline void ParamOperate_Param::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ParamOperate.Param.name)
}
inline std::string* ParamOperate_Param::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParamOperate_Param::release_name() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ParamOperate.Param.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamOperate_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ParamOperate.Param.name)
}

// optional string value = 4;
inline bool ParamOperate_Param::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ParamOperate_Param::has_value() const {
  return _internal_has_value();
}
inline void ParamOperate_Param::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParamOperate_Param::value() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.Param.value)
  return _internal_value();
}
inline void ParamOperate_Param::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.Param.value)
}
inline std::string* ParamOperate_Param::mutable_value() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.Param.value)
  return _internal_mutable_value();
}
inline const std::string& ParamOperate_Param::_internal_value() const {
  return value_.Get();
}
inline void ParamOperate_Param::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParamOperate_Param::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ParamOperate.Param.value)
}
inline void ParamOperate_Param::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ParamOperate.Param.value)
}
inline void ParamOperate_Param::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ParamOperate.Param.value)
}
inline std::string* ParamOperate_Param::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParamOperate_Param::release_value() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ParamOperate.Param.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamOperate_Param::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ParamOperate.Param.value)
}

// optional bool result = 5;
inline bool ParamOperate_Param::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParamOperate_Param::has_result() const {
  return _internal_has_result();
}
inline void ParamOperate_Param::clear_result() {
  result_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ParamOperate_Param::_internal_result() const {
  return result_;
}
inline bool ParamOperate_Param::result() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.Param.result)
  return _internal_result();
}
inline void ParamOperate_Param::_internal_set_result(bool value) {
  _has_bits_[0] |= 0x00000010u;
  result_ = value;
}
inline void ParamOperate_Param::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.Param.result)
}

// -------------------------------------------------------------------

// ParamOperate

// required string src = 1;
inline bool ParamOperate::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParamOperate::has_src() const {
  return _internal_has_src();
}
inline void ParamOperate::clear_src() {
  src_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParamOperate::src() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.src)
  return _internal_src();
}
inline void ParamOperate::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.src)
}
inline std::string* ParamOperate::mutable_src() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.src)
  return _internal_mutable_src();
}
inline const std::string& ParamOperate::_internal_src() const {
  return src_.Get();
}
inline void ParamOperate::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParamOperate::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ParamOperate.src)
}
inline void ParamOperate::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ParamOperate.src)
}
inline void ParamOperate::set_src(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ParamOperate.src)
}
inline std::string* ParamOperate::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParamOperate::release_src() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ParamOperate.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamOperate::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ParamOperate.src)
}

// required string dest = 2;
inline bool ParamOperate::_internal_has_dest() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParamOperate::has_dest() const {
  return _internal_has_dest();
}
inline void ParamOperate::clear_dest() {
  dest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParamOperate::dest() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.dest)
  return _internal_dest();
}
inline void ParamOperate::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ParamOperate.dest)
}
inline std::string* ParamOperate::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.dest)
  return _internal_mutable_dest();
}
inline const std::string& ParamOperate::_internal_dest() const {
  return dest_.Get();
}
inline void ParamOperate::_internal_set_dest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParamOperate::set_dest(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ParamOperate.dest)
}
inline void ParamOperate::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ParamOperate.dest)
}
inline void ParamOperate::set_dest(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ParamOperate.dest)
}
inline std::string* ParamOperate::_internal_mutable_dest() {
  _has_bits_[0] |= 0x00000002u;
  return dest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParamOperate::release_dest() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ParamOperate.dest)
  if (!_internal_has_dest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParamOperate::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ParamOperate.dest)
}

// repeated .senseAD.rscl.idl.ParamOperate.Param params = 3;
inline int ParamOperate::_internal_params_size() const {
  return params_.size();
}
inline int ParamOperate::params_size() const {
  return _internal_params_size();
}
inline void ParamOperate::clear_params() {
  params_.Clear();
}
inline ::senseAD::rscl::idl::ParamOperate_Param* ParamOperate::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ParamOperate.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senseAD::rscl::idl::ParamOperate_Param >*
ParamOperate::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:senseAD.rscl.idl.ParamOperate.params)
  return &params_;
}
inline const ::senseAD::rscl::idl::ParamOperate_Param& ParamOperate::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::senseAD::rscl::idl::ParamOperate_Param& ParamOperate::params(int index) const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ParamOperate.params)
  return _internal_params(index);
}
inline ::senseAD::rscl::idl::ParamOperate_Param* ParamOperate::_internal_add_params() {
  return params_.Add();
}
inline ::senseAD::rscl::idl::ParamOperate_Param* ParamOperate::add_params() {
  // @@protoc_insertion_point(field_add:senseAD.rscl.idl.ParamOperate.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senseAD::rscl::idl::ParamOperate_Param >&
ParamOperate::params() const {
  // @@protoc_insertion_point(field_list:senseAD.rscl.idl.ParamOperate.params)
  return params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace rscl
}  // namespace senseAD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::senseAD::rscl::idl::ParamOperate_Operate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::senseAD::rscl::idl::ParamOperate_Operate>() {
  return ::senseAD::rscl::idl::ParamOperate_Operate_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fruntime_5fparam_2eproto
