// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_rscl/idl/cuda_message_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto;
namespace senseAD {
namespace rscl {
namespace idl {
class CudaPublisherConf;
class CudaPublisherConfDefaultTypeInternal;
extern CudaPublisherConfDefaultTypeInternal _CudaPublisherConf_default_instance_;
class CudaSubscriberConf;
class CudaSubscriberConfDefaultTypeInternal;
extern CudaSubscriberConfDefaultTypeInternal _CudaSubscriberConf_default_instance_;
}  // namespace idl
}  // namespace rscl
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::rscl::idl::CudaPublisherConf* Arena::CreateMaybeMessage<::senseAD::rscl::idl::CudaPublisherConf>(Arena*);
template<> ::senseAD::rscl::idl::CudaSubscriberConf* Arena::CreateMaybeMessage<::senseAD::rscl::idl::CudaSubscriberConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace rscl {
namespace idl {

// ===================================================================

class CudaPublisherConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.CudaPublisherConf) */ {
 public:
  inline CudaPublisherConf() : CudaPublisherConf(nullptr) {}
  virtual ~CudaPublisherConf();

  CudaPublisherConf(const CudaPublisherConf& from);
  CudaPublisherConf(CudaPublisherConf&& from) noexcept
    : CudaPublisherConf() {
    *this = ::std::move(from);
  }

  inline CudaPublisherConf& operator=(const CudaPublisherConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CudaPublisherConf& operator=(CudaPublisherConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CudaPublisherConf& default_instance();

  static inline const CudaPublisherConf* internal_default_instance() {
    return reinterpret_cast<const CudaPublisherConf*>(
               &_CudaPublisherConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CudaPublisherConf& a, CudaPublisherConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CudaPublisherConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CudaPublisherConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CudaPublisherConf* New() const final {
    return CreateMaybeMessage<CudaPublisherConf>(nullptr);
  }

  CudaPublisherConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CudaPublisherConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CudaPublisherConf& from);
  void MergeFrom(const CudaPublisherConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudaPublisherConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.CudaPublisherConf";
  }
  protected:
  explicit CudaPublisherConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kDeviceIdFieldNumber = 4,
    kBufferSizeFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // required uint64 device_id = 4 [default = 0];
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 buffer_size = 2 [default = 16777216];
  bool has_buffer_size() const;
  private:
  bool _internal_has_buffer_size() const;
  public:
  void clear_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_size() const;
  void set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buffer_size() const;
  void _internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 depth = 3 [default = 1];
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::uint64 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.CudaPublisherConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 depth_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CudaSubscriberConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.CudaSubscriberConf) */ {
 public:
  inline CudaSubscriberConf() : CudaSubscriberConf(nullptr) {}
  virtual ~CudaSubscriberConf();

  CudaSubscriberConf(const CudaSubscriberConf& from);
  CudaSubscriberConf(CudaSubscriberConf&& from) noexcept
    : CudaSubscriberConf() {
    *this = ::std::move(from);
  }

  inline CudaSubscriberConf& operator=(const CudaSubscriberConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CudaSubscriberConf& operator=(CudaSubscriberConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CudaSubscriberConf& default_instance();

  static inline const CudaSubscriberConf* internal_default_instance() {
    return reinterpret_cast<const CudaSubscriberConf*>(
               &_CudaSubscriberConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CudaSubscriberConf& a, CudaSubscriberConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CudaSubscriberConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CudaSubscriberConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CudaSubscriberConf* New() const final {
    return CreateMaybeMessage<CudaSubscriberConf>(nullptr);
  }

  CudaSubscriberConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CudaSubscriberConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CudaSubscriberConf& from);
  void MergeFrom(const CudaSubscriberConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudaSubscriberConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.CudaSubscriberConf";
  }
  protected:
  explicit CudaSubscriberConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.CudaSubscriberConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CudaPublisherConf

// required string channel_name = 1;
inline bool CudaPublisherConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CudaPublisherConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CudaPublisherConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CudaPublisherConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.CudaPublisherConf.channel_name)
  return _internal_channel_name();
}
inline void CudaPublisherConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.CudaPublisherConf.channel_name)
}
inline std::string* CudaPublisherConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.CudaPublisherConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& CudaPublisherConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void CudaPublisherConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CudaPublisherConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.CudaPublisherConf.channel_name)
}
inline void CudaPublisherConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.CudaPublisherConf.channel_name)
}
inline void CudaPublisherConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.CudaPublisherConf.channel_name)
}
inline std::string* CudaPublisherConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CudaPublisherConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.CudaPublisherConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CudaPublisherConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.CudaPublisherConf.channel_name)
}

// required uint64 buffer_size = 2 [default = 16777216];
inline bool CudaPublisherConf::_internal_has_buffer_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CudaPublisherConf::has_buffer_size() const {
  return _internal_has_buffer_size();
}
inline void CudaPublisherConf::clear_buffer_size() {
  buffer_size_ = PROTOBUF_ULONGLONG(16777216);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::_internal_buffer_size() const {
  return buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::buffer_size() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.CudaPublisherConf.buffer_size)
  return _internal_buffer_size();
}
inline void CudaPublisherConf::_internal_set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  buffer_size_ = value;
}
inline void CudaPublisherConf::set_buffer_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buffer_size(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.CudaPublisherConf.buffer_size)
}

// required uint64 depth = 3 [default = 1];
inline bool CudaPublisherConf::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CudaPublisherConf::has_depth() const {
  return _internal_has_depth();
}
inline void CudaPublisherConf::clear_depth() {
  depth_ = PROTOBUF_ULONGLONG(1);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::depth() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.CudaPublisherConf.depth)
  return _internal_depth();
}
inline void CudaPublisherConf::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  depth_ = value;
}
inline void CudaPublisherConf::set_depth(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.CudaPublisherConf.depth)
}

// required uint64 device_id = 4 [default = 0];
inline bool CudaPublisherConf::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CudaPublisherConf::has_device_id() const {
  return _internal_has_device_id();
}
inline void CudaPublisherConf::clear_device_id() {
  device_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CudaPublisherConf::device_id() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.CudaPublisherConf.device_id)
  return _internal_device_id();
}
inline void CudaPublisherConf::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_ = value;
}
inline void CudaPublisherConf::set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.CudaPublisherConf.device_id)
}

// -------------------------------------------------------------------

// CudaSubscriberConf

// required string channel_name = 1;
inline bool CudaSubscriberConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CudaSubscriberConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CudaSubscriberConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CudaSubscriberConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
  return _internal_channel_name();
}
inline void CudaSubscriberConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
}
inline std::string* CudaSubscriberConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& CudaSubscriberConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void CudaSubscriberConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CudaSubscriberConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
}
inline void CudaSubscriberConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
}
inline void CudaSubscriberConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
}
inline std::string* CudaSubscriberConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CudaSubscriberConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CudaSubscriberConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.CudaSubscriberConf.channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace rscl
}  // namespace senseAD

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fcuda_5fmessage_5fconf_2eproto
