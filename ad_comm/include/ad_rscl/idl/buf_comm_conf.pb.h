// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_rscl/idl/buf_comm_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto;
namespace senseAD {
namespace rscl {
namespace idl {
class BufPublisherConf;
class BufPublisherConfDefaultTypeInternal;
extern BufPublisherConfDefaultTypeInternal _BufPublisherConf_default_instance_;
class BufSubscriberConf;
class BufSubscriberConfDefaultTypeInternal;
extern BufSubscriberConfDefaultTypeInternal _BufSubscriberConf_default_instance_;
}  // namespace idl
}  // namespace rscl
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::rscl::idl::BufPublisherConf* Arena::CreateMaybeMessage<::senseAD::rscl::idl::BufPublisherConf>(Arena*);
template<> ::senseAD::rscl::idl::BufSubscriberConf* Arena::CreateMaybeMessage<::senseAD::rscl::idl::BufSubscriberConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace rscl {
namespace idl {

// ===================================================================

class BufPublisherConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.BufPublisherConf) */ {
 public:
  inline BufPublisherConf() : BufPublisherConf(nullptr) {}
  virtual ~BufPublisherConf();

  BufPublisherConf(const BufPublisherConf& from);
  BufPublisherConf(BufPublisherConf&& from) noexcept
    : BufPublisherConf() {
    *this = ::std::move(from);
  }

  inline BufPublisherConf& operator=(const BufPublisherConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BufPublisherConf& operator=(BufPublisherConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BufPublisherConf& default_instance();

  static inline const BufPublisherConf* internal_default_instance() {
    return reinterpret_cast<const BufPublisherConf*>(
               &_BufPublisherConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BufPublisherConf& a, BufPublisherConf& b) {
    a.Swap(&b);
  }
  inline void Swap(BufPublisherConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BufPublisherConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BufPublisherConf* New() const final {
    return CreateMaybeMessage<BufPublisherConf>(nullptr);
  }

  BufPublisherConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BufPublisherConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BufPublisherConf& from);
  void MergeFrom(const BufPublisherConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufPublisherConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.BufPublisherConf";
  }
  protected:
  explicit BufPublisherConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.BufPublisherConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto;
};
// -------------------------------------------------------------------

class BufSubscriberConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.BufSubscriberConf) */ {
 public:
  inline BufSubscriberConf() : BufSubscriberConf(nullptr) {}
  virtual ~BufSubscriberConf();

  BufSubscriberConf(const BufSubscriberConf& from);
  BufSubscriberConf(BufSubscriberConf&& from) noexcept
    : BufSubscriberConf() {
    *this = ::std::move(from);
  }

  inline BufSubscriberConf& operator=(const BufSubscriberConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BufSubscriberConf& operator=(BufSubscriberConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BufSubscriberConf& default_instance();

  static inline const BufSubscriberConf* internal_default_instance() {
    return reinterpret_cast<const BufSubscriberConf*>(
               &_BufSubscriberConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BufSubscriberConf& a, BufSubscriberConf& b) {
    a.Swap(&b);
  }
  inline void Swap(BufSubscriberConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BufSubscriberConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BufSubscriberConf* New() const final {
    return CreateMaybeMessage<BufSubscriberConf>(nullptr);
  }

  BufSubscriberConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BufSubscriberConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BufSubscriberConf& from);
  void MergeFrom(const BufSubscriberConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufSubscriberConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.BufSubscriberConf";
  }
  protected:
  explicit BufSubscriberConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.BufSubscriberConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BufPublisherConf

// required string channel_name = 1;
inline bool BufPublisherConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BufPublisherConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void BufPublisherConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BufPublisherConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.BufPublisherConf.channel_name)
  return _internal_channel_name();
}
inline void BufPublisherConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.BufPublisherConf.channel_name)
}
inline std::string* BufPublisherConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.BufPublisherConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& BufPublisherConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void BufPublisherConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BufPublisherConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.BufPublisherConf.channel_name)
}
inline void BufPublisherConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.BufPublisherConf.channel_name)
}
inline void BufPublisherConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.BufPublisherConf.channel_name)
}
inline std::string* BufPublisherConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BufPublisherConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.BufPublisherConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BufPublisherConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.BufPublisherConf.channel_name)
}

// -------------------------------------------------------------------

// BufSubscriberConf

// required string channel_name = 1;
inline bool BufSubscriberConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BufSubscriberConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void BufSubscriberConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BufSubscriberConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.BufSubscriberConf.channel_name)
  return _internal_channel_name();
}
inline void BufSubscriberConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.BufSubscriberConf.channel_name)
}
inline std::string* BufSubscriberConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.BufSubscriberConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& BufSubscriberConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void BufSubscriberConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BufSubscriberConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.BufSubscriberConf.channel_name)
}
inline void BufSubscriberConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.BufSubscriberConf.channel_name)
}
inline void BufSubscriberConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.BufSubscriberConf.channel_name)
}
inline std::string* BufSubscriberConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BufSubscriberConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.BufSubscriberConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BufSubscriberConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.BufSubscriberConf.channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace rscl
}  // namespace senseAD

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fbuf_5fcomm_5fconf_2eproto
