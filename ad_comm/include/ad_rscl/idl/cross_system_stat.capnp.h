// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cross_system_stat.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c84b67e4c0685a67);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace rscl {
namespace idl {

struct CrossSystemStatInfo {
  CrossSystemStatInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c84b67e4c0685a67, 11, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CrossSystemStatInfo::Reader {
public:
  typedef CrossSystemStatInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRecvTraffic() const;

  inline  ::uint64_t getRecvFrameFrequency() const;

  inline  ::uint64_t getRecvFrameTotal() const;

  inline  ::uint64_t getLostFrameTotal() const;

  inline  ::uint64_t getLostFrameRatio() const;

  inline  ::uint64_t getMaxLatency() const;

  inline double getSentTraffic() const;

  inline  ::uint64_t getSentFrameFrequency() const;

  inline  ::uint64_t getSentFrameTotal() const;

  inline  ::uint64_t getDroppedFrameTotal() const;

  inline  ::uint64_t getDroppedFrameRatio() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CrossSystemStatInfo::Builder {
public:
  typedef CrossSystemStatInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRecvTraffic();
  inline void setRecvTraffic(double value);

  inline  ::uint64_t getRecvFrameFrequency();
  inline void setRecvFrameFrequency( ::uint64_t value);

  inline  ::uint64_t getRecvFrameTotal();
  inline void setRecvFrameTotal( ::uint64_t value);

  inline  ::uint64_t getLostFrameTotal();
  inline void setLostFrameTotal( ::uint64_t value);

  inline  ::uint64_t getLostFrameRatio();
  inline void setLostFrameRatio( ::uint64_t value);

  inline  ::uint64_t getMaxLatency();
  inline void setMaxLatency( ::uint64_t value);

  inline double getSentTraffic();
  inline void setSentTraffic(double value);

  inline  ::uint64_t getSentFrameFrequency();
  inline void setSentFrameFrequency( ::uint64_t value);

  inline  ::uint64_t getSentFrameTotal();
  inline void setSentFrameTotal( ::uint64_t value);

  inline  ::uint64_t getDroppedFrameTotal();
  inline void setDroppedFrameTotal( ::uint64_t value);

  inline  ::uint64_t getDroppedFrameRatio();
  inline void setDroppedFrameRatio( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CrossSystemStatInfo::Pipeline {
public:
  typedef CrossSystemStatInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double CrossSystemStatInfo::Reader::getRecvTraffic() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double CrossSystemStatInfo::Builder::getRecvTraffic() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setRecvTraffic(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getRecvFrameFrequency() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getRecvFrameFrequency() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setRecvFrameFrequency( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getRecvFrameTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getRecvFrameTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setRecvFrameTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getLostFrameTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getLostFrameTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setLostFrameTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getLostFrameRatio() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getLostFrameRatio() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setLostFrameRatio( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getMaxLatency() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getMaxLatency() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setMaxLatency( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double CrossSystemStatInfo::Reader::getSentTraffic() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double CrossSystemStatInfo::Builder::getSentTraffic() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setSentTraffic(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getSentFrameFrequency() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getSentFrameFrequency() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setSentFrameFrequency( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getSentFrameTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getSentFrameTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setSentFrameTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getDroppedFrameTotal() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getDroppedFrameTotal() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setDroppedFrameTotal( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossSystemStatInfo::Reader::getDroppedFrameRatio() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossSystemStatInfo::Builder::getDroppedFrameRatio() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CrossSystemStatInfo::Builder::setDroppedFrameRatio( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

