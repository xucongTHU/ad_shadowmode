// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_rscl/idl/sm_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fsm_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fsm_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5frscl_2fidl_2fsm_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5frscl_2fidl_2fsm_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5frscl_2fidl_2fsm_5fconf_2eproto;
namespace senseAD {
namespace rscl {
namespace idl {
class RecordStatus;
class RecordStatusDefaultTypeInternal;
extern RecordStatusDefaultTypeInternal _RecordStatus_default_instance_;
class SMStatus;
class SMStatusDefaultTypeInternal;
extern SMStatusDefaultTypeInternal _SMStatus_default_instance_;
}  // namespace idl
}  // namespace rscl
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::rscl::idl::RecordStatus* Arena::CreateMaybeMessage<::senseAD::rscl::idl::RecordStatus>(Arena*);
template<> ::senseAD::rscl::idl::SMStatus* Arena::CreateMaybeMessage<::senseAD::rscl::idl::SMStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace rscl {
namespace idl {

// ===================================================================

class RecordStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.RecordStatus) */ {
 public:
  inline RecordStatus() : RecordStatus(nullptr) {}
  virtual ~RecordStatus();

  RecordStatus(const RecordStatus& from);
  RecordStatus(RecordStatus&& from) noexcept
    : RecordStatus() {
    *this = ::std::move(from);
  }

  inline RecordStatus& operator=(const RecordStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordStatus& operator=(RecordStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordStatus& default_instance();

  static inline const RecordStatus* internal_default_instance() {
    return reinterpret_cast<const RecordStatus*>(
               &_RecordStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordStatus& a, RecordStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordStatus* New() const final {
    return CreateMaybeMessage<RecordStatus>(nullptr);
  }

  RecordStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordStatus& from);
  void MergeFrom(const RecordStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.RecordStatus";
  }
  protected:
  explicit RecordStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fsm_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fsm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsStartRecordFieldNumber = 1,
    kIsRecordingFieldNumber = 2,
  };
  // required bool is_start_record = 1 [default = false];
  bool has_is_start_record() const;
  private:
  bool _internal_has_is_start_record() const;
  public:
  void clear_is_start_record();
  bool is_start_record() const;
  void set_is_start_record(bool value);
  private:
  bool _internal_is_start_record() const;
  void _internal_set_is_start_record(bool value);
  public:

  // required bool is_recording = 2 [default = false];
  bool has_is_recording() const;
  private:
  bool _internal_has_is_recording() const;
  public:
  void clear_is_recording();
  bool is_recording() const;
  void set_is_recording(bool value);
  private:
  bool _internal_is_recording() const;
  void _internal_set_is_recording(bool value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.RecordStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_start_record_;
  bool is_recording_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fsm_5fconf_2eproto;
};
// -------------------------------------------------------------------

class SMStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.SMStatus) */ {
 public:
  inline SMStatus() : SMStatus(nullptr) {}
  virtual ~SMStatus();

  SMStatus(const SMStatus& from);
  SMStatus(SMStatus&& from) noexcept
    : SMStatus() {
    *this = ::std::move(from);
  }

  inline SMStatus& operator=(const SMStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMStatus& operator=(SMStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMStatus& default_instance();

  static inline const SMStatus* internal_default_instance() {
    return reinterpret_cast<const SMStatus*>(
               &_SMStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMStatus& a, SMStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SMStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMStatus* New() const final {
    return CreateMaybeMessage<SMStatus>(nullptr);
  }

  SMStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMStatus& from);
  void MergeFrom(const SMStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.SMStatus";
  }
  protected:
  explicit SMStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fsm_5fconf_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fsm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordStatusFieldNumber = 2,
    kInitFlagFieldNumber = 1,
  };
  // required .senseAD.rscl.idl.RecordStatus record_status = 2;
  bool has_record_status() const;
  private:
  bool _internal_has_record_status() const;
  public:
  void clear_record_status();
  const ::senseAD::rscl::idl::RecordStatus& record_status() const;
  ::senseAD::rscl::idl::RecordStatus* release_record_status();
  ::senseAD::rscl::idl::RecordStatus* mutable_record_status();
  void set_allocated_record_status(::senseAD::rscl::idl::RecordStatus* record_status);
  private:
  const ::senseAD::rscl::idl::RecordStatus& _internal_record_status() const;
  ::senseAD::rscl::idl::RecordStatus* _internal_mutable_record_status();
  public:
  void unsafe_arena_set_allocated_record_status(
      ::senseAD::rscl::idl::RecordStatus* record_status);
  ::senseAD::rscl::idl::RecordStatus* unsafe_arena_release_record_status();

  // required bool init_flag = 1 [default = false];
  bool has_init_flag() const;
  private:
  bool _internal_has_init_flag() const;
  public:
  void clear_init_flag();
  bool init_flag() const;
  void set_init_flag(bool value);
  private:
  bool _internal_init_flag() const;
  void _internal_set_init_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.SMStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::senseAD::rscl::idl::RecordStatus* record_status_;
  bool init_flag_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fsm_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordStatus

// required bool is_start_record = 1 [default = false];
inline bool RecordStatus::_internal_has_is_start_record() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordStatus::has_is_start_record() const {
  return _internal_has_is_start_record();
}
inline void RecordStatus::clear_is_start_record() {
  is_start_record_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RecordStatus::_internal_is_start_record() const {
  return is_start_record_;
}
inline bool RecordStatus::is_start_record() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.RecordStatus.is_start_record)
  return _internal_is_start_record();
}
inline void RecordStatus::_internal_set_is_start_record(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_start_record_ = value;
}
inline void RecordStatus::set_is_start_record(bool value) {
  _internal_set_is_start_record(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.RecordStatus.is_start_record)
}

// required bool is_recording = 2 [default = false];
inline bool RecordStatus::_internal_has_is_recording() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordStatus::has_is_recording() const {
  return _internal_has_is_recording();
}
inline void RecordStatus::clear_is_recording() {
  is_recording_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RecordStatus::_internal_is_recording() const {
  return is_recording_;
}
inline bool RecordStatus::is_recording() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.RecordStatus.is_recording)
  return _internal_is_recording();
}
inline void RecordStatus::_internal_set_is_recording(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_recording_ = value;
}
inline void RecordStatus::set_is_recording(bool value) {
  _internal_set_is_recording(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.RecordStatus.is_recording)
}

// -------------------------------------------------------------------

// SMStatus

// required bool init_flag = 1 [default = false];
inline bool SMStatus::_internal_has_init_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SMStatus::has_init_flag() const {
  return _internal_has_init_flag();
}
inline void SMStatus::clear_init_flag() {
  init_flag_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SMStatus::_internal_init_flag() const {
  return init_flag_;
}
inline bool SMStatus::init_flag() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.SMStatus.init_flag)
  return _internal_init_flag();
}
inline void SMStatus::_internal_set_init_flag(bool value) {
  _has_bits_[0] |= 0x00000002u;
  init_flag_ = value;
}
inline void SMStatus::set_init_flag(bool value) {
  _internal_set_init_flag(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.SMStatus.init_flag)
}

// required .senseAD.rscl.idl.RecordStatus record_status = 2;
inline bool SMStatus::_internal_has_record_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || record_status_ != nullptr);
  return value;
}
inline bool SMStatus::has_record_status() const {
  return _internal_has_record_status();
}
inline void SMStatus::clear_record_status() {
  if (record_status_ != nullptr) record_status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::senseAD::rscl::idl::RecordStatus& SMStatus::_internal_record_status() const {
  const ::senseAD::rscl::idl::RecordStatus* p = record_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::rscl::idl::RecordStatus&>(
      ::senseAD::rscl::idl::_RecordStatus_default_instance_);
}
inline const ::senseAD::rscl::idl::RecordStatus& SMStatus::record_status() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.SMStatus.record_status)
  return _internal_record_status();
}
inline void SMStatus::unsafe_arena_set_allocated_record_status(
    ::senseAD::rscl::idl::RecordStatus* record_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_status_);
  }
  record_status_ = record_status;
  if (record_status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.rscl.idl.SMStatus.record_status)
}
inline ::senseAD::rscl::idl::RecordStatus* SMStatus::release_record_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::senseAD::rscl::idl::RecordStatus* temp = record_status_;
  record_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::rscl::idl::RecordStatus* SMStatus::unsafe_arena_release_record_status() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.SMStatus.record_status)
  _has_bits_[0] &= ~0x00000001u;
  ::senseAD::rscl::idl::RecordStatus* temp = record_status_;
  record_status_ = nullptr;
  return temp;
}
inline ::senseAD::rscl::idl::RecordStatus* SMStatus::_internal_mutable_record_status() {
  _has_bits_[0] |= 0x00000001u;
  if (record_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::rscl::idl::RecordStatus>(GetArena());
    record_status_ = p;
  }
  return record_status_;
}
inline ::senseAD::rscl::idl::RecordStatus* SMStatus::mutable_record_status() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.SMStatus.record_status)
  return _internal_mutable_record_status();
}
inline void SMStatus::set_allocated_record_status(::senseAD::rscl::idl::RecordStatus* record_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_status_;
  }
  if (record_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record_status);
    if (message_arena != submessage_arena) {
      record_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  record_status_ = record_status;
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.SMStatus.record_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace rscl
}  // namespace senseAD

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fsm_5fconf_2eproto
