// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cross_system_v3.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a93cc93a7a8ed38a);
CAPNP_DECLARE_SCHEMA(a04fad285993556b);
CAPNP_DECLARE_SCHEMA(97d97a6973c6d234);
CAPNP_DECLARE_SCHEMA(f5c718bc25ca14f7);
CAPNP_DECLARE_SCHEMA(f67b859aefd2ad2e);
CAPNP_DECLARE_SCHEMA(da95bbd97b3b442b);
CAPNP_DECLARE_SCHEMA(9948f4ac8ce7bfd9);
CAPNP_DECLARE_SCHEMA(cde8f1b81ea352d4);
CAPNP_DECLARE_SCHEMA(ef17b295d3c05377);
CAPNP_DECLARE_SCHEMA(905367f3814dcf9b);
CAPNP_DECLARE_SCHEMA(baf9e5918ad27b63);
CAPNP_DECLARE_SCHEMA(c0a74280f3f95e80);
CAPNP_DECLARE_SCHEMA(8da1cff427a0576a);
CAPNP_DECLARE_SCHEMA(b5fb25c638e0d632);
CAPNP_DECLARE_SCHEMA(c8f1cbda1e5f9f94);
CAPNP_DECLARE_SCHEMA(b879f35102f088e6);
CAPNP_DECLARE_SCHEMA(925c76932ee2e576);
CAPNP_DECLARE_SCHEMA(adc3d9dd64f03c1b);
CAPNP_DECLARE_SCHEMA(cb2504f528093d06);
enum class SwcCliToCoreReqType_cb2504f528093d06: uint16_t {
  UPSERT_STATE,
  REMOVE_STATE,
  QUERY_STATE,
  QUERY_VERSION,
  REPORT_STAT,
};
CAPNP_DECLARE_ENUM(SwcCliToCoreReqType, cb2504f528093d06);
CAPNP_DECLARE_SCHEMA(85607b0ce8d269ea);
CAPNP_DECLARE_SCHEMA(9da16321daa8a18e);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace rscl {
namespace cs3 {
namespace idl {

struct AddrInfo {
  AddrInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a93cc93a7a8ed38a, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TopicInfo {
  TopicInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a04fad285993556b, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RuntimeState {
  RuntimeState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97d97a6973c6d234, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CoreToCoreReq {
  CoreToCoreReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5c718bc25ca14f7, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CoreToCoreResp {
  CoreToCoreResp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f67b859aefd2ad2e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreReqUpsertState {
  SwcCliToCoreReqUpsertState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da95bbd97b3b442b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreRespUpsertState {
  SwcCliToCoreRespUpsertState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9948f4ac8ce7bfd9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreReqRemoveState {
  SwcCliToCoreReqRemoveState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cde8f1b81ea352d4, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreRespRemoveState {
  SwcCliToCoreRespRemoveState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef17b295d3c05377, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreReqQueryRemoteEndpoint {
  SwcCliToCoreReqQueryRemoteEndpoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(905367f3814dcf9b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreRespQueryRemoteEndpoint {
  SwcCliToCoreRespQueryRemoteEndpoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(baf9e5918ad27b63, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreReqQueryRemoteEndpointStateVersion {
  SwcCliToCoreReqQueryRemoteEndpointStateVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0a74280f3f95e80, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreRespQueryRemoteEndpointStateVersion {
  SwcCliToCoreRespQueryRemoteEndpointStateVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8da1cff427a0576a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StatRecordPerTopic {
  StatRecordPerTopic() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5fb25c638e0d632, 6, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StatRecordPerPeer {
  StatRecordPerPeer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8f1cbda1e5f9f94, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StatReport {
  StatReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b879f35102f088e6, 6, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreReqReportStat {
  SwcCliToCoreReqReportStat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(925c76932ee2e576, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreRespReportStat {
  SwcCliToCoreRespReportStat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adc3d9dd64f03c1b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::SwcCliToCoreReqType_cb2504f528093d06 SwcCliToCoreReqType;

struct SwcCliToCoreReq {
  SwcCliToCoreReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85607b0ce8d269ea, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwcCliToCoreResp {
  SwcCliToCoreResp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da16321daa8a18e, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AddrInfo::Reader {
public:
  typedef AddrInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEndpointName() const;
  inline  ::capnp::Text::Reader getEndpointName() const;

  inline bool hasIp() const;
  inline  ::capnp::Text::Reader getIp() const;

  inline  ::uint32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddrInfo::Builder {
public:
  typedef AddrInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEndpointName();
  inline  ::capnp::Text::Builder getEndpointName();
  inline void setEndpointName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEndpointName(unsigned int size);
  inline void adoptEndpointName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEndpointName();

  inline bool hasIp();
  inline  ::capnp::Text::Builder getIp();
  inline void setIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIp(unsigned int size);
  inline void adoptIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIp();

  inline  ::uint32_t getPort();
  inline void setPort( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddrInfo::Pipeline {
public:
  typedef AddrInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TopicInfo::Reader {
public:
  typedef TopicInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopicName() const;
  inline  ::capnp::Text::Reader getTopicName() const;

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

  inline bool hasDescriptor() const;
  inline  ::capnp::Data::Reader getDescriptor() const;

  inline bool hasEndpoint() const;
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader getEndpoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TopicInfo::Builder {
public:
  typedef TopicInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopicName();
  inline  ::capnp::Text::Builder getTopicName();
  inline void setTopicName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopicName(unsigned int size);
  inline void adoptTopicName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopicName();

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

  inline bool hasDescriptor();
  inline  ::capnp::Data::Builder getDescriptor();
  inline void setDescriptor( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDescriptor(unsigned int size);
  inline void adoptDescriptor(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDescriptor();

  inline bool hasEndpoint();
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder getEndpoint();
  inline void setEndpoint( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value);
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder initEndpoint();
  inline void adoptEndpoint(::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> disownEndpoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TopicInfo::Pipeline {
public:
  typedef TopicInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline getEndpoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RuntimeState::Reader {
public:
  typedef RuntimeState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHostSubTopicInfos() const;
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader getHostSubTopicInfos() const;

  inline bool hasHostPubTopicInfos() const;
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader getHostPubTopicInfos() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RuntimeState::Builder {
public:
  typedef RuntimeState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHostSubTopicInfos();
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder getHostSubTopicInfos();
  inline void setHostSubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder initHostSubTopicInfos(unsigned int size);
  inline void adoptHostSubTopicInfos(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> disownHostSubTopicInfos();

  inline bool hasHostPubTopicInfos();
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder getHostPubTopicInfos();
  inline void setHostPubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder initHostPubTopicInfos(unsigned int size);
  inline void adoptHostPubTopicInfos(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> disownHostPubTopicInfos();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RuntimeState::Pipeline {
public:
  typedef RuntimeState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CoreToCoreReq::Reader {
public:
  typedef CoreToCoreReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSelfAddr() const;
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader getSelfAddr() const;

  inline bool hasSelfSysState() const;
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader getSelfSysState() const;

  inline  ::uint64_t getStateVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CoreToCoreReq::Builder {
public:
  typedef CoreToCoreReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSelfAddr();
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder getSelfAddr();
  inline void setSelfAddr( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value);
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder initSelfAddr();
  inline void adoptSelfAddr(::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> disownSelfAddr();

  inline bool hasSelfSysState();
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder getSelfSysState();
  inline void setSelfSysState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder initSelfSysState();
  inline void adoptSelfSysState(::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> disownSelfSysState();

  inline  ::uint64_t getStateVersion();
  inline void setStateVersion( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CoreToCoreReq::Pipeline {
public:
  typedef CoreToCoreReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline getSelfAddr();
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline getSelfSysState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CoreToCoreResp::Reader {
public:
  typedef CoreToCoreResp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSelfAddr() const;
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader getSelfAddr() const;

  inline bool hasSelfSysState() const;
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader getSelfSysState() const;

  inline  ::uint64_t getStateVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CoreToCoreResp::Builder {
public:
  typedef CoreToCoreResp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSelfAddr();
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder getSelfAddr();
  inline void setSelfAddr( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value);
  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder initSelfAddr();
  inline void adoptSelfAddr(::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> disownSelfAddr();

  inline bool hasSelfSysState();
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder getSelfSysState();
  inline void setSelfSysState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder initSelfSysState();
  inline void adoptSelfSysState(::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> disownSelfSysState();

  inline  ::uint64_t getStateVersion();
  inline void setStateVersion( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CoreToCoreResp::Pipeline {
public:
  typedef CoreToCoreResp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline getSelfAddr();
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline getSelfSysState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReqUpsertState::Reader {
public:
  typedef SwcCliToCoreReqUpsertState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSelfProcessState() const;
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader getSelfProcessState() const;

  inline  ::uint64_t getStateVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReqUpsertState::Builder {
public:
  typedef SwcCliToCoreReqUpsertState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSelfProcessState();
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder getSelfProcessState();
  inline void setSelfProcessState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder initSelfProcessState();
  inline void adoptSelfProcessState(::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> disownSelfProcessState();

  inline  ::uint64_t getStateVersion();
  inline void setStateVersion( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReqUpsertState::Pipeline {
public:
  typedef SwcCliToCoreReqUpsertState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline getSelfProcessState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreRespUpsertState::Reader {
public:
  typedef SwcCliToCoreRespUpsertState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreRespUpsertState::Builder {
public:
  typedef SwcCliToCoreRespUpsertState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreRespUpsertState::Pipeline {
public:
  typedef SwcCliToCoreRespUpsertState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReqRemoveState::Reader {
public:
  typedef SwcCliToCoreReqRemoveState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReqRemoveState::Builder {
public:
  typedef SwcCliToCoreReqRemoveState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReqRemoveState::Pipeline {
public:
  typedef SwcCliToCoreReqRemoveState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreRespRemoveState::Reader {
public:
  typedef SwcCliToCoreRespRemoveState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreRespRemoveState::Builder {
public:
  typedef SwcCliToCoreRespRemoveState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreRespRemoveState::Pipeline {
public:
  typedef SwcCliToCoreRespRemoveState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReqQueryRemoteEndpoint::Reader {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopicNames() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTopicNames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReqQueryRemoteEndpoint::Builder {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopicNames();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTopicNames();
  inline void setTopicNames( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTopicNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTopicNames(unsigned int size);
  inline void adoptTopicNames(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTopicNames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReqQueryRemoteEndpoint::Pipeline {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreRespQueryRemoteEndpoint::Reader {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRemoteSubTopicInfos() const;
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader getRemoteSubTopicInfos() const;

  inline  ::uint64_t getStateVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreRespQueryRemoteEndpoint::Builder {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRemoteSubTopicInfos();
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder getRemoteSubTopicInfos();
  inline void setRemoteSubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder initRemoteSubTopicInfos(unsigned int size);
  inline void adoptRemoteSubTopicInfos(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> disownRemoteSubTopicInfos();

  inline  ::uint64_t getStateVersion();
  inline void setStateVersion( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreRespQueryRemoteEndpoint::Pipeline {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReqQueryRemoteEndpointStateVersion::Reader {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpointStateVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReqQueryRemoteEndpointStateVersion::Builder {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpointStateVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReqQueryRemoteEndpointStateVersion::Pipeline {
public:
  typedef SwcCliToCoreReqQueryRemoteEndpointStateVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpointStateVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStateVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpointStateVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStateVersion();
  inline void setStateVersion( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreRespQueryRemoteEndpointStateVersion::Pipeline {
public:
  typedef SwcCliToCoreRespQueryRemoteEndpointStateVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StatRecordPerTopic::Reader {
public:
  typedef StatRecordPerTopic Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopicName() const;
  inline  ::capnp::Text::Reader getTopicName() const;

  inline  ::uint64_t getReceivedTopicMsgCnt() const;

  inline double getReceivedTopicTrafficByte() const;

  inline  ::uint64_t getReceivedTopicLost() const;

  inline  ::uint64_t getSentTopicMsgCnt() const;

  inline  ::uint64_t getSentTopicDropped() const;

  inline double getSentTopicTrafficByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StatRecordPerTopic::Builder {
public:
  typedef StatRecordPerTopic Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopicName();
  inline  ::capnp::Text::Builder getTopicName();
  inline void setTopicName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopicName(unsigned int size);
  inline void adoptTopicName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopicName();

  inline  ::uint64_t getReceivedTopicMsgCnt();
  inline void setReceivedTopicMsgCnt( ::uint64_t value);

  inline double getReceivedTopicTrafficByte();
  inline void setReceivedTopicTrafficByte(double value);

  inline  ::uint64_t getReceivedTopicLost();
  inline void setReceivedTopicLost( ::uint64_t value);

  inline  ::uint64_t getSentTopicMsgCnt();
  inline void setSentTopicMsgCnt( ::uint64_t value);

  inline  ::uint64_t getSentTopicDropped();
  inline void setSentTopicDropped( ::uint64_t value);

  inline double getSentTopicTrafficByte();
  inline void setSentTopicTrafficByte(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StatRecordPerTopic::Pipeline {
public:
  typedef StatRecordPerTopic Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StatRecordPerPeer::Reader {
public:
  typedef StatRecordPerPeer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPeerAddress() const;
  inline  ::capnp::Text::Reader getPeerAddress() const;

  inline  ::uint64_t getReceivedPeerPacketLost() const;

  inline double getReceivedPeerTrafficByte() const;

  inline  ::uint64_t getReceivedPeerMaxLatency() const;

  inline double getSentPeerTrafficByte() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StatRecordPerPeer::Builder {
public:
  typedef StatRecordPerPeer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPeerAddress();
  inline  ::capnp::Text::Builder getPeerAddress();
  inline void setPeerAddress( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPeerAddress(unsigned int size);
  inline void adoptPeerAddress(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPeerAddress();

  inline  ::uint64_t getReceivedPeerPacketLost();
  inline void setReceivedPeerPacketLost( ::uint64_t value);

  inline double getReceivedPeerTrafficByte();
  inline void setReceivedPeerTrafficByte(double value);

  inline  ::uint64_t getReceivedPeerMaxLatency();
  inline void setReceivedPeerMaxLatency( ::uint64_t value);

  inline double getSentPeerTrafficByte();
  inline void setSentPeerTrafficByte(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StatRecordPerPeer::Pipeline {
public:
  typedef StatRecordPerPeer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StatReport::Reader {
public:
  typedef StatReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getFirstUnixNs() const;

  inline  ::uint64_t getLastUpdateUnixNs() const;

  inline  ::uint64_t getReceivedTotalMsgCnt() const;

  inline  ::uint64_t getReceivedTotalLost() const;

  inline  ::uint64_t getSentTotalMsgCnt() const;

  inline  ::uint64_t getSentTotalDropped() const;

  inline bool hasPerTopicStats() const;
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Reader getPerTopicStats() const;

  inline bool hasPerPeerStats() const;
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Reader getPerPeerStats() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StatReport::Builder {
public:
  typedef StatReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getFirstUnixNs();
  inline void setFirstUnixNs( ::uint64_t value);

  inline  ::uint64_t getLastUpdateUnixNs();
  inline void setLastUpdateUnixNs( ::uint64_t value);

  inline  ::uint64_t getReceivedTotalMsgCnt();
  inline void setReceivedTotalMsgCnt( ::uint64_t value);

  inline  ::uint64_t getReceivedTotalLost();
  inline void setReceivedTotalLost( ::uint64_t value);

  inline  ::uint64_t getSentTotalMsgCnt();
  inline void setSentTotalMsgCnt( ::uint64_t value);

  inline  ::uint64_t getSentTotalDropped();
  inline void setSentTotalDropped( ::uint64_t value);

  inline bool hasPerTopicStats();
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Builder getPerTopicStats();
  inline void setPerTopicStats( ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Builder initPerTopicStats(unsigned int size);
  inline void adoptPerTopicStats(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>> disownPerTopicStats();

  inline bool hasPerPeerStats();
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Builder getPerPeerStats();
  inline void setPerPeerStats( ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Builder initPerPeerStats(unsigned int size);
  inline void adoptPerPeerStats(::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>> disownPerPeerStats();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StatReport::Pipeline {
public:
  typedef StatReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReqReportStat::Reader {
public:
  typedef SwcCliToCoreReqReportStat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSelfProcessName() const;
  inline  ::capnp::Text::Reader getSelfProcessName() const;

  inline  ::uint32_t getSelfPid() const;

  inline bool hasStatRecord() const;
  inline  ::senseAD::rscl::cs3::idl::StatReport::Reader getStatRecord() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReqReportStat::Builder {
public:
  typedef SwcCliToCoreReqReportStat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSelfProcessName();
  inline  ::capnp::Text::Builder getSelfProcessName();
  inline void setSelfProcessName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSelfProcessName(unsigned int size);
  inline void adoptSelfProcessName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSelfProcessName();

  inline  ::uint32_t getSelfPid();
  inline void setSelfPid( ::uint32_t value);

  inline bool hasStatRecord();
  inline  ::senseAD::rscl::cs3::idl::StatReport::Builder getStatRecord();
  inline void setStatRecord( ::senseAD::rscl::cs3::idl::StatReport::Reader value);
  inline  ::senseAD::rscl::cs3::idl::StatReport::Builder initStatRecord();
  inline void adoptStatRecord(::capnp::Orphan< ::senseAD::rscl::cs3::idl::StatReport>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::StatReport> disownStatRecord();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReqReportStat::Pipeline {
public:
  typedef SwcCliToCoreReqReportStat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::StatReport::Pipeline getStatRecord();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreRespReportStat::Reader {
public:
  typedef SwcCliToCoreRespReportStat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreRespReportStat::Builder {
public:
  typedef SwcCliToCoreRespReportStat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreRespReportStat::Pipeline {
public:
  typedef SwcCliToCoreRespReportStat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreReq::Reader {
public:
  typedef SwcCliToCoreReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType getReqType() const;

  inline bool hasUpsertReq() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Reader getUpsertReq() const;

  inline bool hasRemoveReq() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Reader getRemoveReq() const;

  inline bool hasQueryReq() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Reader getQueryReq() const;

  inline bool hasQueryStateVersionReq() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Reader getQueryStateVersionReq() const;

  inline bool hasReportStatReq() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Reader getReportStatReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreReq::Builder {
public:
  typedef SwcCliToCoreReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType getReqType();
  inline void setReqType( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType value);

  inline bool hasUpsertReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Builder getUpsertReq();
  inline void setUpsertReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Builder initUpsertReq();
  inline void adoptUpsertReq(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState> disownUpsertReq();

  inline bool hasRemoveReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Builder getRemoveReq();
  inline void setRemoveReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Builder initRemoveReq();
  inline void adoptRemoveReq(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState> disownRemoveReq();

  inline bool hasQueryReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Builder getQueryReq();
  inline void setQueryReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Builder initQueryReq();
  inline void adoptQueryReq(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint> disownQueryReq();

  inline bool hasQueryStateVersionReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Builder getQueryStateVersionReq();
  inline void setQueryStateVersionReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Builder initQueryStateVersionReq();
  inline void adoptQueryStateVersionReq(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion> disownQueryStateVersionReq();

  inline bool hasReportStatReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Builder getReportStatReq();
  inline void setReportStatReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Builder initReportStatReq();
  inline void adoptReportStatReq(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat> disownReportStatReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreReq::Pipeline {
public:
  typedef SwcCliToCoreReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Pipeline getUpsertReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Pipeline getRemoveReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Pipeline getQueryReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Pipeline getQueryStateVersionReq();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Pipeline getReportStatReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwcCliToCoreResp::Reader {
public:
  typedef SwcCliToCoreResp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType getReqType() const;

  inline  ::uint32_t getCorePid() const;

  inline  ::uint64_t getCoreStartTime() const;

  inline bool hasUpsertResp() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Reader getUpsertResp() const;

  inline bool hasRemoveResp() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Reader getRemoveResp() const;

  inline bool hasQueryResp() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Reader getQueryResp() const;

  inline bool hasQueryStateVersionResp() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader getQueryStateVersionResp() const;

  inline bool hasReportStatResp() const;
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Reader getReportStatResp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwcCliToCoreResp::Builder {
public:
  typedef SwcCliToCoreResp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType getReqType();
  inline void setReqType( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType value);

  inline  ::uint32_t getCorePid();
  inline void setCorePid( ::uint32_t value);

  inline  ::uint64_t getCoreStartTime();
  inline void setCoreStartTime( ::uint64_t value);

  inline bool hasUpsertResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Builder getUpsertResp();
  inline void setUpsertResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Builder initUpsertResp();
  inline void adoptUpsertResp(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState> disownUpsertResp();

  inline bool hasRemoveResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Builder getRemoveResp();
  inline void setRemoveResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Builder initRemoveResp();
  inline void adoptRemoveResp(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState> disownRemoveResp();

  inline bool hasQueryResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Builder getQueryResp();
  inline void setQueryResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Builder initQueryResp();
  inline void adoptQueryResp(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint> disownQueryResp();

  inline bool hasQueryStateVersionResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder getQueryStateVersionResp();
  inline void setQueryStateVersionResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder initQueryStateVersionResp();
  inline void adoptQueryStateVersionResp(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion> disownQueryStateVersionResp();

  inline bool hasReportStatResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Builder getReportStatResp();
  inline void setReportStatResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Reader value);
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Builder initReportStatResp();
  inline void adoptReportStatResp(::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat> disownReportStatResp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwcCliToCoreResp::Pipeline {
public:
  typedef SwcCliToCoreResp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Pipeline getUpsertResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Pipeline getRemoveResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Pipeline getQueryResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Pipeline getQueryStateVersionResp();
  inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Pipeline getReportStatResp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AddrInfo::Reader::hasEndpointName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AddrInfo::Builder::hasEndpointName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AddrInfo::Reader::getEndpointName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AddrInfo::Builder::getEndpointName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AddrInfo::Builder::setEndpointName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AddrInfo::Builder::initEndpointName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AddrInfo::Builder::adoptEndpointName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AddrInfo::Builder::disownEndpointName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AddrInfo::Reader::hasIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AddrInfo::Builder::hasIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AddrInfo::Reader::getIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AddrInfo::Builder::getIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AddrInfo::Builder::setIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AddrInfo::Builder::initIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AddrInfo::Builder::adoptIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AddrInfo::Builder::disownIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t AddrInfo::Reader::getPort() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AddrInfo::Builder::getPort() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AddrInfo::Builder::setPort( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TopicInfo::Reader::hasTopicName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TopicInfo::Builder::hasTopicName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TopicInfo::Reader::getTopicName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TopicInfo::Builder::getTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TopicInfo::Builder::setTopicName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TopicInfo::Builder::initTopicName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TopicInfo::Builder::adoptTopicName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TopicInfo::Builder::disownTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TopicInfo::Reader::hasTypeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TopicInfo::Builder::hasTypeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TopicInfo::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TopicInfo::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TopicInfo::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TopicInfo::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TopicInfo::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TopicInfo::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TopicInfo::Reader::hasDescriptor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TopicInfo::Builder::hasDescriptor() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TopicInfo::Reader::getDescriptor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TopicInfo::Builder::getDescriptor() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TopicInfo::Builder::setDescriptor( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TopicInfo::Builder::initDescriptor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TopicInfo::Builder::adoptDescriptor(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TopicInfo::Builder::disownDescriptor() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TopicInfo::Reader::hasEndpoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TopicInfo::Builder::hasEndpoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader TopicInfo::Reader::getEndpoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder TopicInfo::Builder::getEndpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline TopicInfo::Pipeline::getEndpoint() {
  return  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TopicInfo::Builder::setEndpoint( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder TopicInfo::Builder::initEndpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TopicInfo::Builder::adoptEndpoint(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> TopicInfo::Builder::disownEndpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RuntimeState::Reader::hasHostSubTopicInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RuntimeState::Builder::hasHostSubTopicInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader RuntimeState::Reader::getHostSubTopicInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder RuntimeState::Builder::getHostSubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RuntimeState::Builder::setHostSubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder RuntimeState::Builder::initHostSubTopicInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RuntimeState::Builder::adoptHostSubTopicInfos(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> RuntimeState::Builder::disownHostSubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RuntimeState::Reader::hasHostPubTopicInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RuntimeState::Builder::hasHostPubTopicInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader RuntimeState::Reader::getHostPubTopicInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder RuntimeState::Builder::getHostPubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RuntimeState::Builder::setHostPubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder RuntimeState::Builder::initHostPubTopicInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RuntimeState::Builder::adoptHostPubTopicInfos(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> RuntimeState::Builder::disownHostPubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CoreToCoreReq::Reader::hasSelfAddr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CoreToCoreReq::Builder::hasSelfAddr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader CoreToCoreReq::Reader::getSelfAddr() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder CoreToCoreReq::Builder::getSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline CoreToCoreReq::Pipeline::getSelfAddr() {
  return  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CoreToCoreReq::Builder::setSelfAddr( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder CoreToCoreReq::Builder::initSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CoreToCoreReq::Builder::adoptSelfAddr(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> CoreToCoreReq::Builder::disownSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CoreToCoreReq::Reader::hasSelfSysState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CoreToCoreReq::Builder::hasSelfSysState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader CoreToCoreReq::Reader::getSelfSysState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder CoreToCoreReq::Builder::getSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline CoreToCoreReq::Pipeline::getSelfSysState() {
  return  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CoreToCoreReq::Builder::setSelfSysState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder CoreToCoreReq::Builder::initSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CoreToCoreReq::Builder::adoptSelfSysState(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> CoreToCoreReq::Builder::disownSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CoreToCoreReq::Reader::getStateVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CoreToCoreReq::Builder::getStateVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CoreToCoreReq::Builder::setStateVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CoreToCoreResp::Reader::hasSelfAddr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CoreToCoreResp::Builder::hasSelfAddr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Reader CoreToCoreResp::Reader::getSelfAddr() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder CoreToCoreResp::Builder::getSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline CoreToCoreResp::Pipeline::getSelfAddr() {
  return  ::senseAD::rscl::cs3::idl::AddrInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CoreToCoreResp::Builder::setSelfAddr( ::senseAD::rscl::cs3::idl::AddrInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::AddrInfo::Builder CoreToCoreResp::Builder::initSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CoreToCoreResp::Builder::adoptSelfAddr(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::AddrInfo> CoreToCoreResp::Builder::disownSelfAddr() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::AddrInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CoreToCoreResp::Reader::hasSelfSysState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CoreToCoreResp::Builder::hasSelfSysState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader CoreToCoreResp::Reader::getSelfSysState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder CoreToCoreResp::Builder::getSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline CoreToCoreResp::Pipeline::getSelfSysState() {
  return  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CoreToCoreResp::Builder::setSelfSysState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder CoreToCoreResp::Builder::initSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CoreToCoreResp::Builder::adoptSelfSysState(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> CoreToCoreResp::Builder::disownSelfSysState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CoreToCoreResp::Reader::getStateVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CoreToCoreResp::Builder::getStateVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CoreToCoreResp::Builder::setStateVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SwcCliToCoreReqUpsertState::Reader::hasSelfProcessState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReqUpsertState::Builder::hasSelfProcessState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Reader SwcCliToCoreReqUpsertState::Reader::getSelfProcessState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder SwcCliToCoreReqUpsertState::Builder::getSelfProcessState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline SwcCliToCoreReqUpsertState::Pipeline::getSelfProcessState() {
  return  ::senseAD::rscl::cs3::idl::RuntimeState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReqUpsertState::Builder::setSelfProcessState( ::senseAD::rscl::cs3::idl::RuntimeState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::RuntimeState::Builder SwcCliToCoreReqUpsertState::Builder::initSelfProcessState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReqUpsertState::Builder::adoptSelfProcessState(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::RuntimeState> SwcCliToCoreReqUpsertState::Builder::disownSelfProcessState() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::RuntimeState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SwcCliToCoreReqUpsertState::Reader::getStateVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwcCliToCoreReqUpsertState::Builder::getStateVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreReqUpsertState::Builder::setStateVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SwcCliToCoreReqQueryRemoteEndpoint::Reader::hasTopicNames() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReqQueryRemoteEndpoint::Builder::hasTopicNames() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader SwcCliToCoreReqQueryRemoteEndpoint::Reader::getTopicNames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder SwcCliToCoreReqQueryRemoteEndpoint::Builder::getTopicNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReqQueryRemoteEndpoint::Builder::setTopicNames( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void SwcCliToCoreReqQueryRemoteEndpoint::Builder::setTopicNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder SwcCliToCoreReqQueryRemoteEndpoint::Builder::initTopicNames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SwcCliToCoreReqQueryRemoteEndpoint::Builder::adoptTopicNames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> SwcCliToCoreReqQueryRemoteEndpoint::Builder::disownTopicNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreRespQueryRemoteEndpoint::Reader::hasRemoteSubTopicInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreRespQueryRemoteEndpoint::Builder::hasRemoteSubTopicInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader SwcCliToCoreRespQueryRemoteEndpoint::Reader::getRemoteSubTopicInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder SwcCliToCoreRespQueryRemoteEndpoint::Builder::getRemoteSubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreRespQueryRemoteEndpoint::Builder::setRemoteSubTopicInfos( ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>::Builder SwcCliToCoreRespQueryRemoteEndpoint::Builder::initRemoteSubTopicInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SwcCliToCoreRespQueryRemoteEndpoint::Builder::adoptRemoteSubTopicInfos(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>> SwcCliToCoreRespQueryRemoteEndpoint::Builder::disownRemoteSubTopicInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::TopicInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SwcCliToCoreRespQueryRemoteEndpoint::Reader::getStateVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwcCliToCoreRespQueryRemoteEndpoint::Builder::getStateVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreRespQueryRemoteEndpoint::Builder::setStateVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader::getStateVersion() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder::getStateVersion() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder::setStateVersion( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StatRecordPerTopic::Reader::hasTopicName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StatRecordPerTopic::Builder::hasTopicName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StatRecordPerTopic::Reader::getTopicName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StatRecordPerTopic::Builder::getTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StatRecordPerTopic::Builder::setTopicName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StatRecordPerTopic::Builder::initTopicName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StatRecordPerTopic::Builder::adoptTopicName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StatRecordPerTopic::Builder::disownTopicName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t StatRecordPerTopic::Reader::getReceivedTopicMsgCnt() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerTopic::Builder::getReceivedTopicMsgCnt() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setReceivedTopicMsgCnt( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double StatRecordPerTopic::Reader::getReceivedTopicTrafficByte() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double StatRecordPerTopic::Builder::getReceivedTopicTrafficByte() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setReceivedTopicTrafficByte(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatRecordPerTopic::Reader::getReceivedTopicLost() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerTopic::Builder::getReceivedTopicLost() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setReceivedTopicLost( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatRecordPerTopic::Reader::getSentTopicMsgCnt() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerTopic::Builder::getSentTopicMsgCnt() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setSentTopicMsgCnt( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatRecordPerTopic::Reader::getSentTopicDropped() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerTopic::Builder::getSentTopicDropped() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setSentTopicDropped( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double StatRecordPerTopic::Reader::getSentTopicTrafficByte() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double StatRecordPerTopic::Builder::getSentTopicTrafficByte() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerTopic::Builder::setSentTopicTrafficByte(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool StatRecordPerPeer::Reader::hasPeerAddress() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StatRecordPerPeer::Builder::hasPeerAddress() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StatRecordPerPeer::Reader::getPeerAddress() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StatRecordPerPeer::Builder::getPeerAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StatRecordPerPeer::Builder::setPeerAddress( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StatRecordPerPeer::Builder::initPeerAddress(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StatRecordPerPeer::Builder::adoptPeerAddress(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StatRecordPerPeer::Builder::disownPeerAddress() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t StatRecordPerPeer::Reader::getReceivedPeerPacketLost() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerPeer::Builder::getReceivedPeerPacketLost() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerPeer::Builder::setReceivedPeerPacketLost( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double StatRecordPerPeer::Reader::getReceivedPeerTrafficByte() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double StatRecordPerPeer::Builder::getReceivedPeerTrafficByte() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerPeer::Builder::setReceivedPeerTrafficByte(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatRecordPerPeer::Reader::getReceivedPeerMaxLatency() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatRecordPerPeer::Builder::getReceivedPeerMaxLatency() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerPeer::Builder::setReceivedPeerMaxLatency( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double StatRecordPerPeer::Reader::getSentPeerTrafficByte() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double StatRecordPerPeer::Builder::getSentPeerTrafficByte() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void StatRecordPerPeer::Builder::setSentPeerTrafficByte(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getFirstUnixNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getFirstUnixNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setFirstUnixNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getLastUpdateUnixNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getLastUpdateUnixNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setLastUpdateUnixNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getReceivedTotalMsgCnt() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getReceivedTotalMsgCnt() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setReceivedTotalMsgCnt( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getReceivedTotalLost() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getReceivedTotalLost() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setReceivedTotalLost( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getSentTotalMsgCnt() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getSentTotalMsgCnt() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setSentTotalMsgCnt( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StatReport::Reader::getSentTotalDropped() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StatReport::Builder::getSentTotalDropped() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void StatReport::Builder::setSentTotalDropped( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool StatReport::Reader::hasPerTopicStats() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StatReport::Builder::hasPerTopicStats() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Reader StatReport::Reader::getPerTopicStats() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Builder StatReport::Builder::getPerTopicStats() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StatReport::Builder::setPerTopicStats( ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>::Builder StatReport::Builder::initPerTopicStats(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StatReport::Builder::adoptPerTopicStats(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>> StatReport::Builder::disownPerTopicStats() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerTopic,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StatReport::Reader::hasPerPeerStats() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StatReport::Builder::hasPerPeerStats() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Reader StatReport::Reader::getPerPeerStats() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Builder StatReport::Builder::getPerPeerStats() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StatReport::Builder::setPerPeerStats( ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>::Builder StatReport::Builder::initPerPeerStats(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StatReport::Builder::adoptPerPeerStats(
    ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>> StatReport::Builder::disownPerPeerStats() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::rscl::cs3::idl::StatRecordPerPeer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreReqReportStat::Reader::hasSelfProcessName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReqReportStat::Builder::hasSelfProcessName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SwcCliToCoreReqReportStat::Reader::getSelfProcessName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SwcCliToCoreReqReportStat::Builder::getSelfProcessName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReqReportStat::Builder::setSelfProcessName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SwcCliToCoreReqReportStat::Builder::initSelfProcessName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SwcCliToCoreReqReportStat::Builder::adoptSelfProcessName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SwcCliToCoreReqReportStat::Builder::disownSelfProcessName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t SwcCliToCoreReqReportStat::Reader::getSelfPid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SwcCliToCoreReqReportStat::Builder::getSelfPid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreReqReportStat::Builder::setSelfPid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SwcCliToCoreReqReportStat::Reader::hasStatRecord() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReqReportStat::Builder::hasStatRecord() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::StatReport::Reader SwcCliToCoreReqReportStat::Reader::getStatRecord() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::StatReport::Builder SwcCliToCoreReqReportStat::Builder::getStatRecord() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::StatReport::Pipeline SwcCliToCoreReqReportStat::Pipeline::getStatRecord() {
  return  ::senseAD::rscl::cs3::idl::StatReport::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReqReportStat::Builder::setStatRecord( ::senseAD::rscl::cs3::idl::StatReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::StatReport::Builder SwcCliToCoreReqReportStat::Builder::initStatRecord() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReqReportStat::Builder::adoptStatRecord(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::StatReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::StatReport> SwcCliToCoreReqReportStat::Builder::disownStatRecord() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::StatReport>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType SwcCliToCoreReq::Reader::getReqType() const {
  return _reader.getDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType SwcCliToCoreReq::Builder::getReqType() {
  return _builder.getDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreReq::Builder::setReqType( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType value) {
  _builder.setDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SwcCliToCoreReq::Reader::hasUpsertReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReq::Builder::hasUpsertReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Reader SwcCliToCoreReq::Reader::getUpsertReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Builder SwcCliToCoreReq::Builder::getUpsertReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Pipeline SwcCliToCoreReq::Pipeline::getUpsertReq() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReq::Builder::setUpsertReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState::Builder SwcCliToCoreReq::Builder::initUpsertReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReq::Builder::adoptUpsertReq(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState> SwcCliToCoreReq::Builder::disownUpsertReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqUpsertState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreReq::Reader::hasRemoveReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReq::Builder::hasRemoveReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Reader SwcCliToCoreReq::Reader::getRemoveReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Builder SwcCliToCoreReq::Builder::getRemoveReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Pipeline SwcCliToCoreReq::Pipeline::getRemoveReq() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReq::Builder::setRemoveReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState::Builder SwcCliToCoreReq::Builder::initRemoveReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReq::Builder::adoptRemoveReq(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState> SwcCliToCoreReq::Builder::disownRemoveReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqRemoveState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreReq::Reader::hasQueryReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReq::Builder::hasQueryReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Reader SwcCliToCoreReq::Reader::getQueryReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Builder SwcCliToCoreReq::Builder::getQueryReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Pipeline SwcCliToCoreReq::Pipeline::getQueryReq() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReq::Builder::setQueryReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint::Builder SwcCliToCoreReq::Builder::initQueryReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReq::Builder::adoptQueryReq(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint> SwcCliToCoreReq::Builder::disownQueryReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpoint>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreReq::Reader::hasQueryStateVersionReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReq::Builder::hasQueryStateVersionReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Reader SwcCliToCoreReq::Reader::getQueryStateVersionReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Builder SwcCliToCoreReq::Builder::getQueryStateVersionReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Pipeline SwcCliToCoreReq::Pipeline::getQueryStateVersionReq() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReq::Builder::setQueryStateVersionReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion::Builder SwcCliToCoreReq::Builder::initQueryStateVersionReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReq::Builder::adoptQueryStateVersionReq(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion> SwcCliToCoreReq::Builder::disownQueryStateVersionReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqQueryRemoteEndpointStateVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreReq::Reader::hasReportStatReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreReq::Builder::hasReportStatReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Reader SwcCliToCoreReq::Reader::getReportStatReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Builder SwcCliToCoreReq::Builder::getReportStatReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Pipeline SwcCliToCoreReq::Pipeline::getReportStatReq() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreReq::Builder::setReportStatReq( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat::Builder SwcCliToCoreReq::Builder::initReportStatReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreReq::Builder::adoptReportStatReq(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat> SwcCliToCoreReq::Builder::disownReportStatReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqReportStat>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType SwcCliToCoreResp::Reader::getReqType() const {
  return _reader.getDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType SwcCliToCoreResp::Builder::getReqType() {
  return _builder.getDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreResp::Builder::setReqType( ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType value) {
  _builder.setDataField< ::senseAD::rscl::cs3::idl::SwcCliToCoreReqType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SwcCliToCoreResp::Reader::getCorePid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SwcCliToCoreResp::Builder::getCorePid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreResp::Builder::setCorePid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SwcCliToCoreResp::Reader::getCoreStartTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwcCliToCoreResp::Builder::getCoreStartTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SwcCliToCoreResp::Builder::setCoreStartTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SwcCliToCoreResp::Reader::hasUpsertResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreResp::Builder::hasUpsertResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Reader SwcCliToCoreResp::Reader::getUpsertResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Builder SwcCliToCoreResp::Builder::getUpsertResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Pipeline SwcCliToCoreResp::Pipeline::getUpsertResp() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreResp::Builder::setUpsertResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState::Builder SwcCliToCoreResp::Builder::initUpsertResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreResp::Builder::adoptUpsertResp(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState> SwcCliToCoreResp::Builder::disownUpsertResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespUpsertState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreResp::Reader::hasRemoveResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreResp::Builder::hasRemoveResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Reader SwcCliToCoreResp::Reader::getRemoveResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Builder SwcCliToCoreResp::Builder::getRemoveResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Pipeline SwcCliToCoreResp::Pipeline::getRemoveResp() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreResp::Builder::setRemoveResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState::Builder SwcCliToCoreResp::Builder::initRemoveResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreResp::Builder::adoptRemoveResp(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState> SwcCliToCoreResp::Builder::disownRemoveResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespRemoveState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreResp::Reader::hasQueryResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreResp::Builder::hasQueryResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Reader SwcCliToCoreResp::Reader::getQueryResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Builder SwcCliToCoreResp::Builder::getQueryResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Pipeline SwcCliToCoreResp::Pipeline::getQueryResp() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreResp::Builder::setQueryResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint::Builder SwcCliToCoreResp::Builder::initQueryResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreResp::Builder::adoptQueryResp(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint> SwcCliToCoreResp::Builder::disownQueryResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpoint>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreResp::Reader::hasQueryStateVersionResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreResp::Builder::hasQueryStateVersionResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader SwcCliToCoreResp::Reader::getQueryStateVersionResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder SwcCliToCoreResp::Builder::getQueryStateVersionResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Pipeline SwcCliToCoreResp::Pipeline::getQueryStateVersionResp() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreResp::Builder::setQueryStateVersionResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion::Builder SwcCliToCoreResp::Builder::initQueryStateVersionResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreResp::Builder::adoptQueryStateVersionResp(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion> SwcCliToCoreResp::Builder::disownQueryStateVersionResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespQueryRemoteEndpointStateVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SwcCliToCoreResp::Reader::hasReportStatResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SwcCliToCoreResp::Builder::hasReportStatResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Reader SwcCliToCoreResp::Reader::getReportStatResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Builder SwcCliToCoreResp::Builder::getReportStatResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Pipeline SwcCliToCoreResp::Pipeline::getReportStatResp() {
  return  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SwcCliToCoreResp::Builder::setReportStatResp( ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat::Builder SwcCliToCoreResp::Builder::initReportStatResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SwcCliToCoreResp::Builder::adoptReportStatResp(
    ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat> SwcCliToCoreResp::Builder::disownReportStatResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::cs3::idl::SwcCliToCoreRespReportStat>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

