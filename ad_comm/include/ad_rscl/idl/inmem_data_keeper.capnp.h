// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: inmem_data_keeper.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cbf5916346cc69d3);
CAPNP_DECLARE_SCHEMA(80a4482fb62d034e);
enum class ClipTaskStatus_80a4482fb62d034e: uint16_t {
  STARTED,
  EXTENDED,
  DONE,
};
CAPNP_DECLARE_ENUM(ClipTaskStatus, 80a4482fb62d034e);
CAPNP_DECLARE_SCHEMA(be2e3691dbbb5bcc);
CAPNP_DECLARE_SCHEMA(c157d1118a5b6ed0);
CAPNP_DECLARE_SCHEMA(fa5da3f9a7193f32);
enum class Action_fa5da3f9a7193f32: uint16_t {
  START,
  EXTEND,
  REMOVE_WAITING,
  RESTART_SERVICE,
};
CAPNP_DECLARE_ENUM(Action, fa5da3f9a7193f32);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace rscl {
namespace idl {

struct InMemDataKeeperNotification {
  InMemDataKeeperNotification() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ClipTaskStatus_80a4482fb62d034e ClipTaskStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbf5916346cc69d3, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InMemDataKeeperRestartOption {
  InMemDataKeeperRestartOption() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be2e3691dbbb5bcc, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InMemDataKeeperTrigger {
  InMemDataKeeperTrigger() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Action_fa5da3f9a7193f32 Action;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c157d1118a5b6ed0, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class InMemDataKeeperNotification::Reader {
public:
  typedef InMemDataKeeperNotification Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClipTaskName() const;
  inline  ::capnp::Text::Reader getClipTaskName() const;

  inline  ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InMemDataKeeperNotification::Builder {
public:
  typedef InMemDataKeeperNotification Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClipTaskName();
  inline  ::capnp::Text::Builder getClipTaskName();
  inline void setClipTaskName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initClipTaskName(unsigned int size);
  inline void adoptClipTaskName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownClipTaskName();

  inline  ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus getStatus();
  inline void setStatus( ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InMemDataKeeperNotification::Pipeline {
public:
  typedef InMemDataKeeperNotification Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InMemDataKeeperRestartOption::Reader {
public:
  typedef InMemDataKeeperRestartOption Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMaxClipRadiusSec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InMemDataKeeperRestartOption::Builder {
public:
  typedef InMemDataKeeperRestartOption Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMaxClipRadiusSec();
  inline void setMaxClipRadiusSec( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InMemDataKeeperRestartOption::Pipeline {
public:
  typedef InMemDataKeeperRestartOption Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InMemDataKeeperTrigger::Reader {
public:
  typedef InMemDataKeeperTrigger Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action getAction() const;

  inline  ::uint32_t getStartOffsetSec() const;

  inline  ::uint32_t getEndOffsetSec() const;

  inline bool hasClipName() const;
  inline  ::capnp::Text::Reader getClipName() const;

  inline bool hasRestartOption() const;
  inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Reader getRestartOption() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InMemDataKeeperTrigger::Builder {
public:
  typedef InMemDataKeeperTrigger Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action getAction();
  inline void setAction( ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action value);

  inline  ::uint32_t getStartOffsetSec();
  inline void setStartOffsetSec( ::uint32_t value);

  inline  ::uint32_t getEndOffsetSec();
  inline void setEndOffsetSec( ::uint32_t value);

  inline bool hasClipName();
  inline  ::capnp::Text::Builder getClipName();
  inline void setClipName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initClipName(unsigned int size);
  inline void adoptClipName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownClipName();

  inline bool hasRestartOption();
  inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Builder getRestartOption();
  inline void setRestartOption( ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Reader value);
  inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Builder initRestartOption();
  inline void adoptRestartOption(::capnp::Orphan< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>&& value);
  inline ::capnp::Orphan< ::senseAD::rscl::idl::InMemDataKeeperRestartOption> disownRestartOption();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InMemDataKeeperTrigger::Pipeline {
public:
  typedef InMemDataKeeperTrigger Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Pipeline getRestartOption();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool InMemDataKeeperNotification::Reader::hasClipTaskName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InMemDataKeeperNotification::Builder::hasClipTaskName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InMemDataKeeperNotification::Reader::getClipTaskName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InMemDataKeeperNotification::Builder::getClipTaskName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InMemDataKeeperNotification::Builder::setClipTaskName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InMemDataKeeperNotification::Builder::initClipTaskName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InMemDataKeeperNotification::Builder::adoptClipTaskName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InMemDataKeeperNotification::Builder::disownClipTaskName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus InMemDataKeeperNotification::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus InMemDataKeeperNotification::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InMemDataKeeperNotification::Builder::setStatus( ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus value) {
  _builder.setDataField< ::senseAD::rscl::idl::InMemDataKeeperNotification::ClipTaskStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InMemDataKeeperRestartOption::Reader::getMaxClipRadiusSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InMemDataKeeperRestartOption::Builder::getMaxClipRadiusSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InMemDataKeeperRestartOption::Builder::setMaxClipRadiusSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action InMemDataKeeperTrigger::Reader::getAction() const {
  return _reader.getDataField< ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action InMemDataKeeperTrigger::Builder::getAction() {
  return _builder.getDataField< ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InMemDataKeeperTrigger::Builder::setAction( ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action value) {
  _builder.setDataField< ::senseAD::rscl::idl::InMemDataKeeperTrigger::Action>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InMemDataKeeperTrigger::Reader::getStartOffsetSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InMemDataKeeperTrigger::Builder::getStartOffsetSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InMemDataKeeperTrigger::Builder::setStartOffsetSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t InMemDataKeeperTrigger::Reader::getEndOffsetSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InMemDataKeeperTrigger::Builder::getEndOffsetSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InMemDataKeeperTrigger::Builder::setEndOffsetSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool InMemDataKeeperTrigger::Reader::hasClipName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InMemDataKeeperTrigger::Builder::hasClipName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InMemDataKeeperTrigger::Reader::getClipName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InMemDataKeeperTrigger::Builder::getClipName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InMemDataKeeperTrigger::Builder::setClipName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InMemDataKeeperTrigger::Builder::initClipName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InMemDataKeeperTrigger::Builder::adoptClipName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InMemDataKeeperTrigger::Builder::disownClipName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InMemDataKeeperTrigger::Reader::hasRestartOption() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InMemDataKeeperTrigger::Builder::hasRestartOption() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Reader InMemDataKeeperTrigger::Reader::getRestartOption() const {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Builder InMemDataKeeperTrigger::Builder::getRestartOption() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Pipeline InMemDataKeeperTrigger::Pipeline::getRestartOption() {
  return  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void InMemDataKeeperTrigger::Builder::setRestartOption( ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::rscl::idl::InMemDataKeeperRestartOption::Builder InMemDataKeeperTrigger::Builder::initRestartOption() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InMemDataKeeperTrigger::Builder::adoptRestartOption(
    ::capnp::Orphan< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::rscl::idl::InMemDataKeeperRestartOption> InMemDataKeeperTrigger::Builder::disownRestartOption() {
  return ::capnp::_::PointerHelpers< ::senseAD::rscl::idl::InMemDataKeeperRestartOption>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

