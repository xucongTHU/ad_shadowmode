// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_rscl/idl/hetero_channel_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto;
namespace senseAD {
namespace rscl {
namespace idl {
class ZmqForwardChannelConfig;
class ZmqForwardChannelConfigDefaultTypeInternal;
extern ZmqForwardChannelConfigDefaultTypeInternal _ZmqForwardChannelConfig_default_instance_;
}  // namespace idl
}  // namespace rscl
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::rscl::idl::ZmqForwardChannelConfig* Arena::CreateMaybeMessage<::senseAD::rscl::idl::ZmqForwardChannelConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace rscl {
namespace idl {

enum SupportedHeteroChannel : int {
  UNKNOWN = 0,
  ZMQ_FORWARD_PUB = 1,
  ZMQ_FORWARD_SUB = 2
};
bool SupportedHeteroChannel_IsValid(int value);
constexpr SupportedHeteroChannel SupportedHeteroChannel_MIN = UNKNOWN;
constexpr SupportedHeteroChannel SupportedHeteroChannel_MAX = ZMQ_FORWARD_SUB;
constexpr int SupportedHeteroChannel_ARRAYSIZE = SupportedHeteroChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupportedHeteroChannel_descriptor();
template<typename T>
inline const std::string& SupportedHeteroChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupportedHeteroChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupportedHeteroChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupportedHeteroChannel_descriptor(), enum_t_value);
}
inline bool SupportedHeteroChannel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupportedHeteroChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupportedHeteroChannel>(
    SupportedHeteroChannel_descriptor(), name, value);
}
// ===================================================================

class ZmqForwardChannelConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.rscl.idl.ZmqForwardChannelConfig) */ {
 public:
  inline ZmqForwardChannelConfig() : ZmqForwardChannelConfig(nullptr) {}
  virtual ~ZmqForwardChannelConfig();

  ZmqForwardChannelConfig(const ZmqForwardChannelConfig& from);
  ZmqForwardChannelConfig(ZmqForwardChannelConfig&& from) noexcept
    : ZmqForwardChannelConfig() {
    *this = ::std::move(from);
  }

  inline ZmqForwardChannelConfig& operator=(const ZmqForwardChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZmqForwardChannelConfig& operator=(ZmqForwardChannelConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZmqForwardChannelConfig& default_instance();

  static inline const ZmqForwardChannelConfig* internal_default_instance() {
    return reinterpret_cast<const ZmqForwardChannelConfig*>(
               &_ZmqForwardChannelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ZmqForwardChannelConfig& a, ZmqForwardChannelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ZmqForwardChannelConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZmqForwardChannelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZmqForwardChannelConfig* New() const final {
    return CreateMaybeMessage<ZmqForwardChannelConfig>(nullptr);
  }

  ZmqForwardChannelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZmqForwardChannelConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZmqForwardChannelConfig& from);
  void MergeFrom(const ZmqForwardChannelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZmqForwardChannelConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.rscl.idl.ZmqForwardChannelConfig";
  }
  protected:
  explicit ZmqForwardChannelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto);
    return ::descriptor_table_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveIpFieldNumber = 1,
    kTcpAcceptAddressFieldNumber = 3,
    kBasePortFieldNumber = 2,
  };
  // required string receive_ip = 1;
  bool has_receive_ip() const;
  private:
  bool _internal_has_receive_ip() const;
  public:
  void clear_receive_ip();
  const std::string& receive_ip() const;
  void set_receive_ip(const std::string& value);
  void set_receive_ip(std::string&& value);
  void set_receive_ip(const char* value);
  void set_receive_ip(const char* value, size_t size);
  std::string* mutable_receive_ip();
  std::string* release_receive_ip();
  void set_allocated_receive_ip(std::string* receive_ip);
  private:
  const std::string& _internal_receive_ip() const;
  void _internal_set_receive_ip(const std::string& value);
  std::string* _internal_mutable_receive_ip();
  public:

  // optional string tcp_accept_address = 3;
  bool has_tcp_accept_address() const;
  private:
  bool _internal_has_tcp_accept_address() const;
  public:
  void clear_tcp_accept_address();
  const std::string& tcp_accept_address() const;
  void set_tcp_accept_address(const std::string& value);
  void set_tcp_accept_address(std::string&& value);
  void set_tcp_accept_address(const char* value);
  void set_tcp_accept_address(const char* value, size_t size);
  std::string* mutable_tcp_accept_address();
  std::string* release_tcp_accept_address();
  void set_allocated_tcp_accept_address(std::string* tcp_accept_address);
  private:
  const std::string& _internal_tcp_accept_address() const;
  void _internal_set_tcp_accept_address(const std::string& value);
  std::string* _internal_mutable_tcp_accept_address();
  public:

  // optional uint32 base_port = 2 [default = 5432];
  bool has_base_port() const;
  private:
  bool _internal_has_base_port() const;
  public:
  void clear_base_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_port() const;
  void set_base_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_port() const;
  void _internal_set_base_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.rscl.idl.ZmqForwardChannelConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receive_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tcp_accept_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_port_;
  friend struct ::TableStruct_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZmqForwardChannelConfig

// required string receive_ip = 1;
inline bool ZmqForwardChannelConfig::_internal_has_receive_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ZmqForwardChannelConfig::has_receive_ip() const {
  return _internal_has_receive_ip();
}
inline void ZmqForwardChannelConfig::clear_receive_ip() {
  receive_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ZmqForwardChannelConfig::receive_ip() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
  return _internal_receive_ip();
}
inline void ZmqForwardChannelConfig::set_receive_ip(const std::string& value) {
  _internal_set_receive_ip(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
}
inline std::string* ZmqForwardChannelConfig::mutable_receive_ip() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
  return _internal_mutable_receive_ip();
}
inline const std::string& ZmqForwardChannelConfig::_internal_receive_ip() const {
  return receive_ip_.Get();
}
inline void ZmqForwardChannelConfig::_internal_set_receive_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receive_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZmqForwardChannelConfig::set_receive_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  receive_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
}
inline void ZmqForwardChannelConfig::set_receive_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  receive_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
}
inline void ZmqForwardChannelConfig::set_receive_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  receive_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
}
inline std::string* ZmqForwardChannelConfig::_internal_mutable_receive_ip() {
  _has_bits_[0] |= 0x00000001u;
  return receive_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZmqForwardChannelConfig::release_receive_ip() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
  if (!_internal_has_receive_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return receive_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZmqForwardChannelConfig::set_allocated_receive_ip(std::string* receive_ip) {
  if (receive_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receive_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receive_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ZmqForwardChannelConfig.receive_ip)
}

// optional uint32 base_port = 2 [default = 5432];
inline bool ZmqForwardChannelConfig::_internal_has_base_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ZmqForwardChannelConfig::has_base_port() const {
  return _internal_has_base_port();
}
inline void ZmqForwardChannelConfig::clear_base_port() {
  base_port_ = 5432u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZmqForwardChannelConfig::_internal_base_port() const {
  return base_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ZmqForwardChannelConfig::base_port() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ZmqForwardChannelConfig.base_port)
  return _internal_base_port();
}
inline void ZmqForwardChannelConfig::_internal_set_base_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  base_port_ = value;
}
inline void ZmqForwardChannelConfig::set_base_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_port(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ZmqForwardChannelConfig.base_port)
}

// optional string tcp_accept_address = 3;
inline bool ZmqForwardChannelConfig::_internal_has_tcp_accept_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ZmqForwardChannelConfig::has_tcp_accept_address() const {
  return _internal_has_tcp_accept_address();
}
inline void ZmqForwardChannelConfig::clear_tcp_accept_address() {
  tcp_accept_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ZmqForwardChannelConfig::tcp_accept_address() const {
  // @@protoc_insertion_point(field_get:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
  return _internal_tcp_accept_address();
}
inline void ZmqForwardChannelConfig::set_tcp_accept_address(const std::string& value) {
  _internal_set_tcp_accept_address(value);
  // @@protoc_insertion_point(field_set:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
}
inline std::string* ZmqForwardChannelConfig::mutable_tcp_accept_address() {
  // @@protoc_insertion_point(field_mutable:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
  return _internal_mutable_tcp_accept_address();
}
inline const std::string& ZmqForwardChannelConfig::_internal_tcp_accept_address() const {
  return tcp_accept_address_.Get();
}
inline void ZmqForwardChannelConfig::_internal_set_tcp_accept_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tcp_accept_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ZmqForwardChannelConfig::set_tcp_accept_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tcp_accept_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
}
inline void ZmqForwardChannelConfig::set_tcp_accept_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tcp_accept_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
}
inline void ZmqForwardChannelConfig::set_tcp_accept_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tcp_accept_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
}
inline std::string* ZmqForwardChannelConfig::_internal_mutable_tcp_accept_address() {
  _has_bits_[0] |= 0x00000002u;
  return tcp_accept_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ZmqForwardChannelConfig::release_tcp_accept_address() {
  // @@protoc_insertion_point(field_release:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
  if (!_internal_has_tcp_accept_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tcp_accept_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ZmqForwardChannelConfig::set_allocated_tcp_accept_address(std::string* tcp_accept_address) {
  if (tcp_accept_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tcp_accept_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tcp_accept_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.rscl.idl.ZmqForwardChannelConfig.tcp_accept_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace idl
}  // namespace rscl
}  // namespace senseAD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::senseAD::rscl::idl::SupportedHeteroChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::senseAD::rscl::idl::SupportedHeteroChannel>() {
  return ::senseAD::rscl::idl::SupportedHeteroChannel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5frscl_2fidl_2fhetero_5fchannel_5fconfig_2eproto
