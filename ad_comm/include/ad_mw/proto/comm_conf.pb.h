// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_mw/proto/comm_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fcomm_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fcomm_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ad_mw/proto/qos_profile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5fmw_2fproto_2fcomm_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5fmw_2fproto_2fcomm_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto;
namespace senseAD {
namespace mw {
namespace proto {
class ClientConf;
class ClientConfDefaultTypeInternal;
extern ClientConfDefaultTypeInternal _ClientConf_default_instance_;
class PublisherConf;
class PublisherConfDefaultTypeInternal;
extern PublisherConfDefaultTypeInternal _PublisherConf_default_instance_;
class ServiceConf;
class ServiceConfDefaultTypeInternal;
extern ServiceConfDefaultTypeInternal _ServiceConf_default_instance_;
class SubscriberConf;
class SubscriberConfDefaultTypeInternal;
extern SubscriberConfDefaultTypeInternal _SubscriberConf_default_instance_;
}  // namespace proto
}  // namespace mw
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::mw::proto::ClientConf* Arena::CreateMaybeMessage<::senseAD::mw::proto::ClientConf>(Arena*);
template<> ::senseAD::mw::proto::PublisherConf* Arena::CreateMaybeMessage<::senseAD::mw::proto::PublisherConf>(Arena*);
template<> ::senseAD::mw::proto::ServiceConf* Arena::CreateMaybeMessage<::senseAD::mw::proto::ServiceConf>(Arena*);
template<> ::senseAD::mw::proto::SubscriberConf* Arena::CreateMaybeMessage<::senseAD::mw::proto::SubscriberConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace mw {
namespace proto {

// ===================================================================

class PublisherConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.PublisherConf) */ {
 public:
  inline PublisherConf() : PublisherConf(nullptr) {}
  virtual ~PublisherConf();

  PublisherConf(const PublisherConf& from);
  PublisherConf(PublisherConf&& from) noexcept
    : PublisherConf() {
    *this = ::std::move(from);
  }

  inline PublisherConf& operator=(const PublisherConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublisherConf& operator=(PublisherConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublisherConf& default_instance();

  static inline const PublisherConf* internal_default_instance() {
    return reinterpret_cast<const PublisherConf*>(
               &_PublisherConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublisherConf& a, PublisherConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PublisherConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublisherConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublisherConf* New() const final {
    return CreateMaybeMessage<PublisherConf>(nullptr);
  }

  PublisherConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublisherConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublisherConf& from);
  void MergeFrom(const PublisherConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublisherConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.PublisherConf";
  }
  protected:
  explicit PublisherConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kMsgTypeFieldNumber = 3,
    kMsgDescriptorFieldNumber = 4,
    kQosProfileFieldNumber = 2,
    kMsgSerializedMaxSizeFieldNumber = 5,
    kMaxReaderFieldNumber = 6,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional string msg_type = 3;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  const std::string& msg_type() const;
  void set_msg_type(const std::string& value);
  void set_msg_type(std::string&& value);
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  std::string* mutable_msg_type();
  std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // optional string msg_descriptor = 4;
  bool has_msg_descriptor() const;
  private:
  bool _internal_has_msg_descriptor() const;
  public:
  void clear_msg_descriptor();
  const std::string& msg_descriptor() const;
  void set_msg_descriptor(const std::string& value);
  void set_msg_descriptor(std::string&& value);
  void set_msg_descriptor(const char* value);
  void set_msg_descriptor(const char* value, size_t size);
  std::string* mutable_msg_descriptor();
  std::string* release_msg_descriptor();
  void set_allocated_msg_descriptor(std::string* msg_descriptor);
  private:
  const std::string& _internal_msg_descriptor() const;
  void _internal_set_msg_descriptor(const std::string& value);
  std::string* _internal_mutable_msg_descriptor();
  public:

  // optional .senseAD.mw.proto.QosProfile qos_profile = 2;
  bool has_qos_profile() const;
  private:
  bool _internal_has_qos_profile() const;
  public:
  void clear_qos_profile();
  const ::senseAD::mw::proto::QosProfile& qos_profile() const;
  ::senseAD::mw::proto::QosProfile* release_qos_profile();
  ::senseAD::mw::proto::QosProfile* mutable_qos_profile();
  void set_allocated_qos_profile(::senseAD::mw::proto::QosProfile* qos_profile);
  private:
  const ::senseAD::mw::proto::QosProfile& _internal_qos_profile() const;
  ::senseAD::mw::proto::QosProfile* _internal_mutable_qos_profile();
  public:
  void unsafe_arena_set_allocated_qos_profile(
      ::senseAD::mw::proto::QosProfile* qos_profile);
  ::senseAD::mw::proto::QosProfile* unsafe_arena_release_qos_profile();

  // optional uint32 msg_serialized_max_size = 5;
  bool has_msg_serialized_max_size() const;
  private:
  bool _internal_has_msg_serialized_max_size() const;
  public:
  void clear_msg_serialized_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_serialized_max_size() const;
  void set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_serialized_max_size() const;
  void _internal_set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_reader = 6;
  bool has_max_reader() const;
  private:
  bool _internal_has_max_reader() const;
  public:
  void clear_max_reader();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_reader() const;
  void set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_reader() const;
  void _internal_set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.PublisherConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_descriptor_;
  ::senseAD::mw::proto::QosProfile* qos_profile_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_serialized_max_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_reader_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fcomm_5fconf_2eproto;
};
// -------------------------------------------------------------------

class SubscriberConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.SubscriberConf) */ {
 public:
  inline SubscriberConf() : SubscriberConf(nullptr) {}
  virtual ~SubscriberConf();

  SubscriberConf(const SubscriberConf& from);
  SubscriberConf(SubscriberConf&& from) noexcept
    : SubscriberConf() {
    *this = ::std::move(from);
  }

  inline SubscriberConf& operator=(const SubscriberConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriberConf& operator=(SubscriberConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscriberConf& default_instance();

  static inline const SubscriberConf* internal_default_instance() {
    return reinterpret_cast<const SubscriberConf*>(
               &_SubscriberConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubscriberConf& a, SubscriberConf& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriberConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriberConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscriberConf* New() const final {
    return CreateMaybeMessage<SubscriberConf>(nullptr);
  }

  SubscriberConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscriberConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscriberConf& from);
  void MergeFrom(const SubscriberConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriberConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.SubscriberConf";
  }
  protected:
  explicit SubscriberConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kQosProfileFieldNumber = 2,
    kMsgSerializedMaxSizeFieldNumber = 3,
    kMaxReaderFieldNumber = 4,
  };
  // required string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional .senseAD.mw.proto.QosProfile qos_profile = 2;
  bool has_qos_profile() const;
  private:
  bool _internal_has_qos_profile() const;
  public:
  void clear_qos_profile();
  const ::senseAD::mw::proto::QosProfile& qos_profile() const;
  ::senseAD::mw::proto::QosProfile* release_qos_profile();
  ::senseAD::mw::proto::QosProfile* mutable_qos_profile();
  void set_allocated_qos_profile(::senseAD::mw::proto::QosProfile* qos_profile);
  private:
  const ::senseAD::mw::proto::QosProfile& _internal_qos_profile() const;
  ::senseAD::mw::proto::QosProfile* _internal_mutable_qos_profile();
  public:
  void unsafe_arena_set_allocated_qos_profile(
      ::senseAD::mw::proto::QosProfile* qos_profile);
  ::senseAD::mw::proto::QosProfile* unsafe_arena_release_qos_profile();

  // optional uint32 msg_serialized_max_size = 3;
  bool has_msg_serialized_max_size() const;
  private:
  bool _internal_has_msg_serialized_max_size() const;
  public:
  void clear_msg_serialized_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_serialized_max_size() const;
  void set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_serialized_max_size() const;
  void _internal_set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_reader = 4;
  bool has_max_reader() const;
  private:
  bool _internal_has_max_reader() const;
  public:
  void clear_max_reader();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_reader() const;
  void set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_reader() const;
  void _internal_set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.SubscriberConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::senseAD::mw::proto::QosProfile* qos_profile_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_serialized_max_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_reader_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fcomm_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ServiceConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.ServiceConf) */ {
 public:
  inline ServiceConf() : ServiceConf(nullptr) {}
  virtual ~ServiceConf();

  ServiceConf(const ServiceConf& from);
  ServiceConf(ServiceConf&& from) noexcept
    : ServiceConf() {
    *this = ::std::move(from);
  }

  inline ServiceConf& operator=(const ServiceConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConf& operator=(ServiceConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceConf& default_instance();

  static inline const ServiceConf* internal_default_instance() {
    return reinterpret_cast<const ServiceConf*>(
               &_ServiceConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceConf& a, ServiceConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceConf* New() const final {
    return CreateMaybeMessage<ServiceConf>(nullptr);
  }

  ServiceConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceConf& from);
  void MergeFrom(const ServiceConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.ServiceConf";
  }
  protected:
  explicit ServiceConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kThreadNumFieldNumber = 2,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // optional uint64 thread_num = 2 [default = 1];
  bool has_thread_num() const;
  private:
  bool _internal_has_thread_num() const;
  public:
  void clear_thread_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 thread_num() const;
  void set_thread_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_thread_num() const;
  void _internal_set_thread_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.ServiceConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 thread_num_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fcomm_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ClientConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.ClientConf) */ {
 public:
  inline ClientConf() : ClientConf(nullptr) {}
  virtual ~ClientConf();

  ClientConf(const ClientConf& from);
  ClientConf(ClientConf&& from) noexcept
    : ClientConf() {
    *this = ::std::move(from);
  }

  inline ClientConf& operator=(const ClientConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConf& operator=(ClientConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientConf& default_instance();

  static inline const ClientConf* internal_default_instance() {
    return reinterpret_cast<const ClientConf*>(
               &_ClientConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientConf& a, ClientConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientConf* New() const final {
    return CreateMaybeMessage<ClientConf>(nullptr);
  }

  ClientConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientConf& from);
  void MergeFrom(const ClientConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.ClientConf";
  }
  protected:
  explicit ClientConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fcomm_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // required string service_name = 1;
  bool has_service_name() const;
  private:
  bool _internal_has_service_name() const;
  public:
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.ClientConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fcomm_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublisherConf

// required string channel_name = 1;
inline bool PublisherConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublisherConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void PublisherConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublisherConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.channel_name)
  return _internal_channel_name();
}
inline void PublisherConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.PublisherConf.channel_name)
}
inline std::string* PublisherConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.PublisherConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& PublisherConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void PublisherConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublisherConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.PublisherConf.channel_name)
}
inline void PublisherConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.PublisherConf.channel_name)
}
inline void PublisherConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.PublisherConf.channel_name)
}
inline std::string* PublisherConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublisherConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.PublisherConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublisherConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.PublisherConf.channel_name)
}

// optional .senseAD.mw.proto.QosProfile qos_profile = 2;
inline bool PublisherConf::_internal_has_qos_profile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || qos_profile_ != nullptr);
  return value;
}
inline bool PublisherConf::has_qos_profile() const {
  return _internal_has_qos_profile();
}
inline const ::senseAD::mw::proto::QosProfile& PublisherConf::_internal_qos_profile() const {
  const ::senseAD::mw::proto::QosProfile* p = qos_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::mw::proto::QosProfile&>(
      ::senseAD::mw::proto::_QosProfile_default_instance_);
}
inline const ::senseAD::mw::proto::QosProfile& PublisherConf::qos_profile() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.qos_profile)
  return _internal_qos_profile();
}
inline void PublisherConf::unsafe_arena_set_allocated_qos_profile(
    ::senseAD::mw::proto::QosProfile* qos_profile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  qos_profile_ = qos_profile;
  if (qos_profile) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.mw.proto.PublisherConf.qos_profile)
}
inline ::senseAD::mw::proto::QosProfile* PublisherConf::release_qos_profile() {
  _has_bits_[0] &= ~0x00000008u;
  ::senseAD::mw::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::mw::proto::QosProfile* PublisherConf::unsafe_arena_release_qos_profile() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.PublisherConf.qos_profile)
  _has_bits_[0] &= ~0x00000008u;
  ::senseAD::mw::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  return temp;
}
inline ::senseAD::mw::proto::QosProfile* PublisherConf::_internal_mutable_qos_profile() {
  _has_bits_[0] |= 0x00000008u;
  if (qos_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::mw::proto::QosProfile>(GetArena());
    qos_profile_ = p;
  }
  return qos_profile_;
}
inline ::senseAD::mw::proto::QosProfile* PublisherConf::mutable_qos_profile() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.PublisherConf.qos_profile)
  return _internal_mutable_qos_profile();
}
inline void PublisherConf::set_allocated_qos_profile(::senseAD::mw::proto::QosProfile* qos_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  if (qos_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile)->GetArena();
    if (message_arena != submessage_arena) {
      qos_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  qos_profile_ = qos_profile;
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.PublisherConf.qos_profile)
}

// optional string msg_type = 3;
inline bool PublisherConf::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublisherConf::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void PublisherConf::clear_msg_type() {
  msg_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublisherConf::msg_type() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.msg_type)
  return _internal_msg_type();
}
inline void PublisherConf::set_msg_type(const std::string& value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.PublisherConf.msg_type)
}
inline std::string* PublisherConf::mutable_msg_type() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.PublisherConf.msg_type)
  return _internal_mutable_msg_type();
}
inline const std::string& PublisherConf::_internal_msg_type() const {
  return msg_type_.Get();
}
inline void PublisherConf::_internal_set_msg_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublisherConf::set_msg_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.PublisherConf.msg_type)
}
inline void PublisherConf::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.PublisherConf.msg_type)
}
inline void PublisherConf::set_msg_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.PublisherConf.msg_type)
}
inline std::string* PublisherConf::_internal_mutable_msg_type() {
  _has_bits_[0] |= 0x00000002u;
  return msg_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublisherConf::release_msg_type() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.PublisherConf.msg_type)
  if (!_internal_has_msg_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return msg_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublisherConf::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.PublisherConf.msg_type)
}

// optional string msg_descriptor = 4;
inline bool PublisherConf::_internal_has_msg_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublisherConf::has_msg_descriptor() const {
  return _internal_has_msg_descriptor();
}
inline void PublisherConf::clear_msg_descriptor() {
  msg_descriptor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublisherConf::msg_descriptor() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.msg_descriptor)
  return _internal_msg_descriptor();
}
inline void PublisherConf::set_msg_descriptor(const std::string& value) {
  _internal_set_msg_descriptor(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.PublisherConf.msg_descriptor)
}
inline std::string* PublisherConf::mutable_msg_descriptor() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.PublisherConf.msg_descriptor)
  return _internal_mutable_msg_descriptor();
}
inline const std::string& PublisherConf::_internal_msg_descriptor() const {
  return msg_descriptor_.Get();
}
inline void PublisherConf::_internal_set_msg_descriptor(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublisherConf::set_msg_descriptor(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  msg_descriptor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.PublisherConf.msg_descriptor)
}
inline void PublisherConf::set_msg_descriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  msg_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.PublisherConf.msg_descriptor)
}
inline void PublisherConf::set_msg_descriptor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  msg_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.PublisherConf.msg_descriptor)
}
inline std::string* PublisherConf::_internal_mutable_msg_descriptor() {
  _has_bits_[0] |= 0x00000004u;
  return msg_descriptor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublisherConf::release_msg_descriptor() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.PublisherConf.msg_descriptor)
  if (!_internal_has_msg_descriptor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return msg_descriptor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublisherConf::set_allocated_msg_descriptor(std::string* msg_descriptor) {
  if (msg_descriptor != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_descriptor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_descriptor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.PublisherConf.msg_descriptor)
}

// optional uint32 msg_serialized_max_size = 5;
inline bool PublisherConf::_internal_has_msg_serialized_max_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublisherConf::has_msg_serialized_max_size() const {
  return _internal_has_msg_serialized_max_size();
}
inline void PublisherConf::clear_msg_serialized_max_size() {
  msg_serialized_max_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublisherConf::_internal_msg_serialized_max_size() const {
  return msg_serialized_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublisherConf::msg_serialized_max_size() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.msg_serialized_max_size)
  return _internal_msg_serialized_max_size();
}
inline void PublisherConf::_internal_set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  msg_serialized_max_size_ = value;
}
inline void PublisherConf::set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_serialized_max_size(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.PublisherConf.msg_serialized_max_size)
}

// optional uint32 max_reader = 6;
inline bool PublisherConf::_internal_has_max_reader() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublisherConf::has_max_reader() const {
  return _internal_has_max_reader();
}
inline void PublisherConf::clear_max_reader() {
  max_reader_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublisherConf::_internal_max_reader() const {
  return max_reader_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublisherConf::max_reader() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.PublisherConf.max_reader)
  return _internal_max_reader();
}
inline void PublisherConf::_internal_set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_reader_ = value;
}
inline void PublisherConf::set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_reader(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.PublisherConf.max_reader)
}

// -------------------------------------------------------------------

// SubscriberConf

// required string channel_name = 1;
inline bool SubscriberConf::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubscriberConf::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void SubscriberConf::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscriberConf::channel_name() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.SubscriberConf.channel_name)
  return _internal_channel_name();
}
inline void SubscriberConf::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.SubscriberConf.channel_name)
}
inline std::string* SubscriberConf::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.SubscriberConf.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& SubscriberConf::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void SubscriberConf::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubscriberConf::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.SubscriberConf.channel_name)
}
inline void SubscriberConf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.SubscriberConf.channel_name)
}
inline void SubscriberConf::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.SubscriberConf.channel_name)
}
inline std::string* SubscriberConf::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubscriberConf::release_channel_name() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.SubscriberConf.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscriberConf::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.SubscriberConf.channel_name)
}

// optional .senseAD.mw.proto.QosProfile qos_profile = 2;
inline bool SubscriberConf::_internal_has_qos_profile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || qos_profile_ != nullptr);
  return value;
}
inline bool SubscriberConf::has_qos_profile() const {
  return _internal_has_qos_profile();
}
inline const ::senseAD::mw::proto::QosProfile& SubscriberConf::_internal_qos_profile() const {
  const ::senseAD::mw::proto::QosProfile* p = qos_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::mw::proto::QosProfile&>(
      ::senseAD::mw::proto::_QosProfile_default_instance_);
}
inline const ::senseAD::mw::proto::QosProfile& SubscriberConf::qos_profile() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.SubscriberConf.qos_profile)
  return _internal_qos_profile();
}
inline void SubscriberConf::unsafe_arena_set_allocated_qos_profile(
    ::senseAD::mw::proto::QosProfile* qos_profile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  qos_profile_ = qos_profile;
  if (qos_profile) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.mw.proto.SubscriberConf.qos_profile)
}
inline ::senseAD::mw::proto::QosProfile* SubscriberConf::release_qos_profile() {
  _has_bits_[0] &= ~0x00000002u;
  ::senseAD::mw::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::mw::proto::QosProfile* SubscriberConf::unsafe_arena_release_qos_profile() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.SubscriberConf.qos_profile)
  _has_bits_[0] &= ~0x00000002u;
  ::senseAD::mw::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  return temp;
}
inline ::senseAD::mw::proto::QosProfile* SubscriberConf::_internal_mutable_qos_profile() {
  _has_bits_[0] |= 0x00000002u;
  if (qos_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::mw::proto::QosProfile>(GetArena());
    qos_profile_ = p;
  }
  return qos_profile_;
}
inline ::senseAD::mw::proto::QosProfile* SubscriberConf::mutable_qos_profile() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.SubscriberConf.qos_profile)
  return _internal_mutable_qos_profile();
}
inline void SubscriberConf::set_allocated_qos_profile(::senseAD::mw::proto::QosProfile* qos_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  if (qos_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile)->GetArena();
    if (message_arena != submessage_arena) {
      qos_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qos_profile_ = qos_profile;
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.SubscriberConf.qos_profile)
}

// optional uint32 msg_serialized_max_size = 3;
inline bool SubscriberConf::_internal_has_msg_serialized_max_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubscriberConf::has_msg_serialized_max_size() const {
  return _internal_has_msg_serialized_max_size();
}
inline void SubscriberConf::clear_msg_serialized_max_size() {
  msg_serialized_max_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberConf::_internal_msg_serialized_max_size() const {
  return msg_serialized_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberConf::msg_serialized_max_size() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.SubscriberConf.msg_serialized_max_size)
  return _internal_msg_serialized_max_size();
}
inline void SubscriberConf::_internal_set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  msg_serialized_max_size_ = value;
}
inline void SubscriberConf::set_msg_serialized_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_serialized_max_size(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.SubscriberConf.msg_serialized_max_size)
}

// optional uint32 max_reader = 4;
inline bool SubscriberConf::_internal_has_max_reader() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SubscriberConf::has_max_reader() const {
  return _internal_has_max_reader();
}
inline void SubscriberConf::clear_max_reader() {
  max_reader_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberConf::_internal_max_reader() const {
  return max_reader_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SubscriberConf::max_reader() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.SubscriberConf.max_reader)
  return _internal_max_reader();
}
inline void SubscriberConf::_internal_set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_reader_ = value;
}
inline void SubscriberConf::set_max_reader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_reader(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.SubscriberConf.max_reader)
}

// -------------------------------------------------------------------

// ServiceConf

// required string service_name = 1;
inline bool ServiceConf::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceConf::has_service_name() const {
  return _internal_has_service_name();
}
inline void ServiceConf::clear_service_name() {
  service_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceConf::service_name() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.ServiceConf.service_name)
  return _internal_service_name();
}
inline void ServiceConf::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.ServiceConf.service_name)
}
inline std::string* ServiceConf::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.ServiceConf.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ServiceConf::_internal_service_name() const {
  return service_name_.Get();
}
inline void ServiceConf::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceConf::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.ServiceConf.service_name)
}
inline void ServiceConf::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.ServiceConf.service_name)
}
inline void ServiceConf::set_service_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.ServiceConf.service_name)
}
inline std::string* ServiceConf::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceConf::release_service_name() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.ServiceConf.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceConf::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.ServiceConf.service_name)
}

// optional uint64 thread_num = 2 [default = 1];
inline bool ServiceConf::_internal_has_thread_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceConf::has_thread_num() const {
  return _internal_has_thread_num();
}
inline void ServiceConf::clear_thread_num() {
  thread_num_ = PROTOBUF_ULONGLONG(1);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceConf::_internal_thread_num() const {
  return thread_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceConf::thread_num() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.ServiceConf.thread_num)
  return _internal_thread_num();
}
inline void ServiceConf::_internal_set_thread_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  thread_num_ = value;
}
inline void ServiceConf::set_thread_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_thread_num(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.ServiceConf.thread_num)
}

// -------------------------------------------------------------------

// ClientConf

// required string service_name = 1;
inline bool ClientConf::_internal_has_service_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientConf::has_service_name() const {
  return _internal_has_service_name();
}
inline void ClientConf::clear_service_name() {
  service_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientConf::service_name() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.ClientConf.service_name)
  return _internal_service_name();
}
inline void ClientConf::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.ClientConf.service_name)
}
inline std::string* ClientConf::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.ClientConf.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ClientConf::_internal_service_name() const {
  return service_name_.Get();
}
inline void ClientConf::_internal_set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientConf::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.ClientConf.service_name)
}
inline void ClientConf::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.ClientConf.service_name)
}
inline void ClientConf::set_service_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.ClientConf.service_name)
}
inline std::string* ClientConf::_internal_mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientConf::release_service_name() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.ClientConf.service_name)
  if (!_internal_has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientConf::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.ClientConf.service_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mw
}  // namespace senseAD

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fcomm_5fconf_2eproto
