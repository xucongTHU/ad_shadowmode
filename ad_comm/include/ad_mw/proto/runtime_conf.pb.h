// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_mw/proto/runtime_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fruntime_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fruntime_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ad_5fmw_2fproto_2fruntime_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5fmw_2fproto_2fruntime_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto;
namespace senseAD {
namespace mw {
namespace proto {
class FeatureSupport;
class FeatureSupportDefaultTypeInternal;
extern FeatureSupportDefaultTypeInternal _FeatureSupport_default_instance_;
class RoutineConfig;
class RoutineConfigDefaultTypeInternal;
extern RoutineConfigDefaultTypeInternal _RoutineConfig_default_instance_;
class RuntimeConfig;
class RuntimeConfigDefaultTypeInternal;
extern RuntimeConfigDefaultTypeInternal _RuntimeConfig_default_instance_;
class ShmConfig;
class ShmConfigDefaultTypeInternal;
extern ShmConfigDefaultTypeInternal _ShmConfig_default_instance_;
}  // namespace proto
}  // namespace mw
}  // namespace senseAD
PROTOBUF_NAMESPACE_OPEN
template<> ::senseAD::mw::proto::FeatureSupport* Arena::CreateMaybeMessage<::senseAD::mw::proto::FeatureSupport>(Arena*);
template<> ::senseAD::mw::proto::RoutineConfig* Arena::CreateMaybeMessage<::senseAD::mw::proto::RoutineConfig>(Arena*);
template<> ::senseAD::mw::proto::RuntimeConfig* Arena::CreateMaybeMessage<::senseAD::mw::proto::RuntimeConfig>(Arena*);
template<> ::senseAD::mw::proto::ShmConfig* Arena::CreateMaybeMessage<::senseAD::mw::proto::ShmConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senseAD {
namespace mw {
namespace proto {

// ===================================================================

class RoutineConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.RoutineConfig) */ {
 public:
  inline RoutineConfig() : RoutineConfig(nullptr) {}
  virtual ~RoutineConfig();

  RoutineConfig(const RoutineConfig& from);
  RoutineConfig(RoutineConfig&& from) noexcept
    : RoutineConfig() {
    *this = ::std::move(from);
  }

  inline RoutineConfig& operator=(const RoutineConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutineConfig& operator=(RoutineConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutineConfig& default_instance();

  static inline const RoutineConfig* internal_default_instance() {
    return reinterpret_cast<const RoutineConfig*>(
               &_RoutineConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutineConfig& a, RoutineConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutineConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutineConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutineConfig* New() const final {
    return CreateMaybeMessage<RoutineConfig>(nullptr);
  }

  RoutineConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutineConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutineConfig& from);
  void MergeFrom(const RoutineConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutineConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.RoutineConfig";
  }
  protected:
  explicit RoutineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutineNumFieldNumber = 1,
    kDefaultProcNumFieldNumber = 2,
  };
  // optional uint32 routine_num = 1;
  bool has_routine_num() const;
  private:
  bool _internal_has_routine_num() const;
  public:
  void clear_routine_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num() const;
  void set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routine_num() const;
  void _internal_set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 default_proc_num = 2;
  bool has_default_proc_num() const;
  private:
  bool _internal_has_default_proc_num() const;
  public:
  void clear_default_proc_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num() const;
  void set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_proc_num() const;
  void _internal_set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.RoutineConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fruntime_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ShmConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.ShmConfig) */ {
 public:
  inline ShmConfig() : ShmConfig(nullptr) {}
  virtual ~ShmConfig();

  ShmConfig(const ShmConfig& from);
  ShmConfig(ShmConfig&& from) noexcept
    : ShmConfig() {
    *this = ::std::move(from);
  }

  inline ShmConfig& operator=(const ShmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShmConfig& operator=(ShmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShmConfig& default_instance();

  static inline const ShmConfig* internal_default_instance() {
    return reinterpret_cast<const ShmConfig*>(
               &_ShmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShmConfig& a, ShmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ShmConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShmConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShmConfig* New() const final {
    return CreateMaybeMessage<ShmConfig>(nullptr);
  }

  ShmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShmConfig& from);
  void MergeFrom(const ShmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.ShmConfig";
  }
  protected:
  explicit ShmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShmNotifyIntervalUsFieldNumber = 1,
  };
  // optional uint32 shm_notify_interval_us = 1 [default = 1000];
  bool has_shm_notify_interval_us() const;
  private:
  bool _internal_has_shm_notify_interval_us() const;
  public:
  void clear_shm_notify_interval_us();
  ::PROTOBUF_NAMESPACE_ID::uint32 shm_notify_interval_us() const;
  void set_shm_notify_interval_us(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shm_notify_interval_us() const;
  void _internal_set_shm_notify_interval_us(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.ShmConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shm_notify_interval_us_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fruntime_5fconf_2eproto;
};
// -------------------------------------------------------------------

class FeatureSupport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.FeatureSupport) */ {
 public:
  inline FeatureSupport() : FeatureSupport(nullptr) {}
  virtual ~FeatureSupport();

  FeatureSupport(const FeatureSupport& from);
  FeatureSupport(FeatureSupport&& from) noexcept
    : FeatureSupport() {
    *this = ::std::move(from);
  }

  inline FeatureSupport& operator=(const FeatureSupport& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureSupport& operator=(FeatureSupport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureSupport& default_instance();

  static inline const FeatureSupport* internal_default_instance() {
    return reinterpret_cast<const FeatureSupport*>(
               &_FeatureSupport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeatureSupport& a, FeatureSupport& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureSupport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureSupport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureSupport* New() const final {
    return CreateMaybeMessage<FeatureSupport>(nullptr);
  }

  FeatureSupport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureSupport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureSupport& from);
  void MergeFrom(const FeatureSupport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureSupport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.FeatureSupport";
  }
  protected:
  explicit FeatureSupport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalChannelFieldNumber = 1,
    kSimTimeFieldNumber = 2,
  };
  // optional bool internal_channel = 1 [default = true];
  bool has_internal_channel() const;
  private:
  bool _internal_has_internal_channel() const;
  public:
  void clear_internal_channel();
  bool internal_channel() const;
  void set_internal_channel(bool value);
  private:
  bool _internal_internal_channel() const;
  void _internal_set_internal_channel(bool value);
  public:

  // optional bool sim_time = 2 [default = true];
  bool has_sim_time() const;
  private:
  bool _internal_has_sim_time() const;
  public:
  void clear_sim_time();
  bool sim_time() const;
  void set_sim_time(bool value);
  private:
  bool _internal_sim_time() const;
  void _internal_set_sim_time(bool value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.FeatureSupport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool internal_channel_;
  bool sim_time_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fruntime_5fconf_2eproto;
};
// -------------------------------------------------------------------

class RuntimeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senseAD.mw.proto.RuntimeConfig) */ {
 public:
  inline RuntimeConfig() : RuntimeConfig(nullptr) {}
  virtual ~RuntimeConfig();

  RuntimeConfig(const RuntimeConfig& from);
  RuntimeConfig(RuntimeConfig&& from) noexcept
    : RuntimeConfig() {
    *this = ::std::move(from);
  }

  inline RuntimeConfig& operator=(const RuntimeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeConfig& operator=(RuntimeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuntimeConfig& default_instance();

  static inline const RuntimeConfig* internal_default_instance() {
    return reinterpret_cast<const RuntimeConfig*>(
               &_RuntimeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuntimeConfig& a, RuntimeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeConfig* New() const final {
    return CreateMaybeMessage<RuntimeConfig>(nullptr);
  }

  RuntimeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuntimeConfig& from);
  void MergeFrom(const RuntimeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senseAD.mw.proto.RuntimeConfig";
  }
  protected:
  explicit RuntimeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto);
    return ::descriptor_table_ad_5fmw_2fproto_2fruntime_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 1,
    kConfigurationFieldNumber = 6,
    kSenseautoConfigDirFieldNumber = 8,
    kRoutineConfFieldNumber = 2,
    kShmConfFieldNumber = 3,
    kFeatureFieldNumber = 7,
    kDebugModeFieldNumber = 4,
    kUnittestModeFieldNumber = 5,
  };
  // optional string process_name = 1;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // optional string configuration = 6 [default = "default.json"];
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const std::string& configuration() const;
  void set_configuration(const std::string& value);
  void set_configuration(std::string&& value);
  void set_configuration(const char* value);
  void set_configuration(const char* value, size_t size);
  std::string* mutable_configuration();
  std::string* release_configuration();
  void set_allocated_configuration(std::string* configuration);
  private:
  const std::string& _internal_configuration() const;
  void _internal_set_configuration(const std::string& value);
  std::string* _internal_mutable_configuration();
  public:

  // optional string senseauto_config_dir = 8;
  bool has_senseauto_config_dir() const;
  private:
  bool _internal_has_senseauto_config_dir() const;
  public:
  void clear_senseauto_config_dir();
  const std::string& senseauto_config_dir() const;
  void set_senseauto_config_dir(const std::string& value);
  void set_senseauto_config_dir(std::string&& value);
  void set_senseauto_config_dir(const char* value);
  void set_senseauto_config_dir(const char* value, size_t size);
  std::string* mutable_senseauto_config_dir();
  std::string* release_senseauto_config_dir();
  void set_allocated_senseauto_config_dir(std::string* senseauto_config_dir);
  private:
  const std::string& _internal_senseauto_config_dir() const;
  void _internal_set_senseauto_config_dir(const std::string& value);
  std::string* _internal_mutable_senseauto_config_dir();
  public:

  // optional .senseAD.mw.proto.RoutineConfig routine_conf = 2;
  bool has_routine_conf() const;
  private:
  bool _internal_has_routine_conf() const;
  public:
  void clear_routine_conf();
  const ::senseAD::mw::proto::RoutineConfig& routine_conf() const;
  ::senseAD::mw::proto::RoutineConfig* release_routine_conf();
  ::senseAD::mw::proto::RoutineConfig* mutable_routine_conf();
  void set_allocated_routine_conf(::senseAD::mw::proto::RoutineConfig* routine_conf);
  private:
  const ::senseAD::mw::proto::RoutineConfig& _internal_routine_conf() const;
  ::senseAD::mw::proto::RoutineConfig* _internal_mutable_routine_conf();
  public:
  void unsafe_arena_set_allocated_routine_conf(
      ::senseAD::mw::proto::RoutineConfig* routine_conf);
  ::senseAD::mw::proto::RoutineConfig* unsafe_arena_release_routine_conf();

  // optional .senseAD.mw.proto.ShmConfig shm_conf = 3;
  bool has_shm_conf() const;
  private:
  bool _internal_has_shm_conf() const;
  public:
  void clear_shm_conf();
  const ::senseAD::mw::proto::ShmConfig& shm_conf() const;
  ::senseAD::mw::proto::ShmConfig* release_shm_conf();
  ::senseAD::mw::proto::ShmConfig* mutable_shm_conf();
  void set_allocated_shm_conf(::senseAD::mw::proto::ShmConfig* shm_conf);
  private:
  const ::senseAD::mw::proto::ShmConfig& _internal_shm_conf() const;
  ::senseAD::mw::proto::ShmConfig* _internal_mutable_shm_conf();
  public:
  void unsafe_arena_set_allocated_shm_conf(
      ::senseAD::mw::proto::ShmConfig* shm_conf);
  ::senseAD::mw::proto::ShmConfig* unsafe_arena_release_shm_conf();

  // optional .senseAD.mw.proto.FeatureSupport feature = 7;
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::senseAD::mw::proto::FeatureSupport& feature() const;
  ::senseAD::mw::proto::FeatureSupport* release_feature();
  ::senseAD::mw::proto::FeatureSupport* mutable_feature();
  void set_allocated_feature(::senseAD::mw::proto::FeatureSupport* feature);
  private:
  const ::senseAD::mw::proto::FeatureSupport& _internal_feature() const;
  ::senseAD::mw::proto::FeatureSupport* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::senseAD::mw::proto::FeatureSupport* feature);
  ::senseAD::mw::proto::FeatureSupport* unsafe_arena_release_feature();

  // optional bool debug_mode = 4 [default = false];
  bool has_debug_mode() const;
  private:
  bool _internal_has_debug_mode() const;
  public:
  void clear_debug_mode();
  bool debug_mode() const;
  void set_debug_mode(bool value);
  private:
  bool _internal_debug_mode() const;
  void _internal_set_debug_mode(bool value);
  public:

  // optional bool unittest_mode = 5 [default = false];
  bool has_unittest_mode() const;
  private:
  bool _internal_has_unittest_mode() const;
  public:
  void clear_unittest_mode();
  bool unittest_mode() const;
  void set_unittest_mode(bool value);
  private:
  bool _internal_unittest_mode() const;
  void _internal_set_unittest_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:senseAD.mw.proto.RuntimeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senseauto_config_dir_;
  ::senseAD::mw::proto::RoutineConfig* routine_conf_;
  ::senseAD::mw::proto::ShmConfig* shm_conf_;
  ::senseAD::mw::proto::FeatureSupport* feature_;
  bool debug_mode_;
  bool unittest_mode_;
  friend struct ::TableStruct_ad_5fmw_2fproto_2fruntime_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutineConfig

// optional uint32 routine_num = 1;
inline bool RoutineConfig::_internal_has_routine_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoutineConfig::has_routine_num() const {
  return _internal_has_routine_num();
}
inline void RoutineConfig::clear_routine_num() {
  routine_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutineConfig::_internal_routine_num() const {
  return routine_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutineConfig::routine_num() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RoutineConfig.routine_num)
  return _internal_routine_num();
}
inline void RoutineConfig::_internal_set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  routine_num_ = value;
}
inline void RoutineConfig::set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routine_num(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RoutineConfig.routine_num)
}

// optional uint32 default_proc_num = 2;
inline bool RoutineConfig::_internal_has_default_proc_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoutineConfig::has_default_proc_num() const {
  return _internal_has_default_proc_num();
}
inline void RoutineConfig::clear_default_proc_num() {
  default_proc_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutineConfig::_internal_default_proc_num() const {
  return default_proc_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutineConfig::default_proc_num() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RoutineConfig.default_proc_num)
  return _internal_default_proc_num();
}
inline void RoutineConfig::_internal_set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  default_proc_num_ = value;
}
inline void RoutineConfig::set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_proc_num(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RoutineConfig.default_proc_num)
}

// -------------------------------------------------------------------

// ShmConfig

// optional uint32 shm_notify_interval_us = 1 [default = 1000];
inline bool ShmConfig::_internal_has_shm_notify_interval_us() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShmConfig::has_shm_notify_interval_us() const {
  return _internal_has_shm_notify_interval_us();
}
inline void ShmConfig::clear_shm_notify_interval_us() {
  shm_notify_interval_us_ = 1000u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShmConfig::_internal_shm_notify_interval_us() const {
  return shm_notify_interval_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShmConfig::shm_notify_interval_us() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.ShmConfig.shm_notify_interval_us)
  return _internal_shm_notify_interval_us();
}
inline void ShmConfig::_internal_set_shm_notify_interval_us(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  shm_notify_interval_us_ = value;
}
inline void ShmConfig::set_shm_notify_interval_us(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shm_notify_interval_us(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.ShmConfig.shm_notify_interval_us)
}

// -------------------------------------------------------------------

// FeatureSupport

// optional bool internal_channel = 1 [default = true];
inline bool FeatureSupport::_internal_has_internal_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureSupport::has_internal_channel() const {
  return _internal_has_internal_channel();
}
inline void FeatureSupport::clear_internal_channel() {
  internal_channel_ = true;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FeatureSupport::_internal_internal_channel() const {
  return internal_channel_;
}
inline bool FeatureSupport::internal_channel() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.FeatureSupport.internal_channel)
  return _internal_internal_channel();
}
inline void FeatureSupport::_internal_set_internal_channel(bool value) {
  _has_bits_[0] |= 0x00000001u;
  internal_channel_ = value;
}
inline void FeatureSupport::set_internal_channel(bool value) {
  _internal_set_internal_channel(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.FeatureSupport.internal_channel)
}

// optional bool sim_time = 2 [default = true];
inline bool FeatureSupport::_internal_has_sim_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureSupport::has_sim_time() const {
  return _internal_has_sim_time();
}
inline void FeatureSupport::clear_sim_time() {
  sim_time_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FeatureSupport::_internal_sim_time() const {
  return sim_time_;
}
inline bool FeatureSupport::sim_time() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.FeatureSupport.sim_time)
  return _internal_sim_time();
}
inline void FeatureSupport::_internal_set_sim_time(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sim_time_ = value;
}
inline void FeatureSupport::set_sim_time(bool value) {
  _internal_set_sim_time(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.FeatureSupport.sim_time)
}

// -------------------------------------------------------------------

// RuntimeConfig

// optional string process_name = 1;
inline bool RuntimeConfig::_internal_has_process_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuntimeConfig::has_process_name() const {
  return _internal_has_process_name();
}
inline void RuntimeConfig::clear_process_name() {
  process_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RuntimeConfig::process_name() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.process_name)
  return _internal_process_name();
}
inline void RuntimeConfig::set_process_name(const std::string& value) {
  _internal_set_process_name(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RuntimeConfig.process_name)
}
inline std::string* RuntimeConfig::mutable_process_name() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.process_name)
  return _internal_mutable_process_name();
}
inline const std::string& RuntimeConfig::_internal_process_name() const {
  return process_name_.Get();
}
inline void RuntimeConfig::_internal_set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuntimeConfig::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.RuntimeConfig.process_name)
}
inline void RuntimeConfig::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.RuntimeConfig.process_name)
}
inline void RuntimeConfig::set_process_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.RuntimeConfig.process_name)
}
inline std::string* RuntimeConfig::_internal_mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  return process_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuntimeConfig::release_process_name() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeConfig::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.process_name)
}

// optional .senseAD.mw.proto.RoutineConfig routine_conf = 2;
inline bool RuntimeConfig::_internal_has_routine_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || routine_conf_ != nullptr);
  return value;
}
inline bool RuntimeConfig::has_routine_conf() const {
  return _internal_has_routine_conf();
}
inline void RuntimeConfig::clear_routine_conf() {
  if (routine_conf_ != nullptr) routine_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::senseAD::mw::proto::RoutineConfig& RuntimeConfig::_internal_routine_conf() const {
  const ::senseAD::mw::proto::RoutineConfig* p = routine_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::mw::proto::RoutineConfig&>(
      ::senseAD::mw::proto::_RoutineConfig_default_instance_);
}
inline const ::senseAD::mw::proto::RoutineConfig& RuntimeConfig::routine_conf() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.routine_conf)
  return _internal_routine_conf();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_routine_conf(
    ::senseAD::mw::proto::RoutineConfig* routine_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routine_conf_);
  }
  routine_conf_ = routine_conf;
  if (routine_conf) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.mw.proto.RuntimeConfig.routine_conf)
}
inline ::senseAD::mw::proto::RoutineConfig* RuntimeConfig::release_routine_conf() {
  _has_bits_[0] &= ~0x00000008u;
  ::senseAD::mw::proto::RoutineConfig* temp = routine_conf_;
  routine_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::mw::proto::RoutineConfig* RuntimeConfig::unsafe_arena_release_routine_conf() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.routine_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::senseAD::mw::proto::RoutineConfig* temp = routine_conf_;
  routine_conf_ = nullptr;
  return temp;
}
inline ::senseAD::mw::proto::RoutineConfig* RuntimeConfig::_internal_mutable_routine_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (routine_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::mw::proto::RoutineConfig>(GetArena());
    routine_conf_ = p;
  }
  return routine_conf_;
}
inline ::senseAD::mw::proto::RoutineConfig* RuntimeConfig::mutable_routine_conf() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.routine_conf)
  return _internal_mutable_routine_conf();
}
inline void RuntimeConfig::set_allocated_routine_conf(::senseAD::mw::proto::RoutineConfig* routine_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routine_conf_;
  }
  if (routine_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routine_conf);
    if (message_arena != submessage_arena) {
      routine_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routine_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  routine_conf_ = routine_conf;
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.routine_conf)
}

// optional .senseAD.mw.proto.ShmConfig shm_conf = 3;
inline bool RuntimeConfig::_internal_has_shm_conf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || shm_conf_ != nullptr);
  return value;
}
inline bool RuntimeConfig::has_shm_conf() const {
  return _internal_has_shm_conf();
}
inline void RuntimeConfig::clear_shm_conf() {
  if (shm_conf_ != nullptr) shm_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::senseAD::mw::proto::ShmConfig& RuntimeConfig::_internal_shm_conf() const {
  const ::senseAD::mw::proto::ShmConfig* p = shm_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::mw::proto::ShmConfig&>(
      ::senseAD::mw::proto::_ShmConfig_default_instance_);
}
inline const ::senseAD::mw::proto::ShmConfig& RuntimeConfig::shm_conf() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.shm_conf)
  return _internal_shm_conf();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_shm_conf(
    ::senseAD::mw::proto::ShmConfig* shm_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shm_conf_);
  }
  shm_conf_ = shm_conf;
  if (shm_conf) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.mw.proto.RuntimeConfig.shm_conf)
}
inline ::senseAD::mw::proto::ShmConfig* RuntimeConfig::release_shm_conf() {
  _has_bits_[0] &= ~0x00000010u;
  ::senseAD::mw::proto::ShmConfig* temp = shm_conf_;
  shm_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::mw::proto::ShmConfig* RuntimeConfig::unsafe_arena_release_shm_conf() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.shm_conf)
  _has_bits_[0] &= ~0x00000010u;
  ::senseAD::mw::proto::ShmConfig* temp = shm_conf_;
  shm_conf_ = nullptr;
  return temp;
}
inline ::senseAD::mw::proto::ShmConfig* RuntimeConfig::_internal_mutable_shm_conf() {
  _has_bits_[0] |= 0x00000010u;
  if (shm_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::mw::proto::ShmConfig>(GetArena());
    shm_conf_ = p;
  }
  return shm_conf_;
}
inline ::senseAD::mw::proto::ShmConfig* RuntimeConfig::mutable_shm_conf() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.shm_conf)
  return _internal_mutable_shm_conf();
}
inline void RuntimeConfig::set_allocated_shm_conf(::senseAD::mw::proto::ShmConfig* shm_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shm_conf_;
  }
  if (shm_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shm_conf);
    if (message_arena != submessage_arena) {
      shm_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shm_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  shm_conf_ = shm_conf;
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.shm_conf)
}

// optional bool debug_mode = 4 [default = false];
inline bool RuntimeConfig::_internal_has_debug_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RuntimeConfig::has_debug_mode() const {
  return _internal_has_debug_mode();
}
inline void RuntimeConfig::clear_debug_mode() {
  debug_mode_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RuntimeConfig::_internal_debug_mode() const {
  return debug_mode_;
}
inline bool RuntimeConfig::debug_mode() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.debug_mode)
  return _internal_debug_mode();
}
inline void RuntimeConfig::_internal_set_debug_mode(bool value) {
  _has_bits_[0] |= 0x00000040u;
  debug_mode_ = value;
}
inline void RuntimeConfig::set_debug_mode(bool value) {
  _internal_set_debug_mode(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RuntimeConfig.debug_mode)
}

// optional bool unittest_mode = 5 [default = false];
inline bool RuntimeConfig::_internal_has_unittest_mode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RuntimeConfig::has_unittest_mode() const {
  return _internal_has_unittest_mode();
}
inline void RuntimeConfig::clear_unittest_mode() {
  unittest_mode_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RuntimeConfig::_internal_unittest_mode() const {
  return unittest_mode_;
}
inline bool RuntimeConfig::unittest_mode() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.unittest_mode)
  return _internal_unittest_mode();
}
inline void RuntimeConfig::_internal_set_unittest_mode(bool value) {
  _has_bits_[0] |= 0x00000080u;
  unittest_mode_ = value;
}
inline void RuntimeConfig::set_unittest_mode(bool value) {
  _internal_set_unittest_mode(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RuntimeConfig.unittest_mode)
}

// optional string configuration = 6 [default = "default.json"];
inline bool RuntimeConfig::_internal_has_configuration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuntimeConfig::has_configuration() const {
  return _internal_has_configuration();
}
inline void RuntimeConfig::clear_configuration() {
  configuration_.ClearToDefault(::senseAD::mw::proto::RuntimeConfig::_i_give_permission_to_break_this_code_default_configuration_, GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RuntimeConfig::configuration() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.configuration)
  if (configuration_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_configuration_.get();
  return _internal_configuration();
}
inline void RuntimeConfig::set_configuration(const std::string& value) {
  _internal_set_configuration(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RuntimeConfig.configuration)
}
inline std::string* RuntimeConfig::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.configuration)
  return _internal_mutable_configuration();
}
inline const std::string& RuntimeConfig::_internal_configuration() const {
  return configuration_.Get();
}
inline void RuntimeConfig::_internal_set_configuration(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void RuntimeConfig::set_configuration(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  configuration_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.RuntimeConfig.configuration)
}
inline void RuntimeConfig::set_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.RuntimeConfig.configuration)
}
inline void RuntimeConfig::set_configuration(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.RuntimeConfig.configuration)
}
inline std::string* RuntimeConfig::_internal_mutable_configuration() {
  _has_bits_[0] |= 0x00000002u;
  return configuration_.Mutable(::senseAD::mw::proto::RuntimeConfig::_i_give_permission_to_break_this_code_default_configuration_, GetArena());
}
inline std::string* RuntimeConfig::release_configuration() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.configuration)
  if (!_internal_has_configuration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return configuration_.ReleaseNonDefault(nullptr, GetArena());
}
inline void RuntimeConfig::set_allocated_configuration(std::string* configuration) {
  if (configuration != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  configuration_.SetAllocated(nullptr, configuration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.configuration)
}

// optional .senseAD.mw.proto.FeatureSupport feature = 7;
inline bool RuntimeConfig::_internal_has_feature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || feature_ != nullptr);
  return value;
}
inline bool RuntimeConfig::has_feature() const {
  return _internal_has_feature();
}
inline void RuntimeConfig::clear_feature() {
  if (feature_ != nullptr) feature_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::senseAD::mw::proto::FeatureSupport& RuntimeConfig::_internal_feature() const {
  const ::senseAD::mw::proto::FeatureSupport* p = feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::senseAD::mw::proto::FeatureSupport&>(
      ::senseAD::mw::proto::_FeatureSupport_default_instance_);
}
inline const ::senseAD::mw::proto::FeatureSupport& RuntimeConfig::feature() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.feature)
  return _internal_feature();
}
inline void RuntimeConfig::unsafe_arena_set_allocated_feature(
    ::senseAD::mw::proto::FeatureSupport* feature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature_);
  }
  feature_ = feature;
  if (feature) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:senseAD.mw.proto.RuntimeConfig.feature)
}
inline ::senseAD::mw::proto::FeatureSupport* RuntimeConfig::release_feature() {
  _has_bits_[0] &= ~0x00000020u;
  ::senseAD::mw::proto::FeatureSupport* temp = feature_;
  feature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::senseAD::mw::proto::FeatureSupport* RuntimeConfig::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.feature)
  _has_bits_[0] &= ~0x00000020u;
  ::senseAD::mw::proto::FeatureSupport* temp = feature_;
  feature_ = nullptr;
  return temp;
}
inline ::senseAD::mw::proto::FeatureSupport* RuntimeConfig::_internal_mutable_feature() {
  _has_bits_[0] |= 0x00000020u;
  if (feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::senseAD::mw::proto::FeatureSupport>(GetArena());
    feature_ = p;
  }
  return feature_;
}
inline ::senseAD::mw::proto::FeatureSupport* RuntimeConfig::mutable_feature() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.feature)
  return _internal_mutable_feature();
}
inline void RuntimeConfig::set_allocated_feature(::senseAD::mw::proto::FeatureSupport* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feature_;
  }
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feature);
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.feature)
}

// optional string senseauto_config_dir = 8;
inline bool RuntimeConfig::_internal_has_senseauto_config_dir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuntimeConfig::has_senseauto_config_dir() const {
  return _internal_has_senseauto_config_dir();
}
inline void RuntimeConfig::clear_senseauto_config_dir() {
  senseauto_config_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RuntimeConfig::senseauto_config_dir() const {
  // @@protoc_insertion_point(field_get:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
  return _internal_senseauto_config_dir();
}
inline void RuntimeConfig::set_senseauto_config_dir(const std::string& value) {
  _internal_set_senseauto_config_dir(value);
  // @@protoc_insertion_point(field_set:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
}
inline std::string* RuntimeConfig::mutable_senseauto_config_dir() {
  // @@protoc_insertion_point(field_mutable:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
  return _internal_mutable_senseauto_config_dir();
}
inline const std::string& RuntimeConfig::_internal_senseauto_config_dir() const {
  return senseauto_config_dir_.Get();
}
inline void RuntimeConfig::_internal_set_senseauto_config_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  senseauto_config_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RuntimeConfig::set_senseauto_config_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  senseauto_config_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
}
inline void RuntimeConfig::set_senseauto_config_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  senseauto_config_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
}
inline void RuntimeConfig::set_senseauto_config_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  senseauto_config_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
}
inline std::string* RuntimeConfig::_internal_mutable_senseauto_config_dir() {
  _has_bits_[0] |= 0x00000004u;
  return senseauto_config_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RuntimeConfig::release_senseauto_config_dir() {
  // @@protoc_insertion_point(field_release:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
  if (!_internal_has_senseauto_config_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return senseauto_config_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RuntimeConfig::set_allocated_senseauto_config_dir(std::string* senseauto_config_dir) {
  if (senseauto_config_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  senseauto_config_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senseauto_config_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:senseAD.mw.proto.RuntimeConfig.senseauto_config_dir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mw
}  // namespace senseAD

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ad_5fmw_2fproto_2fruntime_5fconf_2eproto
