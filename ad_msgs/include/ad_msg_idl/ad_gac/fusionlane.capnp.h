// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: fusionlane.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(81041329455fbd05);
CAPNP_DECLARE_SCHEMA(d3bfc1bf168e6a7f);
CAPNP_DECLARE_SCHEMA(fd052552a6f62818);
CAPNP_DECLARE_SCHEMA(bf02e0cda6b97f56);
CAPNP_DECLARE_SCHEMA(a6a23ba1a976a07d);
CAPNP_DECLARE_SCHEMA(cdc0a9346c809075);
CAPNP_DECLARE_SCHEMA(c8725d31a77607f0);
CAPNP_DECLARE_SCHEMA(b68d77c26aaa9797);
CAPNP_DECLARE_SCHEMA(ff61bdada396ea9a);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {
namespace fusionlane {

struct TimeStamp {
  TimeStamp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81041329455fbd05, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CoordinateSystem {
  CoordinateSystem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3bfc1bf168e6a7f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SensorId {
  SensorId() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd052552a6f62818, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HistInfo {
  HistInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf02e0cda6b97f56, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneType {
  LaneType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6a23ba1a976a07d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneColor {
  LaneColor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cdc0a9346c809075, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneWidth {
  LaneWidth() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8725d31a77607f0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneBoundary {
  LaneBoundary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b68d77c26aaa9797, 8, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FusionLane {
  FusionLane() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff61bdada396ea9a, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TimeStamp::Reader {
public:
  typedef TimeStamp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsvalid() const;

  inline  ::uint32_t getSec() const;

  inline  ::uint32_t getNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TimeStamp::Builder {
public:
  typedef TimeStamp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsvalid();
  inline void setIsvalid(bool value);

  inline  ::uint32_t getSec();
  inline void setSec( ::uint32_t value);

  inline  ::uint32_t getNsec();
  inline void setNsec( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TimeStamp::Pipeline {
public:
  typedef TimeStamp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CoordinateSystem::Reader {
public:
  typedef CoordinateSystem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CoordinateSystem::Builder {
public:
  typedef CoordinateSystem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getIndex();
  inline void setIndex( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CoordinateSystem::Pipeline {
public:
  typedef CoordinateSystem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SensorId::Reader {
public:
  typedef SensorId Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorId::Builder {
public:
  typedef SensorId Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorId::Pipeline {
public:
  typedef SensorId Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HistInfo::Reader {
public:
  typedef HistInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSensorid() const;
  inline  ::gac::rscl::fusionlane::SensorId::Reader getSensorid() const;

  inline  ::uint32_t getObstacleid() const;

  inline bool hasRawsensorcapturetimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getRawsensorcapturetimestamp() const;

  inline bool hasSensorperceptioncapturetimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getSensorperceptioncapturetimestamp() const;

  inline bool hasSensorperceptionoutputtimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getSensorperceptionoutputtimestamp() const;

  inline bool hasFusioncapturetimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getFusioncapturetimestamp() const;

  inline bool hasFusionoutputtimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getFusionoutputtimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HistInfo::Builder {
public:
  typedef HistInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSensorid();
  inline  ::gac::rscl::fusionlane::SensorId::Builder getSensorid();
  inline void setSensorid( ::gac::rscl::fusionlane::SensorId::Reader value);
  inline  ::gac::rscl::fusionlane::SensorId::Builder initSensorid();
  inline void adoptSensorid(::capnp::Orphan< ::gac::rscl::fusionlane::SensorId>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId> disownSensorid();

  inline  ::uint32_t getObstacleid();
  inline void setObstacleid( ::uint32_t value);

  inline bool hasRawsensorcapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getRawsensorcapturetimestamp();
  inline void setRawsensorcapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initRawsensorcapturetimestamp();
  inline void adoptRawsensorcapturetimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownRawsensorcapturetimestamp();

  inline bool hasSensorperceptioncapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getSensorperceptioncapturetimestamp();
  inline void setSensorperceptioncapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initSensorperceptioncapturetimestamp();
  inline void adoptSensorperceptioncapturetimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownSensorperceptioncapturetimestamp();

  inline bool hasSensorperceptionoutputtimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getSensorperceptionoutputtimestamp();
  inline void setSensorperceptionoutputtimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initSensorperceptionoutputtimestamp();
  inline void adoptSensorperceptionoutputtimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownSensorperceptionoutputtimestamp();

  inline bool hasFusioncapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getFusioncapturetimestamp();
  inline void setFusioncapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initFusioncapturetimestamp();
  inline void adoptFusioncapturetimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownFusioncapturetimestamp();

  inline bool hasFusionoutputtimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getFusionoutputtimestamp();
  inline void setFusionoutputtimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initFusionoutputtimestamp();
  inline void adoptFusionoutputtimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownFusionoutputtimestamp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HistInfo::Pipeline {
public:
  typedef HistInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::fusionlane::SensorId::Pipeline getSensorid();
  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getRawsensorcapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getSensorperceptioncapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getSensorperceptionoutputtimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getFusioncapturetimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getFusionoutputtimestamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneType::Reader {
public:
  typedef LaneType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getCutpoint() const;

  inline  ::uint8_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneType::Builder {
public:
  typedef LaneType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getCutpoint();
  inline void setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initCutpoint();
  inline void adoptCutpoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownCutpoint();

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneType::Pipeline {
public:
  typedef LaneType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getCutpoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneColor::Reader {
public:
  typedef LaneColor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getCutpoint() const;

  inline  ::uint8_t getColor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneColor::Builder {
public:
  typedef LaneColor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getCutpoint();
  inline void setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initCutpoint();
  inline void adoptCutpoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownCutpoint();

  inline  ::uint8_t getColor();
  inline void setColor( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneColor::Pipeline {
public:
  typedef LaneColor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getCutpoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneWidth::Reader {
public:
  typedef LaneWidth Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getCutpoint() const;

  inline  ::uint8_t getWidth() const;

  inline  ::uint8_t getWidthleft() const;

  inline  ::uint8_t getWidthright() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneWidth::Builder {
public:
  typedef LaneWidth Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCutpoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getCutpoint();
  inline void setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initCutpoint();
  inline void adoptCutpoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownCutpoint();

  inline  ::uint8_t getWidth();
  inline void setWidth( ::uint8_t value);

  inline  ::uint8_t getWidthleft();
  inline void setWidthleft( ::uint8_t value);

  inline  ::uint8_t getWidthright();
  inline void setWidthright( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneWidth::Pipeline {
public:
  typedef LaneWidth Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getCutpoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneBoundary::Reader {
public:
  typedef LaneBoundary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHistinfo() const;
  inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistinfo() const;

  inline  ::uint32_t getLaneid() const;

  inline  ::uint8_t getLanepositionindex() const;

  inline double getConfidence() const;

  inline  ::uint8_t getAvailability() const;

  inline double getC0() const;

  inline double getC1() const;

  inline double getC2() const;

  inline double getC3() const;

  inline double getRangestart() const;

  inline double getRangeend() const;

  inline bool hasLanetypevector() const;
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Reader getLanetypevector() const;

  inline bool hasLanecolorvector() const;
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Reader getLanecolorvector() const;

  inline bool hasLanewidthvector() const;
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Reader getLanewidthvector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneBoundary::Builder {
public:
  typedef LaneBoundary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHistinfo();
  inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistinfo();
  inline void setHistinfo( ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistinfo(unsigned int size);
  inline void adoptHistinfo(::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>> disownHistinfo();

  inline  ::uint32_t getLaneid();
  inline void setLaneid( ::uint32_t value);

  inline  ::uint8_t getLanepositionindex();
  inline void setLanepositionindex( ::uint8_t value);

  inline double getConfidence();
  inline void setConfidence(double value);

  inline  ::uint8_t getAvailability();
  inline void setAvailability( ::uint8_t value);

  inline double getC0();
  inline void setC0(double value);

  inline double getC1();
  inline void setC1(double value);

  inline double getC2();
  inline void setC2(double value);

  inline double getC3();
  inline void setC3(double value);

  inline double getRangestart();
  inline void setRangestart(double value);

  inline double getRangeend();
  inline void setRangeend(double value);

  inline bool hasLanetypevector();
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Builder getLanetypevector();
  inline void setLanetypevector( ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Builder initLanetypevector(unsigned int size);
  inline void adoptLanetypevector(::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>> disownLanetypevector();

  inline bool hasLanecolorvector();
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Builder getLanecolorvector();
  inline void setLanecolorvector( ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Builder initLanecolorvector(unsigned int size);
  inline void adoptLanecolorvector(::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>> disownLanecolorvector();

  inline bool hasLanewidthvector();
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Builder getLanewidthvector();
  inline void setLanewidthvector( ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Builder initLanewidthvector(unsigned int size);
  inline void adoptLanewidthvector(::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>> disownLanewidthvector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneBoundary::Pipeline {
public:
  typedef LaneBoundary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionLane::Reader {
public:
  typedef FusionLane Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTimestamp() const;
  inline  ::gac::rscl::fusionlane::TimeStamp::Reader getTimestamp() const;

  inline bool hasCoordinate() const;
  inline  ::gac::rscl::fusionlane::CoordinateSystem::Reader getCoordinate() const;

  inline bool hasSensorid() const;
  inline  ::gac::rscl::fusionlane::SensorId::Reader getSensorid() const;

  inline bool hasLaneboundaryvector() const;
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Reader getLaneboundaryvector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionLane::Builder {
public:
  typedef FusionLane Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTimestamp();
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder getTimestamp();
  inline void setTimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value);
  inline  ::gac::rscl::fusionlane::TimeStamp::Builder initTimestamp();
  inline void adoptTimestamp(::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> disownTimestamp();

  inline bool hasCoordinate();
  inline  ::gac::rscl::fusionlane::CoordinateSystem::Builder getCoordinate();
  inline void setCoordinate( ::gac::rscl::fusionlane::CoordinateSystem::Reader value);
  inline  ::gac::rscl::fusionlane::CoordinateSystem::Builder initCoordinate();
  inline void adoptCoordinate(::capnp::Orphan< ::gac::rscl::fusionlane::CoordinateSystem>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::CoordinateSystem> disownCoordinate();

  inline bool hasSensorid();
  inline  ::gac::rscl::fusionlane::SensorId::Builder getSensorid();
  inline void setSensorid( ::gac::rscl::fusionlane::SensorId::Reader value);
  inline  ::gac::rscl::fusionlane::SensorId::Builder initSensorid();
  inline void adoptSensorid(::capnp::Orphan< ::gac::rscl::fusionlane::SensorId>&& value);
  inline ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId> disownSensorid();

  inline bool hasLaneboundaryvector();
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Builder getLaneboundaryvector();
  inline void setLaneboundaryvector( ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Builder initLaneboundaryvector(unsigned int size);
  inline void adoptLaneboundaryvector(::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>> disownLaneboundaryvector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionLane::Pipeline {
public:
  typedef FusionLane Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline getTimestamp();
  inline  ::gac::rscl::fusionlane::CoordinateSystem::Pipeline getCoordinate();
  inline  ::gac::rscl::fusionlane::SensorId::Pipeline getSensorid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TimeStamp::Reader::getIsvalid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TimeStamp::Builder::getIsvalid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setIsvalid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TimeStamp::Reader::getSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TimeStamp::Builder::getSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TimeStamp::Reader::getNsec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TimeStamp::Builder::getNsec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setNsec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CoordinateSystem::Reader::getIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CoordinateSystem::Builder::getIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CoordinateSystem::Builder::setIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SensorId::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SensorId::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorId::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HistInfo::Reader::hasSensorid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasSensorid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::SensorId::Reader HistInfo::Reader::getSensorid() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::SensorId::Builder HistInfo::Builder::getSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::SensorId::Pipeline HistInfo::Pipeline::getSensorid() {
  return  ::gac::rscl::fusionlane::SensorId::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setSensorid( ::gac::rscl::fusionlane::SensorId::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::SensorId::Builder HistInfo::Builder::initSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptSensorid(
    ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId> HistInfo::Builder::disownSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t HistInfo::Reader::getObstacleid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HistInfo::Builder::getObstacleid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HistInfo::Builder::setObstacleid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HistInfo::Reader::hasRawsensorcapturetimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasRawsensorcapturetimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader HistInfo::Reader::getRawsensorcapturetimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::getRawsensorcapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline HistInfo::Pipeline::getRawsensorcapturetimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setRawsensorcapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::initRawsensorcapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptRawsensorcapturetimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> HistInfo::Builder::disownRawsensorcapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasSensorperceptioncapturetimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasSensorperceptioncapturetimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader HistInfo::Reader::getSensorperceptioncapturetimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::getSensorperceptioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline HistInfo::Pipeline::getSensorperceptioncapturetimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setSensorperceptioncapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::initSensorperceptioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptSensorperceptioncapturetimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> HistInfo::Builder::disownSensorperceptioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasSensorperceptionoutputtimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasSensorperceptionoutputtimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader HistInfo::Reader::getSensorperceptionoutputtimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::getSensorperceptionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline HistInfo::Pipeline::getSensorperceptionoutputtimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setSensorperceptionoutputtimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::initSensorperceptionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptSensorperceptionoutputtimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> HistInfo::Builder::disownSensorperceptionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasFusioncapturetimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasFusioncapturetimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader HistInfo::Reader::getFusioncapturetimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::getFusioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline HistInfo::Pipeline::getFusioncapturetimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setFusioncapturetimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::initFusioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptFusioncapturetimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> HistInfo::Builder::disownFusioncapturetimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasFusionoutputtimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasFusionoutputtimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader HistInfo::Reader::getFusionoutputtimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::getFusionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline HistInfo::Pipeline::getFusionoutputtimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setFusionoutputtimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder HistInfo::Builder::initFusionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptFusionoutputtimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> HistInfo::Builder::disownFusionoutputtimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LaneType::Reader::hasCutpoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneType::Builder::hasCutpoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LaneType::Reader::getCutpoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneType::Builder::getCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LaneType::Pipeline::getCutpoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LaneType::Builder::setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneType::Builder::initCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneType::Builder::adoptCutpoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LaneType::Builder::disownCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t LaneType::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneType::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneType::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LaneColor::Reader::hasCutpoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneColor::Builder::hasCutpoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LaneColor::Reader::getCutpoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneColor::Builder::getCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LaneColor::Pipeline::getCutpoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LaneColor::Builder::setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneColor::Builder::initCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneColor::Builder::adoptCutpoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LaneColor::Builder::disownCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t LaneColor::Reader::getColor() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneColor::Builder::getColor() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneColor::Builder::setColor( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LaneWidth::Reader::hasCutpoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneWidth::Builder::hasCutpoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LaneWidth::Reader::getCutpoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneWidth::Builder::getCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LaneWidth::Pipeline::getCutpoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LaneWidth::Builder::setCutpoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneWidth::Builder::initCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneWidth::Builder::adoptCutpoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LaneWidth::Builder::disownCutpoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t LaneWidth::Reader::getWidth() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneWidth::Builder::getWidth() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneWidth::Builder::setWidth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneWidth::Reader::getWidthleft() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneWidth::Builder::getWidthleft() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneWidth::Builder::setWidthleft( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneWidth::Reader::getWidthright() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneWidth::Builder::getWidthright() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneWidth::Builder::setWidthright( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LaneBoundary::Reader::hasHistinfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneBoundary::Builder::hasHistinfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Reader LaneBoundary::Reader::getHistinfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::getHistinfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneBoundary::Builder::setHistinfo( ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::initHistinfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LaneBoundary::Builder::adoptHistinfo(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>> LaneBoundary::Builder::disownHistinfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t LaneBoundary::Reader::getLaneid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LaneBoundary::Builder::getLaneid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setLaneid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneBoundary::Reader::getLanepositionindex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneBoundary::Builder::getLanepositionindex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setLanepositionindex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneBoundary::Reader::getAvailability() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneBoundary::Builder::getAvailability() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setAvailability( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getC0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getC0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setC0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getC1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getC1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setC1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getC2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getC2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setC2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getC3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getC3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setC3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getRangestart() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getRangestart() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setRangestart(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double LaneBoundary::Reader::getRangeend() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double LaneBoundary::Builder::getRangeend() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LaneBoundary::Builder::setRangeend(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool LaneBoundary::Reader::hasLanetypevector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LaneBoundary::Builder::hasLanetypevector() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Reader LaneBoundary::Reader::getLanetypevector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::getLanetypevector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LaneBoundary::Builder::setLanetypevector( ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::initLanetypevector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LaneBoundary::Builder::adoptLanetypevector(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>> LaneBoundary::Builder::disownLanetypevector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LaneBoundary::Reader::hasLanecolorvector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LaneBoundary::Builder::hasLanecolorvector() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Reader LaneBoundary::Reader::getLanecolorvector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::getLanecolorvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LaneBoundary::Builder::setLanecolorvector( ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::initLanecolorvector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LaneBoundary::Builder::adoptLanecolorvector(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>> LaneBoundary::Builder::disownLanecolorvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneColor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LaneBoundary::Reader::hasLanewidthvector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LaneBoundary::Builder::hasLanewidthvector() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Reader LaneBoundary::Reader::getLanewidthvector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::getLanewidthvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LaneBoundary::Builder::setLanewidthvector( ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>::Builder LaneBoundary::Builder::initLanewidthvector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LaneBoundary::Builder::adoptLanewidthvector(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>> LaneBoundary::Builder::disownLanewidthvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneWidth,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FusionLane::Reader::hasTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FusionLane::Builder::hasTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::TimeStamp::Reader FusionLane::Reader::getTimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder FusionLane::Builder::getTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::TimeStamp::Pipeline FusionLane::Pipeline::getTimestamp() {
  return  ::gac::rscl::fusionlane::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FusionLane::Builder::setTimestamp( ::gac::rscl::fusionlane::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::TimeStamp::Builder FusionLane::Builder::initTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FusionLane::Builder::adoptTimestamp(
    ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::TimeStamp> FusionLane::Builder::disownTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FusionLane::Reader::hasCoordinate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FusionLane::Builder::hasCoordinate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::CoordinateSystem::Reader FusionLane::Reader::getCoordinate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::CoordinateSystem::Builder FusionLane::Builder::getCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::CoordinateSystem::Pipeline FusionLane::Pipeline::getCoordinate() {
  return  ::gac::rscl::fusionlane::CoordinateSystem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FusionLane::Builder::setCoordinate( ::gac::rscl::fusionlane::CoordinateSystem::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::CoordinateSystem::Builder FusionLane::Builder::initCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FusionLane::Builder::adoptCoordinate(
    ::capnp::Orphan< ::gac::rscl::fusionlane::CoordinateSystem>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::CoordinateSystem> FusionLane::Builder::disownCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::CoordinateSystem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FusionLane::Reader::hasSensorid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FusionLane::Builder::hasSensorid() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::fusionlane::SensorId::Reader FusionLane::Reader::getSensorid() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::fusionlane::SensorId::Builder FusionLane::Builder::getSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::fusionlane::SensorId::Pipeline FusionLane::Pipeline::getSensorid() {
  return  ::gac::rscl::fusionlane::SensorId::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void FusionLane::Builder::setSensorid( ::gac::rscl::fusionlane::SensorId::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::fusionlane::SensorId::Builder FusionLane::Builder::initSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FusionLane::Builder::adoptSensorid(
    ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::fusionlane::SensorId> FusionLane::Builder::disownSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::fusionlane::SensorId>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FusionLane::Reader::hasLaneboundaryvector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FusionLane::Builder::hasLaneboundaryvector() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Reader FusionLane::Reader::getLaneboundaryvector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Builder FusionLane::Builder::getLaneboundaryvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FusionLane::Builder::setLaneboundaryvector( ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>::Builder FusionLane::Builder::initLaneboundaryvector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FusionLane::Builder::adoptLaneboundaryvector(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>> FusionLane::Builder::disownLaneboundaryvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::fusionlane::LaneBoundary,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

