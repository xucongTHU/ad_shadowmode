// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: vehicle_state.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_gac/gac.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(eb420c59f8d855be);
CAPNP_DECLARE_SCHEMA(8375768242cbd5df);
CAPNP_DECLARE_SCHEMA(98e7ebb765ae4e62);
CAPNP_DECLARE_SCHEMA(e644c0690ba82841);
CAPNP_DECLARE_SCHEMA(ef7f35dea7abdf99);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {

struct ChassisState {
  ChassisState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb420c59f8d855be, 9, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleBodyState {
  VehicleBodyState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8375768242cbd5df, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ExternalState {
  ExternalState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98e7ebb765ae4e62, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UserOperation {
  UserOperation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e644c0690ba82841, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MotionActuatorState {
  MotionActuatorState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef7f35dea7abdf99, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ChassisState::Reader {
public:
  typedef ChassisState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getStamp() const;

  inline float getVehicleSpeed() const;

  inline float getFrontLeftWheelSpeed() const;

  inline float getFrontRightWheelSpeed() const;

  inline float getRearLeftWheelSpeed() const;

  inline float getRearRightWheelSpeed() const;

  inline float getFrontLeftWheelPulse() const;

  inline float getFrontRightWheelPulse() const;

  inline float getRearLeftWheelPulse() const;

  inline float getRearRightWheelPulse() const;

  inline float getLonAcceleration() const;

  inline float getLatAcceleration() const;

  inline float getYawRate() const;

  inline float getFrontWheelAngle() const;

  inline float getLongitudinalControlValue() const;

  inline  ::uint8_t getEnergySourceLevel() const;

  inline  ::uint8_t getGearPos() const;

  inline  ::uint8_t getGearLevel() const;

  inline  ::uint32_t getStateFlags() const;

  inline  ::uint32_t getInvalidFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChassisState::Builder {
public:
  typedef ChassisState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStamp();
  inline  ::gac::rscl::TimeStamp::Builder getStamp();
  inline void setStamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownStamp();

  inline float getVehicleSpeed();
  inline void setVehicleSpeed(float value);

  inline float getFrontLeftWheelSpeed();
  inline void setFrontLeftWheelSpeed(float value);

  inline float getFrontRightWheelSpeed();
  inline void setFrontRightWheelSpeed(float value);

  inline float getRearLeftWheelSpeed();
  inline void setRearLeftWheelSpeed(float value);

  inline float getRearRightWheelSpeed();
  inline void setRearRightWheelSpeed(float value);

  inline float getFrontLeftWheelPulse();
  inline void setFrontLeftWheelPulse(float value);

  inline float getFrontRightWheelPulse();
  inline void setFrontRightWheelPulse(float value);

  inline float getRearLeftWheelPulse();
  inline void setRearLeftWheelPulse(float value);

  inline float getRearRightWheelPulse();
  inline void setRearRightWheelPulse(float value);

  inline float getLonAcceleration();
  inline void setLonAcceleration(float value);

  inline float getLatAcceleration();
  inline void setLatAcceleration(float value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getFrontWheelAngle();
  inline void setFrontWheelAngle(float value);

  inline float getLongitudinalControlValue();
  inline void setLongitudinalControlValue(float value);

  inline  ::uint8_t getEnergySourceLevel();
  inline void setEnergySourceLevel( ::uint8_t value);

  inline  ::uint8_t getGearPos();
  inline void setGearPos( ::uint8_t value);

  inline  ::uint8_t getGearLevel();
  inline void setGearLevel( ::uint8_t value);

  inline  ::uint32_t getStateFlags();
  inline void setStateFlags( ::uint32_t value);

  inline  ::uint32_t getInvalidFlags();
  inline void setInvalidFlags( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChassisState::Pipeline {
public:
  typedef ChassisState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleBodyState::Reader {
public:
  typedef VehicleBodyState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getStamp() const;

  inline float getFrontLeftTirePressure() const;

  inline float getFrontRightTirePressure() const;

  inline float getRearLeftTirePressure() const;

  inline float getRearRightTirePressure() const;

  inline  ::uint32_t getStateFlags() const;

  inline  ::uint32_t getInvalidFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleBodyState::Builder {
public:
  typedef VehicleBodyState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStamp();
  inline  ::gac::rscl::TimeStamp::Builder getStamp();
  inline void setStamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownStamp();

  inline float getFrontLeftTirePressure();
  inline void setFrontLeftTirePressure(float value);

  inline float getFrontRightTirePressure();
  inline void setFrontRightTirePressure(float value);

  inline float getRearLeftTirePressure();
  inline void setRearLeftTirePressure(float value);

  inline float getRearRightTirePressure();
  inline void setRearRightTirePressure(float value);

  inline  ::uint32_t getStateFlags();
  inline void setStateFlags( ::uint32_t value);

  inline  ::uint32_t getInvalidFlags();
  inline void setInvalidFlags( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleBodyState::Pipeline {
public:
  typedef VehicleBodyState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ExternalState::Reader {
public:
  typedef ExternalState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getStamp() const;

  inline  ::uint32_t getActuatorStates() const;

  inline  ::uint32_t getFunctionStates() const;

  inline  ::uint32_t getAcuSwitch() const;

  inline  ::uint32_t getAcuCard() const;

  inline  ::uint8_t getNdaLcStyleReq() const;

  inline  ::uint8_t getIaccFunctionReq() const;

  inline  ::uint8_t getNdaVoiceMode() const;

  inline  ::uint8_t getAcuButtonState() const;

  inline bool getCrashState() const;

  inline float getEpsWheelAngle() const;

  inline  ::uint32_t getTotalOdometer() const;

  inline  ::uint8_t getAuid() const;

  inline  ::uint16_t getDeleteaccount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ExternalState::Builder {
public:
  typedef ExternalState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStamp();
  inline  ::gac::rscl::TimeStamp::Builder getStamp();
  inline void setStamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownStamp();

  inline  ::uint32_t getActuatorStates();
  inline void setActuatorStates( ::uint32_t value);

  inline  ::uint32_t getFunctionStates();
  inline void setFunctionStates( ::uint32_t value);

  inline  ::uint32_t getAcuSwitch();
  inline void setAcuSwitch( ::uint32_t value);

  inline  ::uint32_t getAcuCard();
  inline void setAcuCard( ::uint32_t value);

  inline  ::uint8_t getNdaLcStyleReq();
  inline void setNdaLcStyleReq( ::uint8_t value);

  inline  ::uint8_t getIaccFunctionReq();
  inline void setIaccFunctionReq( ::uint8_t value);

  inline  ::uint8_t getNdaVoiceMode();
  inline void setNdaVoiceMode( ::uint8_t value);

  inline  ::uint8_t getAcuButtonState();
  inline void setAcuButtonState( ::uint8_t value);

  inline bool getCrashState();
  inline void setCrashState(bool value);

  inline float getEpsWheelAngle();
  inline void setEpsWheelAngle(float value);

  inline  ::uint32_t getTotalOdometer();
  inline void setTotalOdometer( ::uint32_t value);

  inline  ::uint8_t getAuid();
  inline void setAuid( ::uint8_t value);

  inline  ::uint16_t getDeleteaccount();
  inline void setDeleteaccount( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ExternalState::Pipeline {
public:
  typedef ExternalState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UserOperation::Reader {
public:
  typedef UserOperation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getStamp() const;

  inline  ::uint8_t getTargetSpeed() const;

  inline  ::uint8_t getLkaLdwSensitivity() const;

  inline  ::uint8_t getAlcSensitivity() const;

  inline  ::uint32_t getOperations() const;

  inline  ::uint32_t getConfigurations() const;

  inline  ::uint32_t getInvalidFlags() const;

  inline float getSteeringWheelTorque() const;

  inline float getAccPedal() const;

  inline  ::uint8_t getRainLevel() const;

  inline  ::uint32_t getSteeringWheelAngularSpeed() const;

  inline float getMasterCylinderPressure() const;

  inline float getOutdoorTemperature() const;

  inline float getEbbActoutputrodtravel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UserOperation::Builder {
public:
  typedef UserOperation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStamp();
  inline  ::gac::rscl::TimeStamp::Builder getStamp();
  inline void setStamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownStamp();

  inline  ::uint8_t getTargetSpeed();
  inline void setTargetSpeed( ::uint8_t value);

  inline  ::uint8_t getLkaLdwSensitivity();
  inline void setLkaLdwSensitivity( ::uint8_t value);

  inline  ::uint8_t getAlcSensitivity();
  inline void setAlcSensitivity( ::uint8_t value);

  inline  ::uint32_t getOperations();
  inline void setOperations( ::uint32_t value);

  inline  ::uint32_t getConfigurations();
  inline void setConfigurations( ::uint32_t value);

  inline  ::uint32_t getInvalidFlags();
  inline void setInvalidFlags( ::uint32_t value);

  inline float getSteeringWheelTorque();
  inline void setSteeringWheelTorque(float value);

  inline float getAccPedal();
  inline void setAccPedal(float value);

  inline  ::uint8_t getRainLevel();
  inline void setRainLevel( ::uint8_t value);

  inline  ::uint32_t getSteeringWheelAngularSpeed();
  inline void setSteeringWheelAngularSpeed( ::uint32_t value);

  inline float getMasterCylinderPressure();
  inline void setMasterCylinderPressure(float value);

  inline float getOutdoorTemperature();
  inline void setOutdoorTemperature(float value);

  inline float getEbbActoutputrodtravel();
  inline void setEbbActoutputrodtravel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UserOperation::Pipeline {
public:
  typedef UserOperation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MotionActuatorState::Reader {
public:
  typedef MotionActuatorState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getStamp() const;

  inline float getSteeringWheelAngularSpeed() const;

  inline float getEpsTorque() const;

  inline float getEspDeceleration() const;

  inline float getRequestMotorTorque() const;

  inline float getMotorTorque() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MotionActuatorState::Builder {
public:
  typedef MotionActuatorState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStamp();
  inline  ::gac::rscl::TimeStamp::Builder getStamp();
  inline void setStamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownStamp();

  inline float getSteeringWheelAngularSpeed();
  inline void setSteeringWheelAngularSpeed(float value);

  inline float getEpsTorque();
  inline void setEpsTorque(float value);

  inline float getEspDeceleration();
  inline void setEspDeceleration(float value);

  inline float getRequestMotorTorque();
  inline void setRequestMotorTorque(float value);

  inline float getMotorTorque();
  inline void setMotorTorque(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MotionActuatorState::Pipeline {
public:
  typedef MotionActuatorState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ChassisState::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisState::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader ChassisState::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder ChassisState::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline ChassisState::Pipeline::getStamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ChassisState::Builder::setStamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder ChassisState::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChassisState::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> ChassisState::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ChassisState::Reader::getVehicleSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getVehicleSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setVehicleSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getFrontLeftWheelSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getFrontLeftWheelSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setFrontLeftWheelSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getFrontRightWheelSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getFrontRightWheelSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setFrontRightWheelSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getRearLeftWheelSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getRearLeftWheelSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setRearLeftWheelSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getRearRightWheelSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getRearRightWheelSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setRearRightWheelSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getFrontLeftWheelPulse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getFrontLeftWheelPulse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setFrontLeftWheelPulse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getFrontRightWheelPulse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getFrontRightWheelPulse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setFrontRightWheelPulse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getRearLeftWheelPulse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getRearLeftWheelPulse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setRearLeftWheelPulse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getRearRightWheelPulse() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getRearRightWheelPulse() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setRearRightWheelPulse(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getLonAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getLonAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setLonAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getLatAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getLatAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setLatAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getFrontWheelAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getFrontWheelAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setFrontWheelAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float ChassisState::Reader::getLongitudinalControlValue() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float ChassisState::Builder::getLongitudinalControlValue() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setLongitudinalControlValue(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ChassisState::Reader::getEnergySourceLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ChassisState::Builder::getEnergySourceLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setEnergySourceLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ChassisState::Reader::getGearPos() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ChassisState::Builder::getGearPos() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setGearPos( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ChassisState::Reader::getGearLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ChassisState::Builder::getGearLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setGearLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ChassisState::Reader::getStateFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ChassisState::Builder::getStateFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setStateFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ChassisState::Reader::getInvalidFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ChassisState::Builder::getInvalidFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ChassisState::Builder::setInvalidFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleBodyState::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleBodyState::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader VehicleBodyState::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder VehicleBodyState::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline VehicleBodyState::Pipeline::getStamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VehicleBodyState::Builder::setStamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder VehicleBodyState::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VehicleBodyState::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> VehicleBodyState::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float VehicleBodyState::Reader::getFrontLeftTirePressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VehicleBodyState::Builder::getFrontLeftTirePressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setFrontLeftTirePressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VehicleBodyState::Reader::getFrontRightTirePressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VehicleBodyState::Builder::getFrontRightTirePressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setFrontRightTirePressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VehicleBodyState::Reader::getRearLeftTirePressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VehicleBodyState::Builder::getRearLeftTirePressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setRearLeftTirePressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float VehicleBodyState::Reader::getRearRightTirePressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float VehicleBodyState::Builder::getRearRightTirePressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setRearRightTirePressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t VehicleBodyState::Reader::getStateFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t VehicleBodyState::Builder::getStateFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setStateFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t VehicleBodyState::Reader::getInvalidFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t VehicleBodyState::Builder::getInvalidFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void VehicleBodyState::Builder::setInvalidFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ExternalState::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ExternalState::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader ExternalState::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder ExternalState::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline ExternalState::Pipeline::getStamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ExternalState::Builder::setStamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder ExternalState::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ExternalState::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> ExternalState::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t ExternalState::Reader::getActuatorStates() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ExternalState::Builder::getActuatorStates() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setActuatorStates( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ExternalState::Reader::getFunctionStates() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ExternalState::Builder::getFunctionStates() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setFunctionStates( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ExternalState::Reader::getAcuSwitch() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ExternalState::Builder::getAcuSwitch() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setAcuSwitch( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ExternalState::Reader::getAcuCard() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ExternalState::Builder::getAcuCard() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setAcuCard( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ExternalState::Reader::getNdaLcStyleReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ExternalState::Builder::getNdaLcStyleReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setNdaLcStyleReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ExternalState::Reader::getIaccFunctionReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ExternalState::Builder::getIaccFunctionReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setIaccFunctionReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ExternalState::Reader::getNdaVoiceMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ExternalState::Builder::getNdaVoiceMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setNdaVoiceMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ExternalState::Reader::getAcuButtonState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ExternalState::Builder::getAcuButtonState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setAcuButtonState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool ExternalState::Reader::getCrashState() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool ExternalState::Builder::getCrashState() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setCrashState(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline float ExternalState::Reader::getEpsWheelAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ExternalState::Builder::getEpsWheelAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setEpsWheelAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ExternalState::Reader::getTotalOdometer() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ExternalState::Builder::getTotalOdometer() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setTotalOdometer( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ExternalState::Reader::getAuid() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ExternalState::Builder::getAuid() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setAuid( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ExternalState::Reader::getDeleteaccount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ExternalState::Builder::getDeleteaccount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ExternalState::Builder::setDeleteaccount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool UserOperation::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UserOperation::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader UserOperation::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder UserOperation::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline UserOperation::Pipeline::getStamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UserOperation::Builder::setStamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder UserOperation::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UserOperation::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> UserOperation::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t UserOperation::Reader::getTargetSpeed() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UserOperation::Builder::getTargetSpeed() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setTargetSpeed( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UserOperation::Reader::getLkaLdwSensitivity() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UserOperation::Builder::getLkaLdwSensitivity() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setLkaLdwSensitivity( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UserOperation::Reader::getAlcSensitivity() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UserOperation::Builder::getAlcSensitivity() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setAlcSensitivity( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UserOperation::Reader::getOperations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UserOperation::Builder::getOperations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setOperations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UserOperation::Reader::getConfigurations() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UserOperation::Builder::getConfigurations() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setConfigurations( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UserOperation::Reader::getInvalidFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UserOperation::Builder::getInvalidFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setInvalidFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float UserOperation::Reader::getSteeringWheelTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float UserOperation::Builder::getSteeringWheelTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setSteeringWheelTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float UserOperation::Reader::getAccPedal() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float UserOperation::Builder::getAccPedal() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setAccPedal(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UserOperation::Reader::getRainLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UserOperation::Builder::getRainLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setRainLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UserOperation::Reader::getSteeringWheelAngularSpeed() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UserOperation::Builder::getSteeringWheelAngularSpeed() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setSteeringWheelAngularSpeed( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float UserOperation::Reader::getMasterCylinderPressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float UserOperation::Builder::getMasterCylinderPressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setMasterCylinderPressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float UserOperation::Reader::getOutdoorTemperature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float UserOperation::Builder::getOutdoorTemperature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setOutdoorTemperature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float UserOperation::Reader::getEbbActoutputrodtravel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float UserOperation::Builder::getEbbActoutputrodtravel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UserOperation::Builder::setEbbActoutputrodtravel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool MotionActuatorState::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MotionActuatorState::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader MotionActuatorState::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder MotionActuatorState::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline MotionActuatorState::Pipeline::getStamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MotionActuatorState::Builder::setStamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder MotionActuatorState::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MotionActuatorState::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> MotionActuatorState::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float MotionActuatorState::Reader::getSteeringWheelAngularSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float MotionActuatorState::Builder::getSteeringWheelAngularSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MotionActuatorState::Builder::setSteeringWheelAngularSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float MotionActuatorState::Reader::getEpsTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float MotionActuatorState::Builder::getEpsTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MotionActuatorState::Builder::setEpsTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float MotionActuatorState::Reader::getEspDeceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float MotionActuatorState::Builder::getEspDeceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MotionActuatorState::Builder::setEspDeceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float MotionActuatorState::Reader::getRequestMotorTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float MotionActuatorState::Builder::getRequestMotorTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MotionActuatorState::Builder::setRequestMotorTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float MotionActuatorState::Reader::getMotorTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float MotionActuatorState::Builder::getMotorTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MotionActuatorState::Builder::setMotorTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

