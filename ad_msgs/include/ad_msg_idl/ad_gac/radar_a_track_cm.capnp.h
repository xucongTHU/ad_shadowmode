// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: radar_a_track_cm.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_gac/radar_a_cm_data_type.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b8266105e0cc1a3c);
CAPNP_DECLARE_SCHEMA(929acf35eee712f9);
CAPNP_DECLARE_SCHEMA(bfa8b3aadb524a01);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {

struct RadarTrack {
  RadarTrack() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8266105e0cc1a3c, 23, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarTrackArray {
  RadarTrackArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(929acf35eee712f9, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrackList {
  TrackList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bfa8b3aadb524a01, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RadarTrack::Reader {
public:
  typedef RadarTrack Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId() const;

  inline  ::uint8_t getIdState() const;

  inline float getLifetime() const;

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

  inline float getVx() const;

  inline float getVy() const;

  inline float getAx() const;

  inline float getAy() const;

  inline float getRcs() const;

  inline float getSnr() const;

  inline float getXRms() const;

  inline float getYRms() const;

  inline float getZRms() const;

  inline float getVxRms() const;

  inline float getVyRms() const;

  inline float getAxRms() const;

  inline float getAyRms() const;

  inline float getOrientation() const;

  inline float getOrientRms() const;

  inline float getYawRate() const;

  inline float getHeading() const;

  inline float getLength() const;

  inline float getWidth() const;

  inline float getHeight() const;

  inline  ::uint8_t getFusionSig() const;

  inline  ::uint8_t getFusionCamID() const;

  inline float getYawRateRms() const;

  inline float getLengthRms() const;

  inline float getWidthRms() const;

  inline float getHeightRms() const;

  inline float getXQuality() const;

  inline float getYQuality() const;

  inline float getZQuality() const;

  inline float getVxQuality() const;

  inline float getVyQuality() const;

  inline float getAxQuality() const;

  inline float getAyQuality() const;

  inline float getOrientationQuality() const;

  inline float getYawRateQuality() const;

  inline float getLengthQuality() const;

  inline float getWidthQuality() const;

  inline float getHeightQuality() const;

  inline float getUnderpassProbability() const;

  inline float getOverpassProbability() const;

  inline  ::uint8_t getExistProbability() const;

  inline  ::uint8_t getMovProperty() const;

  inline  ::uint8_t getTrackState() const;

  inline  ::uint8_t getTrackType() const;

  inline  ::uint8_t getReferencePoint() const;

  inline  ::uint8_t getMotionDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarTrack::Builder {
public:
  typedef RadarTrack Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId();
  inline void setId( ::uint8_t value);

  inline  ::uint8_t getIdState();
  inline void setIdState( ::uint8_t value);

  inline float getLifetime();
  inline void setLifetime(float value);

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

  inline float getVx();
  inline void setVx(float value);

  inline float getVy();
  inline void setVy(float value);

  inline float getAx();
  inline void setAx(float value);

  inline float getAy();
  inline void setAy(float value);

  inline float getRcs();
  inline void setRcs(float value);

  inline float getSnr();
  inline void setSnr(float value);

  inline float getXRms();
  inline void setXRms(float value);

  inline float getYRms();
  inline void setYRms(float value);

  inline float getZRms();
  inline void setZRms(float value);

  inline float getVxRms();
  inline void setVxRms(float value);

  inline float getVyRms();
  inline void setVyRms(float value);

  inline float getAxRms();
  inline void setAxRms(float value);

  inline float getAyRms();
  inline void setAyRms(float value);

  inline float getOrientation();
  inline void setOrientation(float value);

  inline float getOrientRms();
  inline void setOrientRms(float value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getHeading();
  inline void setHeading(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getHeight();
  inline void setHeight(float value);

  inline  ::uint8_t getFusionSig();
  inline void setFusionSig( ::uint8_t value);

  inline  ::uint8_t getFusionCamID();
  inline void setFusionCamID( ::uint8_t value);

  inline float getYawRateRms();
  inline void setYawRateRms(float value);

  inline float getLengthRms();
  inline void setLengthRms(float value);

  inline float getWidthRms();
  inline void setWidthRms(float value);

  inline float getHeightRms();
  inline void setHeightRms(float value);

  inline float getXQuality();
  inline void setXQuality(float value);

  inline float getYQuality();
  inline void setYQuality(float value);

  inline float getZQuality();
  inline void setZQuality(float value);

  inline float getVxQuality();
  inline void setVxQuality(float value);

  inline float getVyQuality();
  inline void setVyQuality(float value);

  inline float getAxQuality();
  inline void setAxQuality(float value);

  inline float getAyQuality();
  inline void setAyQuality(float value);

  inline float getOrientationQuality();
  inline void setOrientationQuality(float value);

  inline float getYawRateQuality();
  inline void setYawRateQuality(float value);

  inline float getLengthQuality();
  inline void setLengthQuality(float value);

  inline float getWidthQuality();
  inline void setWidthQuality(float value);

  inline float getHeightQuality();
  inline void setHeightQuality(float value);

  inline float getUnderpassProbability();
  inline void setUnderpassProbability(float value);

  inline float getOverpassProbability();
  inline void setOverpassProbability(float value);

  inline  ::uint8_t getExistProbability();
  inline void setExistProbability( ::uint8_t value);

  inline  ::uint8_t getMovProperty();
  inline void setMovProperty( ::uint8_t value);

  inline  ::uint8_t getTrackState();
  inline void setTrackState( ::uint8_t value);

  inline  ::uint8_t getTrackType();
  inline void setTrackType( ::uint8_t value);

  inline  ::uint8_t getReferencePoint();
  inline void setReferencePoint( ::uint8_t value);

  inline  ::uint8_t getMotionDirection();
  inline void setMotionDirection( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarTrack::Pipeline {
public:
  typedef RadarTrack Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarTrackArray::Reader {
public:
  typedef RadarTrackArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::gac::rscl::Header::Reader getHeader() const;

  inline bool hasVersion() const;
  inline  ::gac::rscl::Version::Reader getVersion() const;

  inline  ::uint8_t getSensorId() const;

  inline bool hasRadarState() const;
  inline  ::gac::rscl::RadarState::Reader getRadarState() const;

  inline bool hasTrackList() const;
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader getTrackList() const;

  inline bool hasGuardnailInfo() const;
  inline  ::gac::rscl::GuardnailInfo::Reader getGuardnailInfo() const;

  inline bool hasTimeStampInfo() const;
  inline  ::gac::rscl::TimeStampInfo::Reader getTimeStampInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarTrackArray::Builder {
public:
  typedef RadarTrackArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::gac::rscl::Header::Builder getHeader();
  inline void setHeader( ::gac::rscl::Header::Reader value);
  inline  ::gac::rscl::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::gac::rscl::Header>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Header> disownHeader();

  inline bool hasVersion();
  inline  ::gac::rscl::Version::Builder getVersion();
  inline void setVersion( ::gac::rscl::Version::Reader value);
  inline  ::gac::rscl::Version::Builder initVersion();
  inline void adoptVersion(::capnp::Orphan< ::gac::rscl::Version>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Version> disownVersion();

  inline  ::uint8_t getSensorId();
  inline void setSensorId( ::uint8_t value);

  inline bool hasRadarState();
  inline  ::gac::rscl::RadarState::Builder getRadarState();
  inline void setRadarState( ::gac::rscl::RadarState::Reader value);
  inline  ::gac::rscl::RadarState::Builder initRadarState();
  inline void adoptRadarState(::capnp::Orphan< ::gac::rscl::RadarState>&& value);
  inline ::capnp::Orphan< ::gac::rscl::RadarState> disownRadarState();

  inline bool hasTrackList();
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder getTrackList();
  inline void setTrackList( ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder initTrackList(unsigned int size);
  inline void adoptTrackList(::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>> disownTrackList();

  inline bool hasGuardnailInfo();
  inline  ::gac::rscl::GuardnailInfo::Builder getGuardnailInfo();
  inline void setGuardnailInfo( ::gac::rscl::GuardnailInfo::Reader value);
  inline  ::gac::rscl::GuardnailInfo::Builder initGuardnailInfo();
  inline void adoptGuardnailInfo(::capnp::Orphan< ::gac::rscl::GuardnailInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::GuardnailInfo> disownGuardnailInfo();

  inline bool hasTimeStampInfo();
  inline  ::gac::rscl::TimeStampInfo::Builder getTimeStampInfo();
  inline void setTimeStampInfo( ::gac::rscl::TimeStampInfo::Reader value);
  inline  ::gac::rscl::TimeStampInfo::Builder initTimeStampInfo();
  inline void adoptTimeStampInfo(::capnp::Orphan< ::gac::rscl::TimeStampInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStampInfo> disownTimeStampInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarTrackArray::Pipeline {
public:
  typedef RadarTrackArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Header::Pipeline getHeader();
  inline  ::gac::rscl::Version::Pipeline getVersion();
  inline  ::gac::rscl::RadarState::Pipeline getRadarState();
  inline  ::gac::rscl::GuardnailInfo::Pipeline getGuardnailInfo();
  inline  ::gac::rscl::TimeStampInfo::Pipeline getTimeStampInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrackList::Reader {
public:
  typedef TrackList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrackList::Builder {
public:
  typedef TrackList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData( ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrackList::Pipeline {
public:
  typedef TrackList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t RadarTrack::Reader::getId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getIdState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getIdState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setIdState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getLifetime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getLifetime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setLifetime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVx() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVx() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVx(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAx() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAx() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAx(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAy() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAy() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAy(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getRcs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getRcs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setRcs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getSnr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getSnr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setSnr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getXRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getXRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setXRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getYRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getYRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setYRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getZRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getZRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setZRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVxRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVxRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVxRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVyRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVyRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVyRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAxRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAxRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAxRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAyRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAyRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAyRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getOrientation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getOrientation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setOrientation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getOrientRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getOrientRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setOrientRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getFusionSig() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getFusionSig() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setFusionSig( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getFusionCamID() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getFusionCamID() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setFusionCamID( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getYawRateRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getYawRateRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setYawRateRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getLengthRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getLengthRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setLengthRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getWidthRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getWidthRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setWidthRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getHeightRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getHeightRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setHeightRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getXQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getXQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setXQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getYQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getYQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setYQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getZQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getZQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setZQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVxQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVxQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVxQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getVyQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getVyQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setVyQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAxQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAxQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAxQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getAyQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getAyQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setAyQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getOrientationQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getOrientationQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setOrientationQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getYawRateQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getYawRateQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setYawRateQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getLengthQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getLengthQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setLengthQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getWidthQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getWidthQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setWidthQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getHeightQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getHeightQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setHeightQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getUnderpassProbability() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getUnderpassProbability() {
  return _builder.getDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setUnderpassProbability(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline float RadarTrack::Reader::getOverpassProbability() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline float RadarTrack::Builder::getOverpassProbability() {
  return _builder.getDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setOverpassProbability(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getExistProbability() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getExistProbability() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setExistProbability( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getMovProperty() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getMovProperty() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setMovProperty( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getTrackState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getTrackState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setTrackState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getTrackType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getTrackType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setTrackType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getReferencePoint() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getReferencePoint() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setReferencePoint( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RadarTrack::Reader::getMotionDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrack::Builder::getMotionDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS);
}
inline void RadarTrack::Builder::setMotionDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS, value);
}

inline bool RadarTrackArray::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Header::Reader RadarTrackArray::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Header::Builder RadarTrackArray::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Header::Pipeline RadarTrackArray::Pipeline::getHeader() {
  return  ::gac::rscl::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RadarTrackArray::Builder::setHeader( ::gac::rscl::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Header::Builder RadarTrackArray::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::adoptHeader(
    ::capnp::Orphan< ::gac::rscl::Header>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Header> RadarTrackArray::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RadarTrackArray::Reader::hasVersion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasVersion() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Version::Reader RadarTrackArray::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Version>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Version::Builder RadarTrackArray::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Version>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Version::Pipeline RadarTrackArray::Pipeline::getVersion() {
  return  ::gac::rscl::Version::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RadarTrackArray::Builder::setVersion( ::gac::rscl::Version::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Version>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Version::Builder RadarTrackArray::Builder::initVersion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Version>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::adoptVersion(
    ::capnp::Orphan< ::gac::rscl::Version>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Version>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Version> RadarTrackArray::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Version>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t RadarTrackArray::Reader::getSensorId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RadarTrackArray::Builder::getSensorId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarTrackArray::Builder::setSensorId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RadarTrackArray::Reader::hasRadarState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasRadarState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::RadarState::Reader RadarTrackArray::Reader::getRadarState() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::RadarState::Builder RadarTrackArray::Builder::getRadarState() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::RadarState::Pipeline RadarTrackArray::Pipeline::getRadarState() {
  return  ::gac::rscl::RadarState::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RadarTrackArray::Builder::setRadarState( ::gac::rscl::RadarState::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::RadarState::Builder RadarTrackArray::Builder::initRadarState() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::adoptRadarState(
    ::capnp::Orphan< ::gac::rscl::RadarState>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::RadarState> RadarTrackArray::Builder::disownRadarState() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::RadarState>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RadarTrackArray::Reader::hasTrackList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasTrackList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader RadarTrackArray::Reader::getTrackList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder RadarTrackArray::Builder::getTrackList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::setTrackList( ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder RadarTrackArray::Builder::initTrackList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RadarTrackArray::Builder::adoptTrackList(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>> RadarTrackArray::Builder::disownTrackList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RadarTrackArray::Reader::hasGuardnailInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasGuardnailInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::GuardnailInfo::Reader RadarTrackArray::Reader::getGuardnailInfo() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::GuardnailInfo::Builder RadarTrackArray::Builder::getGuardnailInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::GuardnailInfo::Pipeline RadarTrackArray::Pipeline::getGuardnailInfo() {
  return  ::gac::rscl::GuardnailInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void RadarTrackArray::Builder::setGuardnailInfo( ::gac::rscl::GuardnailInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::GuardnailInfo::Builder RadarTrackArray::Builder::initGuardnailInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::adoptGuardnailInfo(
    ::capnp::Orphan< ::gac::rscl::GuardnailInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::GuardnailInfo> RadarTrackArray::Builder::disownGuardnailInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GuardnailInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool RadarTrackArray::Reader::hasTimeStampInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool RadarTrackArray::Builder::hasTimeStampInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStampInfo::Reader RadarTrackArray::Reader::getTimeStampInfo() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStampInfo::Builder RadarTrackArray::Builder::getTimeStampInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStampInfo::Pipeline RadarTrackArray::Pipeline::getTimeStampInfo() {
  return  ::gac::rscl::TimeStampInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void RadarTrackArray::Builder::setTimeStampInfo( ::gac::rscl::TimeStampInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStampInfo::Builder RadarTrackArray::Builder::initTimeStampInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void RadarTrackArray::Builder::adoptTimeStampInfo(
    ::capnp::Orphan< ::gac::rscl::TimeStampInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStampInfo> RadarTrackArray::Builder::disownTimeStampInfo() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStampInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TrackList::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrackList::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader TrackList::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder TrackList::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrackList::Builder::setData( ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>::Builder TrackList::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TrackList::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>> TrackList::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::RadarTrack,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

