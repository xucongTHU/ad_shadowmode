// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: camera.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ac2fba93364859e5);
CAPNP_DECLARE_SCHEMA(dfe9a66b5708374e);
CAPNP_DECLARE_SCHEMA(bce8c88148622b4b);
CAPNP_DECLARE_SCHEMA(a954a89d81e2ed4e);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {

struct CameraHeadTimeStruct {
  CameraHeadTimeStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac2fba93364859e5, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraHeaderStruct {
  CameraHeaderStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfe9a66b5708374e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraEncodedStruct {
  CameraEncodedStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bce8c88148622b4b, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraDecodedStruct {
  CameraDecodedStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a954a89d81e2ed4e, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CameraHeadTimeStruct::Reader {
public:
  typedef CameraHeadTimeStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSec() const;

  inline  ::uint32_t getNsec() const;

  inline  ::uint32_t getExpStartS() const;

  inline  ::uint32_t getExpStartNs() const;

  inline  ::uint32_t getExpEndS() const;

  inline  ::uint32_t getExpEndNs() const;

  inline  ::uint32_t getShutter1() const;

  inline  ::uint32_t getShutter2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraHeadTimeStruct::Builder {
public:
  typedef CameraHeadTimeStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSec();
  inline void setSec( ::uint32_t value);

  inline  ::uint32_t getNsec();
  inline void setNsec( ::uint32_t value);

  inline  ::uint32_t getExpStartS();
  inline void setExpStartS( ::uint32_t value);

  inline  ::uint32_t getExpStartNs();
  inline void setExpStartNs( ::uint32_t value);

  inline  ::uint32_t getExpEndS();
  inline void setExpEndS( ::uint32_t value);

  inline  ::uint32_t getExpEndNs();
  inline void setExpEndNs( ::uint32_t value);

  inline  ::uint32_t getShutter1();
  inline void setShutter1( ::uint32_t value);

  inline  ::uint32_t getShutter2();
  inline void setShutter2( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraHeadTimeStruct::Pipeline {
public:
  typedef CameraHeadTimeStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraHeaderStruct::Reader {
public:
  typedef CameraHeaderStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq() const;

  inline bool hasStamp() const;
  inline  ::gac::rscl::CameraHeadTimeStruct::Reader getStamp() const;

  inline bool hasFrameId() const;
  inline  ::capnp::Text::Reader getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraHeaderStruct::Builder {
public:
  typedef CameraHeaderStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq();
  inline void setSeq( ::uint32_t value);

  inline bool hasStamp();
  inline  ::gac::rscl::CameraHeadTimeStruct::Builder getStamp();
  inline void setStamp( ::gac::rscl::CameraHeadTimeStruct::Reader value);
  inline  ::gac::rscl::CameraHeadTimeStruct::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::CameraHeadTimeStruct>&& value);
  inline ::capnp::Orphan< ::gac::rscl::CameraHeadTimeStruct> disownStamp();

  inline bool hasFrameId();
  inline  ::capnp::Text::Builder getFrameId();
  inline void setFrameId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFrameId(unsigned int size);
  inline void adoptFrameId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFrameId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraHeaderStruct::Pipeline {
public:
  typedef CameraHeaderStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::CameraHeadTimeStruct::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraEncodedStruct::Reader {
public:
  typedef CameraEncodedStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDataSize() const;

  inline  ::uint32_t getSendTimeHigh() const;

  inline  ::uint32_t getSendTimeLow() const;

  inline  ::uint32_t getFrameType() const;

  inline bool hasVideoFormat() const;
  inline  ::capnp::Text::Reader getVideoFormat() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline bool hasCameraHeader() const;
  inline  ::gac::rscl::CameraHeaderStruct::Reader getCameraHeader() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraEncodedStruct::Builder {
public:
  typedef CameraEncodedStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDataSize();
  inline void setDataSize( ::uint32_t value);

  inline  ::uint32_t getSendTimeHigh();
  inline void setSendTimeHigh( ::uint32_t value);

  inline  ::uint32_t getSendTimeLow();
  inline void setSendTimeLow( ::uint32_t value);

  inline  ::uint32_t getFrameType();
  inline void setFrameType( ::uint32_t value);

  inline bool hasVideoFormat();
  inline  ::capnp::Text::Builder getVideoFormat();
  inline void setVideoFormat( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVideoFormat(unsigned int size);
  inline void adoptVideoFormat(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVideoFormat();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline bool hasCameraHeader();
  inline  ::gac::rscl::CameraHeaderStruct::Builder getCameraHeader();
  inline void setCameraHeader( ::gac::rscl::CameraHeaderStruct::Reader value);
  inline  ::gac::rscl::CameraHeaderStruct::Builder initCameraHeader();
  inline void adoptCameraHeader(::capnp::Orphan< ::gac::rscl::CameraHeaderStruct>&& value);
  inline ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct> disownCameraHeader();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraEncodedStruct::Pipeline {
public:
  typedef CameraEncodedStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::CameraHeaderStruct::Pipeline getCameraHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraDecodedStruct::Reader {
public:
  typedef CameraDecodedStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getHeight() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getSendTimeHigh() const;

  inline  ::uint32_t getSendTimeLow() const;

  inline  ::uint32_t getFrameType() const;

  inline  ::uint32_t getDataSize() const;

  inline  ::uint64_t getMbufData() const;

  inline bool hasCameraHeader() const;
  inline  ::gac::rscl::CameraHeaderStruct::Reader getCameraHeader() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraDecodedStruct::Builder {
public:
  typedef CameraDecodedStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getSendTimeHigh();
  inline void setSendTimeHigh( ::uint32_t value);

  inline  ::uint32_t getSendTimeLow();
  inline void setSendTimeLow( ::uint32_t value);

  inline  ::uint32_t getFrameType();
  inline void setFrameType( ::uint32_t value);

  inline  ::uint32_t getDataSize();
  inline void setDataSize( ::uint32_t value);

  inline  ::uint64_t getMbufData();
  inline void setMbufData( ::uint64_t value);

  inline bool hasCameraHeader();
  inline  ::gac::rscl::CameraHeaderStruct::Builder getCameraHeader();
  inline void setCameraHeader( ::gac::rscl::CameraHeaderStruct::Reader value);
  inline  ::gac::rscl::CameraHeaderStruct::Builder initCameraHeader();
  inline void adoptCameraHeader(::capnp::Orphan< ::gac::rscl::CameraHeaderStruct>&& value);
  inline ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct> disownCameraHeader();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraDecodedStruct::Pipeline {
public:
  typedef CameraDecodedStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::CameraHeaderStruct::Pipeline getCameraHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t CameraHeadTimeStruct::Reader::getSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getNsec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getNsec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setNsec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getExpStartS() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getExpStartS() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setExpStartS( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getExpStartNs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getExpStartNs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setExpStartNs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getExpEndS() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getExpEndS() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setExpEndS( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getExpEndNs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getExpEndNs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setExpEndNs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getShutter1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getShutter1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setShutter1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeadTimeStruct::Reader::getShutter2() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeadTimeStruct::Builder::getShutter2() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CameraHeadTimeStruct::Builder::setShutter2( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraHeaderStruct::Reader::getSeq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraHeaderStruct::Builder::getSeq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraHeaderStruct::Builder::setSeq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CameraHeaderStruct::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraHeaderStruct::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::CameraHeadTimeStruct::Reader CameraHeaderStruct::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::CameraHeadTimeStruct::Builder CameraHeaderStruct::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::CameraHeadTimeStruct::Pipeline CameraHeaderStruct::Pipeline::getStamp() {
  return  ::gac::rscl::CameraHeadTimeStruct::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CameraHeaderStruct::Builder::setStamp( ::gac::rscl::CameraHeadTimeStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::CameraHeadTimeStruct::Builder CameraHeaderStruct::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraHeaderStruct::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::CameraHeadTimeStruct>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::CameraHeadTimeStruct> CameraHeaderStruct::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeadTimeStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraHeaderStruct::Reader::hasFrameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraHeaderStruct::Builder::hasFrameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CameraHeaderStruct::Reader::getFrameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CameraHeaderStruct::Builder::getFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraHeaderStruct::Builder::setFrameId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CameraHeaderStruct::Builder::initFrameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraHeaderStruct::Builder::adoptFrameId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CameraHeaderStruct::Builder::disownFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t CameraEncodedStruct::Reader::getDataSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraEncodedStruct::Builder::getDataSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraEncodedStruct::Builder::setDataSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraEncodedStruct::Reader::getSendTimeHigh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraEncodedStruct::Builder::getSendTimeHigh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraEncodedStruct::Builder::setSendTimeHigh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraEncodedStruct::Reader::getSendTimeLow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraEncodedStruct::Builder::getSendTimeLow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CameraEncodedStruct::Builder::setSendTimeLow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraEncodedStruct::Reader::getFrameType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraEncodedStruct::Builder::getFrameType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CameraEncodedStruct::Builder::setFrameType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CameraEncodedStruct::Reader::hasVideoFormat() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraEncodedStruct::Builder::hasVideoFormat() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CameraEncodedStruct::Reader::getVideoFormat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CameraEncodedStruct::Builder::getVideoFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraEncodedStruct::Builder::setVideoFormat( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CameraEncodedStruct::Builder::initVideoFormat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraEncodedStruct::Builder::adoptVideoFormat(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CameraEncodedStruct::Builder::disownVideoFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraEncodedStruct::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraEncodedStruct::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CameraEncodedStruct::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CameraEncodedStruct::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraEncodedStruct::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CameraEncodedStruct::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraEncodedStruct::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CameraEncodedStruct::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CameraEncodedStruct::Reader::hasCameraHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CameraEncodedStruct::Builder::hasCameraHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::CameraHeaderStruct::Reader CameraEncodedStruct::Reader::getCameraHeader() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::CameraHeaderStruct::Builder CameraEncodedStruct::Builder::getCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::CameraHeaderStruct::Pipeline CameraEncodedStruct::Pipeline::getCameraHeader() {
  return  ::gac::rscl::CameraHeaderStruct::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CameraEncodedStruct::Builder::setCameraHeader( ::gac::rscl::CameraHeaderStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::CameraHeaderStruct::Builder CameraEncodedStruct::Builder::initCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CameraEncodedStruct::Builder::adoptCameraHeader(
    ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct> CameraEncodedStruct::Builder::disownCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t CameraDecodedStruct::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraDecodedStruct::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraDecodedStruct::Reader::getSendTimeHigh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getSendTimeHigh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setSendTimeHigh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraDecodedStruct::Reader::getSendTimeLow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getSendTimeLow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setSendTimeLow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraDecodedStruct::Reader::getFrameType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getFrameType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setFrameType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraDecodedStruct::Reader::getDataSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraDecodedStruct::Builder::getDataSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setDataSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CameraDecodedStruct::Reader::getMbufData() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CameraDecodedStruct::Builder::getMbufData() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CameraDecodedStruct::Builder::setMbufData( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CameraDecodedStruct::Reader::hasCameraHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraDecodedStruct::Builder::hasCameraHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::CameraHeaderStruct::Reader CameraDecodedStruct::Reader::getCameraHeader() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::CameraHeaderStruct::Builder CameraDecodedStruct::Builder::getCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::CameraHeaderStruct::Pipeline CameraDecodedStruct::Pipeline::getCameraHeader() {
  return  ::gac::rscl::CameraHeaderStruct::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CameraDecodedStruct::Builder::setCameraHeader( ::gac::rscl::CameraHeaderStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::CameraHeaderStruct::Builder CameraDecodedStruct::Builder::initCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraDecodedStruct::Builder::adoptCameraHeader(
    ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::CameraHeaderStruct> CameraDecodedStruct::Builder::disownCameraHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CameraHeaderStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

