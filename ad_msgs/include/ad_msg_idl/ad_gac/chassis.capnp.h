// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: chassis.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f68bfbdc2d7cdb8a);
CAPNP_DECLARE_SCHEMA(c93c395dc5e2a260);
CAPNP_DECLARE_SCHEMA(d062513c1682d4bc);
CAPNP_DECLARE_SCHEMA(bf935b33930ad867);
CAPNP_DECLARE_SCHEMA(97bd75852bb56031);
CAPNP_DECLARE_SCHEMA(cdfa0c8df2b0b207);
CAPNP_DECLARE_SCHEMA(c86cb2ec47bb6731);
CAPNP_DECLARE_SCHEMA(ced67ffbcf7bd930);
CAPNP_DECLARE_SCHEMA(fcbe4034edad9889);
CAPNP_DECLARE_SCHEMA(c8d0ac161a680cd0);
CAPNP_DECLARE_SCHEMA(d26c22b4144a356a);
CAPNP_DECLARE_SCHEMA(a53e08d167a772d3);
CAPNP_DECLARE_SCHEMA(d95660c023089ded);
CAPNP_DECLARE_SCHEMA(d103bf61ce7e7eae);
CAPNP_DECLARE_SCHEMA(dbcd7059dfa37ab9);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {

struct AutonomyMode {
  AutonomyMode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f68bfbdc2d7cdb8a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Float32WithValid {
  Float32WithValid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c93c395dc5e2a260, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Uint8WithValid {
  Uint8WithValid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d062513c1682d4bc, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gear {
  Gear() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf935b33930ad867, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GearInfo {
  GearInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97bd75852bb56031, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActuatorWorkStatus {
  ActuatorWorkStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cdfa0c8df2b0b207, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActuatorStatus {
  ActuatorStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c86cb2ec47bb6731, 0, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SteerInfo {
  SteerInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ced67ffbcf7bd930, 2, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WheelSpeed {
  WheelSpeed() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcbe4034edad9889, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BrakeInfo {
  BrakeInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8d0ac161a680cd0, 6, 25)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ThrottleInfo {
  ThrottleInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d26c22b4144a356a, 2, 19)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleMotion {
  VehicleMotion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a53e08d167a772d3, 0, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChassisReportTime {
  ChassisReportTime() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d95660c023089ded, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChassisReportHeader {
  ChassisReportHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d103bf61ce7e7eae, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChassisReportMsg {
  ChassisReportMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbcd7059dfa37ab9, 2, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AutonomyMode::Reader {
public:
  typedef AutonomyMode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getAutonomyLevel() const;

  inline bool getGearAutonomous() const;

  inline bool getSpeedAutonomous() const;

  inline bool getSteeringAutonomous() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AutonomyMode::Builder {
public:
  typedef AutonomyMode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getAutonomyLevel();
  inline void setAutonomyLevel( ::uint8_t value);

  inline bool getGearAutonomous();
  inline void setGearAutonomous(bool value);

  inline bool getSpeedAutonomous();
  inline void setSpeedAutonomous(bool value);

  inline bool getSteeringAutonomous();
  inline void setSteeringAutonomous(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AutonomyMode::Pipeline {
public:
  typedef AutonomyMode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Float32WithValid::Reader {
public:
  typedef Float32WithValid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getValue() const;

  inline  ::uint8_t getConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Float32WithValid::Builder {
public:
  typedef Float32WithValid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getValue();
  inline void setValue(float value);

  inline  ::uint8_t getConfidence();
  inline void setConfidence( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Float32WithValid::Pipeline {
public:
  typedef Float32WithValid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Uint8WithValid::Reader {
public:
  typedef Uint8WithValid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getValue() const;

  inline  ::uint8_t getConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Uint8WithValid::Builder {
public:
  typedef Uint8WithValid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getValue();
  inline void setValue( ::uint8_t value);

  inline  ::uint8_t getConfidence();
  inline void setConfidence( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Uint8WithValid::Pipeline {
public:
  typedef Uint8WithValid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gear::Reader {
public:
  typedef Gear Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gear::Builder {
public:
  typedef Gear Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getValue();
  inline void setValue( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gear::Pipeline {
public:
  typedef Gear Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GearInfo::Reader {
public:
  typedef GearInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGear() const;
  inline  ::gac::rscl::Gear::Reader getGear() const;

  inline bool hasGearLever() const;
  inline  ::gac::rscl::Gear::Reader getGearLever() const;

  inline  ::uint8_t getGearShiftStatus() const;

  inline bool hasDriverOverride() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getDriverOverride() const;

  inline  ::int32_t getFaultCode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GearInfo::Builder {
public:
  typedef GearInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGear();
  inline  ::gac::rscl::Gear::Builder getGear();
  inline void setGear( ::gac::rscl::Gear::Reader value);
  inline  ::gac::rscl::Gear::Builder initGear();
  inline void adoptGear(::capnp::Orphan< ::gac::rscl::Gear>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Gear> disownGear();

  inline bool hasGearLever();
  inline  ::gac::rscl::Gear::Builder getGearLever();
  inline void setGearLever( ::gac::rscl::Gear::Reader value);
  inline  ::gac::rscl::Gear::Builder initGearLever();
  inline void adoptGearLever(::capnp::Orphan< ::gac::rscl::Gear>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Gear> disownGearLever();

  inline  ::uint8_t getGearShiftStatus();
  inline void setGearShiftStatus( ::uint8_t value);

  inline bool hasDriverOverride();
  inline  ::gac::rscl::Uint8WithValid::Builder getDriverOverride();
  inline void setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initDriverOverride();
  inline void adoptDriverOverride(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownDriverOverride();

  inline  ::int32_t getFaultCode();
  inline void setFaultCode( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GearInfo::Pipeline {
public:
  typedef GearInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Gear::Pipeline getGear();
  inline  ::gac::rscl::Gear::Pipeline getGearLever();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getDriverOverride();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActuatorWorkStatus::Reader {
public:
  typedef ActuatorWorkStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getCapability() const;

  inline  ::uint8_t getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActuatorWorkStatus::Builder {
public:
  typedef ActuatorWorkStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getCapability();
  inline void setCapability( ::uint8_t value);

  inline  ::uint8_t getResponse();
  inline void setResponse( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActuatorWorkStatus::Pipeline {
public:
  typedef ActuatorWorkStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActuatorStatus::Reader {
public:
  typedef ActuatorStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAngleSteer() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getAngleSteer() const;

  inline bool hasTorqueSteer() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getTorqueSteer() const;

  inline bool hasEmergencyAngleSteer() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getEmergencyAngleSteer() const;

  inline bool hasEmergencyTorqueSteer() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getEmergencyTorqueSteer() const;

  inline bool hasSteerVibrate() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getSteerVibrate() const;

  inline bool hasAccelerate() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getAccelerate() const;

  inline bool hasDecelerate() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getDecelerate() const;

  inline bool hasEmergencyDecelerate() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getEmergencyDecelerate() const;

  inline bool hasDrive() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getDrive() const;

  inline bool hasBrake() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getBrake() const;

  inline bool hasVlc() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getVlc() const;

  inline bool hasEmergencyStop() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getEmergencyStop() const;

  inline bool hasStop() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getStop() const;

  inline bool hasPark() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getPark() const;

  inline bool hasGear() const;
  inline  ::gac::rscl::ActuatorWorkStatus::Reader getGear() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActuatorStatus::Builder {
public:
  typedef ActuatorStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAngleSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getAngleSteer();
  inline void setAngleSteer( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initAngleSteer();
  inline void adoptAngleSteer(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownAngleSteer();

  inline bool hasTorqueSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getTorqueSteer();
  inline void setTorqueSteer( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initTorqueSteer();
  inline void adoptTorqueSteer(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownTorqueSteer();

  inline bool hasEmergencyAngleSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getEmergencyAngleSteer();
  inline void setEmergencyAngleSteer( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initEmergencyAngleSteer();
  inline void adoptEmergencyAngleSteer(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownEmergencyAngleSteer();

  inline bool hasEmergencyTorqueSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getEmergencyTorqueSteer();
  inline void setEmergencyTorqueSteer( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initEmergencyTorqueSteer();
  inline void adoptEmergencyTorqueSteer(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownEmergencyTorqueSteer();

  inline bool hasSteerVibrate();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getSteerVibrate();
  inline void setSteerVibrate( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initSteerVibrate();
  inline void adoptSteerVibrate(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownSteerVibrate();

  inline bool hasAccelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getAccelerate();
  inline void setAccelerate( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initAccelerate();
  inline void adoptAccelerate(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownAccelerate();

  inline bool hasDecelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getDecelerate();
  inline void setDecelerate( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initDecelerate();
  inline void adoptDecelerate(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownDecelerate();

  inline bool hasEmergencyDecelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getEmergencyDecelerate();
  inline void setEmergencyDecelerate( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initEmergencyDecelerate();
  inline void adoptEmergencyDecelerate(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownEmergencyDecelerate();

  inline bool hasDrive();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getDrive();
  inline void setDrive( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initDrive();
  inline void adoptDrive(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownDrive();

  inline bool hasBrake();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getBrake();
  inline void setBrake( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initBrake();
  inline void adoptBrake(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownBrake();

  inline bool hasVlc();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getVlc();
  inline void setVlc( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initVlc();
  inline void adoptVlc(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownVlc();

  inline bool hasEmergencyStop();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getEmergencyStop();
  inline void setEmergencyStop( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initEmergencyStop();
  inline void adoptEmergencyStop(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownEmergencyStop();

  inline bool hasStop();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getStop();
  inline void setStop( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initStop();
  inline void adoptStop(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownStop();

  inline bool hasPark();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getPark();
  inline void setPark( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initPark();
  inline void adoptPark(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownPark();

  inline bool hasGear();
  inline  ::gac::rscl::ActuatorWorkStatus::Builder getGear();
  inline void setGear( ::gac::rscl::ActuatorWorkStatus::Reader value);
  inline  ::gac::rscl::ActuatorWorkStatus::Builder initGear();
  inline void adoptGear(::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> disownGear();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActuatorStatus::Pipeline {
public:
  typedef ActuatorStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getAngleSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getTorqueSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getEmergencyAngleSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getEmergencyTorqueSteer();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getSteerVibrate();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getAccelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getDecelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getEmergencyDecelerate();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getDrive();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getBrake();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getVlc();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getEmergencyStop();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getStop();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getPark();
  inline  ::gac::rscl::ActuatorWorkStatus::Pipeline getGear();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SteerInfo::Reader {
public:
  typedef SteerInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSteerAngle() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSteerAngle() const;

  inline bool hasSteerAngleRate() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSteerAngleRate() const;

  inline bool hasSteerPinionAngle() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSteerPinionAngle() const;

  inline bool hasSteerPinionAngleRate() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSteerPinionAngleRate() const;

  inline bool hasFrontSteerAngle() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontSteerAngle() const;

  inline bool hasFrontSteerAngleRate() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontSteerAngleRate() const;

  inline bool hasDriverHandOn() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriverHandOn() const;

  inline bool hasDriverHandTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriverHandTorque() const;

  inline bool hasSteerTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSteerTorque() const;

  inline bool hasMotorCurrent() const;
  inline  ::gac::rscl::Float32WithValid::Reader getMotorCurrent() const;

  inline bool hasDriverOverride() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getDriverOverride() const;

  inline  ::uint8_t getPersonalMode() const;

  inline  ::uint8_t getCommandFault() const;

  inline  ::uint8_t getEpsStatusMaster() const;

  inline  ::uint8_t getEpsStatusSlave() const;

  inline  ::int32_t getFaultCode() const;

  inline bool getDrvrSteerMonrEnaSts() const;

  inline bool hasHandsOffConf() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getHandsOffConf() const;

  inline bool hasEpsMotorTq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getEpsMotorTq() const;

  inline  ::uint8_t getEpsMotorTemp() const;

  inline  ::uint8_t getLdwWarnSts() const;

  inline  ::uint8_t getEpsOperMod() const;

  inline  ::uint8_t getEpsAbortFb() const;

  inline  ::uint8_t getEpsTqSensSts() const;

  inline  ::uint8_t getEpsSteerAgSensFilr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SteerInfo::Builder {
public:
  typedef SteerInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSteerAngle();
  inline  ::gac::rscl::Float32WithValid::Builder getSteerAngle();
  inline void setSteerAngle( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSteerAngle();
  inline void adoptSteerAngle(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSteerAngle();

  inline bool hasSteerAngleRate();
  inline  ::gac::rscl::Float32WithValid::Builder getSteerAngleRate();
  inline void setSteerAngleRate( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSteerAngleRate();
  inline void adoptSteerAngleRate(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSteerAngleRate();

  inline bool hasSteerPinionAngle();
  inline  ::gac::rscl::Float32WithValid::Builder getSteerPinionAngle();
  inline void setSteerPinionAngle( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSteerPinionAngle();
  inline void adoptSteerPinionAngle(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSteerPinionAngle();

  inline bool hasSteerPinionAngleRate();
  inline  ::gac::rscl::Float32WithValid::Builder getSteerPinionAngleRate();
  inline void setSteerPinionAngleRate( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSteerPinionAngleRate();
  inline void adoptSteerPinionAngleRate(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSteerPinionAngleRate();

  inline bool hasFrontSteerAngle();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontSteerAngle();
  inline void setFrontSteerAngle( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontSteerAngle();
  inline void adoptFrontSteerAngle(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontSteerAngle();

  inline bool hasFrontSteerAngleRate();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontSteerAngleRate();
  inline void setFrontSteerAngleRate( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontSteerAngleRate();
  inline void adoptFrontSteerAngleRate(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontSteerAngleRate();

  inline bool hasDriverHandOn();
  inline  ::gac::rscl::Float32WithValid::Builder getDriverHandOn();
  inline void setDriverHandOn( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriverHandOn();
  inline void adoptDriverHandOn(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriverHandOn();

  inline bool hasDriverHandTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getDriverHandTorque();
  inline void setDriverHandTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriverHandTorque();
  inline void adoptDriverHandTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriverHandTorque();

  inline bool hasSteerTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getSteerTorque();
  inline void setSteerTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSteerTorque();
  inline void adoptSteerTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSteerTorque();

  inline bool hasMotorCurrent();
  inline  ::gac::rscl::Float32WithValid::Builder getMotorCurrent();
  inline void setMotorCurrent( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initMotorCurrent();
  inline void adoptMotorCurrent(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownMotorCurrent();

  inline bool hasDriverOverride();
  inline  ::gac::rscl::Uint8WithValid::Builder getDriverOverride();
  inline void setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initDriverOverride();
  inline void adoptDriverOverride(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownDriverOverride();

  inline  ::uint8_t getPersonalMode();
  inline void setPersonalMode( ::uint8_t value);

  inline  ::uint8_t getCommandFault();
  inline void setCommandFault( ::uint8_t value);

  inline  ::uint8_t getEpsStatusMaster();
  inline void setEpsStatusMaster( ::uint8_t value);

  inline  ::uint8_t getEpsStatusSlave();
  inline void setEpsStatusSlave( ::uint8_t value);

  inline  ::int32_t getFaultCode();
  inline void setFaultCode( ::int32_t value);

  inline bool getDrvrSteerMonrEnaSts();
  inline void setDrvrSteerMonrEnaSts(bool value);

  inline bool hasHandsOffConf();
  inline  ::gac::rscl::Uint8WithValid::Builder getHandsOffConf();
  inline void setHandsOffConf( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initHandsOffConf();
  inline void adoptHandsOffConf(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownHandsOffConf();

  inline bool hasEpsMotorTq();
  inline  ::gac::rscl::Float32WithValid::Builder getEpsMotorTq();
  inline void setEpsMotorTq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initEpsMotorTq();
  inline void adoptEpsMotorTq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownEpsMotorTq();

  inline  ::uint8_t getEpsMotorTemp();
  inline void setEpsMotorTemp( ::uint8_t value);

  inline  ::uint8_t getLdwWarnSts();
  inline void setLdwWarnSts( ::uint8_t value);

  inline  ::uint8_t getEpsOperMod();
  inline void setEpsOperMod( ::uint8_t value);

  inline  ::uint8_t getEpsAbortFb();
  inline void setEpsAbortFb( ::uint8_t value);

  inline  ::uint8_t getEpsTqSensSts();
  inline void setEpsTqSensSts( ::uint8_t value);

  inline  ::uint8_t getEpsSteerAgSensFilr();
  inline void setEpsSteerAgSensFilr( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SteerInfo::Pipeline {
public:
  typedef SteerInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Float32WithValid::Pipeline getSteerAngle();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSteerAngleRate();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSteerPinionAngle();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSteerPinionAngleRate();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontSteerAngle();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontSteerAngleRate();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriverHandOn();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriverHandTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSteerTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getMotorCurrent();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getDriverOverride();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getHandsOffConf();
  inline  ::gac::rscl::Float32WithValid::Pipeline getEpsMotorTq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WheelSpeed::Reader {
public:
  typedef WheelSpeed Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getWheelDirection() const;

  inline  ::int32_t getWheelCount() const;

  inline bool getWheelCountValid() const;

  inline float getWheelSpeedMps() const;

  inline bool getWheelSpeedMpsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WheelSpeed::Builder {
public:
  typedef WheelSpeed Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getWheelDirection();
  inline void setWheelDirection( ::uint8_t value);

  inline  ::int32_t getWheelCount();
  inline void setWheelCount( ::int32_t value);

  inline bool getWheelCountValid();
  inline void setWheelCountValid(bool value);

  inline float getWheelSpeedMps();
  inline void setWheelSpeedMps(float value);

  inline bool getWheelSpeedMpsValid();
  inline void setWheelSpeedMpsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WheelSpeed::Pipeline {
public:
  typedef WheelSpeed Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BrakeInfo::Reader {
public:
  typedef BrakeInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBrakePedal() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakePedal() const;

  inline bool hasBrakePedalSwitch() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakePedalSwitch() const;

  inline bool hasDriverOverride() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriverOverride() const;

  inline bool hasMastCylinderPressure() const;
  inline  ::gac::rscl::Float32WithValid::Reader getMastCylinderPressure() const;

  inline bool hasMastCylinderPosition() const;
  inline  ::gac::rscl::Float32WithValid::Reader getMastCylinderPosition() const;

  inline bool hasBrakeTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakeTorque() const;

  inline bool hasBrakeForce() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakeForce() const;

  inline bool hasBrakeTorqueMax() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakeTorqueMax() const;

  inline bool hasDriverDesiredTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriverDesiredTorque() const;

  inline bool hasBrakeTotalTqReq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakeTotalTqReq() const;

  inline bool hasElecBrkTqReq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getElecBrkTqReq() const;

  inline bool hasHydrauBrkTqReq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getHydrauBrkTqReq() const;

  inline  ::uint8_t getBrakeOverHeatStatus() const;

  inline  ::uint8_t getAebAvl() const;

  inline  ::uint8_t getAebActv() const;

  inline  ::uint8_t getPrefillAvl() const;

  inline  ::uint8_t getPrefillActv() const;

  inline  ::uint8_t getBrkCtrlAvl() const;

  inline  ::uint8_t getBrkCtrlActv() const;

  inline  ::uint8_t getEspAbortFb() const;

  inline bool hasVelocity() const;
  inline  ::gac::rscl::Float32WithValid::Reader getVelocity() const;

  inline bool hasWheelSpeedFl() const;
  inline  ::gac::rscl::WheelSpeed::Reader getWheelSpeedFl() const;

  inline bool hasWheelSpeedFr() const;
  inline  ::gac::rscl::WheelSpeed::Reader getWheelSpeedFr() const;

  inline bool hasWheelSpeedRl() const;
  inline  ::gac::rscl::WheelSpeed::Reader getWheelSpeedRl() const;

  inline bool hasWheelSpeedRr() const;
  inline  ::gac::rscl::WheelSpeed::Reader getWheelSpeedRr() const;

  inline bool hasFrontWhlIncTarTq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontWhlIncTarTq() const;

  inline bool hasFrontWhlDecTarTq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontWhlDecTarTq() const;

  inline bool hasRearWhlIncTarTq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRearWhlIncTarTq() const;

  inline bool hasRearWhlDecTarTq() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRearWhlDecTarTq() const;

  inline bool hasStandstill() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getStandstill() const;

  inline bool hasRoadFriction() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRoadFriction() const;

  inline bool hasBrakeTemperature() const;
  inline  ::gac::rscl::Float32WithValid::Reader getBrakeTemperature() const;

  inline bool hasSlope() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSlope() const;

  inline  ::uint8_t getBrakeStatusMaster() const;

  inline  ::uint8_t getBrakeStatusSlave() const;

  inline  ::uint8_t getCommandFault() const;

  inline  ::uint8_t getEpbFaultStatus() const;

  inline  ::uint8_t getEpbLockStatus() const;

  inline  ::uint8_t getEpbButtonStatus() const;

  inline  ::uint8_t getEpbOverride() const;

  inline  ::uint8_t getEpbAvl() const;

  inline float getEpbClampForce() const;

  inline  ::uint8_t getFaultCode() const;

  inline  ::int32_t getAutoHoldActvSts() const;

  inline bool getEbdActive() const;

  inline  ::uint8_t getEbdStatus() const;

  inline bool getAbsActive() const;

  inline  ::uint8_t getAbsStatus() const;

  inline bool getEscActive() const;

  inline  ::uint8_t getEscStatus() const;

  inline bool getTcsActive() const;

  inline  ::uint8_t getTcsStatus() const;

  inline  ::uint8_t getArpActvSts() const;

  inline  ::uint8_t getArpFctAvl() const;

  inline  ::uint8_t getArpFailrSts() const;

  inline  ::uint8_t getDbfActvSts() const;

  inline  ::uint8_t getHdcActvSts() const;

  inline  ::uint8_t getHhcActvSts() const;

  inline  ::uint8_t getEbaActvSts() const;

  inline  ::uint8_t getEbaAvl() const;

  inline  ::uint8_t getEbaActvRank() const;

  inline  ::uint8_t getAwbAvl() const;

  inline  ::uint8_t getAwbActv() const;

  inline  ::uint8_t getEspABrkDegStWarning() const;

  inline  ::uint8_t getEspABrkDegSt() const;

  inline  ::uint8_t getEspPriBrStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BrakeInfo::Builder {
public:
  typedef BrakeInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBrakePedal();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakePedal();
  inline void setBrakePedal( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakePedal();
  inline void adoptBrakePedal(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakePedal();

  inline bool hasBrakePedalSwitch();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakePedalSwitch();
  inline void setBrakePedalSwitch( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakePedalSwitch();
  inline void adoptBrakePedalSwitch(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakePedalSwitch();

  inline bool hasDriverOverride();
  inline  ::gac::rscl::Float32WithValid::Builder getDriverOverride();
  inline void setDriverOverride( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriverOverride();
  inline void adoptDriverOverride(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriverOverride();

  inline bool hasMastCylinderPressure();
  inline  ::gac::rscl::Float32WithValid::Builder getMastCylinderPressure();
  inline void setMastCylinderPressure( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initMastCylinderPressure();
  inline void adoptMastCylinderPressure(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownMastCylinderPressure();

  inline bool hasMastCylinderPosition();
  inline  ::gac::rscl::Float32WithValid::Builder getMastCylinderPosition();
  inline void setMastCylinderPosition( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initMastCylinderPosition();
  inline void adoptMastCylinderPosition(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownMastCylinderPosition();

  inline bool hasBrakeTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakeTorque();
  inline void setBrakeTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakeTorque();
  inline void adoptBrakeTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakeTorque();

  inline bool hasBrakeForce();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakeForce();
  inline void setBrakeForce( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakeForce();
  inline void adoptBrakeForce(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakeForce();

  inline bool hasBrakeTorqueMax();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakeTorqueMax();
  inline void setBrakeTorqueMax( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakeTorqueMax();
  inline void adoptBrakeTorqueMax(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakeTorqueMax();

  inline bool hasDriverDesiredTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getDriverDesiredTorque();
  inline void setDriverDesiredTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriverDesiredTorque();
  inline void adoptDriverDesiredTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriverDesiredTorque();

  inline bool hasBrakeTotalTqReq();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakeTotalTqReq();
  inline void setBrakeTotalTqReq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakeTotalTqReq();
  inline void adoptBrakeTotalTqReq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakeTotalTqReq();

  inline bool hasElecBrkTqReq();
  inline  ::gac::rscl::Float32WithValid::Builder getElecBrkTqReq();
  inline void setElecBrkTqReq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initElecBrkTqReq();
  inline void adoptElecBrkTqReq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownElecBrkTqReq();

  inline bool hasHydrauBrkTqReq();
  inline  ::gac::rscl::Float32WithValid::Builder getHydrauBrkTqReq();
  inline void setHydrauBrkTqReq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initHydrauBrkTqReq();
  inline void adoptHydrauBrkTqReq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownHydrauBrkTqReq();

  inline  ::uint8_t getBrakeOverHeatStatus();
  inline void setBrakeOverHeatStatus( ::uint8_t value);

  inline  ::uint8_t getAebAvl();
  inline void setAebAvl( ::uint8_t value);

  inline  ::uint8_t getAebActv();
  inline void setAebActv( ::uint8_t value);

  inline  ::uint8_t getPrefillAvl();
  inline void setPrefillAvl( ::uint8_t value);

  inline  ::uint8_t getPrefillActv();
  inline void setPrefillActv( ::uint8_t value);

  inline  ::uint8_t getBrkCtrlAvl();
  inline void setBrkCtrlAvl( ::uint8_t value);

  inline  ::uint8_t getBrkCtrlActv();
  inline void setBrkCtrlActv( ::uint8_t value);

  inline  ::uint8_t getEspAbortFb();
  inline void setEspAbortFb( ::uint8_t value);

  inline bool hasVelocity();
  inline  ::gac::rscl::Float32WithValid::Builder getVelocity();
  inline void setVelocity( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initVelocity();
  inline void adoptVelocity(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownVelocity();

  inline bool hasWheelSpeedFl();
  inline  ::gac::rscl::WheelSpeed::Builder getWheelSpeedFl();
  inline void setWheelSpeedFl( ::gac::rscl::WheelSpeed::Reader value);
  inline  ::gac::rscl::WheelSpeed::Builder initWheelSpeedFl();
  inline void adoptWheelSpeedFl(::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value);
  inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> disownWheelSpeedFl();

  inline bool hasWheelSpeedFr();
  inline  ::gac::rscl::WheelSpeed::Builder getWheelSpeedFr();
  inline void setWheelSpeedFr( ::gac::rscl::WheelSpeed::Reader value);
  inline  ::gac::rscl::WheelSpeed::Builder initWheelSpeedFr();
  inline void adoptWheelSpeedFr(::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value);
  inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> disownWheelSpeedFr();

  inline bool hasWheelSpeedRl();
  inline  ::gac::rscl::WheelSpeed::Builder getWheelSpeedRl();
  inline void setWheelSpeedRl( ::gac::rscl::WheelSpeed::Reader value);
  inline  ::gac::rscl::WheelSpeed::Builder initWheelSpeedRl();
  inline void adoptWheelSpeedRl(::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value);
  inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> disownWheelSpeedRl();

  inline bool hasWheelSpeedRr();
  inline  ::gac::rscl::WheelSpeed::Builder getWheelSpeedRr();
  inline void setWheelSpeedRr( ::gac::rscl::WheelSpeed::Reader value);
  inline  ::gac::rscl::WheelSpeed::Builder initWheelSpeedRr();
  inline void adoptWheelSpeedRr(::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value);
  inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> disownWheelSpeedRr();

  inline bool hasFrontWhlIncTarTq();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontWhlIncTarTq();
  inline void setFrontWhlIncTarTq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontWhlIncTarTq();
  inline void adoptFrontWhlIncTarTq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontWhlIncTarTq();

  inline bool hasFrontWhlDecTarTq();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontWhlDecTarTq();
  inline void setFrontWhlDecTarTq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontWhlDecTarTq();
  inline void adoptFrontWhlDecTarTq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontWhlDecTarTq();

  inline bool hasRearWhlIncTarTq();
  inline  ::gac::rscl::Float32WithValid::Builder getRearWhlIncTarTq();
  inline void setRearWhlIncTarTq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRearWhlIncTarTq();
  inline void adoptRearWhlIncTarTq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRearWhlIncTarTq();

  inline bool hasRearWhlDecTarTq();
  inline  ::gac::rscl::Float32WithValid::Builder getRearWhlDecTarTq();
  inline void setRearWhlDecTarTq( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRearWhlDecTarTq();
  inline void adoptRearWhlDecTarTq(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRearWhlDecTarTq();

  inline bool hasStandstill();
  inline  ::gac::rscl::Uint8WithValid::Builder getStandstill();
  inline void setStandstill( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initStandstill();
  inline void adoptStandstill(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownStandstill();

  inline bool hasRoadFriction();
  inline  ::gac::rscl::Float32WithValid::Builder getRoadFriction();
  inline void setRoadFriction( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRoadFriction();
  inline void adoptRoadFriction(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRoadFriction();

  inline bool hasBrakeTemperature();
  inline  ::gac::rscl::Float32WithValid::Builder getBrakeTemperature();
  inline void setBrakeTemperature( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initBrakeTemperature();
  inline void adoptBrakeTemperature(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownBrakeTemperature();

  inline bool hasSlope();
  inline  ::gac::rscl::Float32WithValid::Builder getSlope();
  inline void setSlope( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSlope();
  inline void adoptSlope(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSlope();

  inline  ::uint8_t getBrakeStatusMaster();
  inline void setBrakeStatusMaster( ::uint8_t value);

  inline  ::uint8_t getBrakeStatusSlave();
  inline void setBrakeStatusSlave( ::uint8_t value);

  inline  ::uint8_t getCommandFault();
  inline void setCommandFault( ::uint8_t value);

  inline  ::uint8_t getEpbFaultStatus();
  inline void setEpbFaultStatus( ::uint8_t value);

  inline  ::uint8_t getEpbLockStatus();
  inline void setEpbLockStatus( ::uint8_t value);

  inline  ::uint8_t getEpbButtonStatus();
  inline void setEpbButtonStatus( ::uint8_t value);

  inline  ::uint8_t getEpbOverride();
  inline void setEpbOverride( ::uint8_t value);

  inline  ::uint8_t getEpbAvl();
  inline void setEpbAvl( ::uint8_t value);

  inline float getEpbClampForce();
  inline void setEpbClampForce(float value);

  inline  ::uint8_t getFaultCode();
  inline void setFaultCode( ::uint8_t value);

  inline  ::int32_t getAutoHoldActvSts();
  inline void setAutoHoldActvSts( ::int32_t value);

  inline bool getEbdActive();
  inline void setEbdActive(bool value);

  inline  ::uint8_t getEbdStatus();
  inline void setEbdStatus( ::uint8_t value);

  inline bool getAbsActive();
  inline void setAbsActive(bool value);

  inline  ::uint8_t getAbsStatus();
  inline void setAbsStatus( ::uint8_t value);

  inline bool getEscActive();
  inline void setEscActive(bool value);

  inline  ::uint8_t getEscStatus();
  inline void setEscStatus( ::uint8_t value);

  inline bool getTcsActive();
  inline void setTcsActive(bool value);

  inline  ::uint8_t getTcsStatus();
  inline void setTcsStatus( ::uint8_t value);

  inline  ::uint8_t getArpActvSts();
  inline void setArpActvSts( ::uint8_t value);

  inline  ::uint8_t getArpFctAvl();
  inline void setArpFctAvl( ::uint8_t value);

  inline  ::uint8_t getArpFailrSts();
  inline void setArpFailrSts( ::uint8_t value);

  inline  ::uint8_t getDbfActvSts();
  inline void setDbfActvSts( ::uint8_t value);

  inline  ::uint8_t getHdcActvSts();
  inline void setHdcActvSts( ::uint8_t value);

  inline  ::uint8_t getHhcActvSts();
  inline void setHhcActvSts( ::uint8_t value);

  inline  ::uint8_t getEbaActvSts();
  inline void setEbaActvSts( ::uint8_t value);

  inline  ::uint8_t getEbaAvl();
  inline void setEbaAvl( ::uint8_t value);

  inline  ::uint8_t getEbaActvRank();
  inline void setEbaActvRank( ::uint8_t value);

  inline  ::uint8_t getAwbAvl();
  inline void setAwbAvl( ::uint8_t value);

  inline  ::uint8_t getAwbActv();
  inline void setAwbActv( ::uint8_t value);

  inline  ::uint8_t getEspABrkDegStWarning();
  inline void setEspABrkDegStWarning( ::uint8_t value);

  inline  ::uint8_t getEspABrkDegSt();
  inline void setEspABrkDegSt( ::uint8_t value);

  inline  ::uint8_t getEspPriBrStatus();
  inline void setEspPriBrStatus( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BrakeInfo::Pipeline {
public:
  typedef BrakeInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakePedal();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakePedalSwitch();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriverOverride();
  inline  ::gac::rscl::Float32WithValid::Pipeline getMastCylinderPressure();
  inline  ::gac::rscl::Float32WithValid::Pipeline getMastCylinderPosition();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakeTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakeForce();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakeTorqueMax();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriverDesiredTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakeTotalTqReq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getElecBrkTqReq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getHydrauBrkTqReq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getVelocity();
  inline  ::gac::rscl::WheelSpeed::Pipeline getWheelSpeedFl();
  inline  ::gac::rscl::WheelSpeed::Pipeline getWheelSpeedFr();
  inline  ::gac::rscl::WheelSpeed::Pipeline getWheelSpeedRl();
  inline  ::gac::rscl::WheelSpeed::Pipeline getWheelSpeedRr();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontWhlIncTarTq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontWhlDecTarTq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRearWhlIncTarTq();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRearWhlDecTarTq();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getStandstill();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRoadFriction();
  inline  ::gac::rscl::Float32WithValid::Pipeline getBrakeTemperature();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSlope();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThrottleInfo::Reader {
public:
  typedef ThrottleInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasThrottlePedal() const;
  inline  ::gac::rscl::Float32WithValid::Reader getThrottlePedal() const;

  inline bool hasThrottlePedalRate() const;
  inline  ::gac::rscl::Float32WithValid::Reader getThrottlePedalRate() const;

  inline bool hasDriverOverride() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getDriverOverride() const;

  inline bool hasDriveTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriveTorque() const;

  inline bool hasDriveTorqueMax() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriveTorqueMax() const;

  inline bool hasDriveTorqueMin() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriveTorqueMin() const;

  inline bool hasDriverDesiredTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getDriverDesiredTorque() const;

  inline bool hasEngineSpeed() const;
  inline  ::gac::rscl::Float32WithValid::Reader getEngineSpeed() const;

  inline bool hasMotorSpeed() const;
  inline  ::gac::rscl::Float32WithValid::Reader getMotorSpeed() const;

  inline bool hasPowerTrainReady() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getPowerTrainReady() const;

  inline  ::uint8_t getDriveTorqueCtrlAvl() const;

  inline  ::uint8_t getDriveTorqueActv() const;

  inline  ::uint8_t getVcuAbortFbk() const;

  inline bool hasFuelRange() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFuelRange() const;

  inline bool hasSocHighVoltBattery() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSocHighVoltBattery() const;

  inline bool hasSohHighVoltBattery() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSohHighVoltBattery() const;

  inline bool hasSocLowVoltBattery() const;
  inline  ::gac::rscl::Float32WithValid::Reader getSocLowVoltBattery() const;

  inline bool hasSohLowVoltBattery() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getSohLowVoltBattery() const;

  inline  ::uint8_t getVcuStatus() const;

  inline  ::uint8_t getPersonalMode() const;

  inline  ::uint8_t getCommandFault() const;

  inline  ::int32_t getFaultCode() const;

  inline bool hasFrontMotorSpeed() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontMotorSpeed() const;

  inline bool hasFrontAxleActualTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getFrontAxleActualTorque() const;

  inline bool hasRearMotorSpeed() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRearMotorSpeed() const;

  inline bool hasRearAxleActualTorque() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRearAxleActualTorque() const;

  inline  ::uint8_t getTrailerStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThrottleInfo::Builder {
public:
  typedef ThrottleInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasThrottlePedal();
  inline  ::gac::rscl::Float32WithValid::Builder getThrottlePedal();
  inline void setThrottlePedal( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initThrottlePedal();
  inline void adoptThrottlePedal(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownThrottlePedal();

  inline bool hasThrottlePedalRate();
  inline  ::gac::rscl::Float32WithValid::Builder getThrottlePedalRate();
  inline void setThrottlePedalRate( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initThrottlePedalRate();
  inline void adoptThrottlePedalRate(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownThrottlePedalRate();

  inline bool hasDriverOverride();
  inline  ::gac::rscl::Uint8WithValid::Builder getDriverOverride();
  inline void setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initDriverOverride();
  inline void adoptDriverOverride(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownDriverOverride();

  inline bool hasDriveTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getDriveTorque();
  inline void setDriveTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriveTorque();
  inline void adoptDriveTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriveTorque();

  inline bool hasDriveTorqueMax();
  inline  ::gac::rscl::Float32WithValid::Builder getDriveTorqueMax();
  inline void setDriveTorqueMax( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriveTorqueMax();
  inline void adoptDriveTorqueMax(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriveTorqueMax();

  inline bool hasDriveTorqueMin();
  inline  ::gac::rscl::Float32WithValid::Builder getDriveTorqueMin();
  inline void setDriveTorqueMin( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriveTorqueMin();
  inline void adoptDriveTorqueMin(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriveTorqueMin();

  inline bool hasDriverDesiredTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getDriverDesiredTorque();
  inline void setDriverDesiredTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initDriverDesiredTorque();
  inline void adoptDriverDesiredTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownDriverDesiredTorque();

  inline bool hasEngineSpeed();
  inline  ::gac::rscl::Float32WithValid::Builder getEngineSpeed();
  inline void setEngineSpeed( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initEngineSpeed();
  inline void adoptEngineSpeed(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownEngineSpeed();

  inline bool hasMotorSpeed();
  inline  ::gac::rscl::Float32WithValid::Builder getMotorSpeed();
  inline void setMotorSpeed( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initMotorSpeed();
  inline void adoptMotorSpeed(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownMotorSpeed();

  inline bool hasPowerTrainReady();
  inline  ::gac::rscl::Uint8WithValid::Builder getPowerTrainReady();
  inline void setPowerTrainReady( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initPowerTrainReady();
  inline void adoptPowerTrainReady(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownPowerTrainReady();

  inline  ::uint8_t getDriveTorqueCtrlAvl();
  inline void setDriveTorqueCtrlAvl( ::uint8_t value);

  inline  ::uint8_t getDriveTorqueActv();
  inline void setDriveTorqueActv( ::uint8_t value);

  inline  ::uint8_t getVcuAbortFbk();
  inline void setVcuAbortFbk( ::uint8_t value);

  inline bool hasFuelRange();
  inline  ::gac::rscl::Float32WithValid::Builder getFuelRange();
  inline void setFuelRange( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFuelRange();
  inline void adoptFuelRange(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFuelRange();

  inline bool hasSocHighVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Builder getSocHighVoltBattery();
  inline void setSocHighVoltBattery( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSocHighVoltBattery();
  inline void adoptSocHighVoltBattery(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSocHighVoltBattery();

  inline bool hasSohHighVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Builder getSohHighVoltBattery();
  inline void setSohHighVoltBattery( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSohHighVoltBattery();
  inline void adoptSohHighVoltBattery(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSohHighVoltBattery();

  inline bool hasSocLowVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Builder getSocLowVoltBattery();
  inline void setSocLowVoltBattery( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initSocLowVoltBattery();
  inline void adoptSocLowVoltBattery(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownSocLowVoltBattery();

  inline bool hasSohLowVoltBattery();
  inline  ::gac::rscl::Uint8WithValid::Builder getSohLowVoltBattery();
  inline void setSohLowVoltBattery( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initSohLowVoltBattery();
  inline void adoptSohLowVoltBattery(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownSohLowVoltBattery();

  inline  ::uint8_t getVcuStatus();
  inline void setVcuStatus( ::uint8_t value);

  inline  ::uint8_t getPersonalMode();
  inline void setPersonalMode( ::uint8_t value);

  inline  ::uint8_t getCommandFault();
  inline void setCommandFault( ::uint8_t value);

  inline  ::int32_t getFaultCode();
  inline void setFaultCode( ::int32_t value);

  inline bool hasFrontMotorSpeed();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontMotorSpeed();
  inline void setFrontMotorSpeed( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontMotorSpeed();
  inline void adoptFrontMotorSpeed(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontMotorSpeed();

  inline bool hasFrontAxleActualTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getFrontAxleActualTorque();
  inline void setFrontAxleActualTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initFrontAxleActualTorque();
  inline void adoptFrontAxleActualTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownFrontAxleActualTorque();

  inline bool hasRearMotorSpeed();
  inline  ::gac::rscl::Float32WithValid::Builder getRearMotorSpeed();
  inline void setRearMotorSpeed( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRearMotorSpeed();
  inline void adoptRearMotorSpeed(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRearMotorSpeed();

  inline bool hasRearAxleActualTorque();
  inline  ::gac::rscl::Float32WithValid::Builder getRearAxleActualTorque();
  inline void setRearAxleActualTorque( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRearAxleActualTorque();
  inline void adoptRearAxleActualTorque(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRearAxleActualTorque();

  inline  ::uint8_t getTrailerStatus();
  inline void setTrailerStatus( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThrottleInfo::Pipeline {
public:
  typedef ThrottleInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Float32WithValid::Pipeline getThrottlePedal();
  inline  ::gac::rscl::Float32WithValid::Pipeline getThrottlePedalRate();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getDriverOverride();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriveTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriveTorqueMax();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriveTorqueMin();
  inline  ::gac::rscl::Float32WithValid::Pipeline getDriverDesiredTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getEngineSpeed();
  inline  ::gac::rscl::Float32WithValid::Pipeline getMotorSpeed();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getPowerTrainReady();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFuelRange();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSocHighVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSohHighVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Pipeline getSocLowVoltBattery();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getSohLowVoltBattery();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontMotorSpeed();
  inline  ::gac::rscl::Float32WithValid::Pipeline getFrontAxleActualTorque();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRearMotorSpeed();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRearAxleActualTorque();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleMotion::Reader {
public:
  typedef VehicleMotion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVx() const;
  inline  ::gac::rscl::Float32WithValid::Reader getVx() const;

  inline bool hasVy() const;
  inline  ::gac::rscl::Float32WithValid::Reader getVy() const;

  inline bool hasVz() const;
  inline  ::gac::rscl::Float32WithValid::Reader getVz() const;

  inline bool hasAx() const;
  inline  ::gac::rscl::Float32WithValid::Reader getAx() const;

  inline bool hasAy() const;
  inline  ::gac::rscl::Float32WithValid::Reader getAy() const;

  inline bool hasAz() const;
  inline  ::gac::rscl::Float32WithValid::Reader getAz() const;

  inline bool hasYaw() const;
  inline  ::gac::rscl::Float32WithValid::Reader getYaw() const;

  inline bool hasPitch() const;
  inline  ::gac::rscl::Float32WithValid::Reader getPitch() const;

  inline bool hasRoll() const;
  inline  ::gac::rscl::Float32WithValid::Reader getRoll() const;

  inline bool hasYawRate() const;
  inline  ::gac::rscl::Float32WithValid::Reader getYawRate() const;

  inline bool hasPitchRate() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getPitchRate() const;

  inline bool hasRollRate() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getRollRate() const;

  inline bool hasYawAcceleration() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getYawAcceleration() const;

  inline bool hasPitchAcceleration() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getPitchAcceleration() const;

  inline bool hasRollAcceleration() const;
  inline  ::gac::rscl::Uint8WithValid::Reader getRollAcceleration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleMotion::Builder {
public:
  typedef VehicleMotion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVx();
  inline  ::gac::rscl::Float32WithValid::Builder getVx();
  inline void setVx( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initVx();
  inline void adoptVx(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownVx();

  inline bool hasVy();
  inline  ::gac::rscl::Float32WithValid::Builder getVy();
  inline void setVy( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initVy();
  inline void adoptVy(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownVy();

  inline bool hasVz();
  inline  ::gac::rscl::Float32WithValid::Builder getVz();
  inline void setVz( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initVz();
  inline void adoptVz(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownVz();

  inline bool hasAx();
  inline  ::gac::rscl::Float32WithValid::Builder getAx();
  inline void setAx( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initAx();
  inline void adoptAx(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownAx();

  inline bool hasAy();
  inline  ::gac::rscl::Float32WithValid::Builder getAy();
  inline void setAy( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initAy();
  inline void adoptAy(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownAy();

  inline bool hasAz();
  inline  ::gac::rscl::Float32WithValid::Builder getAz();
  inline void setAz( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initAz();
  inline void adoptAz(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownAz();

  inline bool hasYaw();
  inline  ::gac::rscl::Float32WithValid::Builder getYaw();
  inline void setYaw( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initYaw();
  inline void adoptYaw(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownYaw();

  inline bool hasPitch();
  inline  ::gac::rscl::Float32WithValid::Builder getPitch();
  inline void setPitch( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initPitch();
  inline void adoptPitch(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownPitch();

  inline bool hasRoll();
  inline  ::gac::rscl::Float32WithValid::Builder getRoll();
  inline void setRoll( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initRoll();
  inline void adoptRoll(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownRoll();

  inline bool hasYawRate();
  inline  ::gac::rscl::Float32WithValid::Builder getYawRate();
  inline void setYawRate( ::gac::rscl::Float32WithValid::Reader value);
  inline  ::gac::rscl::Float32WithValid::Builder initYawRate();
  inline void adoptYawRate(::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> disownYawRate();

  inline bool hasPitchRate();
  inline  ::gac::rscl::Uint8WithValid::Builder getPitchRate();
  inline void setPitchRate( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initPitchRate();
  inline void adoptPitchRate(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownPitchRate();

  inline bool hasRollRate();
  inline  ::gac::rscl::Uint8WithValid::Builder getRollRate();
  inline void setRollRate( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initRollRate();
  inline void adoptRollRate(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownRollRate();

  inline bool hasYawAcceleration();
  inline  ::gac::rscl::Uint8WithValid::Builder getYawAcceleration();
  inline void setYawAcceleration( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initYawAcceleration();
  inline void adoptYawAcceleration(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownYawAcceleration();

  inline bool hasPitchAcceleration();
  inline  ::gac::rscl::Uint8WithValid::Builder getPitchAcceleration();
  inline void setPitchAcceleration( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initPitchAcceleration();
  inline void adoptPitchAcceleration(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownPitchAcceleration();

  inline bool hasRollAcceleration();
  inline  ::gac::rscl::Uint8WithValid::Builder getRollAcceleration();
  inline void setRollAcceleration( ::gac::rscl::Uint8WithValid::Reader value);
  inline  ::gac::rscl::Uint8WithValid::Builder initRollAcceleration();
  inline void adoptRollAcceleration(::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> disownRollAcceleration();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleMotion::Pipeline {
public:
  typedef VehicleMotion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::Float32WithValid::Pipeline getVx();
  inline  ::gac::rscl::Float32WithValid::Pipeline getVy();
  inline  ::gac::rscl::Float32WithValid::Pipeline getVz();
  inline  ::gac::rscl::Float32WithValid::Pipeline getAx();
  inline  ::gac::rscl::Float32WithValid::Pipeline getAy();
  inline  ::gac::rscl::Float32WithValid::Pipeline getAz();
  inline  ::gac::rscl::Float32WithValid::Pipeline getYaw();
  inline  ::gac::rscl::Float32WithValid::Pipeline getPitch();
  inline  ::gac::rscl::Float32WithValid::Pipeline getRoll();
  inline  ::gac::rscl::Float32WithValid::Pipeline getYawRate();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getPitchRate();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getRollRate();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getYawAcceleration();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getPitchAcceleration();
  inline  ::gac::rscl::Uint8WithValid::Pipeline getRollAcceleration();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChassisReportTime::Reader {
public:
  typedef ChassisReportTime Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSec() const;

  inline  ::uint32_t getNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChassisReportTime::Builder {
public:
  typedef ChassisReportTime Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSec();
  inline void setSec( ::uint32_t value);

  inline  ::uint32_t getNsec();
  inline void setNsec( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChassisReportTime::Pipeline {
public:
  typedef ChassisReportTime Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChassisReportHeader::Reader {
public:
  typedef ChassisReportHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq() const;

  inline bool hasStamp() const;
  inline  ::gac::rscl::ChassisReportTime::Reader getStamp() const;

  inline bool hasFrameId() const;
  inline  ::capnp::Text::Reader getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChassisReportHeader::Builder {
public:
  typedef ChassisReportHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq();
  inline void setSeq( ::uint32_t value);

  inline bool hasStamp();
  inline  ::gac::rscl::ChassisReportTime::Builder getStamp();
  inline void setStamp( ::gac::rscl::ChassisReportTime::Reader value);
  inline  ::gac::rscl::ChassisReportTime::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan< ::gac::rscl::ChassisReportTime>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ChassisReportTime> disownStamp();

  inline bool hasFrameId();
  inline  ::capnp::Text::Builder getFrameId();
  inline void setFrameId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFrameId(unsigned int size);
  inline void adoptFrameId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFrameId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChassisReportHeader::Pipeline {
public:
  typedef ChassisReportHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::ChassisReportTime::Pipeline getStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChassisReportMsg::Reader {
public:
  typedef ChassisReportMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAutoMode() const;
  inline  ::gac::rscl::AutonomyMode::Reader getAutoMode() const;

  inline float getVelocity() const;

  inline float getSteerAngle() const;

  inline float getFrontWheelAngle() const;

  inline bool hasActualGear() const;
  inline  ::gac::rscl::Gear::Reader getActualGear() const;

  inline bool hasMaster() const;
  inline  ::gac::rscl::ActuatorStatus::Reader getMaster() const;

  inline bool hasSlave() const;
  inline  ::gac::rscl::ActuatorStatus::Reader getSlave() const;

  inline bool hasSteer() const;
  inline  ::gac::rscl::SteerInfo::Reader getSteer() const;

  inline bool hasBrake() const;
  inline  ::gac::rscl::BrakeInfo::Reader getBrake() const;

  inline bool hasVcu() const;
  inline  ::gac::rscl::ThrottleInfo::Reader getVcu() const;

  inline bool hasGear() const;
  inline  ::gac::rscl::GearInfo::Reader getGear() const;

  inline bool hasEgoMotion() const;
  inline  ::gac::rscl::VehicleMotion::Reader getEgoMotion() const;

  inline bool hasHeader() const;
  inline  ::gac::rscl::ChassisReportHeader::Reader getHeader() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChassisReportMsg::Builder {
public:
  typedef ChassisReportMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAutoMode();
  inline  ::gac::rscl::AutonomyMode::Builder getAutoMode();
  inline void setAutoMode( ::gac::rscl::AutonomyMode::Reader value);
  inline  ::gac::rscl::AutonomyMode::Builder initAutoMode();
  inline void adoptAutoMode(::capnp::Orphan< ::gac::rscl::AutonomyMode>&& value);
  inline ::capnp::Orphan< ::gac::rscl::AutonomyMode> disownAutoMode();

  inline float getVelocity();
  inline void setVelocity(float value);

  inline float getSteerAngle();
  inline void setSteerAngle(float value);

  inline float getFrontWheelAngle();
  inline void setFrontWheelAngle(float value);

  inline bool hasActualGear();
  inline  ::gac::rscl::Gear::Builder getActualGear();
  inline void setActualGear( ::gac::rscl::Gear::Reader value);
  inline  ::gac::rscl::Gear::Builder initActualGear();
  inline void adoptActualGear(::capnp::Orphan< ::gac::rscl::Gear>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Gear> disownActualGear();

  inline bool hasMaster();
  inline  ::gac::rscl::ActuatorStatus::Builder getMaster();
  inline void setMaster( ::gac::rscl::ActuatorStatus::Reader value);
  inline  ::gac::rscl::ActuatorStatus::Builder initMaster();
  inline void adoptMaster(::capnp::Orphan< ::gac::rscl::ActuatorStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorStatus> disownMaster();

  inline bool hasSlave();
  inline  ::gac::rscl::ActuatorStatus::Builder getSlave();
  inline void setSlave( ::gac::rscl::ActuatorStatus::Reader value);
  inline  ::gac::rscl::ActuatorStatus::Builder initSlave();
  inline void adoptSlave(::capnp::Orphan< ::gac::rscl::ActuatorStatus>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ActuatorStatus> disownSlave();

  inline bool hasSteer();
  inline  ::gac::rscl::SteerInfo::Builder getSteer();
  inline void setSteer( ::gac::rscl::SteerInfo::Reader value);
  inline  ::gac::rscl::SteerInfo::Builder initSteer();
  inline void adoptSteer(::capnp::Orphan< ::gac::rscl::SteerInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::SteerInfo> disownSteer();

  inline bool hasBrake();
  inline  ::gac::rscl::BrakeInfo::Builder getBrake();
  inline void setBrake( ::gac::rscl::BrakeInfo::Reader value);
  inline  ::gac::rscl::BrakeInfo::Builder initBrake();
  inline void adoptBrake(::capnp::Orphan< ::gac::rscl::BrakeInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::BrakeInfo> disownBrake();

  inline bool hasVcu();
  inline  ::gac::rscl::ThrottleInfo::Builder getVcu();
  inline void setVcu( ::gac::rscl::ThrottleInfo::Reader value);
  inline  ::gac::rscl::ThrottleInfo::Builder initVcu();
  inline void adoptVcu(::capnp::Orphan< ::gac::rscl::ThrottleInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ThrottleInfo> disownVcu();

  inline bool hasGear();
  inline  ::gac::rscl::GearInfo::Builder getGear();
  inline void setGear( ::gac::rscl::GearInfo::Reader value);
  inline  ::gac::rscl::GearInfo::Builder initGear();
  inline void adoptGear(::capnp::Orphan< ::gac::rscl::GearInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::GearInfo> disownGear();

  inline bool hasEgoMotion();
  inline  ::gac::rscl::VehicleMotion::Builder getEgoMotion();
  inline void setEgoMotion( ::gac::rscl::VehicleMotion::Reader value);
  inline  ::gac::rscl::VehicleMotion::Builder initEgoMotion();
  inline void adoptEgoMotion(::capnp::Orphan< ::gac::rscl::VehicleMotion>&& value);
  inline ::capnp::Orphan< ::gac::rscl::VehicleMotion> disownEgoMotion();

  inline bool hasHeader();
  inline  ::gac::rscl::ChassisReportHeader::Builder getHeader();
  inline void setHeader( ::gac::rscl::ChassisReportHeader::Reader value);
  inline  ::gac::rscl::ChassisReportHeader::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::gac::rscl::ChassisReportHeader>&& value);
  inline ::capnp::Orphan< ::gac::rscl::ChassisReportHeader> disownHeader();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChassisReportMsg::Pipeline {
public:
  typedef ChassisReportMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::AutonomyMode::Pipeline getAutoMode();
  inline  ::gac::rscl::Gear::Pipeline getActualGear();
  inline  ::gac::rscl::ActuatorStatus::Pipeline getMaster();
  inline  ::gac::rscl::ActuatorStatus::Pipeline getSlave();
  inline  ::gac::rscl::SteerInfo::Pipeline getSteer();
  inline  ::gac::rscl::BrakeInfo::Pipeline getBrake();
  inline  ::gac::rscl::ThrottleInfo::Pipeline getVcu();
  inline  ::gac::rscl::GearInfo::Pipeline getGear();
  inline  ::gac::rscl::VehicleMotion::Pipeline getEgoMotion();
  inline  ::gac::rscl::ChassisReportHeader::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t AutonomyMode::Reader::getAutonomyLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AutonomyMode::Builder::getAutonomyLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AutonomyMode::Builder::setAutonomyLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AutonomyMode::Reader::getGearAutonomous() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool AutonomyMode::Builder::getGearAutonomous() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AutonomyMode::Builder::setGearAutonomous(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool AutonomyMode::Reader::getSpeedAutonomous() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool AutonomyMode::Builder::getSpeedAutonomous() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AutonomyMode::Builder::setSpeedAutonomous(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool AutonomyMode::Reader::getSteeringAutonomous() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool AutonomyMode::Builder::getSteeringAutonomous() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AutonomyMode::Builder::setSteeringAutonomous(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float Float32WithValid::Reader::getValue() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Float32WithValid::Builder::getValue() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Float32WithValid::Builder::setValue(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Float32WithValid::Reader::getConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Float32WithValid::Builder::getConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Float32WithValid::Builder::setConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Uint8WithValid::Reader::getValue() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Uint8WithValid::Builder::getValue() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Uint8WithValid::Builder::setValue( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Uint8WithValid::Reader::getConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Uint8WithValid::Builder::getConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Uint8WithValid::Builder::setConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Gear::Reader::getValue() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Gear::Builder::getValue() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Gear::Builder::setValue( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GearInfo::Reader::hasGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GearInfo::Builder::hasGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Gear::Reader GearInfo::Reader::getGear() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Gear::Builder GearInfo::Builder::getGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Gear::Pipeline GearInfo::Pipeline::getGear() {
  return  ::gac::rscl::Gear::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GearInfo::Builder::setGear( ::gac::rscl::Gear::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Gear::Builder GearInfo::Builder::initGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GearInfo::Builder::adoptGear(
    ::capnp::Orphan< ::gac::rscl::Gear>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Gear> GearInfo::Builder::disownGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GearInfo::Reader::hasGearLever() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GearInfo::Builder::hasGearLever() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Gear::Reader GearInfo::Reader::getGearLever() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Gear::Builder GearInfo::Builder::getGearLever() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Gear::Pipeline GearInfo::Pipeline::getGearLever() {
  return  ::gac::rscl::Gear::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GearInfo::Builder::setGearLever( ::gac::rscl::Gear::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Gear::Builder GearInfo::Builder::initGearLever() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GearInfo::Builder::adoptGearLever(
    ::capnp::Orphan< ::gac::rscl::Gear>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Gear> GearInfo::Builder::disownGearLever() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t GearInfo::Reader::getGearShiftStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GearInfo::Builder::getGearShiftStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GearInfo::Builder::setGearShiftStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GearInfo::Reader::hasDriverOverride() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GearInfo::Builder::hasDriverOverride() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader GearInfo::Reader::getDriverOverride() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder GearInfo::Builder::getDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline GearInfo::Pipeline::getDriverOverride() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GearInfo::Builder::setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder GearInfo::Builder::initDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GearInfo::Builder::adoptDriverOverride(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> GearInfo::Builder::disownDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t GearInfo::Reader::getFaultCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t GearInfo::Builder::getFaultCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GearInfo::Builder::setFaultCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ActuatorWorkStatus::Reader::getCapability() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ActuatorWorkStatus::Builder::getCapability() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ActuatorWorkStatus::Builder::setCapability( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ActuatorWorkStatus::Reader::getResponse() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ActuatorWorkStatus::Builder::getResponse() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ActuatorWorkStatus::Builder::setResponse( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ActuatorStatus::Reader::hasAngleSteer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasAngleSteer() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getAngleSteer() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getAngleSteer() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setAngleSteer( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptAngleSteer(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasTorqueSteer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasTorqueSteer() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getTorqueSteer() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getTorqueSteer() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setTorqueSteer( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptTorqueSteer(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasEmergencyAngleSteer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasEmergencyAngleSteer() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getEmergencyAngleSteer() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getEmergencyAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getEmergencyAngleSteer() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setEmergencyAngleSteer( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initEmergencyAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptEmergencyAngleSteer(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownEmergencyAngleSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasEmergencyTorqueSteer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasEmergencyTorqueSteer() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getEmergencyTorqueSteer() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getEmergencyTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getEmergencyTorqueSteer() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setEmergencyTorqueSteer( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initEmergencyTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptEmergencyTorqueSteer(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownEmergencyTorqueSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasSteerVibrate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasSteerVibrate() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getSteerVibrate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getSteerVibrate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getSteerVibrate() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setSteerVibrate( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initSteerVibrate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptSteerVibrate(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownSteerVibrate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasAccelerate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasAccelerate() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getAccelerate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getAccelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getAccelerate() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setAccelerate( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initAccelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptAccelerate(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownAccelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasDecelerate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasDecelerate() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getDecelerate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getDecelerate() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setDecelerate( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptDecelerate(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasEmergencyDecelerate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasEmergencyDecelerate() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getEmergencyDecelerate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getEmergencyDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getEmergencyDecelerate() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setEmergencyDecelerate( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initEmergencyDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptEmergencyDecelerate(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownEmergencyDecelerate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasDrive() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasDrive() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getDrive() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getDrive() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getDrive() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setDrive( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initDrive() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptDrive(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownDrive() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasBrake() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasBrake() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getBrake() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getBrake() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setBrake( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptBrake(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasVlc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasVlc() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getVlc() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getVlc() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getVlc() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setVlc( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initVlc() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptVlc(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownVlc() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasEmergencyStop() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasEmergencyStop() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getEmergencyStop() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getEmergencyStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getEmergencyStop() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setEmergencyStop( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initEmergencyStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptEmergencyStop(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownEmergencyStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasStop() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasStop() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getStop() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getStop() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setStop( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptStop(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownStop() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasPark() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasPark() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getPark() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getPark() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getPark() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setPark( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initPark() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptPark(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownPark() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool ActuatorStatus::Reader::hasGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ActuatorStatus::Builder::hasGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorWorkStatus::Reader ActuatorStatus::Reader::getGear() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::getGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorWorkStatus::Pipeline ActuatorStatus::Pipeline::getGear() {
  return  ::gac::rscl::ActuatorWorkStatus::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void ActuatorStatus::Builder::setGear( ::gac::rscl::ActuatorWorkStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorWorkStatus::Builder ActuatorStatus::Builder::initGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ActuatorStatus::Builder::adoptGear(
    ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorWorkStatus> ActuatorStatus::Builder::disownGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorWorkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasSteerAngle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasSteerAngle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getSteerAngle() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getSteerAngle() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setSteerAngle( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptSteerAngle(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasSteerAngleRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasSteerAngleRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getSteerAngleRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getSteerAngleRate() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setSteerAngleRate( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptSteerAngleRate(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasSteerPinionAngle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasSteerPinionAngle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getSteerPinionAngle() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getSteerPinionAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getSteerPinionAngle() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setSteerPinionAngle( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initSteerPinionAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptSteerPinionAngle(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownSteerPinionAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasSteerPinionAngleRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasSteerPinionAngleRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getSteerPinionAngleRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getSteerPinionAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getSteerPinionAngleRate() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setSteerPinionAngleRate( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initSteerPinionAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptSteerPinionAngleRate(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownSteerPinionAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasFrontSteerAngle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasFrontSteerAngle() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getFrontSteerAngle() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getFrontSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getFrontSteerAngle() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setFrontSteerAngle( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initFrontSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptFrontSteerAngle(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownFrontSteerAngle() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasFrontSteerAngleRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasFrontSteerAngleRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getFrontSteerAngleRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getFrontSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getFrontSteerAngleRate() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setFrontSteerAngleRate( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initFrontSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptFrontSteerAngleRate(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownFrontSteerAngleRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasDriverHandOn() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasDriverHandOn() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getDriverHandOn() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getDriverHandOn() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getDriverHandOn() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setDriverHandOn( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initDriverHandOn() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptDriverHandOn(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownDriverHandOn() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasDriverHandTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasDriverHandTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getDriverHandTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getDriverHandTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getDriverHandTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setDriverHandTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initDriverHandTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptDriverHandTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownDriverHandTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasSteerTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasSteerTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getSteerTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getSteerTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getSteerTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setSteerTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initSteerTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptSteerTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownSteerTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasMotorCurrent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasMotorCurrent() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getMotorCurrent() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getMotorCurrent() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getMotorCurrent() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setMotorCurrent( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initMotorCurrent() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptMotorCurrent(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownMotorCurrent() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasDriverOverride() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasDriverOverride() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader SteerInfo::Reader::getDriverOverride() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder SteerInfo::Builder::getDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline SteerInfo::Pipeline::getDriverOverride() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder SteerInfo::Builder::initDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptDriverOverride(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> SteerInfo::Builder::disownDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::uint8_t SteerInfo::Reader::getPersonalMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getPersonalMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setPersonalMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getCommandFault() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getCommandFault() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setCommandFault( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsStatusMaster() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsStatusMaster() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsStatusMaster( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsStatusSlave() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsStatusSlave() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsStatusSlave( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t SteerInfo::Reader::getFaultCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t SteerInfo::Builder::getFaultCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setFaultCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SteerInfo::Reader::getDrvrSteerMonrEnaSts() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool SteerInfo::Builder::getDrvrSteerMonrEnaSts() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setDrvrSteerMonrEnaSts(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool SteerInfo::Reader::hasHandsOffConf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasHandsOffConf() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader SteerInfo::Reader::getHandsOffConf() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder SteerInfo::Builder::getHandsOffConf() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline SteerInfo::Pipeline::getHandsOffConf() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setHandsOffConf( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder SteerInfo::Builder::initHandsOffConf() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptHandsOffConf(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> SteerInfo::Builder::disownHandsOffConf() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool SteerInfo::Reader::hasEpsMotorTq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool SteerInfo::Builder::hasEpsMotorTq() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader SteerInfo::Reader::getEpsMotorTq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::getEpsMotorTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline SteerInfo::Pipeline::getEpsMotorTq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void SteerInfo::Builder::setEpsMotorTq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder SteerInfo::Builder::initEpsMotorTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void SteerInfo::Builder::adoptEpsMotorTq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> SteerInfo::Builder::disownEpsMotorTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint8_t SteerInfo::Reader::getEpsMotorTemp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsMotorTemp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsMotorTemp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getLdwWarnSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getLdwWarnSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setLdwWarnSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsOperMod() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsOperMod() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsOperMod( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsAbortFb() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsAbortFb() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsAbortFb( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsTqSensSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsTqSensSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsTqSensSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteerInfo::Reader::getEpsSteerAgSensFilr() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteerInfo::Builder::getEpsSteerAgSensFilr() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void SteerInfo::Builder::setEpsSteerAgSensFilr( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t WheelSpeed::Reader::getWheelDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t WheelSpeed::Builder::getWheelDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WheelSpeed::Builder::setWheelDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WheelSpeed::Reader::getWheelCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WheelSpeed::Builder::getWheelCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WheelSpeed::Builder::setWheelCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool WheelSpeed::Reader::getWheelCountValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool WheelSpeed::Builder::getWheelCountValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void WheelSpeed::Builder::setWheelCountValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float WheelSpeed::Reader::getWheelSpeedMps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float WheelSpeed::Builder::getWheelSpeedMps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void WheelSpeed::Builder::setWheelSpeedMps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool WheelSpeed::Reader::getWheelSpeedMpsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool WheelSpeed::Builder::getWheelSpeedMpsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void WheelSpeed::Builder::setWheelSpeedMpsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::hasBrakePedal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakePedal() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakePedal() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakePedal() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakePedal( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakePedal(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakePedalSwitch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakePedalSwitch() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakePedalSwitch() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakePedalSwitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakePedalSwitch() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakePedalSwitch( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakePedalSwitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakePedalSwitch(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakePedalSwitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasDriverOverride() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasDriverOverride() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getDriverOverride() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getDriverOverride() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setDriverOverride( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptDriverOverride(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasMastCylinderPressure() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasMastCylinderPressure() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getMastCylinderPressure() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getMastCylinderPressure() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getMastCylinderPressure() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setMastCylinderPressure( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initMastCylinderPressure() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptMastCylinderPressure(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownMastCylinderPressure() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasMastCylinderPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasMastCylinderPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getMastCylinderPosition() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getMastCylinderPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getMastCylinderPosition() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setMastCylinderPosition( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initMastCylinderPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptMastCylinderPosition(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownMastCylinderPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakeTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakeTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakeTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakeTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakeTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakeTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakeTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakeTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakeTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakeForce() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakeForce() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakeForce() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakeForce() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakeForce() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakeForce( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakeForce() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakeForce(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakeForce() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakeTorqueMax() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakeTorqueMax() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakeTorqueMax() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakeTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakeTorqueMax() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakeTorqueMax( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakeTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakeTorqueMax(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakeTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasDriverDesiredTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasDriverDesiredTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getDriverDesiredTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getDriverDesiredTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setDriverDesiredTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptDriverDesiredTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakeTotalTqReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakeTotalTqReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakeTotalTqReq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakeTotalTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakeTotalTqReq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakeTotalTqReq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakeTotalTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakeTotalTqReq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakeTotalTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasElecBrkTqReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasElecBrkTqReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getElecBrkTqReq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getElecBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getElecBrkTqReq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setElecBrkTqReq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initElecBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptElecBrkTqReq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownElecBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasHydrauBrkTqReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasHydrauBrkTqReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getHydrauBrkTqReq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getHydrauBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getHydrauBrkTqReq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setHydrauBrkTqReq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initHydrauBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptHydrauBrkTqReq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownHydrauBrkTqReq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint8_t BrakeInfo::Reader::getBrakeOverHeatStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getBrakeOverHeatStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setBrakeOverHeatStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getAebAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getAebAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAebAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getAebActv() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getAebActv() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAebActv( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getPrefillAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getPrefillAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setPrefillAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getPrefillActv() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getPrefillActv() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setPrefillActv( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getBrkCtrlAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getBrkCtrlAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setBrkCtrlAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getBrkCtrlActv() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getBrkCtrlActv() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setBrkCtrlActv( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEspAbortFb() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEspAbortFb() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEspAbortFb( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::hasVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getVelocity() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getVelocity() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getVelocity() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setVelocity( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initVelocity() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptVelocity(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownVelocity() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasWheelSpeedFl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasWheelSpeedFl() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::WheelSpeed::Reader BrakeInfo::Reader::getWheelSpeedFl() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::getWheelSpeedFl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::WheelSpeed::Pipeline BrakeInfo::Pipeline::getWheelSpeedFl() {
  return  ::gac::rscl::WheelSpeed::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setWheelSpeedFl( ::gac::rscl::WheelSpeed::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::initWheelSpeedFl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptWheelSpeedFl(
    ::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> BrakeInfo::Builder::disownWheelSpeedFl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasWheelSpeedFr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasWheelSpeedFr() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::WheelSpeed::Reader BrakeInfo::Reader::getWheelSpeedFr() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::getWheelSpeedFr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::WheelSpeed::Pipeline BrakeInfo::Pipeline::getWheelSpeedFr() {
  return  ::gac::rscl::WheelSpeed::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setWheelSpeedFr( ::gac::rscl::WheelSpeed::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::initWheelSpeedFr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptWheelSpeedFr(
    ::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> BrakeInfo::Builder::disownWheelSpeedFr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasWheelSpeedRl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasWheelSpeedRl() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::WheelSpeed::Reader BrakeInfo::Reader::getWheelSpeedRl() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::getWheelSpeedRl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::WheelSpeed::Pipeline BrakeInfo::Pipeline::getWheelSpeedRl() {
  return  ::gac::rscl::WheelSpeed::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setWheelSpeedRl( ::gac::rscl::WheelSpeed::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::initWheelSpeedRl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptWheelSpeedRl(
    ::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> BrakeInfo::Builder::disownWheelSpeedRl() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasWheelSpeedRr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasWheelSpeedRr() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::WheelSpeed::Reader BrakeInfo::Reader::getWheelSpeedRr() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::getWheelSpeedRr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::WheelSpeed::Pipeline BrakeInfo::Pipeline::getWheelSpeedRr() {
  return  ::gac::rscl::WheelSpeed::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setWheelSpeedRr( ::gac::rscl::WheelSpeed::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::WheelSpeed::Builder BrakeInfo::Builder::initWheelSpeedRr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptWheelSpeedRr(
    ::capnp::Orphan< ::gac::rscl::WheelSpeed>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::WheelSpeed> BrakeInfo::Builder::disownWheelSpeedRr() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::WheelSpeed>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasFrontWhlIncTarTq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasFrontWhlIncTarTq() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getFrontWhlIncTarTq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getFrontWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getFrontWhlIncTarTq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(17));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setFrontWhlIncTarTq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initFrontWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptFrontWhlIncTarTq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownFrontWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasFrontWhlDecTarTq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasFrontWhlDecTarTq() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getFrontWhlDecTarTq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getFrontWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getFrontWhlDecTarTq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(18));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setFrontWhlDecTarTq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initFrontWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptFrontWhlDecTarTq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownFrontWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasRearWhlIncTarTq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasRearWhlIncTarTq() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getRearWhlIncTarTq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getRearWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getRearWhlIncTarTq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(19));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setRearWhlIncTarTq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initRearWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptRearWhlIncTarTq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownRearWhlIncTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasRearWhlDecTarTq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasRearWhlDecTarTq() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getRearWhlDecTarTq() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getRearWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getRearWhlDecTarTq() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(20));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setRearWhlDecTarTq( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initRearWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptRearWhlDecTarTq(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownRearWhlDecTarTq() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasStandstill() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasStandstill() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader BrakeInfo::Reader::getStandstill() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder BrakeInfo::Builder::getStandstill() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline BrakeInfo::Pipeline::getStandstill() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(21));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setStandstill( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder BrakeInfo::Builder::initStandstill() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptStandstill(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> BrakeInfo::Builder::disownStandstill() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasRoadFriction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasRoadFriction() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getRoadFriction() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getRoadFriction() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getRoadFriction() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(22));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setRoadFriction( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initRoadFriction() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptRoadFriction(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownRoadFriction() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasBrakeTemperature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasBrakeTemperature() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getBrakeTemperature() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getBrakeTemperature() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getBrakeTemperature() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(23));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setBrakeTemperature( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initBrakeTemperature() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptBrakeTemperature(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownBrakeTemperature() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline bool BrakeInfo::Reader::hasSlope() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool BrakeInfo::Builder::hasSlope() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader BrakeInfo::Reader::getSlope() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::getSlope() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline BrakeInfo::Pipeline::getSlope() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(24));
}
#endif  // !CAPNP_LITE
inline void BrakeInfo::Builder::setSlope( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder BrakeInfo::Builder::initSlope() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void BrakeInfo::Builder::adoptSlope(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> BrakeInfo::Builder::disownSlope() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline  ::uint8_t BrakeInfo::Reader::getBrakeStatusMaster() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getBrakeStatusMaster() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setBrakeStatusMaster( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getBrakeStatusSlave() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getBrakeStatusSlave() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setBrakeStatusSlave( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getCommandFault() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getCommandFault() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setCommandFault( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEpbFaultStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEpbFaultStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbFaultStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEpbLockStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEpbLockStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbLockStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEpbButtonStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEpbButtonStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbButtonStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEpbOverride() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEpbOverride() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbOverride( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEpbAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEpbAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float BrakeInfo::Reader::getEpbClampForce() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float BrakeInfo::Builder::getEpbClampForce() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEpbClampForce(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getFaultCode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getFaultCode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setFaultCode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BrakeInfo::Reader::getAutoHoldActvSts() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BrakeInfo::Builder::getAutoHoldActvSts() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAutoHoldActvSts( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::getEbdActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS);
}

inline bool BrakeInfo::Builder::getEbdActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEbdActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEbdStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEbdStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEbdStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::getAbsActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS);
}

inline bool BrakeInfo::Builder::getAbsActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAbsActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getAbsStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getAbsStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAbsStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::getEscActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS);
}

inline bool BrakeInfo::Builder::getEscActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEscActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEscStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEscStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEscStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeInfo::Reader::getTcsActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS);
}

inline bool BrakeInfo::Builder::getTcsActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setTcsActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getTcsStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getTcsStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setTcsStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getArpActvSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getArpActvSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setArpActvSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getArpFctAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getArpFctAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setArpFctAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getArpFailrSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getArpFailrSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setArpFailrSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getDbfActvSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getDbfActvSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setDbfActvSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getHdcActvSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getHdcActvSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setHdcActvSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getHhcActvSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getHhcActvSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setHhcActvSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEbaActvSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEbaActvSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEbaActvSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEbaAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEbaAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEbaAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEbaActvRank() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEbaActvRank() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEbaActvRank( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getAwbAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getAwbAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAwbAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getAwbActv() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getAwbActv() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setAwbActv( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEspABrkDegStWarning() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEspABrkDegStWarning() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEspABrkDegStWarning( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEspABrkDegSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEspABrkDegSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEspABrkDegSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeInfo::Reader::getEspPriBrStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeInfo::Builder::getEspPriBrStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void BrakeInfo::Builder::setEspPriBrStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleInfo::Reader::hasThrottlePedal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasThrottlePedal() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getThrottlePedal() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getThrottlePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getThrottlePedal() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setThrottlePedal( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initThrottlePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptThrottlePedal(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownThrottlePedal() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasThrottlePedalRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasThrottlePedalRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getThrottlePedalRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getThrottlePedalRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getThrottlePedalRate() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setThrottlePedalRate( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initThrottlePedalRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptThrottlePedalRate(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownThrottlePedalRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasDriverOverride() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasDriverOverride() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader ThrottleInfo::Reader::getDriverOverride() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::getDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline ThrottleInfo::Pipeline::getDriverOverride() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setDriverOverride( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::initDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptDriverOverride(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> ThrottleInfo::Builder::disownDriverOverride() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasDriveTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasDriveTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getDriveTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getDriveTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getDriveTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setDriveTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initDriveTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptDriveTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownDriveTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasDriveTorqueMax() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasDriveTorqueMax() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getDriveTorqueMax() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getDriveTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getDriveTorqueMax() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setDriveTorqueMax( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initDriveTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptDriveTorqueMax(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownDriveTorqueMax() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasDriveTorqueMin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasDriveTorqueMin() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getDriveTorqueMin() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getDriveTorqueMin() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getDriveTorqueMin() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setDriveTorqueMin( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initDriveTorqueMin() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptDriveTorqueMin(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownDriveTorqueMin() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasDriverDesiredTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasDriverDesiredTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getDriverDesiredTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getDriverDesiredTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setDriverDesiredTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptDriverDesiredTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownDriverDesiredTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasEngineSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasEngineSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getEngineSpeed() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getEngineSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getEngineSpeed() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setEngineSpeed( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initEngineSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptEngineSpeed(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownEngineSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasMotorSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasMotorSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getMotorSpeed() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getMotorSpeed() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setMotorSpeed( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptMotorSpeed(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasPowerTrainReady() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasPowerTrainReady() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader ThrottleInfo::Reader::getPowerTrainReady() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::getPowerTrainReady() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline ThrottleInfo::Pipeline::getPowerTrainReady() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setPowerTrainReady( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::initPowerTrainReady() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptPowerTrainReady(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> ThrottleInfo::Builder::disownPowerTrainReady() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint8_t ThrottleInfo::Reader::getDriveTorqueCtrlAvl() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getDriveTorqueCtrlAvl() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setDriveTorqueCtrlAvl( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ThrottleInfo::Reader::getDriveTorqueActv() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getDriveTorqueActv() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setDriveTorqueActv( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ThrottleInfo::Reader::getVcuAbortFbk() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getVcuAbortFbk() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setVcuAbortFbk( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleInfo::Reader::hasFuelRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasFuelRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getFuelRange() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getFuelRange() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getFuelRange() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setFuelRange( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initFuelRange() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptFuelRange(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownFuelRange() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasSocHighVoltBattery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasSocHighVoltBattery() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getSocHighVoltBattery() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getSocHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getSocHighVoltBattery() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setSocHighVoltBattery( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initSocHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptSocHighVoltBattery(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownSocHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasSohHighVoltBattery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasSohHighVoltBattery() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getSohHighVoltBattery() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getSohHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getSohHighVoltBattery() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setSohHighVoltBattery( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initSohHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptSohHighVoltBattery(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownSohHighVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasSocLowVoltBattery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasSocLowVoltBattery() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getSocLowVoltBattery() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getSocLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getSocLowVoltBattery() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setSocLowVoltBattery( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initSocLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptSocLowVoltBattery(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownSocLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasSohLowVoltBattery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasSohLowVoltBattery() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader ThrottleInfo::Reader::getSohLowVoltBattery() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::getSohLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline ThrottleInfo::Pipeline::getSohLowVoltBattery() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setSohLowVoltBattery( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder ThrottleInfo::Builder::initSohLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptSohLowVoltBattery(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> ThrottleInfo::Builder::disownSohLowVoltBattery() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint8_t ThrottleInfo::Reader::getVcuStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getVcuStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setVcuStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ThrottleInfo::Reader::getPersonalMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getPersonalMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setPersonalMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ThrottleInfo::Reader::getCommandFault() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getCommandFault() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setCommandFault( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ThrottleInfo::Reader::getFaultCode() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThrottleInfo::Builder::getFaultCode() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setFaultCode( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleInfo::Reader::hasFrontMotorSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasFrontMotorSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getFrontMotorSpeed() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getFrontMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getFrontMotorSpeed() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setFrontMotorSpeed( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initFrontMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptFrontMotorSpeed(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownFrontMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasFrontAxleActualTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasFrontAxleActualTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getFrontAxleActualTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getFrontAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getFrontAxleActualTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setFrontAxleActualTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initFrontAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptFrontAxleActualTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownFrontAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasRearMotorSpeed() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasRearMotorSpeed() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getRearMotorSpeed() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getRearMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getRearMotorSpeed() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(17));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setRearMotorSpeed( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initRearMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptRearMotorSpeed(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownRearMotorSpeed() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool ThrottleInfo::Reader::hasRearAxleActualTorque() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool ThrottleInfo::Builder::hasRearAxleActualTorque() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader ThrottleInfo::Reader::getRearAxleActualTorque() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::getRearAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline ThrottleInfo::Pipeline::getRearAxleActualTorque() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(18));
}
#endif  // !CAPNP_LITE
inline void ThrottleInfo::Builder::setRearAxleActualTorque( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder ThrottleInfo::Builder::initRearAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void ThrottleInfo::Builder::adoptRearAxleActualTorque(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> ThrottleInfo::Builder::disownRearAxleActualTorque() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline  ::uint8_t ThrottleInfo::Reader::getTrailerStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleInfo::Builder::getTrailerStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ThrottleInfo::Builder::setTrailerStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleMotion::Reader::hasVx() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasVx() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getVx() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getVx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getVx() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setVx( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initVx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptVx(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownVx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasVy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasVy() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getVy() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getVy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getVy() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setVy( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initVy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptVy(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownVy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasVz() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasVz() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getVz() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getVz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getVz() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setVz( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initVz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptVz(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownVz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasAx() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasAx() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getAx() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getAx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getAx() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setAx( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initAx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptAx(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownAx() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasAy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasAy() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getAy() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getAy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getAy() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setAy( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initAy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptAy(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownAy() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasAz() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasAz() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getAz() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getAz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getAz() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setAz( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initAz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptAz(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownAz() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasYaw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasYaw() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getYaw() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getYaw() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getYaw() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setYaw( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initYaw() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptYaw(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownYaw() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasPitch() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasPitch() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getPitch() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getPitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getPitch() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setPitch( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initPitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptPitch(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownPitch() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasRoll() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasRoll() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getRoll() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getRoll() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getRoll() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setRoll( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initRoll() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptRoll(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownRoll() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasYawRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasYawRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Float32WithValid::Reader VehicleMotion::Reader::getYawRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::getYawRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Float32WithValid::Pipeline VehicleMotion::Pipeline::getYawRate() {
  return  ::gac::rscl::Float32WithValid::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setYawRate( ::gac::rscl::Float32WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Float32WithValid::Builder VehicleMotion::Builder::initYawRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptYawRate(
    ::capnp::Orphan< ::gac::rscl::Float32WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Float32WithValid> VehicleMotion::Builder::disownYawRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Float32WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasPitchRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasPitchRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader VehicleMotion::Reader::getPitchRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::getPitchRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline VehicleMotion::Pipeline::getPitchRate() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setPitchRate( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::initPitchRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptPitchRate(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> VehicleMotion::Builder::disownPitchRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasRollRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasRollRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader VehicleMotion::Reader::getRollRate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::getRollRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline VehicleMotion::Pipeline::getRollRate() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setRollRate( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::initRollRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptRollRate(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> VehicleMotion::Builder::disownRollRate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasYawAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasYawAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader VehicleMotion::Reader::getYawAcceleration() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::getYawAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline VehicleMotion::Pipeline::getYawAcceleration() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setYawAcceleration( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::initYawAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptYawAcceleration(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> VehicleMotion::Builder::disownYawAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasPitchAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasPitchAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader VehicleMotion::Reader::getPitchAcceleration() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::getPitchAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline VehicleMotion::Pipeline::getPitchAcceleration() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setPitchAcceleration( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::initPitchAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptPitchAcceleration(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> VehicleMotion::Builder::disownPitchAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool VehicleMotion::Reader::hasRollAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleMotion::Builder::hasRollAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Uint8WithValid::Reader VehicleMotion::Reader::getRollAcceleration() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::getRollAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Uint8WithValid::Pipeline VehicleMotion::Pipeline::getRollAcceleration() {
  return  ::gac::rscl::Uint8WithValid::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void VehicleMotion::Builder::setRollAcceleration( ::gac::rscl::Uint8WithValid::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Uint8WithValid::Builder VehicleMotion::Builder::initRollAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void VehicleMotion::Builder::adoptRollAcceleration(
    ::capnp::Orphan< ::gac::rscl::Uint8WithValid>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Uint8WithValid> VehicleMotion::Builder::disownRollAcceleration() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Uint8WithValid>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::uint32_t ChassisReportTime::Reader::getSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ChassisReportTime::Builder::getSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChassisReportTime::Builder::setSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ChassisReportTime::Reader::getNsec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ChassisReportTime::Builder::getNsec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ChassisReportTime::Builder::setNsec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ChassisReportHeader::Reader::getSeq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ChassisReportHeader::Builder::getSeq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChassisReportHeader::Builder::setSeq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ChassisReportHeader::Reader::hasStamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportHeader::Builder::hasStamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ChassisReportTime::Reader ChassisReportHeader::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ChassisReportTime::Builder ChassisReportHeader::Builder::getStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ChassisReportTime::Pipeline ChassisReportHeader::Pipeline::getStamp() {
  return  ::gac::rscl::ChassisReportTime::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ChassisReportHeader::Builder::setStamp( ::gac::rscl::ChassisReportTime::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ChassisReportTime::Builder ChassisReportHeader::Builder::initStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChassisReportHeader::Builder::adoptStamp(
    ::capnp::Orphan< ::gac::rscl::ChassisReportTime>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ChassisReportTime> ChassisReportHeader::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportTime>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChassisReportHeader::Reader::hasFrameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportHeader::Builder::hasFrameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ChassisReportHeader::Reader::getFrameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ChassisReportHeader::Builder::getFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ChassisReportHeader::Builder::setFrameId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ChassisReportHeader::Builder::initFrameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ChassisReportHeader::Builder::adoptFrameId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ChassisReportHeader::Builder::disownFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasAutoMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasAutoMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::AutonomyMode::Reader ChassisReportMsg::Reader::getAutoMode() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::AutonomyMode::Builder ChassisReportMsg::Builder::getAutoMode() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::AutonomyMode::Pipeline ChassisReportMsg::Pipeline::getAutoMode() {
  return  ::gac::rscl::AutonomyMode::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setAutoMode( ::gac::rscl::AutonomyMode::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::AutonomyMode::Builder ChassisReportMsg::Builder::initAutoMode() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptAutoMode(
    ::capnp::Orphan< ::gac::rscl::AutonomyMode>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::AutonomyMode> ChassisReportMsg::Builder::disownAutoMode() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::AutonomyMode>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ChassisReportMsg::Reader::getVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ChassisReportMsg::Builder::getVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChassisReportMsg::Builder::setVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ChassisReportMsg::Reader::getSteerAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ChassisReportMsg::Builder::getSteerAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ChassisReportMsg::Builder::setSteerAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ChassisReportMsg::Reader::getFrontWheelAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ChassisReportMsg::Builder::getFrontWheelAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ChassisReportMsg::Builder::setFrontWheelAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ChassisReportMsg::Reader::hasActualGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasActualGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Gear::Reader ChassisReportMsg::Reader::getActualGear() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Gear::Builder ChassisReportMsg::Builder::getActualGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Gear::Pipeline ChassisReportMsg::Pipeline::getActualGear() {
  return  ::gac::rscl::Gear::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setActualGear( ::gac::rscl::Gear::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Gear::Builder ChassisReportMsg::Builder::initActualGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptActualGear(
    ::capnp::Orphan< ::gac::rscl::Gear>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Gear> ChassisReportMsg::Builder::disownActualGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Gear>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasMaster() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasMaster() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorStatus::Reader ChassisReportMsg::Reader::getMaster() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorStatus::Builder ChassisReportMsg::Builder::getMaster() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorStatus::Pipeline ChassisReportMsg::Pipeline::getMaster() {
  return  ::gac::rscl::ActuatorStatus::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setMaster( ::gac::rscl::ActuatorStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorStatus::Builder ChassisReportMsg::Builder::initMaster() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptMaster(
    ::capnp::Orphan< ::gac::rscl::ActuatorStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorStatus> ChassisReportMsg::Builder::disownMaster() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasSlave() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasSlave() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ActuatorStatus::Reader ChassisReportMsg::Reader::getSlave() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ActuatorStatus::Builder ChassisReportMsg::Builder::getSlave() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ActuatorStatus::Pipeline ChassisReportMsg::Pipeline::getSlave() {
  return  ::gac::rscl::ActuatorStatus::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setSlave( ::gac::rscl::ActuatorStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ActuatorStatus::Builder ChassisReportMsg::Builder::initSlave() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptSlave(
    ::capnp::Orphan< ::gac::rscl::ActuatorStatus>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ActuatorStatus> ChassisReportMsg::Builder::disownSlave() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ActuatorStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasSteer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasSteer() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::SteerInfo::Reader ChassisReportMsg::Reader::getSteer() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::SteerInfo::Builder ChassisReportMsg::Builder::getSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::SteerInfo::Pipeline ChassisReportMsg::Pipeline::getSteer() {
  return  ::gac::rscl::SteerInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setSteer( ::gac::rscl::SteerInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::SteerInfo::Builder ChassisReportMsg::Builder::initSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptSteer(
    ::capnp::Orphan< ::gac::rscl::SteerInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::SteerInfo> ChassisReportMsg::Builder::disownSteer() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SteerInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasBrake() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasBrake() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::BrakeInfo::Reader ChassisReportMsg::Reader::getBrake() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::BrakeInfo::Builder ChassisReportMsg::Builder::getBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::BrakeInfo::Pipeline ChassisReportMsg::Pipeline::getBrake() {
  return  ::gac::rscl::BrakeInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setBrake( ::gac::rscl::BrakeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::BrakeInfo::Builder ChassisReportMsg::Builder::initBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptBrake(
    ::capnp::Orphan< ::gac::rscl::BrakeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::BrakeInfo> ChassisReportMsg::Builder::disownBrake() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::BrakeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasVcu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasVcu() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ThrottleInfo::Reader ChassisReportMsg::Reader::getVcu() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ThrottleInfo::Builder ChassisReportMsg::Builder::getVcu() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ThrottleInfo::Pipeline ChassisReportMsg::Pipeline::getVcu() {
  return  ::gac::rscl::ThrottleInfo::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setVcu( ::gac::rscl::ThrottleInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ThrottleInfo::Builder ChassisReportMsg::Builder::initVcu() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptVcu(
    ::capnp::Orphan< ::gac::rscl::ThrottleInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ThrottleInfo> ChassisReportMsg::Builder::disownVcu() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ThrottleInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::GearInfo::Reader ChassisReportMsg::Reader::getGear() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::GearInfo::Builder ChassisReportMsg::Builder::getGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::GearInfo::Pipeline ChassisReportMsg::Pipeline::getGear() {
  return  ::gac::rscl::GearInfo::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setGear( ::gac::rscl::GearInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::GearInfo::Builder ChassisReportMsg::Builder::initGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptGear(
    ::capnp::Orphan< ::gac::rscl::GearInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::GearInfo> ChassisReportMsg::Builder::disownGear() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::GearInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasEgoMotion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasEgoMotion() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::VehicleMotion::Reader ChassisReportMsg::Reader::getEgoMotion() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::VehicleMotion::Builder ChassisReportMsg::Builder::getEgoMotion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::VehicleMotion::Pipeline ChassisReportMsg::Pipeline::getEgoMotion() {
  return  ::gac::rscl::VehicleMotion::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setEgoMotion( ::gac::rscl::VehicleMotion::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::VehicleMotion::Builder ChassisReportMsg::Builder::initEgoMotion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptEgoMotion(
    ::capnp::Orphan< ::gac::rscl::VehicleMotion>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::VehicleMotion> ChassisReportMsg::Builder::disownEgoMotion() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VehicleMotion>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ChassisReportMsg::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ChassisReportMsg::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::ChassisReportHeader::Reader ChassisReportMsg::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::ChassisReportHeader::Builder ChassisReportMsg::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::ChassisReportHeader::Pipeline ChassisReportMsg::Pipeline::getHeader() {
  return  ::gac::rscl::ChassisReportHeader::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ChassisReportMsg::Builder::setHeader( ::gac::rscl::ChassisReportHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::ChassisReportHeader::Builder ChassisReportMsg::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ChassisReportMsg::Builder::adoptHeader(
    ::capnp::Orphan< ::gac::rscl::ChassisReportHeader>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::ChassisReportHeader> ChassisReportMsg::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::ChassisReportHeader>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

