// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: fusiongop.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_gac/gac.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(914d811c1f006293);
CAPNP_DECLARE_SCHEMA(c43b1dda06cd6ec9);

}  // namespace schemas
}  // namespace capnp

namespace gac {
namespace rscl {

struct GOP {
  GOP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(914d811c1f006293, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FusionGop {
  FusionGop() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c43b1dda06cd6ec9, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class GOP::Reader {
public:
  typedef GOP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHistinfovector() const;
  inline  ::gac::rscl::VectorHistInfo::Reader getHistinfovector() const;

  inline  ::uint32_t getId() const;

  inline  ::uint64_t getLaneid() const;

  inline  ::uint8_t getType() const;

  inline bool hasPosition() const;
  inline  ::gac::rscl::Bbox3D::Reader getPosition() const;

  inline double getHeadingangle() const;

  inline double getConfidence() const;

  inline double getTrackingperiod() const;

  inline  ::uint8_t getTrackingstatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GOP::Builder {
public:
  typedef GOP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHistinfovector();
  inline  ::gac::rscl::VectorHistInfo::Builder getHistinfovector();
  inline void setHistinfovector( ::gac::rscl::VectorHistInfo::Reader value);
  inline  ::gac::rscl::VectorHistInfo::Builder initHistinfovector();
  inline void adoptHistinfovector(::capnp::Orphan< ::gac::rscl::VectorHistInfo>&& value);
  inline ::capnp::Orphan< ::gac::rscl::VectorHistInfo> disownHistinfovector();

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::uint64_t getLaneid();
  inline void setLaneid( ::uint64_t value);

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

  inline bool hasPosition();
  inline  ::gac::rscl::Bbox3D::Builder getPosition();
  inline void setPosition( ::gac::rscl::Bbox3D::Reader value);
  inline  ::gac::rscl::Bbox3D::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::gac::rscl::Bbox3D>&& value);
  inline ::capnp::Orphan< ::gac::rscl::Bbox3D> disownPosition();

  inline double getHeadingangle();
  inline void setHeadingangle(double value);

  inline double getConfidence();
  inline void setConfidence(double value);

  inline double getTrackingperiod();
  inline void setTrackingperiod(double value);

  inline  ::uint8_t getTrackingstatus();
  inline void setTrackingstatus( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GOP::Pipeline {
public:
  typedef GOP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::VectorHistInfo::Pipeline getHistinfovector();
  inline  ::gac::rscl::Bbox3D::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionGop::Reader {
public:
  typedef FusionGop Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTimestamp() const;
  inline  ::gac::rscl::TimeStamp::Reader getTimestamp() const;

  inline bool hasCoordinate() const;
  inline  ::gac::rscl::CoordinateSystem::Reader getCoordinate() const;

  inline bool hasSensorid() const;
  inline  ::gac::rscl::SensorId::Reader getSensorid() const;

  inline bool hasGopvector() const;
  inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Reader getGopvector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionGop::Builder {
public:
  typedef FusionGop Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTimestamp();
  inline  ::gac::rscl::TimeStamp::Builder getTimestamp();
  inline void setTimestamp( ::gac::rscl::TimeStamp::Reader value);
  inline  ::gac::rscl::TimeStamp::Builder initTimestamp();
  inline void adoptTimestamp(::capnp::Orphan< ::gac::rscl::TimeStamp>&& value);
  inline ::capnp::Orphan< ::gac::rscl::TimeStamp> disownTimestamp();

  inline bool hasCoordinate();
  inline  ::gac::rscl::CoordinateSystem::Builder getCoordinate();
  inline void setCoordinate( ::gac::rscl::CoordinateSystem::Reader value);
  inline  ::gac::rscl::CoordinateSystem::Builder initCoordinate();
  inline void adoptCoordinate(::capnp::Orphan< ::gac::rscl::CoordinateSystem>&& value);
  inline ::capnp::Orphan< ::gac::rscl::CoordinateSystem> disownCoordinate();

  inline bool hasSensorid();
  inline  ::gac::rscl::SensorId::Builder getSensorid();
  inline void setSensorid( ::gac::rscl::SensorId::Reader value);
  inline  ::gac::rscl::SensorId::Builder initSensorid();
  inline void adoptSensorid(::capnp::Orphan< ::gac::rscl::SensorId>&& value);
  inline ::capnp::Orphan< ::gac::rscl::SensorId> disownSensorid();

  inline bool hasGopvector();
  inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Builder getGopvector();
  inline void setGopvector( ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Builder initGopvector(unsigned int size);
  inline void adoptGopvector(::capnp::Orphan< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>> disownGopvector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionGop::Pipeline {
public:
  typedef FusionGop Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::gac::rscl::TimeStamp::Pipeline getTimestamp();
  inline  ::gac::rscl::CoordinateSystem::Pipeline getCoordinate();
  inline  ::gac::rscl::SensorId::Pipeline getSensorid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool GOP::Reader::hasHistinfovector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GOP::Builder::hasHistinfovector() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::VectorHistInfo::Reader GOP::Reader::getHistinfovector() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::VectorHistInfo::Builder GOP::Builder::getHistinfovector() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::VectorHistInfo::Pipeline GOP::Pipeline::getHistinfovector() {
  return  ::gac::rscl::VectorHistInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GOP::Builder::setHistinfovector( ::gac::rscl::VectorHistInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::VectorHistInfo::Builder GOP::Builder::initHistinfovector() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GOP::Builder::adoptHistinfovector(
    ::capnp::Orphan< ::gac::rscl::VectorHistInfo>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::VectorHistInfo> GOP::Builder::disownHistinfovector() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::VectorHistInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t GOP::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t GOP::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GOP::Reader::getLaneid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GOP::Builder::getLaneid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setLaneid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t GOP::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GOP::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool GOP::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GOP::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::Bbox3D::Reader GOP::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::Bbox3D::Builder GOP::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::Bbox3D::Pipeline GOP::Pipeline::getPosition() {
  return  ::gac::rscl::Bbox3D::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GOP::Builder::setPosition( ::gac::rscl::Bbox3D::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::Bbox3D::Builder GOP::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GOP::Builder::adoptPosition(
    ::capnp::Orphan< ::gac::rscl::Bbox3D>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::Bbox3D> GOP::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::Bbox3D>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double GOP::Reader::getHeadingangle() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GOP::Builder::getHeadingangle() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setHeadingangle(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double GOP::Reader::getConfidence() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double GOP::Builder::getConfidence() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setConfidence(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double GOP::Reader::getTrackingperiod() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double GOP::Builder::getTrackingperiod() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setTrackingperiod(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t GOP::Reader::getTrackingstatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t GOP::Builder::getTrackingstatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void GOP::Builder::setTrackingstatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool FusionGop::Reader::hasTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FusionGop::Builder::hasTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::TimeStamp::Reader FusionGop::Reader::getTimestamp() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::TimeStamp::Builder FusionGop::Builder::getTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::TimeStamp::Pipeline FusionGop::Pipeline::getTimestamp() {
  return  ::gac::rscl::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FusionGop::Builder::setTimestamp( ::gac::rscl::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::TimeStamp::Builder FusionGop::Builder::initTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FusionGop::Builder::adoptTimestamp(
    ::capnp::Orphan< ::gac::rscl::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::TimeStamp> FusionGop::Builder::disownTimestamp() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FusionGop::Reader::hasCoordinate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FusionGop::Builder::hasCoordinate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::CoordinateSystem::Reader FusionGop::Reader::getCoordinate() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::CoordinateSystem::Builder FusionGop::Builder::getCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::CoordinateSystem::Pipeline FusionGop::Pipeline::getCoordinate() {
  return  ::gac::rscl::CoordinateSystem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FusionGop::Builder::setCoordinate( ::gac::rscl::CoordinateSystem::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::CoordinateSystem::Builder FusionGop::Builder::initCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FusionGop::Builder::adoptCoordinate(
    ::capnp::Orphan< ::gac::rscl::CoordinateSystem>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::CoordinateSystem> FusionGop::Builder::disownCoordinate() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::CoordinateSystem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FusionGop::Reader::hasSensorid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FusionGop::Builder::hasSensorid() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::gac::rscl::SensorId::Reader FusionGop::Reader::getSensorid() const {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::gac::rscl::SensorId::Builder FusionGop::Builder::getSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::gac::rscl::SensorId::Pipeline FusionGop::Pipeline::getSensorid() {
  return  ::gac::rscl::SensorId::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void FusionGop::Builder::setSensorid( ::gac::rscl::SensorId::Reader value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::gac::rscl::SensorId::Builder FusionGop::Builder::initSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FusionGop::Builder::adoptSensorid(
    ::capnp::Orphan< ::gac::rscl::SensorId>&& value) {
  ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::gac::rscl::SensorId> FusionGop::Builder::disownSensorid() {
  return ::capnp::_::PointerHelpers< ::gac::rscl::SensorId>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FusionGop::Reader::hasGopvector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FusionGop::Builder::hasGopvector() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Reader FusionGop::Reader::getGopvector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Builder FusionGop::Builder::getGopvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FusionGop::Builder::setGopvector( ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>::Builder FusionGop::Builder::initGopvector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FusionGop::Builder::adoptGopvector(
    ::capnp::Orphan< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>> FusionGop::Builder::disownGopvector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::gac::rscl::GOP,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

