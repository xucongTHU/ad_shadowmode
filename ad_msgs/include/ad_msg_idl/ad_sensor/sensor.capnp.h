// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sensor.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bda749c673be47c4);
enum class SensorQuality_bda749c673be47c4: uint16_t {
  INVALID,
  BAD,
  DOWNGRADE,
  PERFECT,
};
CAPNP_DECLARE_ENUM(SensorQuality, bda749c673be47c4);
CAPNP_DECLARE_SCHEMA(ce9881cab87705e9);
CAPNP_DECLARE_SCHEMA(bd52d695e8c663b2);
CAPNP_DECLARE_SCHEMA(f48d4e2025ed515b);
CAPNP_DECLARE_SCHEMA(f820b48627db7813);
CAPNP_DECLARE_SCHEMA(9612d41820f94dda);
CAPNP_DECLARE_SCHEMA(822a26d6a663eba5);
CAPNP_DECLARE_SCHEMA(d2083dd9ad88f555);
CAPNP_DECLARE_SCHEMA(977f1533a270c4a4);
CAPNP_DECLARE_SCHEMA(87188e9a0ae6528a);
CAPNP_DECLARE_SCHEMA(d9837b474c188d53);
CAPNP_DECLARE_SCHEMA(adff1665233ac527);
CAPNP_DECLARE_SCHEMA(d29d58c41bcb8b5e);
CAPNP_DECLARE_SCHEMA(f8f30bf02a4d3642);
CAPNP_DECLARE_SCHEMA(8e4f81f058c5056d);
CAPNP_DECLARE_SCHEMA(e76c5609e1e1765c);
CAPNP_DECLARE_SCHEMA(ff55d5d1bfbc2796);
CAPNP_DECLARE_SCHEMA(8b56b0da807f67c0);
CAPNP_DECLARE_SCHEMA(f873e26047e84982);
CAPNP_DECLARE_SCHEMA(dcf0c23d8f58e336);
CAPNP_DECLARE_SCHEMA(c075d455692ed915);
CAPNP_DECLARE_SCHEMA(e5f5fedfdc82000b);
enum class Type_e5f5fedfdc82000b: uint16_t {
  LONG_RANGE_UNIT,
  SHORT_RANGE_UNIT,
};
CAPNP_DECLARE_ENUM(Type, e5f5fedfdc82000b);
CAPNP_DECLARE_SCHEMA(ac011523acd53b37);
CAPNP_DECLARE_SCHEMA(bd9e3fa1b41ed51a);
CAPNP_DECLARE_SCHEMA(fe017cb393e07712);
CAPNP_DECLARE_SCHEMA(8aac9195294baf3f);
CAPNP_DECLARE_SCHEMA(bc3e5a45d86d508f);
CAPNP_DECLARE_SCHEMA(f1ba7e40ec93a4bc);
enum class INSStatus_f1ba7e40ec93a4bc: uint16_t {
  INVALID,
  VALID,
};
CAPNP_DECLARE_ENUM(INSStatus, f1ba7e40ec93a4bc);
CAPNP_DECLARE_SCHEMA(924b67a7ea489d94);
CAPNP_DECLARE_SCHEMA(a1139d8123877d17);
CAPNP_DECLARE_SCHEMA(fac8138b08f48465);
CAPNP_DECLARE_SCHEMA(b4e51d9d3b68752c);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace sensor {

typedef ::capnp::schemas::SensorQuality_bda749c673be47c4 SensorQuality;

struct DualAntennaHeading {
  DualAntennaHeading() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce9881cab87705e9, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gnss {
  Gnss() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd52d695e8c663b2, 5, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Imu {
  Imu() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f48d4e2025ed515b, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ins {
  Ins() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f820b48627db7813, 8, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarConti {
  RadarConti() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9612d41820f94dda, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarContiCluster {
  RadarContiCluster() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(822a26d6a663eba5, 9, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarContiObject {
  RadarContiObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2083dd9ad88f555, 13, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarEsr {
  RadarEsr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(977f1533a270c4a4, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RadarEsrObject {
  RadarEsrObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87188e9a0ae6528a, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PasUssCodeIdInfoType {
  PasUssCodeIdInfoType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9837b474c188d53, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PasOdoInfoType {
  PasOdoInfoType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adff1665233ac527, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PasDistanceType {
  PasDistanceType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d29d58c41bcb8b5e, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MapObjSignal {
  MapObjSignal() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8f30bf02a4d3642, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApaSlotinfo {
  ApaSlotinfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e4f81f058c5056d, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PASMapPsolObjInfoType {
  PASMapPsolObjInfoType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e76c5609e1e1765c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PasUssInfoType {
  PasUssInfoType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff55d5d1bfbc2796, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PasUssTraceIdInfoType {
  PasUssTraceIdInfoType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b56b0da807f67c0, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UssArray {
  UssArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f873e26047e84982, 12, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Range {
  Range() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcf0c23d8f58e336, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RangeArray {
  RangeArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e5f5fedfdc82000b Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c075d455692ed915, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdsfiImageData {
  AdsfiImageData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac011523acd53b37, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdsfiImageDataV2 {
  AdsfiImageDataV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd9e3fa1b41ed51a, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdsfiImageFrame {
  AdsfiImageFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fe017cb393e07712, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdsfiImageFrameV2 {
  AdsfiImageFrameV2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8aac9195294baf3f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdsfiLidarPointCloud {
  AdsfiLidarPointCloud() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc3e5a45d86d508f, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::INSStatus_f1ba7e40ec93a4bc INSStatus;

struct InsToNavi {
  InsToNavi() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(924b67a7ea489d94, 9, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PacketFrame {
  PacketFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1139d8123877d17, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RawData {
  RawData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fac8138b08f48465, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraRpcMsg {
  CameraRpcMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4e51d9d3b68752c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DualAntennaHeading::Reader {
public:
  typedef DualAntennaHeading Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::senseAD::msg::sensor::SensorQuality getStatus() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline float getHeading() const;

  inline float getHeadingStdDev() const;

  inline float getPitch() const;

  inline float getPitchStdDev() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DualAntennaHeading::Builder {
public:
  typedef DualAntennaHeading Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::senseAD::msg::sensor::SensorQuality getStatus();
  inline void setStatus( ::senseAD::msg::sensor::SensorQuality value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline float getHeading();
  inline void setHeading(float value);

  inline float getHeadingStdDev();
  inline void setHeadingStdDev(float value);

  inline float getPitch();
  inline void setPitch(float value);

  inline float getPitchStdDev();
  inline void setPitchStdDev(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DualAntennaHeading::Pipeline {
public:
  typedef DualAntennaHeading Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gnss::Reader {
public:
  typedef Gnss Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::senseAD::msg::sensor::SensorQuality getStatus() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasNmeaGga() const;
  inline  ::capnp::Text::Reader getNmeaGga() const;

  inline bool hasNmeaRmc() const;
  inline  ::capnp::Text::Reader getNmeaRmc() const;

  inline double getLongitude() const;

  inline double getLatitude() const;

  inline double getAltitude() const;

  inline bool hasPositionStdDev() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPositionStdDev() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearVelocityStdDev() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocityStdDev() const;

  inline  ::uint32_t getNumSats() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gnss::Builder {
public:
  typedef Gnss Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::senseAD::msg::sensor::SensorQuality getStatus();
  inline void setStatus( ::senseAD::msg::sensor::SensorQuality value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasNmeaGga();
  inline  ::capnp::Text::Builder getNmeaGga();
  inline void setNmeaGga( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmeaGga(unsigned int size);
  inline void adoptNmeaGga(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmeaGga();

  inline bool hasNmeaRmc();
  inline  ::capnp::Text::Builder getNmeaRmc();
  inline void setNmeaRmc( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmeaRmc(unsigned int size);
  inline void adoptNmeaRmc(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmeaRmc();

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline bool hasPositionStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPositionStdDev();
  inline void setPositionStdDev( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPositionStdDev();
  inline void adoptPositionStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPositionStdDev();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearVelocityStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocityStdDev();
  inline void setLinearVelocityStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocityStdDev();
  inline void adoptLinearVelocityStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocityStdDev();

  inline  ::uint32_t getNumSats();
  inline void setNumSats( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gnss::Pipeline {
public:
  typedef Gnss Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPositionStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocityStdDev();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Imu::Reader {
public:
  typedef Imu Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::senseAD::msg::sensor::SensorQuality getStatus() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline float getAccelX() const;

  inline float getAccelY() const;

  inline float getAccelZ() const;

  inline float getGyroX() const;

  inline float getGyroY() const;

  inline float getGyroZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Imu::Builder {
public:
  typedef Imu Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::senseAD::msg::sensor::SensorQuality getStatus();
  inline void setStatus( ::senseAD::msg::sensor::SensorQuality value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline float getAccelX();
  inline void setAccelX(float value);

  inline float getAccelY();
  inline void setAccelY(float value);

  inline float getAccelZ();
  inline void setAccelZ(float value);

  inline float getGyroX();
  inline void setGyroX(float value);

  inline float getGyroY();
  inline void setGyroY(float value);

  inline float getGyroZ();
  inline void setGyroZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Imu::Pipeline {
public:
  typedef Imu Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ins::Reader {
public:
  typedef Ins Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::senseAD::msg::sensor::SensorQuality getStatus() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline double getLongitude() const;

  inline double getLatitude() const;

  inline double getAltitude() const;

  inline bool hasPositionStdDev() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getPositionStdDev() const;

  inline double getRoll() const;

  inline double getPitch() const;

  inline double getYaw() const;

  inline bool hasAttitudeStdDev() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getAttitudeStdDev() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearVelocityStdDev() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocityStdDev() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ins::Builder {
public:
  typedef Ins Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::senseAD::msg::sensor::SensorQuality getStatus();
  inline void setStatus( ::senseAD::msg::sensor::SensorQuality value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline bool hasPositionStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getPositionStdDev();
  inline void setPositionStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initPositionStdDev();
  inline void adoptPositionStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownPositionStdDev();

  inline double getRoll();
  inline void setRoll(double value);

  inline double getPitch();
  inline void setPitch(double value);

  inline double getYaw();
  inline void setYaw(double value);

  inline bool hasAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getAttitudeStdDev();
  inline void setAttitudeStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initAttitudeStdDev();
  inline void adoptAttitudeStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownAttitudeStdDev();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearVelocityStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocityStdDev();
  inline void setLinearVelocityStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocityStdDev();
  inline void adoptLinearVelocityStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocityStdDev();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ins::Pipeline {
public:
  typedef Ins Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getPositionStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocityStdDev();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarConti::Reader {
public:
  typedef RadarConti Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::uint32_t getBusFault() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasClusterList() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Reader getClusterList() const;

  inline bool hasObjectList() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Reader getObjectList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarConti::Builder {
public:
  typedef RadarConti Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::uint32_t getBusFault();
  inline void setBusFault( ::uint32_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasClusterList();
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Builder getClusterList();
  inline void setClusterList( ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Builder initClusterList(unsigned int size);
  inline void adoptClusterList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>> disownClusterList();

  inline bool hasObjectList();
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Builder getObjectList();
  inline void setObjectList( ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Builder initObjectList(unsigned int size);
  inline void adoptObjectList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>> disownObjectList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarConti::Pipeline {
public:
  typedef RadarConti Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarContiCluster::Reader {
public:
  typedef RadarContiCluster Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs() const;

  inline  ::uint32_t getTrackId() const;

  inline float getDistanceLong() const;

  inline float getDistanceLat() const;

  inline float getVelocityLong() const;

  inline float getVelocityLat() const;

  inline float getRcs() const;

  inline  ::uint32_t getDynamicPropEnum() const;

  inline bool getQualityVaild() const;

  inline float getDistanceLongRms() const;

  inline float getDistanceLatRms() const;

  inline float getVelocityLongRms() const;

  inline float getVelocityLatRms() const;

  inline float getClusterPdh0() const;

  inline  ::uint32_t getAmbigStateEnum() const;

  inline  ::uint32_t getInvalidStateEnum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarContiCluster::Builder {
public:
  typedef RadarContiCluster Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs();
  inline void setRecvTimeNs( ::uint64_t value);

  inline  ::uint32_t getTrackId();
  inline void setTrackId( ::uint32_t value);

  inline float getDistanceLong();
  inline void setDistanceLong(float value);

  inline float getDistanceLat();
  inline void setDistanceLat(float value);

  inline float getVelocityLong();
  inline void setVelocityLong(float value);

  inline float getVelocityLat();
  inline void setVelocityLat(float value);

  inline float getRcs();
  inline void setRcs(float value);

  inline  ::uint32_t getDynamicPropEnum();
  inline void setDynamicPropEnum( ::uint32_t value);

  inline bool getQualityVaild();
  inline void setQualityVaild(bool value);

  inline float getDistanceLongRms();
  inline void setDistanceLongRms(float value);

  inline float getDistanceLatRms();
  inline void setDistanceLatRms(float value);

  inline float getVelocityLongRms();
  inline void setVelocityLongRms(float value);

  inline float getVelocityLatRms();
  inline void setVelocityLatRms(float value);

  inline float getClusterPdh0();
  inline void setClusterPdh0(float value);

  inline  ::uint32_t getAmbigStateEnum();
  inline void setAmbigStateEnum( ::uint32_t value);

  inline  ::uint32_t getInvalidStateEnum();
  inline void setInvalidStateEnum( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarContiCluster::Pipeline {
public:
  typedef RadarContiCluster Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarContiObject::Reader {
public:
  typedef RadarContiObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs() const;

  inline  ::uint32_t getTrackId() const;

  inline float getDistanceLong() const;

  inline float getDistanceLat() const;

  inline float getVelocityLong() const;

  inline float getVelocityLat() const;

  inline float getRcs() const;

  inline  ::uint32_t getDynamicPropEnum() const;

  inline bool getQualityVaild() const;

  inline float getDistanceLongRms() const;

  inline float getDistanceLatRms() const;

  inline float getVelocityLongRms() const;

  inline float getVelocityLatRms() const;

  inline float getAccelLongRms() const;

  inline float getAccelLatRms() const;

  inline float getOrientationRms() const;

  inline float getProbOfExist() const;

  inline  ::uint32_t getMeasurementStateEnum() const;

  inline bool getExtendVaild() const;

  inline float getAccelLong() const;

  inline float getAccelLat() const;

  inline float getOrientation() const;

  inline float getLength() const;

  inline float getWidth() const;

  inline  ::uint32_t getObjectTypeEnum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarContiObject::Builder {
public:
  typedef RadarContiObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs();
  inline void setRecvTimeNs( ::uint64_t value);

  inline  ::uint32_t getTrackId();
  inline void setTrackId( ::uint32_t value);

  inline float getDistanceLong();
  inline void setDistanceLong(float value);

  inline float getDistanceLat();
  inline void setDistanceLat(float value);

  inline float getVelocityLong();
  inline void setVelocityLong(float value);

  inline float getVelocityLat();
  inline void setVelocityLat(float value);

  inline float getRcs();
  inline void setRcs(float value);

  inline  ::uint32_t getDynamicPropEnum();
  inline void setDynamicPropEnum( ::uint32_t value);

  inline bool getQualityVaild();
  inline void setQualityVaild(bool value);

  inline float getDistanceLongRms();
  inline void setDistanceLongRms(float value);

  inline float getDistanceLatRms();
  inline void setDistanceLatRms(float value);

  inline float getVelocityLongRms();
  inline void setVelocityLongRms(float value);

  inline float getVelocityLatRms();
  inline void setVelocityLatRms(float value);

  inline float getAccelLongRms();
  inline void setAccelLongRms(float value);

  inline float getAccelLatRms();
  inline void setAccelLatRms(float value);

  inline float getOrientationRms();
  inline void setOrientationRms(float value);

  inline float getProbOfExist();
  inline void setProbOfExist(float value);

  inline  ::uint32_t getMeasurementStateEnum();
  inline void setMeasurementStateEnum( ::uint32_t value);

  inline bool getExtendVaild();
  inline void setExtendVaild(bool value);

  inline float getAccelLong();
  inline void setAccelLong(float value);

  inline float getAccelLat();
  inline void setAccelLat(float value);

  inline float getOrientation();
  inline void setOrientation(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline  ::uint32_t getObjectTypeEnum();
  inline void setObjectTypeEnum( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarContiObject::Pipeline {
public:
  typedef RadarContiObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarEsr::Reader {
public:
  typedef RadarEsr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getActualTimeNs() const;

  inline  ::uint32_t getBusFault() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasObjectList() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Reader getObjectList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarEsr::Builder {
public:
  typedef RadarEsr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getActualTimeNs();
  inline void setActualTimeNs( ::uint64_t value);

  inline  ::uint32_t getBusFault();
  inline void setBusFault( ::uint32_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasObjectList();
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Builder getObjectList();
  inline void setObjectList( ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Builder initObjectList(unsigned int size);
  inline void adoptObjectList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>> disownObjectList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarEsr::Pipeline {
public:
  typedef RadarEsr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RadarEsrObject::Reader {
public:
  typedef RadarEsrObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs() const;

  inline bool getObjectVaild() const;

  inline  ::uint32_t getTrackId() const;

  inline float getTrackLatRate() const;

  inline bool getTrackGroupChanged() const;

  inline  ::uint32_t getTrackStatus() const;

  inline float getTrackAngle() const;

  inline float getTrackRange() const;

  inline bool getTrackBridgeObject() const;

  inline bool getTrackRollingCount() const;

  inline float getTrackWidth() const;

  inline float getTrackRangeAccel() const;

  inline  ::uint32_t getTrackMedRangeMode() const;

  inline float getTrackRangeRate() const;

  inline bool getMovableFast() const;

  inline bool getMovableSlow() const;

  inline bool getMoving() const;

  inline  ::int32_t getPower() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RadarEsrObject::Builder {
public:
  typedef RadarEsrObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs();
  inline void setRecvTimeNs( ::uint64_t value);

  inline bool getObjectVaild();
  inline void setObjectVaild(bool value);

  inline  ::uint32_t getTrackId();
  inline void setTrackId( ::uint32_t value);

  inline float getTrackLatRate();
  inline void setTrackLatRate(float value);

  inline bool getTrackGroupChanged();
  inline void setTrackGroupChanged(bool value);

  inline  ::uint32_t getTrackStatus();
  inline void setTrackStatus( ::uint32_t value);

  inline float getTrackAngle();
  inline void setTrackAngle(float value);

  inline float getTrackRange();
  inline void setTrackRange(float value);

  inline bool getTrackBridgeObject();
  inline void setTrackBridgeObject(bool value);

  inline bool getTrackRollingCount();
  inline void setTrackRollingCount(bool value);

  inline float getTrackWidth();
  inline void setTrackWidth(float value);

  inline float getTrackRangeAccel();
  inline void setTrackRangeAccel(float value);

  inline  ::uint32_t getTrackMedRangeMode();
  inline void setTrackMedRangeMode( ::uint32_t value);

  inline float getTrackRangeRate();
  inline void setTrackRangeRate(float value);

  inline bool getMovableFast();
  inline void setMovableFast(bool value);

  inline bool getMovableSlow();
  inline void setMovableSlow(bool value);

  inline bool getMoving();
  inline void setMoving(bool value);

  inline  ::int32_t getPower();
  inline void setPower( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RadarEsrObject::Pipeline {
public:
  typedef RadarEsrObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PasUssCodeIdInfoType::Reader {
public:
  typedef PasUssCodeIdInfoType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssCodeIdInfoId() const;

  inline  ::uint8_t getUssCeRight1CodeId() const;

  inline  ::uint8_t getUssCeLeft1CodeId() const;

  inline  ::uint8_t getUssCeLeft2CodeId() const;

  inline  ::uint8_t getUssCeRight2CodeId() const;

  inline  ::uint8_t getUssDemid1CodeId() const;

  inline  ::uint8_t getUssDemid2CodeId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PasUssCodeIdInfoType::Builder {
public:
  typedef PasUssCodeIdInfoType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssCodeIdInfoId();
  inline void setPasUssCodeIdInfoId( ::uint8_t value);

  inline  ::uint8_t getUssCeRight1CodeId();
  inline void setUssCeRight1CodeId( ::uint8_t value);

  inline  ::uint8_t getUssCeLeft1CodeId();
  inline void setUssCeLeft1CodeId( ::uint8_t value);

  inline  ::uint8_t getUssCeLeft2CodeId();
  inline void setUssCeLeft2CodeId( ::uint8_t value);

  inline  ::uint8_t getUssCeRight2CodeId();
  inline void setUssCeRight2CodeId( ::uint8_t value);

  inline  ::uint8_t getUssDemid1CodeId();
  inline void setUssDemid1CodeId( ::uint8_t value);

  inline  ::uint8_t getUssDemid2CodeId();
  inline void setUssDemid2CodeId( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PasUssCodeIdInfoType::Pipeline {
public:
  typedef PasUssCodeIdInfoType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PasOdoInfoType::Reader {
public:
  typedef PasOdoInfoType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasOdoInfo6Checksum() const;

  inline  ::uint8_t getPasOdoInfo6MsgCounter() const;

  inline float getOdoKappa() const;

  inline float getOdoSha() const;

  inline float getOdoX() const;

  inline float getOdoYawAngle() const;

  inline  ::uint64_t getPasOdoTimeStamp() const;

  inline float getPasOdoY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PasOdoInfoType::Builder {
public:
  typedef PasOdoInfoType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasOdoInfo6Checksum();
  inline void setPasOdoInfo6Checksum( ::uint8_t value);

  inline  ::uint8_t getPasOdoInfo6MsgCounter();
  inline void setPasOdoInfo6MsgCounter( ::uint8_t value);

  inline float getOdoKappa();
  inline void setOdoKappa(float value);

  inline float getOdoSha();
  inline void setOdoSha(float value);

  inline float getOdoX();
  inline void setOdoX(float value);

  inline float getOdoYawAngle();
  inline void setOdoYawAngle(float value);

  inline  ::uint64_t getPasOdoTimeStamp();
  inline void setPasOdoTimeStamp( ::uint64_t value);

  inline float getPasOdoY();
  inline void setPasOdoY(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PasOdoInfoType::Pipeline {
public:
  typedef PasOdoInfoType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PasDistanceType::Reader {
public:
  typedef PasDistanceType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasDistanceChecksum() const;

  inline  ::uint8_t getPasDistanceMsgCounter() const;

  inline  ::uint8_t getPasRRMidDistance() const;

  inline  ::uint8_t getPasRLMidDistance() const;

  inline  ::uint8_t getPasRRDistance() const;

  inline  ::uint8_t getPasRLDistance() const;

  inline  ::uint8_t getPasRSLSideDistance() const;

  inline  ::uint8_t getPasRSRSideDistance() const;

  inline  ::uint8_t getPasFRDistance() const;

  inline  ::uint8_t getPasFLDistance() const;

  inline  ::uint8_t getPasFRMidDistance() const;

  inline  ::uint8_t getPasFLMidDistance() const;

  inline  ::uint8_t getPasFSRSideDistance() const;

  inline  ::uint8_t getPasFSLSideDistance() const;

  inline bool getPasFLSnsErrFlag() const;

  inline bool getPasFRSnsErrFlag() const;

  inline bool getPasRSRSnsErrFlag() const;

  inline bool getPasRSLSnsErrFlag() const;

  inline bool getPasRLSnsErrFlag() const;

  inline bool getPasRRSnsErrFlag() const;

  inline bool getPasRLMidSnsErrFlag() const;

  inline bool getPasRRMidSnsErrFlag() const;

  inline bool getPasBattVoltErrFlag() const;

  inline bool getPasCtrlModulerrFlag() const;

  inline bool getPasFSRSnsErrFlag() const;

  inline bool getPasFSLSnsErrFlag() const;

  inline bool getPasFLMidSnsErrFlag() const;

  inline bool getPasFRMidSnsErrFlag() const;

  inline bool getPasOverTempErrFlag() const;

  inline bool getPasRRMidSnsCoverErrFlag() const;

  inline bool getPasRLMidSnsCoverErrFlag() const;

  inline bool getPasRRSnsCoverErrFlag() const;

  inline bool getPasRLSnsCoverErrFlag() const;

  inline bool getPasRSLSnsCoverErrFlag() const;

  inline bool getPasRSRSnsCoverErrFlag() const;

  inline bool getPasFRSnsCoverErrFlag() const;

  inline bool getPasFLSnsCoverErrFlag() const;

  inline bool getPasFRMidSnsCoverErrFlag() const;

  inline bool getPasFLMidSnsCoverErrFlag() const;

  inline bool getPasFSLSnsCoverErrFlag() const;

  inline bool getPasFSRSnsCoverErrFlag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PasDistanceType::Builder {
public:
  typedef PasDistanceType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasDistanceChecksum();
  inline void setPasDistanceChecksum( ::uint8_t value);

  inline  ::uint8_t getPasDistanceMsgCounter();
  inline void setPasDistanceMsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasRRMidDistance();
  inline void setPasRRMidDistance( ::uint8_t value);

  inline  ::uint8_t getPasRLMidDistance();
  inline void setPasRLMidDistance( ::uint8_t value);

  inline  ::uint8_t getPasRRDistance();
  inline void setPasRRDistance( ::uint8_t value);

  inline  ::uint8_t getPasRLDistance();
  inline void setPasRLDistance( ::uint8_t value);

  inline  ::uint8_t getPasRSLSideDistance();
  inline void setPasRSLSideDistance( ::uint8_t value);

  inline  ::uint8_t getPasRSRSideDistance();
  inline void setPasRSRSideDistance( ::uint8_t value);

  inline  ::uint8_t getPasFRDistance();
  inline void setPasFRDistance( ::uint8_t value);

  inline  ::uint8_t getPasFLDistance();
  inline void setPasFLDistance( ::uint8_t value);

  inline  ::uint8_t getPasFRMidDistance();
  inline void setPasFRMidDistance( ::uint8_t value);

  inline  ::uint8_t getPasFLMidDistance();
  inline void setPasFLMidDistance( ::uint8_t value);

  inline  ::uint8_t getPasFSRSideDistance();
  inline void setPasFSRSideDistance( ::uint8_t value);

  inline  ::uint8_t getPasFSLSideDistance();
  inline void setPasFSLSideDistance( ::uint8_t value);

  inline bool getPasFLSnsErrFlag();
  inline void setPasFLSnsErrFlag(bool value);

  inline bool getPasFRSnsErrFlag();
  inline void setPasFRSnsErrFlag(bool value);

  inline bool getPasRSRSnsErrFlag();
  inline void setPasRSRSnsErrFlag(bool value);

  inline bool getPasRSLSnsErrFlag();
  inline void setPasRSLSnsErrFlag(bool value);

  inline bool getPasRLSnsErrFlag();
  inline void setPasRLSnsErrFlag(bool value);

  inline bool getPasRRSnsErrFlag();
  inline void setPasRRSnsErrFlag(bool value);

  inline bool getPasRLMidSnsErrFlag();
  inline void setPasRLMidSnsErrFlag(bool value);

  inline bool getPasRRMidSnsErrFlag();
  inline void setPasRRMidSnsErrFlag(bool value);

  inline bool getPasBattVoltErrFlag();
  inline void setPasBattVoltErrFlag(bool value);

  inline bool getPasCtrlModulerrFlag();
  inline void setPasCtrlModulerrFlag(bool value);

  inline bool getPasFSRSnsErrFlag();
  inline void setPasFSRSnsErrFlag(bool value);

  inline bool getPasFSLSnsErrFlag();
  inline void setPasFSLSnsErrFlag(bool value);

  inline bool getPasFLMidSnsErrFlag();
  inline void setPasFLMidSnsErrFlag(bool value);

  inline bool getPasFRMidSnsErrFlag();
  inline void setPasFRMidSnsErrFlag(bool value);

  inline bool getPasOverTempErrFlag();
  inline void setPasOverTempErrFlag(bool value);

  inline bool getPasRRMidSnsCoverErrFlag();
  inline void setPasRRMidSnsCoverErrFlag(bool value);

  inline bool getPasRLMidSnsCoverErrFlag();
  inline void setPasRLMidSnsCoverErrFlag(bool value);

  inline bool getPasRRSnsCoverErrFlag();
  inline void setPasRRSnsCoverErrFlag(bool value);

  inline bool getPasRLSnsCoverErrFlag();
  inline void setPasRLSnsCoverErrFlag(bool value);

  inline bool getPasRSLSnsCoverErrFlag();
  inline void setPasRSLSnsCoverErrFlag(bool value);

  inline bool getPasRSRSnsCoverErrFlag();
  inline void setPasRSRSnsCoverErrFlag(bool value);

  inline bool getPasFRSnsCoverErrFlag();
  inline void setPasFRSnsCoverErrFlag(bool value);

  inline bool getPasFLSnsCoverErrFlag();
  inline void setPasFLSnsCoverErrFlag(bool value);

  inline bool getPasFRMidSnsCoverErrFlag();
  inline void setPasFRMidSnsCoverErrFlag(bool value);

  inline bool getPasFLMidSnsCoverErrFlag();
  inline void setPasFLMidSnsCoverErrFlag(bool value);

  inline bool getPasFSLSnsCoverErrFlag();
  inline void setPasFSLSnsCoverErrFlag(bool value);

  inline bool getPasFSRSnsCoverErrFlag();
  inline void setPasFSRSnsCoverErrFlag(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PasDistanceType::Pipeline {
public:
  typedef PasDistanceType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapObjSignal::Reader {
public:
  typedef MapObjSignal Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId() const;

  inline float getMapObjP1x() const;

  inline float getMapObjP1y() const;

  inline float getMapObjP2x() const;

  inline float getMapObjP2y() const;

  inline float getMapObjProb() const;

  inline  ::uint8_t getMapObjType() const;

  inline  ::uint8_t getMapObjHeightBrake() const;

  inline  ::uint8_t getMapObjHeightWarn() const;

  inline float getMapObjHeightProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapObjSignal::Builder {
public:
  typedef MapObjSignal Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getId();
  inline void setId( ::uint8_t value);

  inline float getMapObjP1x();
  inline void setMapObjP1x(float value);

  inline float getMapObjP1y();
  inline void setMapObjP1y(float value);

  inline float getMapObjP2x();
  inline void setMapObjP2x(float value);

  inline float getMapObjP2y();
  inline void setMapObjP2y(float value);

  inline float getMapObjProb();
  inline void setMapObjProb(float value);

  inline  ::uint8_t getMapObjType();
  inline void setMapObjType( ::uint8_t value);

  inline  ::uint8_t getMapObjHeightBrake();
  inline void setMapObjHeightBrake( ::uint8_t value);

  inline  ::uint8_t getMapObjHeightWarn();
  inline void setMapObjHeightWarn( ::uint8_t value);

  inline float getMapObjHeightProb();
  inline void setMapObjHeightProb(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapObjSignal::Pipeline {
public:
  typedef MapObjSignal Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApaSlotinfo::Reader {
public:
  typedef ApaSlotinfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getApaSlotId() const;

  inline  ::uint8_t getApaSlotId1() const;

  inline  ::uint8_t getApaSlotStatus() const;

  inline  ::uint8_t getApaSlotType() const;

  inline  ::uint8_t getApaSlotDepethReferance() const;

  inline float getApaSlotObj1x() const;

  inline float getApaSlotObj1y() const;

  inline  ::uint8_t getApaSlotObj1type() const;

  inline float getApaSlotObj1Alpha() const;

  inline float getApaSlotObj2x() const;

  inline float getApaSlotObj2y() const;

  inline  ::uint8_t getApaSlotObj2Type() const;

  inline float getApaSlotObj2Alpha() const;

  inline  ::uint16_t getApaSlotLength() const;

  inline  ::uint16_t getApaSlotDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApaSlotinfo::Builder {
public:
  typedef ApaSlotinfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getApaSlotId();
  inline void setApaSlotId( ::uint8_t value);

  inline  ::uint8_t getApaSlotId1();
  inline void setApaSlotId1( ::uint8_t value);

  inline  ::uint8_t getApaSlotStatus();
  inline void setApaSlotStatus( ::uint8_t value);

  inline  ::uint8_t getApaSlotType();
  inline void setApaSlotType( ::uint8_t value);

  inline  ::uint8_t getApaSlotDepethReferance();
  inline void setApaSlotDepethReferance( ::uint8_t value);

  inline float getApaSlotObj1x();
  inline void setApaSlotObj1x(float value);

  inline float getApaSlotObj1y();
  inline void setApaSlotObj1y(float value);

  inline  ::uint8_t getApaSlotObj1type();
  inline void setApaSlotObj1type( ::uint8_t value);

  inline float getApaSlotObj1Alpha();
  inline void setApaSlotObj1Alpha(float value);

  inline float getApaSlotObj2x();
  inline void setApaSlotObj2x(float value);

  inline float getApaSlotObj2y();
  inline void setApaSlotObj2y(float value);

  inline  ::uint8_t getApaSlotObj2Type();
  inline void setApaSlotObj2Type( ::uint8_t value);

  inline float getApaSlotObj2Alpha();
  inline void setApaSlotObj2Alpha(float value);

  inline  ::uint16_t getApaSlotLength();
  inline void setApaSlotLength( ::uint16_t value);

  inline  ::uint16_t getApaSlotDepth();
  inline void setApaSlotDepth( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApaSlotinfo::Pipeline {
public:
  typedef ApaSlotinfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PASMapPsolObjInfoType::Reader {
public:
  typedef PASMapPsolObjInfoType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasMapPsolObjInfoId() const;

  inline float getMapPsolObjP1X() const;

  inline float getMapPsolObjP1Y() const;

  inline float getMapPsolObjP2X() const;

  inline float getMapPsolObjP2Y() const;

  inline  ::uint8_t getMapPsolObjHeightStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PASMapPsolObjInfoType::Builder {
public:
  typedef PASMapPsolObjInfoType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasMapPsolObjInfoId();
  inline void setPasMapPsolObjInfoId( ::uint8_t value);

  inline float getMapPsolObjP1X();
  inline void setMapPsolObjP1X(float value);

  inline float getMapPsolObjP1Y();
  inline void setMapPsolObjP1Y(float value);

  inline float getMapPsolObjP2X();
  inline void setMapPsolObjP2X(float value);

  inline float getMapPsolObjP2Y();
  inline void setMapPsolObjP2Y(float value);

  inline  ::uint8_t getMapPsolObjHeightStatus();
  inline void setMapPsolObjHeightStatus( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PASMapPsolObjInfoType::Pipeline {
public:
  typedef PASMapPsolObjInfoType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PasUssInfoType::Reader {
public:
  typedef PasUssInfoType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssInfoId() const;

  inline  ::uint16_t getUssDe1() const;

  inline  ::uint64_t getUssDe1Timestamp() const;

  inline  ::uint16_t getUssCeLeft1() const;

  inline  ::uint16_t getUssCeRight1() const;

  inline  ::uint64_t getUssCeLeft1Timestamp() const;

  inline  ::uint64_t getUssCeRight1Timestamp() const;

  inline  ::uint16_t getUssDe2() const;

  inline  ::uint16_t getUssCeLeft2() const;

  inline  ::uint16_t getUssCeRight2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PasUssInfoType::Builder {
public:
  typedef PasUssInfoType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssInfoId();
  inline void setPasUssInfoId( ::uint8_t value);

  inline  ::uint16_t getUssDe1();
  inline void setUssDe1( ::uint16_t value);

  inline  ::uint64_t getUssDe1Timestamp();
  inline void setUssDe1Timestamp( ::uint64_t value);

  inline  ::uint16_t getUssCeLeft1();
  inline void setUssCeLeft1( ::uint16_t value);

  inline  ::uint16_t getUssCeRight1();
  inline void setUssCeRight1( ::uint16_t value);

  inline  ::uint64_t getUssCeLeft1Timestamp();
  inline void setUssCeLeft1Timestamp( ::uint64_t value);

  inline  ::uint64_t getUssCeRight1Timestamp();
  inline void setUssCeRight1Timestamp( ::uint64_t value);

  inline  ::uint16_t getUssDe2();
  inline void setUssDe2( ::uint16_t value);

  inline  ::uint16_t getUssCeLeft2();
  inline void setUssCeLeft2( ::uint16_t value);

  inline  ::uint16_t getUssCeRight2();
  inline void setUssCeRight2( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PasUssInfoType::Pipeline {
public:
  typedef PasUssInfoType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PasUssTraceIdInfoType::Reader {
public:
  typedef PasUssTraceIdInfoType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssTraceIdInfoId() const;

  inline  ::uint16_t getUssCeLeft1TraceId() const;

  inline  ::uint16_t getUssCeRight1TraceId() const;

  inline  ::uint16_t getUssCeLeft2TraceId() const;

  inline  ::uint16_t getUssCeRight2TraceId() const;

  inline  ::uint16_t getUssDe1TraceId() const;

  inline  ::uint16_t getUssDe2TraceId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PasUssTraceIdInfoType::Builder {
public:
  typedef PasUssTraceIdInfoType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPasUssTraceIdInfoId();
  inline void setPasUssTraceIdInfoId( ::uint8_t value);

  inline  ::uint16_t getUssCeLeft1TraceId();
  inline void setUssCeLeft1TraceId( ::uint16_t value);

  inline  ::uint16_t getUssCeRight1TraceId();
  inline void setUssCeRight1TraceId( ::uint16_t value);

  inline  ::uint16_t getUssCeLeft2TraceId();
  inline void setUssCeLeft2TraceId( ::uint16_t value);

  inline  ::uint16_t getUssCeRight2TraceId();
  inline void setUssCeRight2TraceId( ::uint16_t value);

  inline  ::uint16_t getUssDe1TraceId();
  inline void setUssDe1TraceId( ::uint16_t value);

  inline  ::uint16_t getUssDe2TraceId();
  inline void setUssDe2TraceId( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PasUssTraceIdInfoType::Pipeline {
public:
  typedef PasUssTraceIdInfoType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UssArray::Reader {
public:
  typedef UssArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPasUssCodeIdInfoArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Reader getPasUssCodeIdInfoArray() const;

  inline bool hasPasOdoInfo() const;
  inline  ::senseAD::msg::sensor::PasOdoInfoType::Reader getPasOdoInfo() const;

  inline bool hasPasDistance() const;
  inline  ::senseAD::msg::sensor::PasDistanceType::Reader getPasDistance() const;

  inline bool hasMapObjSignalArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Reader getMapObjSignalArray() const;

  inline  ::uint8_t getMapObjectsSignals1MsgCounter() const;

  inline  ::uint64_t getMapObjectsSignals1Timestamp() const;

  inline  ::uint8_t getMapObjectsSignals5MsgCounter() const;

  inline  ::uint8_t getPslStatus() const;

  inline  ::uint8_t getPasStatus() const;

  inline  ::uint8_t getMapObjectsSignals4MsgCounter() const;

  inline  ::uint64_t getMapObjectsSignals4Timestamp() const;

  inline  ::uint8_t getMapObjectsSignals3MsgCounter() const;

  inline  ::uint64_t getMapObjectsSignals3Timestamp() const;

  inline  ::uint8_t getMapObjectsSignals2MsgCounter() const;

  inline bool hasApaSlotInfoArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Reader getApaSlotInfoArray() const;

  inline  ::uint8_t getPasApaSlotInfo1MsgCounter() const;

  inline  ::uint64_t getSlotInfo1Timestamp() const;

  inline  ::uint8_t getPasApaSlotInfo2MsgCounter() const;

  inline  ::uint64_t getSlotInfo2Timestamp() const;

  inline  ::uint8_t getPasApaSlotInfo3MsgCounter() const;

  inline  ::uint64_t getSlotInfo3Timestamp() const;

  inline  ::uint8_t getPasApaSlotInfo4MsgCounter() const;

  inline  ::uint64_t getSlotInfo4Timestamp() const;

  inline bool hasPasMapPsolObjInfoArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Reader getPasMapPsolObjInfoArray() const;

  inline  ::uint8_t getPasMapPsolObjInfo7MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo1MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo3MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo2MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo4MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo5MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo6MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo9MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo10MsgCounter() const;

  inline  ::uint8_t getPasMapPsolObjInfo8MsgCounter() const;

  inline bool hasPasUssInfoArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Reader getPasUssInfoArray() const;

  inline  ::uint8_t getPasUssInfo1MsgCounter() const;

  inline  ::uint8_t getPasUssInfo4MsgCounter() const;

  inline  ::uint8_t getPasUssInfo5MsgCounter() const;

  inline  ::uint8_t getPasUssInfo2MsgCounter() const;

  inline  ::uint8_t getPasUssInfo3MsgCounter() const;

  inline  ::uint8_t getPasUssInfo6MsgCounter() const;

  inline bool hasPasUssTraceIdInfoArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Reader getPasUssTraceIdInfoArray() const;

  inline  ::uint8_t getPasUssTraceIDInfo2p1MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo2p2MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo2p3MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo2p4MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo1MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo2MsgCounter() const;

  inline  ::uint8_t getPasUssTraceIDInfo2p5MsgCounter() const;

  inline  ::uint8_t getPasUssCodeIDInfo1MsgCounter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UssArray::Builder {
public:
  typedef UssArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPasUssCodeIdInfoArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Builder getPasUssCodeIdInfoArray();
  inline void setPasUssCodeIdInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Builder initPasUssCodeIdInfoArray(unsigned int size);
  inline void adoptPasUssCodeIdInfoArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>> disownPasUssCodeIdInfoArray();

  inline bool hasPasOdoInfo();
  inline  ::senseAD::msg::sensor::PasOdoInfoType::Builder getPasOdoInfo();
  inline void setPasOdoInfo( ::senseAD::msg::sensor::PasOdoInfoType::Reader value);
  inline  ::senseAD::msg::sensor::PasOdoInfoType::Builder initPasOdoInfo();
  inline void adoptPasOdoInfo(::capnp::Orphan< ::senseAD::msg::sensor::PasOdoInfoType>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sensor::PasOdoInfoType> disownPasOdoInfo();

  inline bool hasPasDistance();
  inline  ::senseAD::msg::sensor::PasDistanceType::Builder getPasDistance();
  inline void setPasDistance( ::senseAD::msg::sensor::PasDistanceType::Reader value);
  inline  ::senseAD::msg::sensor::PasDistanceType::Builder initPasDistance();
  inline void adoptPasDistance(::capnp::Orphan< ::senseAD::msg::sensor::PasDistanceType>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sensor::PasDistanceType> disownPasDistance();

  inline bool hasMapObjSignalArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Builder getMapObjSignalArray();
  inline void setMapObjSignalArray( ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Builder initMapObjSignalArray(unsigned int size);
  inline void adoptMapObjSignalArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>> disownMapObjSignalArray();

  inline  ::uint8_t getMapObjectsSignals1MsgCounter();
  inline void setMapObjectsSignals1MsgCounter( ::uint8_t value);

  inline  ::uint64_t getMapObjectsSignals1Timestamp();
  inline void setMapObjectsSignals1Timestamp( ::uint64_t value);

  inline  ::uint8_t getMapObjectsSignals5MsgCounter();
  inline void setMapObjectsSignals5MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPslStatus();
  inline void setPslStatus( ::uint8_t value);

  inline  ::uint8_t getPasStatus();
  inline void setPasStatus( ::uint8_t value);

  inline  ::uint8_t getMapObjectsSignals4MsgCounter();
  inline void setMapObjectsSignals4MsgCounter( ::uint8_t value);

  inline  ::uint64_t getMapObjectsSignals4Timestamp();
  inline void setMapObjectsSignals4Timestamp( ::uint64_t value);

  inline  ::uint8_t getMapObjectsSignals3MsgCounter();
  inline void setMapObjectsSignals3MsgCounter( ::uint8_t value);

  inline  ::uint64_t getMapObjectsSignals3Timestamp();
  inline void setMapObjectsSignals3Timestamp( ::uint64_t value);

  inline  ::uint8_t getMapObjectsSignals2MsgCounter();
  inline void setMapObjectsSignals2MsgCounter( ::uint8_t value);

  inline bool hasApaSlotInfoArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Builder getApaSlotInfoArray();
  inline void setApaSlotInfoArray( ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Builder initApaSlotInfoArray(unsigned int size);
  inline void adoptApaSlotInfoArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>> disownApaSlotInfoArray();

  inline  ::uint8_t getPasApaSlotInfo1MsgCounter();
  inline void setPasApaSlotInfo1MsgCounter( ::uint8_t value);

  inline  ::uint64_t getSlotInfo1Timestamp();
  inline void setSlotInfo1Timestamp( ::uint64_t value);

  inline  ::uint8_t getPasApaSlotInfo2MsgCounter();
  inline void setPasApaSlotInfo2MsgCounter( ::uint8_t value);

  inline  ::uint64_t getSlotInfo2Timestamp();
  inline void setSlotInfo2Timestamp( ::uint64_t value);

  inline  ::uint8_t getPasApaSlotInfo3MsgCounter();
  inline void setPasApaSlotInfo3MsgCounter( ::uint8_t value);

  inline  ::uint64_t getSlotInfo3Timestamp();
  inline void setSlotInfo3Timestamp( ::uint64_t value);

  inline  ::uint8_t getPasApaSlotInfo4MsgCounter();
  inline void setPasApaSlotInfo4MsgCounter( ::uint8_t value);

  inline  ::uint64_t getSlotInfo4Timestamp();
  inline void setSlotInfo4Timestamp( ::uint64_t value);

  inline bool hasPasMapPsolObjInfoArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Builder getPasMapPsolObjInfoArray();
  inline void setPasMapPsolObjInfoArray( ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Builder initPasMapPsolObjInfoArray(unsigned int size);
  inline void adoptPasMapPsolObjInfoArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>> disownPasMapPsolObjInfoArray();

  inline  ::uint8_t getPasMapPsolObjInfo7MsgCounter();
  inline void setPasMapPsolObjInfo7MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo1MsgCounter();
  inline void setPasMapPsolObjInfo1MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo3MsgCounter();
  inline void setPasMapPsolObjInfo3MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo2MsgCounter();
  inline void setPasMapPsolObjInfo2MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo4MsgCounter();
  inline void setPasMapPsolObjInfo4MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo5MsgCounter();
  inline void setPasMapPsolObjInfo5MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo6MsgCounter();
  inline void setPasMapPsolObjInfo6MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo9MsgCounter();
  inline void setPasMapPsolObjInfo9MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo10MsgCounter();
  inline void setPasMapPsolObjInfo10MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasMapPsolObjInfo8MsgCounter();
  inline void setPasMapPsolObjInfo8MsgCounter( ::uint8_t value);

  inline bool hasPasUssInfoArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Builder getPasUssInfoArray();
  inline void setPasUssInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Builder initPasUssInfoArray(unsigned int size);
  inline void adoptPasUssInfoArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>> disownPasUssInfoArray();

  inline  ::uint8_t getPasUssInfo1MsgCounter();
  inline void setPasUssInfo1MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssInfo4MsgCounter();
  inline void setPasUssInfo4MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssInfo5MsgCounter();
  inline void setPasUssInfo5MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssInfo2MsgCounter();
  inline void setPasUssInfo2MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssInfo3MsgCounter();
  inline void setPasUssInfo3MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssInfo6MsgCounter();
  inline void setPasUssInfo6MsgCounter( ::uint8_t value);

  inline bool hasPasUssTraceIdInfoArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Builder getPasUssTraceIdInfoArray();
  inline void setPasUssTraceIdInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Builder initPasUssTraceIdInfoArray(unsigned int size);
  inline void adoptPasUssTraceIdInfoArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>> disownPasUssTraceIdInfoArray();

  inline  ::uint8_t getPasUssTraceIDInfo2p1MsgCounter();
  inline void setPasUssTraceIDInfo2p1MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo2p2MsgCounter();
  inline void setPasUssTraceIDInfo2p2MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo2p3MsgCounter();
  inline void setPasUssTraceIDInfo2p3MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo2p4MsgCounter();
  inline void setPasUssTraceIDInfo2p4MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo1MsgCounter();
  inline void setPasUssTraceIDInfo1MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo2MsgCounter();
  inline void setPasUssTraceIDInfo2MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssTraceIDInfo2p5MsgCounter();
  inline void setPasUssTraceIDInfo2p5MsgCounter( ::uint8_t value);

  inline  ::uint8_t getPasUssCodeIDInfo1MsgCounter();
  inline void setPasUssCodeIDInfo1MsgCounter( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UssArray::Pipeline {
public:
  typedef UssArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::sensor::PasOdoInfoType::Pipeline getPasOdoInfo();
  inline  ::senseAD::msg::sensor::PasDistanceType::Pipeline getPasDistance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Range::Reader {
public:
  typedef Range Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline  ::uint32_t getStatus() const;

  inline  ::uint64_t getRecvTimeNs() const;

  inline bool hasRangeArray() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getRangeArray() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Range::Builder {
public:
  typedef Range Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline  ::uint32_t getStatus();
  inline void setStatus( ::uint32_t value);

  inline  ::uint64_t getRecvTimeNs();
  inline void setRecvTimeNs( ::uint64_t value);

  inline bool hasRangeArray();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getRangeArray();
  inline void setRangeArray( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRangeArray(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initRangeArray(unsigned int size);
  inline void adoptRangeArray(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownRangeArray();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Range::Pipeline {
public:
  typedef Range Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RangeArray::Reader {
public:
  typedef RangeArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::sensor::RangeArray::Type getType() const;

  inline bool hasRangeUnitArray() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Reader getRangeUnitArray() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RangeArray::Builder {
public:
  typedef RangeArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::sensor::RangeArray::Type getType();
  inline void setType( ::senseAD::msg::sensor::RangeArray::Type value);

  inline bool hasRangeUnitArray();
  inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Builder getRangeUnitArray();
  inline void setRangeUnitArray( ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Builder initRangeUnitArray(unsigned int size);
  inline void adoptRangeUnitArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>> disownRangeUnitArray();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RangeArray::Pipeline {
public:
  typedef RangeArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdsfiImageData::Reader {
public:
  typedef AdsfiImageData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

  inline  ::uint32_t getDataSize() const;

  inline  ::uint8_t getBufferType() const;

  inline  ::uint8_t getImageType() const;

  inline  ::uint32_t getSeq() const;

  inline  ::uint64_t getRawData() const;

  inline  ::uint64_t getMbufData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdsfiImageData::Builder {
public:
  typedef AdsfiImageData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline  ::uint32_t getDataSize();
  inline void setDataSize( ::uint32_t value);

  inline  ::uint8_t getBufferType();
  inline void setBufferType( ::uint8_t value);

  inline  ::uint8_t getImageType();
  inline void setImageType( ::uint8_t value);

  inline  ::uint32_t getSeq();
  inline void setSeq( ::uint32_t value);

  inline  ::uint64_t getRawData();
  inline void setRawData( ::uint64_t value);

  inline  ::uint64_t getMbufData();
  inline void setMbufData( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdsfiImageData::Pipeline {
public:
  typedef AdsfiImageData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdsfiImageDataV2::Reader {
public:
  typedef AdsfiImageDataV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

  inline  ::uint32_t getDataSize() const;

  inline  ::uint8_t getBufferType() const;

  inline  ::uint8_t getImageType() const;

  inline  ::uint32_t getSeq() const;

  inline bool hasRawData() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getRawData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdsfiImageDataV2::Builder {
public:
  typedef AdsfiImageDataV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline  ::uint32_t getDataSize();
  inline void setDataSize( ::uint32_t value);

  inline  ::uint8_t getBufferType();
  inline void setBufferType( ::uint8_t value);

  inline  ::uint8_t getImageType();
  inline void setImageType( ::uint8_t value);

  inline  ::uint32_t getSeq();
  inline void setSeq( ::uint32_t value);

  inline bool hasRawData();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getRawData();
  inline void setRawData( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRawData(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initRawData(unsigned int size);
  inline void adoptRawData(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownRawData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdsfiImageDataV2::Pipeline {
public:
  typedef AdsfiImageDataV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdsfiImageFrame::Reader {
public:
  typedef AdsfiImageFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasData() const;
  inline  ::senseAD::msg::sensor::AdsfiImageData::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdsfiImageFrame::Builder {
public:
  typedef AdsfiImageFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasData();
  inline  ::senseAD::msg::sensor::AdsfiImageData::Builder getData();
  inline void setData( ::senseAD::msg::sensor::AdsfiImageData::Reader value);
  inline  ::senseAD::msg::sensor::AdsfiImageData::Builder initData();
  inline void adoptData(::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageData>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageData> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdsfiImageFrame::Pipeline {
public:
  typedef AdsfiImageFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::sensor::AdsfiImageData::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdsfiImageFrameV2::Reader {
public:
  typedef AdsfiImageFrameV2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasData() const;
  inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdsfiImageFrameV2::Builder {
public:
  typedef AdsfiImageFrameV2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasData();
  inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Builder getData();
  inline void setData( ::senseAD::msg::sensor::AdsfiImageDataV2::Reader value);
  inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Builder initData();
  inline void adoptData(::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageDataV2>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageDataV2> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdsfiImageFrameV2::Pipeline {
public:
  typedef AdsfiImageFrameV2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdsfiLidarPointCloud::Reader {
public:
  typedef AdsfiLidarPointCloud Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint32_t getIsBigEndian() const;

  inline  ::uint32_t getHeight() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getPointStep() const;

  inline  ::uint32_t getRowStep() const;

  inline  ::uint32_t getIsDense() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdsfiLidarPointCloud::Builder {
public:
  typedef AdsfiLidarPointCloud Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint32_t getIsBigEndian();
  inline void setIsBigEndian( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getPointStep();
  inline void setPointStep( ::uint32_t value);

  inline  ::uint32_t getRowStep();
  inline void setRowStep( ::uint32_t value);

  inline  ::uint32_t getIsDense();
  inline void setIsDense( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdsfiLidarPointCloud::Pipeline {
public:
  typedef AdsfiLidarPointCloud Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InsToNavi::Reader {
public:
  typedef InsToNavi Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::sensor::INSStatus getInsStatus() const;

  inline double getLongitude() const;

  inline double getLatitude() const;

  inline double getForwardVel() const;

  inline double getRightVel() const;

  inline double getUpVel() const;

  inline double getHeading() const;

  inline  ::uint16_t getSatelliteCount() const;

  inline float getHdop() const;

  inline double getUtcTime() const;

  inline  ::uint64_t getTimestamp() const;

  inline bool hasGsv() const;
  inline  ::capnp::Text::Reader getGsv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InsToNavi::Builder {
public:
  typedef InsToNavi Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::sensor::INSStatus getInsStatus();
  inline void setInsStatus( ::senseAD::msg::sensor::INSStatus value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getForwardVel();
  inline void setForwardVel(double value);

  inline double getRightVel();
  inline void setRightVel(double value);

  inline double getUpVel();
  inline void setUpVel(double value);

  inline double getHeading();
  inline void setHeading(double value);

  inline  ::uint16_t getSatelliteCount();
  inline void setSatelliteCount( ::uint16_t value);

  inline float getHdop();
  inline void setHdop(float value);

  inline double getUtcTime();
  inline void setUtcTime(double value);

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasGsv();
  inline  ::capnp::Text::Builder getGsv();
  inline void setGsv( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGsv(unsigned int size);
  inline void adoptGsv(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGsv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InsToNavi::Pipeline {
public:
  typedef InsToNavi Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PacketFrame::Reader {
public:
  typedef PacketFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs() const;

  inline bool hasFrameHeader() const;
  inline  ::capnp::Data::Reader getFrameHeader() const;

  inline bool hasFrameData() const;
  inline  ::capnp::Data::Reader getFrameData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PacketFrame::Builder {
public:
  typedef PacketFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getRecvTimeNs();
  inline void setRecvTimeNs( ::uint64_t value);

  inline bool hasFrameHeader();
  inline  ::capnp::Data::Builder getFrameHeader();
  inline void setFrameHeader( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFrameHeader(unsigned int size);
  inline void adoptFrameHeader(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFrameHeader();

  inline bool hasFrameData();
  inline  ::capnp::Data::Builder getFrameData();
  inline void setFrameData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFrameData(unsigned int size);
  inline void adoptFrameData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFrameData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PacketFrame::Pipeline {
public:
  typedef PacketFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RawData::Reader {
public:
  typedef RawData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasSensorType() const;
  inline  ::capnp::Text::Reader getSensorType() const;

  inline  ::uint32_t getPacketSize() const;

  inline bool hasPacketList() const;
  inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Reader getPacketList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RawData::Builder {
public:
  typedef RawData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasSensorType();
  inline  ::capnp::Text::Builder getSensorType();
  inline void setSensorType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorType(unsigned int size);
  inline void adoptSensorType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorType();

  inline  ::uint32_t getPacketSize();
  inline void setPacketSize( ::uint32_t value);

  inline bool hasPacketList();
  inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Builder getPacketList();
  inline void setPacketList( ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Builder initPacketList(unsigned int size);
  inline void adoptPacketList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>> disownPacketList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RawData::Pipeline {
public:
  typedef RawData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraRpcMsg::Reader {
public:
  typedef CameraRpcMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopicList() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTopicList() const;

  inline bool getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraRpcMsg::Builder {
public:
  typedef CameraRpcMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopicList();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTopicList();
  inline void setTopicList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTopicList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTopicList(unsigned int size);
  inline void adoptTopicList(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTopicList();

  inline bool getStatus();
  inline void setStatus(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraRpcMsg::Pipeline {
public:
  typedef CameraRpcMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool DualAntennaHeading::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DualAntennaHeading::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DualAntennaHeading::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DualAntennaHeading::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DualAntennaHeading::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DualAntennaHeading::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DualAntennaHeading::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DualAntennaHeading::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DualAntennaHeading::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t DualAntennaHeading::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DualAntennaHeading::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::sensor::SensorQuality DualAntennaHeading::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::SensorQuality DualAntennaHeading::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setStatus( ::senseAD::msg::sensor::SensorQuality value) {
  _builder.setDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool DualAntennaHeading::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DualAntennaHeading::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DualAntennaHeading::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DualAntennaHeading::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DualAntennaHeading::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DualAntennaHeading::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DualAntennaHeading::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DualAntennaHeading::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float DualAntennaHeading::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DualAntennaHeading::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DualAntennaHeading::Reader::getHeadingStdDev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DualAntennaHeading::Builder::getHeadingStdDev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setHeadingStdDev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DualAntennaHeading::Reader::getPitch() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DualAntennaHeading::Builder::getPitch() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setPitch(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DualAntennaHeading::Reader::getPitchStdDev() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DualAntennaHeading::Builder::getPitchStdDev() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DualAntennaHeading::Builder::setPitchStdDev(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Gnss::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Gnss::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Gnss::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Gnss::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gnss::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Gnss::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Gnss::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Gnss::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gnss::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::sensor::SensorQuality Gnss::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::SensorQuality Gnss::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setStatus( ::senseAD::msg::sensor::SensorQuality value) {
  _builder.setDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Gnss::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Gnss::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Gnss::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Gnss::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Gnss::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Gnss::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Gnss::Reader::hasNmeaGga() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasNmeaGga() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Gnss::Reader::getNmeaGga() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Gnss::Builder::getNmeaGga() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::setNmeaGga( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Gnss::Builder::initNmeaGga(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Gnss::Builder::adoptNmeaGga(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Gnss::Builder::disownNmeaGga() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Gnss::Reader::hasNmeaRmc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasNmeaRmc() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Gnss::Reader::getNmeaRmc() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Gnss::Builder::getNmeaRmc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::setNmeaRmc( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Gnss::Builder::initNmeaRmc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Gnss::Builder::adoptNmeaRmc(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Gnss::Builder::disownNmeaRmc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline double Gnss::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Gnss::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Gnss::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Gnss::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Gnss::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Gnss::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Gnss::Reader::hasPositionStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasPositionStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader Gnss::Reader::getPositionStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder Gnss::Builder::getPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline Gnss::Pipeline::getPositionStdDev() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Gnss::Builder::setPositionStdDev( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder Gnss::Builder::initPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::adoptPositionStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> Gnss::Builder::disownPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Gnss::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Gnss::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Gnss::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Gnss::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Gnss::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Gnss::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Gnss::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Gnss::Reader::hasLinearVelocityStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Gnss::Builder::hasLinearVelocityStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Gnss::Reader::getLinearVelocityStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Gnss::Builder::getLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Gnss::Pipeline::getLinearVelocityStdDev() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Gnss::Builder::setLinearVelocityStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Gnss::Builder::initLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Gnss::Builder::adoptLinearVelocityStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Gnss::Builder::disownLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint32_t Gnss::Reader::getNumSats() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Gnss::Builder::getNumSats() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Gnss::Builder::setNumSats( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Imu::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Imu::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Imu::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Imu::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Imu::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Imu::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Imu::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Imu::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::sensor::SensorQuality Imu::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::SensorQuality Imu::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setStatus( ::senseAD::msg::sensor::SensorQuality value) {
  _builder.setDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Imu::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Imu::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Imu::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Imu::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Imu::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Imu::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Imu::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float Imu::Reader::getAccelX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccelY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccelZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Ins::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Ins::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Ins::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Ins::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Ins::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Ins::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ins::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Ins::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Ins::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Ins::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::sensor::SensorQuality Ins::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::SensorQuality Ins::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setStatus( ::senseAD::msg::sensor::SensorQuality value) {
  _builder.setDataField< ::senseAD::msg::sensor::SensorQuality>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Ins::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Ins::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Ins::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Ins::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Ins::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Ins::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Ins::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Ins::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Ins::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Ins::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Ins::Reader::hasPositionStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasPositionStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Ins::Reader::getPositionStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::getPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Ins::Pipeline::getPositionStdDev() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Ins::Builder::setPositionStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::initPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Ins::Builder::adoptPositionStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Ins::Builder::disownPositionStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Ins::Reader::getRoll() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getRoll() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setRoll(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Ins::Reader::getPitch() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getPitch() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setPitch(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Ins::Reader::getYaw() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Ins::Builder::getYaw() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Ins::Builder::setYaw(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Ins::Reader::hasAttitudeStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasAttitudeStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Ins::Reader::getAttitudeStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::getAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Ins::Pipeline::getAttitudeStdDev() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Ins::Builder::setAttitudeStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::initAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Ins::Builder::adoptAttitudeStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Ins::Builder::disownAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Ins::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Ins::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Ins::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Ins::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Ins::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Ins::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Ins::Reader::hasLinearVelocityStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Ins::Builder::hasLinearVelocityStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Ins::Reader::getLinearVelocityStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::getLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Ins::Pipeline::getLinearVelocityStdDev() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Ins::Builder::setLinearVelocityStdDev( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Ins::Builder::initLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Ins::Builder::adoptLinearVelocityStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Ins::Builder::disownLinearVelocityStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool RadarConti::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarConti::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RadarConti::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RadarConti::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RadarConti::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RadarConti::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RadarConti::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarConti::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RadarConti::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarConti::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarConti::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarConti::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarConti::Reader::getBusFault() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarConti::Builder::getBusFault() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarConti::Builder::setBusFault( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RadarConti::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarConti::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RadarConti::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RadarConti::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarConti::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RadarConti::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarConti::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RadarConti::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarConti::Reader::hasClusterList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarConti::Builder::hasClusterList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Reader RadarConti::Reader::getClusterList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Builder RadarConti::Builder::getClusterList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarConti::Builder::setClusterList( ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>::Builder RadarConti::Builder::initClusterList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RadarConti::Builder::adoptClusterList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>> RadarConti::Builder::disownClusterList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiCluster,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RadarConti::Reader::hasObjectList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RadarConti::Builder::hasObjectList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Reader RadarConti::Reader::getObjectList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Builder RadarConti::Builder::getObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RadarConti::Builder::setObjectList( ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>::Builder RadarConti::Builder::initObjectList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RadarConti::Builder::adoptObjectList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>> RadarConti::Builder::disownObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarContiObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarContiCluster::Reader::getRecvTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarContiCluster::Builder::getRecvTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setRecvTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiCluster::Reader::getTrackId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiCluster::Builder::getTrackId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setTrackId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getDistanceLong() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getDistanceLong() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setDistanceLong(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getDistanceLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getDistanceLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setDistanceLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getVelocityLong() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getVelocityLong() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setVelocityLong(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getVelocityLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getVelocityLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setVelocityLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getRcs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getRcs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setRcs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiCluster::Reader::getDynamicPropEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiCluster::Builder::getDynamicPropEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setDynamicPropEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool RadarContiCluster::Reader::getQualityVaild() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}

inline bool RadarContiCluster::Builder::getQualityVaild() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setQualityVaild(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getDistanceLongRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getDistanceLongRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setDistanceLongRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getDistanceLatRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getDistanceLatRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setDistanceLatRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getVelocityLongRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getVelocityLongRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setVelocityLongRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getVelocityLatRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getVelocityLatRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setVelocityLatRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiCluster::Reader::getClusterPdh0() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float RadarContiCluster::Builder::getClusterPdh0() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setClusterPdh0(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiCluster::Reader::getAmbigStateEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiCluster::Builder::getAmbigStateEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setAmbigStateEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiCluster::Reader::getInvalidStateEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiCluster::Builder::getInvalidStateEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RadarContiCluster::Builder::setInvalidStateEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RadarContiObject::Reader::getRecvTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarContiObject::Builder::getRecvTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setRecvTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiObject::Reader::getTrackId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiObject::Builder::getTrackId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setTrackId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getDistanceLong() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getDistanceLong() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setDistanceLong(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getDistanceLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getDistanceLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setDistanceLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getVelocityLong() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getVelocityLong() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setVelocityLong(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getVelocityLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getVelocityLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setVelocityLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getRcs() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getRcs() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setRcs(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiObject::Reader::getDynamicPropEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiObject::Builder::getDynamicPropEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setDynamicPropEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool RadarContiObject::Reader::getQualityVaild() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}

inline bool RadarContiObject::Builder::getQualityVaild() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setQualityVaild(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<288>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getDistanceLongRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getDistanceLongRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setDistanceLongRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getDistanceLatRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getDistanceLatRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setDistanceLatRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getVelocityLongRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getVelocityLongRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setVelocityLongRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getVelocityLatRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getVelocityLatRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setVelocityLatRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getAccelLongRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getAccelLongRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setAccelLongRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getAccelLatRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getAccelLatRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setAccelLatRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getOrientationRms() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getOrientationRms() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setOrientationRms(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getProbOfExist() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getProbOfExist() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setProbOfExist(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiObject::Reader::getMeasurementStateEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiObject::Builder::getMeasurementStateEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setMeasurementStateEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool RadarContiObject::Reader::getExtendVaild() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS);
}

inline bool RadarContiObject::Builder::getExtendVaild() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setExtendVaild(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<289>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getAccelLong() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getAccelLong() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setAccelLong(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getAccelLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getAccelLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setAccelLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getOrientation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getOrientation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setOrientation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float RadarContiObject::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float RadarContiObject::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarContiObject::Reader::getObjectTypeEnum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarContiObject::Builder::getObjectTypeEnum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void RadarContiObject::Builder::setObjectTypeEnum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsr::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RadarEsr::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RadarEsr::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RadarEsr::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RadarEsr::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RadarEsr::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RadarEsr::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RadarEsr::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RadarEsr::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarEsr::Reader::getActualTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarEsr::Builder::getActualTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarEsr::Builder::setActualTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarEsr::Reader::getBusFault() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarEsr::Builder::getBusFault() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RadarEsr::Builder::setBusFault( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsr::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RadarEsr::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RadarEsr::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RadarEsr::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RadarEsr::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RadarEsr::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RadarEsr::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RadarEsr::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RadarEsr::Reader::hasObjectList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RadarEsr::Builder::hasObjectList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Reader RadarEsr::Reader::getObjectList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Builder RadarEsr::Builder::getObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RadarEsr::Builder::setObjectList( ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>::Builder RadarEsr::Builder::initObjectList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RadarEsr::Builder::adoptObjectList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>> RadarEsr::Builder::disownObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::RadarEsrObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t RadarEsrObject::Reader::getRecvTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RadarEsrObject::Builder::getRecvTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setRecvTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getObjectVaild() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getObjectVaild() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setObjectVaild(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarEsrObject::Reader::getTrackId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarEsrObject::Builder::getTrackId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackLatRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackLatRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackLatRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getTrackGroupChanged() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getTrackGroupChanged() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackGroupChanged(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarEsrObject::Reader::getTrackStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarEsrObject::Builder::getTrackStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackRange() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackRange() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackRange(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getTrackBridgeObject() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getTrackBridgeObject() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackBridgeObject(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getTrackRollingCount() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getTrackRollingCount() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackRollingCount(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackRangeAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackRangeAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackRangeAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RadarEsrObject::Reader::getTrackMedRangeMode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RadarEsrObject::Builder::getTrackMedRangeMode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackMedRangeMode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float RadarEsrObject::Reader::getTrackRangeRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float RadarEsrObject::Builder::getTrackRangeRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setTrackRangeRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getMovableFast() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getMovableFast() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setMovableFast(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getMovableSlow() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getMovableSlow() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setMovableSlow(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool RadarEsrObject::Reader::getMoving() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool RadarEsrObject::Builder::getMoving() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setMoving(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RadarEsrObject::Reader::getPower() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RadarEsrObject::Builder::getPower() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RadarEsrObject::Builder::setPower( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getPasUssCodeIdInfoId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getPasUssCodeIdInfoId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setPasUssCodeIdInfoId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssCeRight1CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssCeRight1CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssCeRight1CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssCeLeft1CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssCeLeft1CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssCeLeft1CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssCeLeft2CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssCeLeft2CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssCeLeft2CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssCeRight2CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssCeRight2CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssCeRight2CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssDemid1CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssDemid1CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssDemid1CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssCodeIdInfoType::Reader::getUssDemid2CodeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssCodeIdInfoType::Builder::getUssDemid2CodeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PasUssCodeIdInfoType::Builder::setUssDemid2CodeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasOdoInfoType::Reader::getPasOdoInfo6Checksum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasOdoInfoType::Builder::getPasOdoInfo6Checksum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setPasOdoInfo6Checksum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasOdoInfoType::Reader::getPasOdoInfo6MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasOdoInfoType::Builder::getPasOdoInfo6MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setPasOdoInfo6MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PasOdoInfoType::Reader::getOdoKappa() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PasOdoInfoType::Builder::getOdoKappa() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setOdoKappa(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PasOdoInfoType::Reader::getOdoSha() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PasOdoInfoType::Builder::getOdoSha() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setOdoSha(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float PasOdoInfoType::Reader::getOdoX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float PasOdoInfoType::Builder::getOdoX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setOdoX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float PasOdoInfoType::Reader::getOdoYawAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float PasOdoInfoType::Builder::getOdoYawAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setOdoYawAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PasOdoInfoType::Reader::getPasOdoTimeStamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PasOdoInfoType::Builder::getPasOdoTimeStamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setPasOdoTimeStamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float PasOdoInfoType::Reader::getPasOdoY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float PasOdoInfoType::Builder::getPasOdoY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PasOdoInfoType::Builder::setPasOdoY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasDistanceChecksum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasDistanceChecksum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasDistanceChecksum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasDistanceMsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasDistanceMsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasDistanceMsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRRMidDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRRMidDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRMidDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRLMidDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRLMidDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLMidDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRRDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRRDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRLDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRLDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRSLSideDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRSLSideDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSLSideDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasRSRSideDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasRSRSideDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSRSideDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFRDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFRDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFLDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFLDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFRMidDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFRMidDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRMidDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFLMidDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFLMidDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLMidDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFSRSideDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFSRSideDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSRSideDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasDistanceType::Reader::getPasFSLSideDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasDistanceType::Builder::getPasFSLSideDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSLSideDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFLSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFLSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFRSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFRSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRSRSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRSRSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSRSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRSLSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRSLSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSLSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRLSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRLSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRRSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRRSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRLMidSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRLMidSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLMidSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRRMidSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRRMidSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRMidSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasBattVoltErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasBattVoltErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasBattVoltErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasCtrlModulerrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasCtrlModulerrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasCtrlModulerrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFSRSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFSRSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSRSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFSLSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFSLSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSLSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFLMidSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFLMidSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLMidSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFRMidSnsErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFRMidSnsErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRMidSnsErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasOverTempErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasOverTempErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasOverTempErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRRMidSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRRMidSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRMidSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRLMidSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRLMidSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLMidSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRRSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRRSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRRSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRLSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRLSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRLSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRSLSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRSLSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSLSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasRSRSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasRSRSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasRSRSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFRSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFRSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFLSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFLSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFRMidSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFRMidSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFRMidSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFLMidSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFLMidSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFLMidSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFSLSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFSLSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSLSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS, value);
}

inline bool PasDistanceType::Reader::getPasFSRSnsCoverErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}

inline bool PasDistanceType::Builder::getPasFSRSnsCoverErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}
inline void PasDistanceType::Builder::setPasFSRSnsCoverErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MapObjSignal::Reader::getId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MapObjSignal::Builder::getId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjP1x() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjP1x() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjP1x(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjP1y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjP1y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjP1y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjP2x() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjP2x() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjP2x(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjP2y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjP2y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjP2y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MapObjSignal::Reader::getMapObjType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MapObjSignal::Builder::getMapObjType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MapObjSignal::Reader::getMapObjHeightBrake() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MapObjSignal::Builder::getMapObjHeightBrake() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjHeightBrake( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MapObjSignal::Reader::getMapObjHeightWarn() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MapObjSignal::Builder::getMapObjHeightWarn() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjHeightWarn( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float MapObjSignal::Reader::getMapObjHeightProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float MapObjSignal::Builder::getMapObjHeightProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void MapObjSignal::Builder::setMapObjHeightProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotId1() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotId1() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotId1( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotDepethReferance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotDepethReferance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotDepethReferance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj1x() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj1x() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj1x(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj1y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj1y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj1y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotObj1type() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotObj1type() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj1type( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj1Alpha() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj1Alpha() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj1Alpha(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj2x() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj2x() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj2x(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj2y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj2y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj2y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ApaSlotinfo::Reader::getApaSlotObj2Type() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ApaSlotinfo::Builder::getApaSlotObj2Type() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj2Type( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ApaSlotinfo::Reader::getApaSlotObj2Alpha() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ApaSlotinfo::Builder::getApaSlotObj2Alpha() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotObj2Alpha(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ApaSlotinfo::Reader::getApaSlotLength() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ApaSlotinfo::Builder::getApaSlotLength() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotLength( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ApaSlotinfo::Reader::getApaSlotDepth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ApaSlotinfo::Builder::getApaSlotDepth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void ApaSlotinfo::Builder::setApaSlotDepth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PASMapPsolObjInfoType::Reader::getPasMapPsolObjInfoId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PASMapPsolObjInfoType::Builder::getPasMapPsolObjInfoId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setPasMapPsolObjInfoId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PASMapPsolObjInfoType::Reader::getMapPsolObjP1X() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PASMapPsolObjInfoType::Builder::getMapPsolObjP1X() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setMapPsolObjP1X(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PASMapPsolObjInfoType::Reader::getMapPsolObjP1Y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PASMapPsolObjInfoType::Builder::getMapPsolObjP1Y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setMapPsolObjP1Y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float PASMapPsolObjInfoType::Reader::getMapPsolObjP2X() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float PASMapPsolObjInfoType::Builder::getMapPsolObjP2X() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setMapPsolObjP2X(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float PASMapPsolObjInfoType::Reader::getMapPsolObjP2Y() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float PASMapPsolObjInfoType::Builder::getMapPsolObjP2Y() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setMapPsolObjP2Y(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PASMapPsolObjInfoType::Reader::getMapPsolObjHeightStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PASMapPsolObjInfoType::Builder::getMapPsolObjHeightStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PASMapPsolObjInfoType::Builder::setMapPsolObjHeightStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssInfoType::Reader::getPasUssInfoId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssInfoType::Builder::getPasUssInfoId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setPasUssInfoId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssDe1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssDe1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssDe1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PasUssInfoType::Reader::getUssDe1Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PasUssInfoType::Builder::getUssDe1Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssDe1Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssCeLeft1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssCeLeft1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeLeft1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssCeRight1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssCeRight1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeRight1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PasUssInfoType::Reader::getUssCeLeft1Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PasUssInfoType::Builder::getUssCeLeft1Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeLeft1Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PasUssInfoType::Reader::getUssCeRight1Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PasUssInfoType::Builder::getUssCeRight1Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeRight1Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssDe2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssDe2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssDe2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssCeLeft2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssCeLeft2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeLeft2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssInfoType::Reader::getUssCeRight2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssInfoType::Builder::getUssCeRight2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void PasUssInfoType::Builder::setUssCeRight2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PasUssTraceIdInfoType::Reader::getPasUssTraceIdInfoId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PasUssTraceIdInfoType::Builder::getPasUssTraceIdInfoId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setPasUssTraceIdInfoId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssCeLeft1TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssCeLeft1TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssCeLeft1TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssCeRight1TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssCeRight1TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssCeRight1TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssCeLeft2TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssCeLeft2TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssCeLeft2TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssCeRight2TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssCeRight2TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssCeRight2TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssDe1TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssDe1TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssDe1TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PasUssTraceIdInfoType::Reader::getUssDe2TraceId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PasUssTraceIdInfoType::Builder::getUssDe2TraceId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PasUssTraceIdInfoType::Builder::setUssDe2TraceId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool UssArray::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader UssArray::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder UssArray::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline UssArray::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UssArray::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder UssArray::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> UssArray::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UssArray::Reader::hasPasUssCodeIdInfoArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasUssCodeIdInfoArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getPasUssCodeIdInfoArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getPasUssCodeIdInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setPasUssCodeIdInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initPasUssCodeIdInfoArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptPasUssCodeIdInfoArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownPasUssCodeIdInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssCodeIdInfoType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UssArray::Reader::hasPasOdoInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasOdoInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sensor::PasOdoInfoType::Reader UssArray::Reader::getPasOdoInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sensor::PasOdoInfoType::Builder UssArray::Builder::getPasOdoInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sensor::PasOdoInfoType::Pipeline UssArray::Pipeline::getPasOdoInfo() {
  return  ::senseAD::msg::sensor::PasOdoInfoType::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void UssArray::Builder::setPasOdoInfo( ::senseAD::msg::sensor::PasOdoInfoType::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sensor::PasOdoInfoType::Builder UssArray::Builder::initPasOdoInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::adoptPasOdoInfo(
    ::capnp::Orphan< ::senseAD::msg::sensor::PasOdoInfoType>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sensor::PasOdoInfoType> UssArray::Builder::disownPasOdoInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasOdoInfoType>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UssArray::Reader::hasPasDistance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasDistance() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sensor::PasDistanceType::Reader UssArray::Reader::getPasDistance() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sensor::PasDistanceType::Builder UssArray::Builder::getPasDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sensor::PasDistanceType::Pipeline UssArray::Pipeline::getPasDistance() {
  return  ::senseAD::msg::sensor::PasDistanceType::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void UssArray::Builder::setPasDistance( ::senseAD::msg::sensor::PasDistanceType::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sensor::PasDistanceType::Builder UssArray::Builder::initPasDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::adoptPasDistance(
    ::capnp::Orphan< ::senseAD::msg::sensor::PasDistanceType>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sensor::PasDistanceType> UssArray::Builder::disownPasDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::PasDistanceType>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UssArray::Reader::hasMapObjSignalArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasMapObjSignalArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getMapObjSignalArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getMapObjSignalArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setMapObjSignalArray( ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initMapObjSignalArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptMapObjSignalArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownMapObjSignalArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::MapObjSignal,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint8_t UssArray::Reader::getMapObjectsSignals1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getMapObjectsSignals1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getMapObjectsSignals1Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getMapObjectsSignals1Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals1Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getMapObjectsSignals5MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getMapObjectsSignals5MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals5MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPslStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPslStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPslStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getMapObjectsSignals4MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getMapObjectsSignals4MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals4MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getMapObjectsSignals4Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getMapObjectsSignals4Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals4Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getMapObjectsSignals3MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getMapObjectsSignals3MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals3MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getMapObjectsSignals3Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getMapObjectsSignals3Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals3Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getMapObjectsSignals2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getMapObjectsSignals2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setMapObjectsSignals2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool UssArray::Reader::hasApaSlotInfoArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasApaSlotInfoArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getApaSlotInfoArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getApaSlotInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setApaSlotInfoArray( ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initApaSlotInfoArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptApaSlotInfoArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownApaSlotInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::ApaSlotinfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint8_t UssArray::Reader::getPasApaSlotInfo1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasApaSlotInfo1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasApaSlotInfo1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getSlotInfo1Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getSlotInfo1Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setSlotInfo1Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasApaSlotInfo2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasApaSlotInfo2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasApaSlotInfo2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getSlotInfo2Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getSlotInfo2Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setSlotInfo2Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasApaSlotInfo3MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasApaSlotInfo3MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasApaSlotInfo3MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getSlotInfo3Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getSlotInfo3Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setSlotInfo3Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasApaSlotInfo4MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasApaSlotInfo4MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasApaSlotInfo4MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t UssArray::Reader::getSlotInfo4Timestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UssArray::Builder::getSlotInfo4Timestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setSlotInfo4Timestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool UssArray::Reader::hasPasMapPsolObjInfoArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasMapPsolObjInfoArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getPasMapPsolObjInfoArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getPasMapPsolObjInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setPasMapPsolObjInfoArray( ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initPasMapPsolObjInfoArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptPasMapPsolObjInfoArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownPasMapPsolObjInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PASMapPsolObjInfoType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo7MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo7MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo7MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo3MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo3MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo3MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo4MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo4MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo4MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo5MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo5MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo5MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo6MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo6MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo6MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo9MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo9MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo9MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo10MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo10MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo10MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasMapPsolObjInfo8MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasMapPsolObjInfo8MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasMapPsolObjInfo8MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline bool UssArray::Reader::hasPasUssInfoArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasUssInfoArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getPasUssInfoArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getPasUssInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setPasUssInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initPasUssInfoArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptPasUssInfoArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownPasUssInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssInfoType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo4MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo4MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo4MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo5MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo5MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo5MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo3MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo3MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo3MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssInfo6MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssInfo6MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssInfo6MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline bool UssArray::Reader::hasPasUssTraceIdInfoArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool UssArray::Builder::hasPasUssTraceIdInfoArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Reader UssArray::Reader::getPasUssTraceIdInfoArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::getPasUssTraceIdInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void UssArray::Builder::setPasUssTraceIdInfoArray( ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>::Builder UssArray::Builder::initPasUssTraceIdInfoArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void UssArray::Builder::adoptPasUssTraceIdInfoArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>> UssArray::Builder::disownPasUssTraceIdInfoArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PasUssTraceIdInfoType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2p1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2p1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2p1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2p2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2p2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2p2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2p3MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2p3MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2p3MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2p4MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2p4MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2p4MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssTraceIDInfo2p5MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssTraceIDInfo2p5MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssTraceIDInfo2p5MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t UssArray::Reader::getPasUssCodeIDInfo1MsgCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t UssArray::Builder::getPasUssCodeIDInfo1MsgCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS);
}
inline void UssArray::Builder::setPasUssCodeIDInfo1MsgCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS, value);
}

inline bool Range::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Range::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Range::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Range::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Range::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Range::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Range::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Range::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Range::Reader::getStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Range::Builder::getStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Range::Reader::getRecvTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Range::Builder::getRecvTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Range::Builder::setRecvTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Range::Reader::hasRangeArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Range::Builder::hasRangeArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Range::Reader::getRangeArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Range::Builder::getRangeArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Range::Builder::setRangeArray( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Range::Builder::setRangeArray(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Range::Builder::initRangeArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Range::Builder::adoptRangeArray(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Range::Builder::disownRangeArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RangeArray::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RangeArray::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RangeArray::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RangeArray::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RangeArray::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RangeArray::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RangeArray::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RangeArray::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RangeArray::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::sensor::RangeArray::Type RangeArray::Reader::getType() const {
  return _reader.getDataField< ::senseAD::msg::sensor::RangeArray::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::RangeArray::Type RangeArray::Builder::getType() {
  return _builder.getDataField< ::senseAD::msg::sensor::RangeArray::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RangeArray::Builder::setType( ::senseAD::msg::sensor::RangeArray::Type value) {
  _builder.setDataField< ::senseAD::msg::sensor::RangeArray::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RangeArray::Reader::hasRangeUnitArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RangeArray::Builder::hasRangeUnitArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Reader RangeArray::Reader::getRangeUnitArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Builder RangeArray::Builder::getRangeUnitArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RangeArray::Builder::setRangeUnitArray( ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>::Builder RangeArray::Builder::initRangeUnitArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RangeArray::Builder::adoptRangeUnitArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>> RangeArray::Builder::disownRangeUnitArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::Range,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AdsfiImageData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AdsfiImageData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AdsfiImageData::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AdsfiImageData::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageData::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdsfiImageData::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AdsfiImageData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t AdsfiImageData::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageData::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageData::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageData::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageData::Reader::getDataSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageData::Builder::getDataSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setDataSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AdsfiImageData::Reader::getBufferType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AdsfiImageData::Builder::getBufferType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setBufferType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AdsfiImageData::Reader::getImageType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AdsfiImageData::Builder::getImageType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setImageType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageData::Reader::getSeq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageData::Builder::getSeq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setSeq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AdsfiImageData::Reader::getRawData() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AdsfiImageData::Builder::getRawData() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setRawData( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AdsfiImageData::Reader::getMbufData() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AdsfiImageData::Builder::getMbufData() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageData::Builder::setMbufData( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageDataV2::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageDataV2::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageDataV2::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageDataV2::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageDataV2::Reader::getDataSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageDataV2::Builder::getDataSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setDataSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AdsfiImageDataV2::Reader::getBufferType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AdsfiImageDataV2::Builder::getBufferType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setBufferType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AdsfiImageDataV2::Reader::getImageType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AdsfiImageDataV2::Builder::getImageType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setImageType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiImageDataV2::Reader::getSeq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiImageDataV2::Builder::getSeq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AdsfiImageDataV2::Builder::setSeq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AdsfiImageDataV2::Reader::hasRawData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageDataV2::Builder::hasRawData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader AdsfiImageDataV2::Reader::getRawData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdsfiImageDataV2::Builder::getRawData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdsfiImageDataV2::Builder::setRawData( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void AdsfiImageDataV2::Builder::setRawData(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdsfiImageDataV2::Builder::initRawData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdsfiImageDataV2::Builder::adoptRawData(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> AdsfiImageDataV2::Builder::disownRawData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdsfiImageFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AdsfiImageFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AdsfiImageFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AdsfiImageFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdsfiImageFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AdsfiImageFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdsfiImageFrame::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageFrame::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sensor::AdsfiImageData::Reader AdsfiImageFrame::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sensor::AdsfiImageData::Builder AdsfiImageFrame::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sensor::AdsfiImageData::Pipeline AdsfiImageFrame::Pipeline::getData() {
  return  ::senseAD::msg::sensor::AdsfiImageData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AdsfiImageFrame::Builder::setData( ::senseAD::msg::sensor::AdsfiImageData::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sensor::AdsfiImageData::Builder AdsfiImageFrame::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdsfiImageFrame::Builder::adoptData(
    ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageData>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageData> AdsfiImageFrame::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AdsfiImageFrameV2::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageFrameV2::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AdsfiImageFrameV2::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageFrameV2::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AdsfiImageFrameV2::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AdsfiImageFrameV2::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiImageFrameV2::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdsfiImageFrameV2::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AdsfiImageFrameV2::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdsfiImageFrameV2::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiImageFrameV2::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Reader AdsfiImageFrameV2::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Builder AdsfiImageFrameV2::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Pipeline AdsfiImageFrameV2::Pipeline::getData() {
  return  ::senseAD::msg::sensor::AdsfiImageDataV2::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AdsfiImageFrameV2::Builder::setData( ::senseAD::msg::sensor::AdsfiImageDataV2::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sensor::AdsfiImageDataV2::Builder AdsfiImageFrameV2::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdsfiImageFrameV2::Builder::adoptData(
    ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageDataV2>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sensor::AdsfiImageDataV2> AdsfiImageFrameV2::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sensor::AdsfiImageDataV2>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AdsfiLidarPointCloud::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiLidarPointCloud::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AdsfiLidarPointCloud::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiLidarPointCloud::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AdsfiLidarPointCloud::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AdsfiLidarPointCloud::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AdsfiLidarPointCloud::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdsfiLidarPointCloud::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AdsfiLidarPointCloud::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getIsBigEndian() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getIsBigEndian() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setIsBigEndian( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getPointStep() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getPointStep() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setPointStep( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getRowStep() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getRowStep() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setRowStep( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdsfiLidarPointCloud::Reader::getIsDense() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdsfiLidarPointCloud::Builder::getIsDense() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AdsfiLidarPointCloud::Builder::setIsDense( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AdsfiLidarPointCloud::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdsfiLidarPointCloud::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AdsfiLidarPointCloud::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AdsfiLidarPointCloud::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdsfiLidarPointCloud::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AdsfiLidarPointCloud::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AdsfiLidarPointCloud::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AdsfiLidarPointCloud::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InsToNavi::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InsToNavi::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader InsToNavi::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder InsToNavi::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline InsToNavi::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InsToNavi::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder InsToNavi::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InsToNavi::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> InsToNavi::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::sensor::INSStatus InsToNavi::Reader::getInsStatus() const {
  return _reader.getDataField< ::senseAD::msg::sensor::INSStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::INSStatus InsToNavi::Builder::getInsStatus() {
  return _builder.getDataField< ::senseAD::msg::sensor::INSStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setInsStatus( ::senseAD::msg::sensor::INSStatus value) {
  _builder.setDataField< ::senseAD::msg::sensor::INSStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getForwardVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getForwardVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setForwardVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getRightVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getRightVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setRightVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getUpVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getUpVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setUpVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t InsToNavi::Reader::getSatelliteCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t InsToNavi::Builder::getSatelliteCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setSatelliteCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float InsToNavi::Reader::getHdop() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float InsToNavi::Builder::getHdop() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setHdop(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double InsToNavi::Reader::getUtcTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double InsToNavi::Builder::getUtcTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setUtcTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t InsToNavi::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t InsToNavi::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InsToNavi::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool InsToNavi::Reader::hasGsv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InsToNavi::Builder::hasGsv() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InsToNavi::Reader::getGsv() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InsToNavi::Builder::getGsv() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InsToNavi::Builder::setGsv( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InsToNavi::Builder::initGsv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InsToNavi::Builder::adoptGsv(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InsToNavi::Builder::disownGsv() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t PacketFrame::Reader::getRecvTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PacketFrame::Builder::getRecvTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PacketFrame::Builder::setRecvTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PacketFrame::Reader::hasFrameHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PacketFrame::Builder::hasFrameHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PacketFrame::Reader::getFrameHeader() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PacketFrame::Builder::getFrameHeader() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PacketFrame::Builder::setFrameHeader( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PacketFrame::Builder::initFrameHeader(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PacketFrame::Builder::adoptFrameHeader(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PacketFrame::Builder::disownFrameHeader() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PacketFrame::Reader::hasFrameData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PacketFrame::Builder::hasFrameData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PacketFrame::Reader::getFrameData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PacketFrame::Builder::getFrameData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PacketFrame::Builder::setFrameData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PacketFrame::Builder::initFrameData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PacketFrame::Builder::adoptFrameData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PacketFrame::Builder::disownFrameData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RawData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RawData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RawData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RawData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RawData::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RawData::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RawData::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RawData::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RawData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RawData::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RawData::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RawData::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RawData::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RawData::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RawData::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RawData::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RawData::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RawData::Reader::hasSensorType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RawData::Builder::hasSensorType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RawData::Reader::getSensorType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RawData::Builder::getSensorType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RawData::Builder::setSensorType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RawData::Builder::initSensorType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RawData::Builder::adoptSensorType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RawData::Builder::disownSensorType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t RawData::Reader::getPacketSize() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RawData::Builder::getPacketSize() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RawData::Builder::setPacketSize( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RawData::Reader::hasPacketList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RawData::Builder::hasPacketList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Reader RawData::Reader::getPacketList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Builder RawData::Builder::getPacketList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RawData::Builder::setPacketList( ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>::Builder RawData::Builder::initPacketList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RawData::Builder::adoptPacketList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>> RawData::Builder::disownPacketList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sensor::PacketFrame,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CameraRpcMsg::Reader::hasTopicList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraRpcMsg::Builder::hasTopicList() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader CameraRpcMsg::Reader::getTopicList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder CameraRpcMsg::Builder::getTopicList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraRpcMsg::Builder::setTopicList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void CameraRpcMsg::Builder::setTopicList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder CameraRpcMsg::Builder::initTopicList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraRpcMsg::Builder::adoptTopicList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> CameraRpcMsg::Builder::disownTopicList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraRpcMsg::Reader::getStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CameraRpcMsg::Builder::getStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraRpcMsg::Builder::setStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

