// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: record.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c28889ba790b5e00);
CAPNP_DECLARE_SCHEMA(aa2b412111831fa3);
enum class Mode_aa2b412111831fa3: uint16_t {
  STOP,
  START,
};
CAPNP_DECLARE_ENUM(Mode, aa2b412111831fa3);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace sensor {

struct RecordCommand {
  RecordCommand() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Mode_aa2b412111831fa3 Mode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c28889ba790b5e00, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RecordCommand::Reader {
public:
  typedef RecordCommand Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::sensor::RecordCommand::Mode getMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RecordCommand::Builder {
public:
  typedef RecordCommand Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::sensor::RecordCommand::Mode getMode();
  inline void setMode( ::senseAD::msg::sensor::RecordCommand::Mode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RecordCommand::Pipeline {
public:
  typedef RecordCommand Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::senseAD::msg::sensor::RecordCommand::Mode RecordCommand::Reader::getMode() const {
  return _reader.getDataField< ::senseAD::msg::sensor::RecordCommand::Mode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::sensor::RecordCommand::Mode RecordCommand::Builder::getMode() {
  return _builder.getDataField< ::senseAD::msg::sensor::RecordCommand::Mode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RecordCommand::Builder::setMode( ::senseAD::msg::sensor::RecordCommand::Mode value) {
  _builder.setDataField< ::senseAD::msg::sensor::RecordCommand::Mode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

