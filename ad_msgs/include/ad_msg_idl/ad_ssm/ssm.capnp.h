// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ssm.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f6d94efeb266c615);
enum class SystemMode_f6d94efeb266c615: uint16_t {
  MOD_STARTUP,
  MOD_FACTORY,
  MOD_NORMAL,
  MOD_UPDATE,
  MOD_VERIFY,
  MOD_CALIBRATE,
  MOD_STANDBY,
  MOD_RESERVED,
};
CAPNP_DECLARE_ENUM(SystemMode, f6d94efeb266c615);
CAPNP_DECLARE_SCHEMA(948e9f85a28e81fb);
enum class NodeID_948e9f85a28e81fb: uint16_t {
  NODE_TOP_S_M,
  NODE_A_D_P,
  NODE_O_T_A,
  NODE_CALIBRATE,
  NODE_SENTRY,
  NODE_RESERVED,
};
CAPNP_DECLARE_ENUM(NodeID, 948e9f85a28e81fb);
CAPNP_DECLARE_SCHEMA(ec18dddcce9b7895);
enum class VehicleMode_ec18dddcce9b7895: uint16_t {
  MOD_UNKNOWN,
  MOD_DRIVING,
  MOD_PARKING,
  MOD_SENTRY,
};
CAPNP_DECLARE_ENUM(VehicleMode, ec18dddcce9b7895);
CAPNP_DECLARE_SCHEMA(c60e67b7185189dd);
CAPNP_DECLARE_SCHEMA(965ee210eb9dc698);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace ssm {

typedef ::capnp::schemas::SystemMode_f6d94efeb266c615 SystemMode;

typedef ::capnp::schemas::NodeID_948e9f85a28e81fb NodeID;

typedef ::capnp::schemas::VehicleMode_ec18dddcce9b7895 VehicleMode;

struct CommMessage {
  CommMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c60e67b7185189dd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SysStateMessage {
  SysStateMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(965ee210eb9dc698, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CommMessage::Reader {
public:
  typedef CommMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::ssm::NodeID getNode() const;

  inline  ::senseAD::msg::ssm::SystemMode getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CommMessage::Builder {
public:
  typedef CommMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::ssm::NodeID getNode();
  inline void setNode( ::senseAD::msg::ssm::NodeID value);

  inline  ::senseAD::msg::ssm::SystemMode getData();
  inline void setData( ::senseAD::msg::ssm::SystemMode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CommMessage::Pipeline {
public:
  typedef CommMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SysStateMessage::Reader {
public:
  typedef SysStateMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::ssm::SystemMode getSystemMode() const;

  inline  ::senseAD::msg::ssm::VehicleMode getVehicleMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SysStateMessage::Builder {
public:
  typedef SysStateMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::ssm::SystemMode getSystemMode();
  inline void setSystemMode( ::senseAD::msg::ssm::SystemMode value);

  inline  ::senseAD::msg::ssm::VehicleMode getVehicleMode();
  inline void setVehicleMode( ::senseAD::msg::ssm::VehicleMode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SysStateMessage::Pipeline {
public:
  typedef SysStateMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool CommMessage::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CommMessage::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader CommMessage::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder CommMessage::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline CommMessage::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CommMessage::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder CommMessage::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CommMessage::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> CommMessage::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::ssm::NodeID CommMessage::Reader::getNode() const {
  return _reader.getDataField< ::senseAD::msg::ssm::NodeID>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::ssm::NodeID CommMessage::Builder::getNode() {
  return _builder.getDataField< ::senseAD::msg::ssm::NodeID>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CommMessage::Builder::setNode( ::senseAD::msg::ssm::NodeID value) {
  _builder.setDataField< ::senseAD::msg::ssm::NodeID>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::ssm::SystemMode CommMessage::Reader::getData() const {
  return _reader.getDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::ssm::SystemMode CommMessage::Builder::getData() {
  return _builder.getDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CommMessage::Builder::setData( ::senseAD::msg::ssm::SystemMode value) {
  _builder.setDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::ssm::SystemMode SysStateMessage::Reader::getSystemMode() const {
  return _reader.getDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::ssm::SystemMode SysStateMessage::Builder::getSystemMode() {
  return _builder.getDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SysStateMessage::Builder::setSystemMode( ::senseAD::msg::ssm::SystemMode value) {
  _builder.setDataField< ::senseAD::msg::ssm::SystemMode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::ssm::VehicleMode SysStateMessage::Reader::getVehicleMode() const {
  return _reader.getDataField< ::senseAD::msg::ssm::VehicleMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::ssm::VehicleMode SysStateMessage::Builder::getVehicleMode() {
  return _builder.getDataField< ::senseAD::msg::ssm::VehicleMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SysStateMessage::Builder::setVehicleMode( ::senseAD::msg::ssm::VehicleMode value) {
  _builder.setDataField< ::senseAD::msg::ssm::VehicleMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

