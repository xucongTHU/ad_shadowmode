// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_map.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_smart_slam/avp_smart_slam.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c394f71a7dc370bf);
CAPNP_DECLARE_SCHEMA(fea25545a4461f08);
enum class AvpMapType_fea25545a4461f08: uint16_t {
  NORMAL,
  FAVORITE,
};
CAPNP_DECLARE_ENUM(AvpMapType, fea25545a4461f08);
CAPNP_DECLARE_SCHEMA(fd30439e2d61eed0);
CAPNP_DECLARE_SCHEMA(ed8e81cae9a0410e);
CAPNP_DECLARE_SCHEMA(c69f9ad88a28760b);
CAPNP_DECLARE_SCHEMA(97af709c40e953bc);
enum class AvpMapCommand_97af709c40e953bc: uint16_t {
  UPDATE,
  DELETE,
  PREVIEW,
};
CAPNP_DECLARE_ENUM(AvpMapCommand, 97af709c40e953bc);
CAPNP_DECLARE_SCHEMA(cc8da5645a3ef821);
enum class AvpMapErrorCode_cc8da5645a3ef821: uint16_t {
  OK,
  INVALID_OPERATION,
  OPS_FAILED,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(AvpMapErrorCode, cc8da5645a3ef821);
CAPNP_DECLARE_SCHEMA(818536d4ddd98318);
CAPNP_DECLARE_SCHEMA(fad0e7daa9c219d4);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_hmi_v3 {

struct MapBtnState {
  MapBtnState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c394f71a7dc370bf, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::AvpMapType_fea25545a4461f08 AvpMapType;

struct AvpMapSlot {
  AvpMapSlot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd30439e2d61eed0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpMapItem {
  AvpMapItem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed8e81cae9a0410e, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpMapList {
  AvpMapList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c69f9ad88a28760b, 6, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::AvpMapCommand_97af709c40e953bc AvpMapCommand;

typedef ::capnp::schemas::AvpMapErrorCode_cc8da5645a3ef821 AvpMapErrorCode;

struct AvpMapReq {
  AvpMapReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(818536d4ddd98318, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpMapResp {
  AvpMapResp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fad0e7daa9c219d4, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MapBtnState::Reader {
public:
  typedef MapBtnState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getVisible() const;

  inline bool getEnabled() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapBtnState::Builder {
public:
  typedef MapBtnState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getVisible();
  inline void setVisible(bool value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapBtnState::Pipeline {
public:
  typedef MapBtnState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpMapSlot::Reader {
public:
  typedef AvpMapSlot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getSlotId() const;

  inline bool hasSlotName() const;
  inline  ::capnp::Text::Reader getSlotName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMapSlot::Builder {
public:
  typedef AvpMapSlot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getSlotId();
  inline void setSlotId( ::int64_t value);

  inline bool hasSlotName();
  inline  ::capnp::Text::Builder getSlotName();
  inline void setSlotName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSlotName(unsigned int size);
  inline void adoptSlotName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSlotName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMapSlot::Pipeline {
public:
  typedef AvpMapSlot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpMapItem::Reader {
public:
  typedef AvpMapItem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMapId() const;

  inline bool hasMapName() const;
  inline  ::capnp::Text::Reader getMapName() const;

  inline bool getMapNameCanEdit() const;

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapType getMapType() const;

  inline bool getMapTypeCanEdit() const;

  inline bool hasMapTypeCannotEditHints() const;
  inline  ::capnp::Text::Reader getMapTypeCannotEditHints() const;

  inline  ::uint64_t getMapCreatedTime() const;

  inline bool getMapCreatedTimeCanEdit() const;

  inline bool hasMapLabels() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getMapLabels() const;

  inline bool getMapLabelCanEdit() const;

  inline bool hasMapFavoriteSlots() const;
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Reader getMapFavoriteSlots() const;

  inline bool getMapFavoriteSlotsCanEdit() const;

  inline  ::uint64_t getMapTargetSlotId() const;

  inline bool getMapTargetSlotIdCanEdit() const;

  inline  ::uint64_t getMapUsedCount() const;

  inline bool getMapUsedCountCanEdit() const;

  inline bool getMapIsCurrent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMapItem::Builder {
public:
  typedef AvpMapItem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMapId();
  inline void setMapId( ::int64_t value);

  inline bool hasMapName();
  inline  ::capnp::Text::Builder getMapName();
  inline void setMapName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMapName(unsigned int size);
  inline void adoptMapName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMapName();

  inline bool getMapNameCanEdit();
  inline void setMapNameCanEdit(bool value);

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapType getMapType();
  inline void setMapType( ::senseAD::msg::avp_hmi_v3::AvpMapType value);

  inline bool getMapTypeCanEdit();
  inline void setMapTypeCanEdit(bool value);

  inline bool hasMapTypeCannotEditHints();
  inline  ::capnp::Text::Builder getMapTypeCannotEditHints();
  inline void setMapTypeCannotEditHints( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMapTypeCannotEditHints(unsigned int size);
  inline void adoptMapTypeCannotEditHints(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMapTypeCannotEditHints();

  inline  ::uint64_t getMapCreatedTime();
  inline void setMapCreatedTime( ::uint64_t value);

  inline bool getMapCreatedTimeCanEdit();
  inline void setMapCreatedTimeCanEdit(bool value);

  inline bool hasMapLabels();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getMapLabels();
  inline void setMapLabels( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setMapLabels(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initMapLabels(unsigned int size);
  inline void adoptMapLabels(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownMapLabels();

  inline bool getMapLabelCanEdit();
  inline void setMapLabelCanEdit(bool value);

  inline bool hasMapFavoriteSlots();
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Builder getMapFavoriteSlots();
  inline void setMapFavoriteSlots( ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Builder initMapFavoriteSlots(unsigned int size);
  inline void adoptMapFavoriteSlots(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>> disownMapFavoriteSlots();

  inline bool getMapFavoriteSlotsCanEdit();
  inline void setMapFavoriteSlotsCanEdit(bool value);

  inline  ::uint64_t getMapTargetSlotId();
  inline void setMapTargetSlotId( ::uint64_t value);

  inline bool getMapTargetSlotIdCanEdit();
  inline void setMapTargetSlotIdCanEdit(bool value);

  inline  ::uint64_t getMapUsedCount();
  inline void setMapUsedCount( ::uint64_t value);

  inline bool getMapUsedCountCanEdit();
  inline void setMapUsedCountCanEdit(bool value);

  inline bool getMapIsCurrent();
  inline void setMapIsCurrent(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMapItem::Pipeline {
public:
  typedef AvpMapItem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpMapList::Reader {
public:
  typedef AvpMapList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBtnState() const;
  inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Reader getBtnState() const;

  inline bool hasMaps() const;
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Reader getMaps() const;

  inline  ::uint64_t getMapNameLenLimit() const;

  inline  ::uint64_t getMapLabelLenLimit() const;

  inline  ::uint64_t getMapLabelsCntLimit() const;

  inline  ::uint64_t getMapFavoriteSlotsCntLimit() const;

  inline  ::uint64_t getNormalMapCntLimit() const;

  inline  ::uint64_t getFavoriteMapCntLimit() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMapList::Builder {
public:
  typedef AvpMapList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBtnState();
  inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Builder getBtnState();
  inline void setBtnState( ::senseAD::msg::avp_hmi_v3::MapBtnState::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Builder initBtnState();
  inline void adoptBtnState(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::MapBtnState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::MapBtnState> disownBtnState();

  inline bool hasMaps();
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Builder getMaps();
  inline void setMaps( ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Builder initMaps(unsigned int size);
  inline void adoptMaps(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>> disownMaps();

  inline  ::uint64_t getMapNameLenLimit();
  inline void setMapNameLenLimit( ::uint64_t value);

  inline  ::uint64_t getMapLabelLenLimit();
  inline void setMapLabelLenLimit( ::uint64_t value);

  inline  ::uint64_t getMapLabelsCntLimit();
  inline void setMapLabelsCntLimit( ::uint64_t value);

  inline  ::uint64_t getMapFavoriteSlotsCntLimit();
  inline void setMapFavoriteSlotsCntLimit( ::uint64_t value);

  inline  ::uint64_t getNormalMapCntLimit();
  inline void setNormalMapCntLimit( ::uint64_t value);

  inline  ::uint64_t getFavoriteMapCntLimit();
  inline void setFavoriteMapCntLimit( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMapList::Pipeline {
public:
  typedef AvpMapList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Pipeline getBtnState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpMapReq::Reader {
public:
  typedef AvpMapReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapCommand getCommand() const;

  inline bool hasMapInfo() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader getMapInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMapReq::Builder {
public:
  typedef AvpMapReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapCommand getCommand();
  inline void setCommand( ::senseAD::msg::avp_hmi_v3::AvpMapCommand value);

  inline bool hasMapInfo();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder getMapInfo();
  inline void setMapInfo( ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder initMapInfo();
  inline void adoptMapInfo(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem> disownMapInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMapReq::Pipeline {
public:
  typedef AvpMapReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline getMapInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpMapResp::Reader {
public:
  typedef AvpMapResp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode getErrorCode() const;

  inline bool hasVisualizationMapInfo() const;
  inline  ::senseAD::msg::avp_smart_slam::MapInfo::Reader getVisualizationMapInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMapResp::Builder {
public:
  typedef AvpMapResp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode getErrorCode();
  inline void setErrorCode( ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode value);

  inline bool hasVisualizationMapInfo();
  inline  ::senseAD::msg::avp_smart_slam::MapInfo::Builder getVisualizationMapInfo();
  inline void setVisualizationMapInfo( ::senseAD::msg::avp_smart_slam::MapInfo::Reader value);
  inline  ::senseAD::msg::avp_smart_slam::MapInfo::Builder initVisualizationMapInfo();
  inline void adoptVisualizationMapInfo(::capnp::Orphan< ::senseAD::msg::avp_smart_slam::MapInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::MapInfo> disownVisualizationMapInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMapResp::Pipeline {
public:
  typedef AvpMapResp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_smart_slam::MapInfo::Pipeline getVisualizationMapInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool MapBtnState::Reader::getVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool MapBtnState::Builder::getVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapBtnState::Builder::setVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapBtnState::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool MapBtnState::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapBtnState::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AvpMapSlot::Reader::getSlotId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}

inline  ::int64_t AvpMapSlot::Builder::getSlotId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}
inline void AvpMapSlot::Builder::setSlotId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1ll);
}

inline bool AvpMapSlot::Reader::hasSlotName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapSlot::Builder::hasSlotName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpMapSlot::Reader::getSlotName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpMapSlot::Builder::getSlotName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMapSlot::Builder::setSlotName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpMapSlot::Builder::initSlotName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AvpMapSlot::Builder::adoptSlotName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpMapSlot::Builder::disownSlotName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AvpMapItem::Reader::getMapId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}

inline  ::int64_t AvpMapItem::Builder::getMapId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}
inline void AvpMapItem::Builder::setMapId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1ll);
}

inline bool AvpMapItem::Reader::hasMapName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapItem::Builder::hasMapName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpMapItem::Reader::getMapName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpMapItem::Builder::getMapName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMapItem::Builder::setMapName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpMapItem::Builder::initMapName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AvpMapItem::Builder::adoptMapName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpMapItem::Builder::disownMapName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvpMapItem::Reader::getMapNameCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapNameCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapNameCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapType AvpMapItem::Reader::getMapType() const {
  return _reader.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapType AvpMapItem::Builder::getMapType() {
  return _builder.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapType( ::senseAD::msg::avp_hmi_v3::AvpMapType value) {
  _builder.setDataField< ::senseAD::msg::avp_hmi_v3::AvpMapType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::getMapTypeCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapTypeCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapTypeCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::hasMapTypeCannotEditHints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapItem::Builder::hasMapTypeCannotEditHints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpMapItem::Reader::getMapTypeCannotEditHints() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpMapItem::Builder::getMapTypeCannotEditHints() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpMapItem::Builder::setMapTypeCannotEditHints( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpMapItem::Builder::initMapTypeCannotEditHints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AvpMapItem::Builder::adoptMapTypeCannotEditHints(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpMapItem::Builder::disownMapTypeCannotEditHints() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t AvpMapItem::Reader::getMapCreatedTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapItem::Builder::getMapCreatedTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapCreatedTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::getMapCreatedTimeCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapCreatedTimeCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapCreatedTimeCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::hasMapLabels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapItem::Builder::hasMapLabels() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader AvpMapItem::Reader::getMapLabels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder AvpMapItem::Builder::getMapLabels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AvpMapItem::Builder::setMapLabels( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void AvpMapItem::Builder::setMapLabels(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder AvpMapItem::Builder::initMapLabels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AvpMapItem::Builder::adoptMapLabels(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> AvpMapItem::Builder::disownMapLabels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AvpMapItem::Reader::getMapLabelCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapLabelCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapLabelCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::hasMapFavoriteSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapItem::Builder::hasMapFavoriteSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Reader AvpMapItem::Reader::getMapFavoriteSlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Builder AvpMapItem::Builder::getMapFavoriteSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AvpMapItem::Builder::setMapFavoriteSlots( ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>::Builder AvpMapItem::Builder::initMapFavoriteSlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void AvpMapItem::Builder::adoptMapFavoriteSlots(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>> AvpMapItem::Builder::disownMapFavoriteSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapSlot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AvpMapItem::Reader::getMapFavoriteSlotsCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapFavoriteSlotsCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapFavoriteSlotsCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapItem::Reader::getMapTargetSlotId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapItem::Builder::getMapTargetSlotId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapTargetSlotId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::getMapTargetSlotIdCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapTargetSlotIdCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapTargetSlotIdCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapItem::Reader::getMapUsedCount() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapItem::Builder::getMapUsedCount() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapUsedCount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::getMapUsedCountCanEdit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapUsedCountCanEdit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapUsedCountCanEdit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapItem::Reader::getMapIsCurrent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool AvpMapItem::Builder::getMapIsCurrent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void AvpMapItem::Builder::setMapIsCurrent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapList::Reader::hasBtnState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapList::Builder::hasBtnState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Reader AvpMapList::Reader::getBtnState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Builder AvpMapList::Builder::getBtnState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Pipeline AvpMapList::Pipeline::getBtnState() {
  return  ::senseAD::msg::avp_hmi_v3::MapBtnState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AvpMapList::Builder::setBtnState( ::senseAD::msg::avp_hmi_v3::MapBtnState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::MapBtnState::Builder AvpMapList::Builder::initBtnState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMapList::Builder::adoptBtnState(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::MapBtnState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::MapBtnState> AvpMapList::Builder::disownBtnState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::MapBtnState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvpMapList::Reader::hasMaps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapList::Builder::hasMaps() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Reader AvpMapList::Reader::getMaps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Builder AvpMapList::Builder::getMaps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpMapList::Builder::setMaps( ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>::Builder AvpMapList::Builder::initMaps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AvpMapList::Builder::adoptMaps(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>> AvpMapList::Builder::disownMaps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_hmi_v3::AvpMapItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t AvpMapList::Reader::getMapNameLenLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getMapNameLenLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setMapNameLenLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapList::Reader::getMapLabelLenLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getMapLabelLenLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setMapLabelLenLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapList::Reader::getMapLabelsCntLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getMapLabelsCntLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setMapLabelsCntLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapList::Reader::getMapFavoriteSlotsCntLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getMapFavoriteSlotsCntLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setMapFavoriteSlotsCntLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapList::Reader::getNormalMapCntLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getNormalMapCntLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setNormalMapCntLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AvpMapList::Reader::getFavoriteMapCntLimit() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMapList::Builder::getFavoriteMapCntLimit() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AvpMapList::Builder::setFavoriteMapCntLimit( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapReq::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapReq::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AvpMapReq::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMapReq::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AvpMapReq::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AvpMapReq::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMapReq::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMapReq::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AvpMapReq::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapCommand AvpMapReq::Reader::getCommand() const {
  return _reader.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapCommand AvpMapReq::Builder::getCommand() {
  return _builder.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpMapReq::Builder::setCommand( ::senseAD::msg::avp_hmi_v3::AvpMapCommand value) {
  _builder.setDataField< ::senseAD::msg::avp_hmi_v3::AvpMapCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapReq::Reader::hasMapInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapReq::Builder::hasMapInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader AvpMapReq::Reader::getMapInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder AvpMapReq::Builder::getMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline AvpMapReq::Pipeline::getMapInfo() {
  return  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AvpMapReq::Builder::setMapInfo( ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder AvpMapReq::Builder::initMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpMapReq::Builder::adoptMapInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem> AvpMapReq::Builder::disownMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AvpMapResp::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapResp::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AvpMapResp::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMapResp::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AvpMapResp::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AvpMapResp::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMapResp::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMapResp::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AvpMapResp::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode AvpMapResp::Reader::getErrorCode() const {
  return _reader.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode AvpMapResp::Builder::getErrorCode() {
  return _builder.getDataField< ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpMapResp::Builder::setErrorCode( ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode value) {
  _builder.setDataField< ::senseAD::msg::avp_hmi_v3::AvpMapErrorCode>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AvpMapResp::Reader::hasVisualizationMapInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMapResp::Builder::hasVisualizationMapInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_smart_slam::MapInfo::Reader AvpMapResp::Reader::getVisualizationMapInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_smart_slam::MapInfo::Builder AvpMapResp::Builder::getVisualizationMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_smart_slam::MapInfo::Pipeline AvpMapResp::Pipeline::getVisualizationMapInfo() {
  return  ::senseAD::msg::avp_smart_slam::MapInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AvpMapResp::Builder::setVisualizationMapInfo( ::senseAD::msg::avp_smart_slam::MapInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_smart_slam::MapInfo::Builder AvpMapResp::Builder::initVisualizationMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpMapResp::Builder::adoptVisualizationMapInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::MapInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::MapInfo> AvpMapResp::Builder::disownVisualizationMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::MapInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

