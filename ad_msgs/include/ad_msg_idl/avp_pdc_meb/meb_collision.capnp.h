// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: meb_collision.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9977a331e1a9b0ff);
CAPNP_DECLARE_SCHEMA(bd421242d5a32352);
CAPNP_DECLARE_SCHEMA(a2be8f9134fdca72);
enum class Direction_a2be8f9134fdca72: uint16_t {
  FORWARD,
  BACKWARD,
  FORWARD_LEFT,
  FORWARD_RIGHT,
  BACKWARD_LEFT,
  BACKWARD_RIGHT,
};
CAPNP_DECLARE_ENUM(Direction, a2be8f9134fdca72);
CAPNP_DECLARE_SCHEMA(fa5a14bbb05aa45a);
CAPNP_DECLARE_SCHEMA(93b268394d98f71a);
CAPNP_DECLARE_SCHEMA(94ff33305b426eff);
CAPNP_DECLARE_SCHEMA(ee59dd5406551b39);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_meb {

struct Point {
  Point() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9977a331e1a9b0ff, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Collision {
  Collision() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd421242d5a32352, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::Direction_a2be8f9134fdca72 Direction;

struct Straight {
  Straight() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa5a14bbb05aa45a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Turning {
  Turning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93b268394d98f71a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PathInfo {
  PathInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94ff33305b426eff, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MebCollisionMsg {
  MebCollisionMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee59dd5406551b39, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Point::Reader {
public:
  typedef Point Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point::Builder {
public:
  typedef Point Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point::Pipeline {
public:
  typedef Point Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Collision::Reader {
public:
  typedef Collision Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDistance() const;

  inline  ::uint8_t getObstacleType() const;

  inline bool hasCar() const;
  inline  ::senseAD::msg::avp_meb::Point::Reader getCar() const;

  inline bool hasObj() const;
  inline  ::senseAD::msg::avp_meb::Point::Reader getObj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Collision::Builder {
public:
  typedef Collision Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDistance();
  inline void setDistance(float value);

  inline  ::uint8_t getObstacleType();
  inline void setObstacleType( ::uint8_t value);

  inline bool hasCar();
  inline  ::senseAD::msg::avp_meb::Point::Builder getCar();
  inline void setCar( ::senseAD::msg::avp_meb::Point::Reader value);
  inline  ::senseAD::msg::avp_meb::Point::Builder initCar();
  inline void adoptCar(::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> disownCar();

  inline bool hasObj();
  inline  ::senseAD::msg::avp_meb::Point::Builder getObj();
  inline void setObj( ::senseAD::msg::avp_meb::Point::Reader value);
  inline  ::senseAD::msg::avp_meb::Point::Builder initObj();
  inline void adoptObj(::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> disownObj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Collision::Pipeline {
public:
  typedef Collision Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_meb::Point::Pipeline getCar();
  inline  ::senseAD::msg::avp_meb::Point::Pipeline getObj();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Straight::Reader {
public:
  typedef Straight Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getUpperBound() const;

  inline float getLowerBound() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Straight::Builder {
public:
  typedef Straight Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getUpperBound();
  inline void setUpperBound(float value);

  inline float getLowerBound();
  inline void setLowerBound(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Straight::Pipeline {
public:
  typedef Straight Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Turning::Reader {
public:
  typedef Turning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCenter() const;
  inline  ::senseAD::msg::avp_meb::Point::Reader getCenter() const;

  inline float getFurtherBound() const;

  inline float getCloserBound() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Turning::Builder {
public:
  typedef Turning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCenter();
  inline  ::senseAD::msg::avp_meb::Point::Builder getCenter();
  inline void setCenter( ::senseAD::msg::avp_meb::Point::Reader value);
  inline  ::senseAD::msg::avp_meb::Point::Builder initCenter();
  inline void adoptCenter(::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> disownCenter();

  inline float getFurtherBound();
  inline void setFurtherBound(float value);

  inline float getCloserBound();
  inline void setCloserBound(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Turning::Pipeline {
public:
  typedef Turning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_meb::Point::Pipeline getCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PathInfo::Reader {
public:
  typedef PathInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStraight() const;
  inline  ::senseAD::msg::avp_meb::Straight::Reader getStraight() const;

  inline bool hasTurning() const;
  inline  ::senseAD::msg::avp_meb::Turning::Reader getTurning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PathInfo::Builder {
public:
  typedef PathInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStraight();
  inline  ::senseAD::msg::avp_meb::Straight::Builder getStraight();
  inline void setStraight( ::senseAD::msg::avp_meb::Straight::Reader value);
  inline  ::senseAD::msg::avp_meb::Straight::Builder initStraight();
  inline void adoptStraight(::capnp::Orphan< ::senseAD::msg::avp_meb::Straight>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Straight> disownStraight();

  inline bool hasTurning();
  inline  ::senseAD::msg::avp_meb::Turning::Builder getTurning();
  inline void setTurning( ::senseAD::msg::avp_meb::Turning::Reader value);
  inline  ::senseAD::msg::avp_meb::Turning::Builder initTurning();
  inline void adoptTurning(::capnp::Orphan< ::senseAD::msg::avp_meb::Turning>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Turning> disownTurning();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PathInfo::Pipeline {
public:
  typedef PathInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_meb::Straight::Pipeline getStraight();
  inline  ::senseAD::msg::avp_meb::Turning::Pipeline getTurning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MebCollisionMsg::Reader {
public:
  typedef MebCollisionMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasCollision() const;
  inline  ::senseAD::msg::avp_meb::Collision::Reader getCollision() const;

  inline  ::senseAD::msg::avp_meb::Direction getDirection() const;

  inline bool hasPathInfo() const;
  inline  ::senseAD::msg::avp_meb::PathInfo::Reader getPathInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MebCollisionMsg::Builder {
public:
  typedef MebCollisionMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasCollision();
  inline  ::senseAD::msg::avp_meb::Collision::Builder getCollision();
  inline void setCollision( ::senseAD::msg::avp_meb::Collision::Reader value);
  inline  ::senseAD::msg::avp_meb::Collision::Builder initCollision();
  inline void adoptCollision(::capnp::Orphan< ::senseAD::msg::avp_meb::Collision>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Collision> disownCollision();

  inline  ::senseAD::msg::avp_meb::Direction getDirection();
  inline void setDirection( ::senseAD::msg::avp_meb::Direction value);

  inline bool hasPathInfo();
  inline  ::senseAD::msg::avp_meb::PathInfo::Builder getPathInfo();
  inline void setPathInfo( ::senseAD::msg::avp_meb::PathInfo::Reader value);
  inline  ::senseAD::msg::avp_meb::PathInfo::Builder initPathInfo();
  inline void adoptPathInfo(::capnp::Orphan< ::senseAD::msg::avp_meb::PathInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_meb::PathInfo> disownPathInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MebCollisionMsg::Pipeline {
public:
  typedef MebCollisionMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_meb::Collision::Pipeline getCollision();
  inline  ::senseAD::msg::avp_meb::PathInfo::Pipeline getPathInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float Point::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Point::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Point::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Point::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Collision::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Collision::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Collision::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Collision::Reader::getObstacleType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Collision::Builder::getObstacleType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Collision::Builder::setObstacleType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Collision::Reader::hasCar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Collision::Builder::hasCar() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Point::Reader Collision::Reader::getCar() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Point::Builder Collision::Builder::getCar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Point::Pipeline Collision::Pipeline::getCar() {
  return  ::senseAD::msg::avp_meb::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Collision::Builder::setCar( ::senseAD::msg::avp_meb::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Point::Builder Collision::Builder::initCar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Collision::Builder::adoptCar(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> Collision::Builder::disownCar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Collision::Reader::hasObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Collision::Builder::hasObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Point::Reader Collision::Reader::getObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Point::Builder Collision::Builder::getObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Point::Pipeline Collision::Pipeline::getObj() {
  return  ::senseAD::msg::avp_meb::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Collision::Builder::setObj( ::senseAD::msg::avp_meb::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Point::Builder Collision::Builder::initObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Collision::Builder::adoptObj(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> Collision::Builder::disownObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float Straight::Reader::getUpperBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Straight::Builder::getUpperBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Straight::Builder::setUpperBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Straight::Reader::getLowerBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Straight::Builder::getLowerBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Straight::Builder::setLowerBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Turning::Reader::hasCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Turning::Builder::hasCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Point::Reader Turning::Reader::getCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Point::Builder Turning::Builder::getCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Point::Pipeline Turning::Pipeline::getCenter() {
  return  ::senseAD::msg::avp_meb::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Turning::Builder::setCenter( ::senseAD::msg::avp_meb::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Point::Builder Turning::Builder::initCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Turning::Builder::adoptCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Point> Turning::Builder::disownCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Turning::Reader::getFurtherBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Turning::Builder::getFurtherBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Turning::Builder::setFurtherBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Turning::Reader::getCloserBound() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Turning::Builder::getCloserBound() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Turning::Builder::setCloserBound(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PathInfo::Reader::hasStraight() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PathInfo::Builder::hasStraight() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Straight::Reader PathInfo::Reader::getStraight() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Straight::Builder PathInfo::Builder::getStraight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Straight::Pipeline PathInfo::Pipeline::getStraight() {
  return  ::senseAD::msg::avp_meb::Straight::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PathInfo::Builder::setStraight( ::senseAD::msg::avp_meb::Straight::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Straight::Builder PathInfo::Builder::initStraight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PathInfo::Builder::adoptStraight(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Straight>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Straight> PathInfo::Builder::disownStraight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Straight>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PathInfo::Reader::hasTurning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PathInfo::Builder::hasTurning() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Turning::Reader PathInfo::Reader::getTurning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Turning::Builder PathInfo::Builder::getTurning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Turning::Pipeline PathInfo::Pipeline::getTurning() {
  return  ::senseAD::msg::avp_meb::Turning::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PathInfo::Builder::setTurning( ::senseAD::msg::avp_meb::Turning::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Turning::Builder PathInfo::Builder::initTurning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PathInfo::Builder::adoptTurning(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Turning>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Turning> PathInfo::Builder::disownTurning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Turning>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MebCollisionMsg::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MebCollisionMsg::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader MebCollisionMsg::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder MebCollisionMsg::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline MebCollisionMsg::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MebCollisionMsg::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder MebCollisionMsg::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MebCollisionMsg::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> MebCollisionMsg::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MebCollisionMsg::Reader::hasCollision() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MebCollisionMsg::Builder::hasCollision() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::Collision::Reader MebCollisionMsg::Reader::getCollision() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::Collision::Builder MebCollisionMsg::Builder::getCollision() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::Collision::Pipeline MebCollisionMsg::Pipeline::getCollision() {
  return  ::senseAD::msg::avp_meb::Collision::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MebCollisionMsg::Builder::setCollision( ::senseAD::msg::avp_meb::Collision::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::Collision::Builder MebCollisionMsg::Builder::initCollision() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MebCollisionMsg::Builder::adoptCollision(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::Collision>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::Collision> MebCollisionMsg::Builder::disownCollision() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::Collision>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_meb::Direction MebCollisionMsg::Reader::getDirection() const {
  return _reader.getDataField< ::senseAD::msg::avp_meb::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_meb::Direction MebCollisionMsg::Builder::getDirection() {
  return _builder.getDataField< ::senseAD::msg::avp_meb::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MebCollisionMsg::Builder::setDirection( ::senseAD::msg::avp_meb::Direction value) {
  _builder.setDataField< ::senseAD::msg::avp_meb::Direction>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MebCollisionMsg::Reader::hasPathInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MebCollisionMsg::Builder::hasPathInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_meb::PathInfo::Reader MebCollisionMsg::Reader::getPathInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_meb::PathInfo::Builder MebCollisionMsg::Builder::getPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_meb::PathInfo::Pipeline MebCollisionMsg::Pipeline::getPathInfo() {
  return  ::senseAD::msg::avp_meb::PathInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void MebCollisionMsg::Builder::setPathInfo( ::senseAD::msg::avp_meb::PathInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_meb::PathInfo::Builder MebCollisionMsg::Builder::initPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MebCollisionMsg::Builder::adoptPathInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_meb::PathInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_meb::PathInfo> MebCollisionMsg::Builder::disownPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_meb::PathInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

