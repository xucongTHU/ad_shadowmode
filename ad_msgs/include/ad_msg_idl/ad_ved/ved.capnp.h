// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ved.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ea3719c1d00ef69b);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace ved {

struct VEDInfo {
  VEDInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea3719c1d00ef69b, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class VEDInfo::Reader {
public:
  typedef VEDInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMeasurementTimeNs() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearAcceleration() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearAcceleration() const;

  inline bool hasAngularVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getAngularVelocity() const;

  inline bool hasQ() const;
  inline  ::senseAD::msg::std_msgs::Quaternion::Reader getQ() const;

  inline bool hasT() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getT() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDInfo::Builder {
public:
  typedef VEDInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMeasurementTimeNs();
  inline void setMeasurementTimeNs( ::uint64_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearAcceleration();

  inline bool hasAngularVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getAngularVelocity();
  inline void setAngularVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownAngularVelocity();

  inline bool hasQ();
  inline  ::senseAD::msg::std_msgs::Quaternion::Builder getQ();
  inline void setQ( ::senseAD::msg::std_msgs::Quaternion::Reader value);
  inline  ::senseAD::msg::std_msgs::Quaternion::Builder initQ();
  inline void adoptQ(::capnp::Orphan< ::senseAD::msg::std_msgs::Quaternion>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Quaternion> disownQ();

  inline bool hasT();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getT();
  inline void setT( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initT();
  inline void adoptT(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownT();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDInfo::Pipeline {
public:
  typedef VEDInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getAngularVelocity();
  inline  ::senseAD::msg::std_msgs::Quaternion::Pipeline getQ();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getT();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool VEDInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader VEDInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder VEDInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline VEDInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder VEDInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> VEDInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t VEDInfo::Reader::getMeasurementTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VEDInfo::Builder::getMeasurementTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDInfo::Builder::setMeasurementTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VEDInfo::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader VEDInfo::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder VEDInfo::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder VEDInfo::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void VEDInfo::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> VEDInfo::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getLinearAcceleration() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getAngularVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setAngularVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasQ() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasQ() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Quaternion::Reader VEDInfo::Reader::getQ() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Quaternion::Builder VEDInfo::Builder::getQ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Quaternion::Pipeline VEDInfo::Pipeline::getQ() {
  return  ::senseAD::msg::std_msgs::Quaternion::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setQ( ::senseAD::msg::std_msgs::Quaternion::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Quaternion::Builder VEDInfo::Builder::initQ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptQ(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Quaternion>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Quaternion> VEDInfo::Builder::disownQ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Quaternion>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasT() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasT() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getT() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getT() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getT() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setT( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initT() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptT(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownT() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

