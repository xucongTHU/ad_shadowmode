// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sdmap_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a6ad00007be9a6da);
CAPNP_DECLARE_SCHEMA(a81d0f506f00899b);
CAPNP_DECLARE_SCHEMA(aa4f0eeeef80535b);
CAPNP_DECLARE_SCHEMA(de0a4a66848bb16b);
CAPNP_DECLARE_SCHEMA(95d11bfe80f22abd);
CAPNP_DECLARE_SCHEMA(bb83f420e3e4b536);
CAPNP_DECLARE_SCHEMA(c96f87f28f3865b2);
CAPNP_DECLARE_SCHEMA(e2db41812b98b6a5);
CAPNP_DECLARE_SCHEMA(b64fcabc897dea9e);
CAPNP_DECLARE_SCHEMA(9cdd93d3898e9b3f);
CAPNP_DECLARE_SCHEMA(84306fc6ffcb430e);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace sdmap {

struct LaneTrafficInfo {
  LaneTrafficInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6ad00007be9a6da, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneInfoMeta {
  LaneInfoMeta() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a81d0f506f00899b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkIDType {
  LinkIDType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa4f0eeeef80535b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkCurvature {
  LinkCurvature() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de0a4a66848bb16b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Link {
  Link() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95d11bfe80f22abd, 3, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PointSpeedInfo {
  PointSpeedInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb83f420e3e4b536, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NodeIDType {
  NodeIDType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c96f87f28f3865b2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkNode {
  LinkNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2db41812b98b6a5, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LocalizationInfo {
  LocalizationInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b64fcabc897dea9e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SDMap {
  SDMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9cdd93d3898e9b3f, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavPathInfo {
  NavPathInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84306fc6ffcb430e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class LaneTrafficInfo::Reader {
public:
  typedef LaneTrafficInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsBus() const;

  inline  ::uint32_t getLaneType() const;

  inline  ::uint32_t getArrow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneTrafficInfo::Builder {
public:
  typedef LaneTrafficInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsBus();
  inline void setIsBus(bool value);

  inline  ::uint32_t getLaneType();
  inline void setLaneType( ::uint32_t value);

  inline  ::uint32_t getArrow();
  inline void setArrow( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneTrafficInfo::Pipeline {
public:
  typedef LaneTrafficInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneInfoMeta::Reader {
public:
  typedef LaneInfoMeta Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getLaneNum() const;

  inline bool hasLaneInfos() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Reader getLaneInfos() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneInfoMeta::Builder {
public:
  typedef LaneInfoMeta Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getLaneNum();
  inline void setLaneNum( ::uint8_t value);

  inline bool hasLaneInfos();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Builder getLaneInfos();
  inline void setLaneInfos( ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Builder initLaneInfos(unsigned int size);
  inline void adoptLaneInfos(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>> disownLaneInfos();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneInfoMeta::Pipeline {
public:
  typedef LaneInfoMeta Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkIDType::Reader {
public:
  typedef LinkIDType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTileID() const;

  inline  ::uint32_t getLinkID() const;

  inline  ::uint64_t getRawID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkIDType::Builder {
public:
  typedef LinkIDType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTileID();
  inline void setTileID( ::uint32_t value);

  inline  ::uint32_t getLinkID();
  inline void setLinkID( ::uint32_t value);

  inline  ::uint64_t getRawID();
  inline void setRawID( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkIDType::Pipeline {
public:
  typedef LinkIDType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkCurvature::Reader {
public:
  typedef LinkCurvature Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getOffset() const;

  inline  ::int32_t getCurvature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkCurvature::Builder {
public:
  typedef LinkCurvature Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getOffset();
  inline void setOffset( ::uint32_t value);

  inline  ::int32_t getCurvature();
  inline void setCurvature( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkCurvature::Pipeline {
public:
  typedef LinkCurvature Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Link::Reader {
public:
  typedef Link Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLinkID() const;
  inline  ::senseAD::msg::sdmap::LinkIDType::Reader getLinkID() const;

  inline  ::uint8_t getLaneNumSum() const;

  inline  ::uint8_t getLaneNumS2E() const;

  inline  ::uint8_t getLaneNumE2S() const;

  inline  ::uint8_t getLinkDirection() const;

  inline  ::uint8_t getSpeedLimitS2E() const;

  inline  ::uint8_t getSpeedLimitE2S() const;

  inline  ::uint8_t getSpeedClassType() const;

  inline  ::int16_t getStartAngle() const;

  inline  ::int16_t getEndAngle() const;

  inline bool hasRoadKindTypes() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getRoadKindTypes() const;

  inline bool hasGeometry() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getGeometry() const;

  inline bool hasLinkCurvatures() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Reader getLinkCurvatures() const;

  inline bool hasGuidanceInfos() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Reader getGuidanceInfos() const;

  inline bool hasNextLinkIDs() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader getNextLinkIDs() const;

  inline bool hasPreviousLinkIDs() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader getPreviousLinkIDs() const;

  inline  ::int8_t getRoadClassType() const;

  inline  ::uint8_t getConstructionType() const;

  inline float getLinkLength() const;

  inline bool hasPointSpeedLimit() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Reader getPointSpeedLimit() const;

  inline  ::uint8_t getMainActionAmap() const;

  inline  ::uint8_t getAssistantActionAmap() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Link::Builder {
public:
  typedef Link Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLinkID();
  inline  ::senseAD::msg::sdmap::LinkIDType::Builder getLinkID();
  inline void setLinkID( ::senseAD::msg::sdmap::LinkIDType::Reader value);
  inline  ::senseAD::msg::sdmap::LinkIDType::Builder initLinkID();
  inline void adoptLinkID(::capnp::Orphan< ::senseAD::msg::sdmap::LinkIDType>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::LinkIDType> disownLinkID();

  inline  ::uint8_t getLaneNumSum();
  inline void setLaneNumSum( ::uint8_t value);

  inline  ::uint8_t getLaneNumS2E();
  inline void setLaneNumS2E( ::uint8_t value);

  inline  ::uint8_t getLaneNumE2S();
  inline void setLaneNumE2S( ::uint8_t value);

  inline  ::uint8_t getLinkDirection();
  inline void setLinkDirection( ::uint8_t value);

  inline  ::uint8_t getSpeedLimitS2E();
  inline void setSpeedLimitS2E( ::uint8_t value);

  inline  ::uint8_t getSpeedLimitE2S();
  inline void setSpeedLimitE2S( ::uint8_t value);

  inline  ::uint8_t getSpeedClassType();
  inline void setSpeedClassType( ::uint8_t value);

  inline  ::int16_t getStartAngle();
  inline void setStartAngle( ::int16_t value);

  inline  ::int16_t getEndAngle();
  inline void setEndAngle( ::int16_t value);

  inline bool hasRoadKindTypes();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getRoadKindTypes();
  inline void setRoadKindTypes( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoadKindTypes(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initRoadKindTypes(unsigned int size);
  inline void adoptRoadKindTypes(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownRoadKindTypes();

  inline bool hasGeometry();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getGeometry();
  inline void setGeometry( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initGeometry(unsigned int size);
  inline void adoptGeometry(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownGeometry();

  inline bool hasLinkCurvatures();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Builder getLinkCurvatures();
  inline void setLinkCurvatures( ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Builder initLinkCurvatures(unsigned int size);
  inline void adoptLinkCurvatures(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>> disownLinkCurvatures();

  inline bool hasGuidanceInfos();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Builder getGuidanceInfos();
  inline void setGuidanceInfos( ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Builder initGuidanceInfos(unsigned int size);
  inline void adoptGuidanceInfos(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>> disownGuidanceInfos();

  inline bool hasNextLinkIDs();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder getNextLinkIDs();
  inline void setNextLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder initNextLinkIDs(unsigned int size);
  inline void adoptNextLinkIDs(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> disownNextLinkIDs();

  inline bool hasPreviousLinkIDs();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder getPreviousLinkIDs();
  inline void setPreviousLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder initPreviousLinkIDs(unsigned int size);
  inline void adoptPreviousLinkIDs(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> disownPreviousLinkIDs();

  inline  ::int8_t getRoadClassType();
  inline void setRoadClassType( ::int8_t value);

  inline  ::uint8_t getConstructionType();
  inline void setConstructionType( ::uint8_t value);

  inline float getLinkLength();
  inline void setLinkLength(float value);

  inline bool hasPointSpeedLimit();
  inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Builder getPointSpeedLimit();
  inline void setPointSpeedLimit( ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Builder initPointSpeedLimit(unsigned int size);
  inline void adoptPointSpeedLimit(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>> disownPointSpeedLimit();

  inline  ::uint8_t getMainActionAmap();
  inline void setMainActionAmap( ::uint8_t value);

  inline  ::uint8_t getAssistantActionAmap();
  inline void setAssistantActionAmap( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Link::Pipeline {
public:
  typedef Link Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::sdmap::LinkIDType::Pipeline getLinkID();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PointSpeedInfo::Reader {
public:
  typedef PointSpeedInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPointSpeedType() const;

  inline  ::uint8_t getSpeedLimit() const;

  inline bool hasPointPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPointPosition() const;

  inline  ::uint8_t getLimitDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PointSpeedInfo::Builder {
public:
  typedef PointSpeedInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getPointSpeedType();
  inline void setPointSpeedType( ::uint8_t value);

  inline  ::uint8_t getSpeedLimit();
  inline void setSpeedLimit( ::uint8_t value);

  inline bool hasPointPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPointPosition();
  inline void setPointPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPointPosition();
  inline void adoptPointPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPointPosition();

  inline  ::uint8_t getLimitDirection();
  inline void setLimitDirection( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PointSpeedInfo::Pipeline {
public:
  typedef PointSpeedInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPointPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodeIDType::Reader {
public:
  typedef NodeIDType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTileID() const;

  inline  ::uint32_t getNodeID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodeIDType::Builder {
public:
  typedef NodeIDType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTileID();
  inline void setTileID( ::uint32_t value);

  inline  ::uint32_t getNodeID();
  inline void setNodeID( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodeIDType::Pipeline {
public:
  typedef NodeIDType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkNode::Reader {
public:
  typedef LinkNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeID() const;
  inline  ::senseAD::msg::sdmap::NodeIDType::Reader getNodeID() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline  ::uint8_t getCrossFlag() const;

  inline bool getTrafficLightFlag() const;

  inline bool hasEnterLinkIDs() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader getEnterLinkIDs() const;

  inline bool hasOutLinkIDs() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader getOutLinkIDs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkNode::Builder {
public:
  typedef LinkNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeID();
  inline  ::senseAD::msg::sdmap::NodeIDType::Builder getNodeID();
  inline void setNodeID( ::senseAD::msg::sdmap::NodeIDType::Reader value);
  inline  ::senseAD::msg::sdmap::NodeIDType::Builder initNodeID();
  inline void adoptNodeID(::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType> disownNodeID();

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline  ::uint8_t getCrossFlag();
  inline void setCrossFlag( ::uint8_t value);

  inline bool getTrafficLightFlag();
  inline void setTrafficLightFlag(bool value);

  inline bool hasEnterLinkIDs();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder getEnterLinkIDs();
  inline void setEnterLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder initEnterLinkIDs(unsigned int size);
  inline void adoptEnterLinkIDs(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> disownEnterLinkIDs();

  inline bool hasOutLinkIDs();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder getOutLinkIDs();
  inline void setOutLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder initOutLinkIDs(unsigned int size);
  inline void adoptOutLinkIDs(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> disownOutLinkIDs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkNode::Pipeline {
public:
  typedef LinkNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::sdmap::NodeIDType::Pipeline getNodeID();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LocalizationInfo::Reader {
public:
  typedef LocalizationInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimeStamp() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LocalizationInfo::Builder {
public:
  typedef LocalizationInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimeStamp();
  inline void setTimeStamp( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LocalizationInfo::Pipeline {
public:
  typedef LocalizationInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SDMap::Reader {
public:
  typedef SDMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMapHeader() const;
  inline  ::senseAD::msg::std_msgs::MapHeader::Reader getMapHeader() const;

  inline bool hasLinks() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Reader getLinks() const;

  inline bool hasStartLinkNodes() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader getStartLinkNodes() const;

  inline bool hasEndLinkNodes() const;
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader getEndLinkNodes() const;

  inline bool hasNavPathInfo() const;
  inline  ::senseAD::msg::sdmap::NavPathInfo::Reader getNavPathInfo() const;

  inline bool hasLocInfo() const;
  inline  ::senseAD::msg::sdmap::LocalizationInfo::Reader getLocInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SDMap::Builder {
public:
  typedef SDMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMapHeader();
  inline  ::senseAD::msg::std_msgs::MapHeader::Builder getMapHeader();
  inline void setMapHeader( ::senseAD::msg::std_msgs::MapHeader::Reader value);
  inline  ::senseAD::msg::std_msgs::MapHeader::Builder initMapHeader();
  inline void adoptMapHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::MapHeader>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::MapHeader> disownMapHeader();

  inline bool hasLinks();
  inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Builder getLinks();
  inline void setLinks( ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Builder initLinks(unsigned int size);
  inline void adoptLinks(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>> disownLinks();

  inline bool hasStartLinkNodes();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder getStartLinkNodes();
  inline void setStartLinkNodes( ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder initStartLinkNodes(unsigned int size);
  inline void adoptStartLinkNodes(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>> disownStartLinkNodes();

  inline bool hasEndLinkNodes();
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder getEndLinkNodes();
  inline void setEndLinkNodes( ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder initEndLinkNodes(unsigned int size);
  inline void adoptEndLinkNodes(::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>> disownEndLinkNodes();

  inline bool hasNavPathInfo();
  inline  ::senseAD::msg::sdmap::NavPathInfo::Builder getNavPathInfo();
  inline void setNavPathInfo( ::senseAD::msg::sdmap::NavPathInfo::Reader value);
  inline  ::senseAD::msg::sdmap::NavPathInfo::Builder initNavPathInfo();
  inline void adoptNavPathInfo(::capnp::Orphan< ::senseAD::msg::sdmap::NavPathInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::NavPathInfo> disownNavPathInfo();

  inline bool hasLocInfo();
  inline  ::senseAD::msg::sdmap::LocalizationInfo::Builder getLocInfo();
  inline void setLocInfo( ::senseAD::msg::sdmap::LocalizationInfo::Reader value);
  inline  ::senseAD::msg::sdmap::LocalizationInfo::Builder initLocInfo();
  inline void adoptLocInfo(::capnp::Orphan< ::senseAD::msg::sdmap::LocalizationInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::LocalizationInfo> disownLocInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SDMap::Pipeline {
public:
  typedef SDMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::MapHeader::Pipeline getMapHeader();
  inline  ::senseAD::msg::sdmap::NavPathInfo::Pipeline getNavPathInfo();
  inline  ::senseAD::msg::sdmap::LocalizationInfo::Pipeline getLocInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavPathInfo::Reader {
public:
  typedef NavPathInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLinkRawIDs() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLinkRawIDs() const;

  inline bool hasCoordinates() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getCoordinates() const;

  inline bool hasDrivingDirections() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getDrivingDirections() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavPathInfo::Builder {
public:
  typedef NavPathInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLinkRawIDs();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLinkRawIDs();
  inline void setLinkRawIDs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLinkRawIDs(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLinkRawIDs(unsigned int size);
  inline void adoptLinkRawIDs(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLinkRawIDs();

  inline bool hasCoordinates();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getCoordinates();
  inline void setCoordinates( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initCoordinates(unsigned int size);
  inline void adoptCoordinates(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownCoordinates();

  inline bool hasDrivingDirections();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getDrivingDirections();
  inline void setDrivingDirections( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDrivingDirections(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initDrivingDirections(unsigned int size);
  inline void adoptDrivingDirections(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownDrivingDirections();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavPathInfo::Pipeline {
public:
  typedef NavPathInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool LaneTrafficInfo::Reader::getIsBus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LaneTrafficInfo::Builder::getIsBus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneTrafficInfo::Builder::setIsBus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LaneTrafficInfo::Reader::getLaneType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LaneTrafficInfo::Builder::getLaneType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneTrafficInfo::Builder::setLaneType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LaneTrafficInfo::Reader::getArrow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LaneTrafficInfo::Builder::getArrow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneTrafficInfo::Builder::setArrow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneInfoMeta::Reader::getLaneNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneInfoMeta::Builder::getLaneNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneInfoMeta::Builder::setLaneNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LaneInfoMeta::Reader::hasLaneInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneInfoMeta::Builder::hasLaneInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Reader LaneInfoMeta::Reader::getLaneInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Builder LaneInfoMeta::Builder::getLaneInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneInfoMeta::Builder::setLaneInfos( ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>::Builder LaneInfoMeta::Builder::initLaneInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LaneInfoMeta::Builder::adoptLaneInfos(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>> LaneInfoMeta::Builder::disownLaneInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneTrafficInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t LinkIDType::Reader::getTileID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LinkIDType::Builder::getTileID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkIDType::Builder::setTileID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LinkIDType::Reader::getLinkID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LinkIDType::Builder::getLinkID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkIDType::Builder::setLinkID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LinkIDType::Reader::getRawID() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LinkIDType::Builder::getRawID() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkIDType::Builder::setRawID( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LinkCurvature::Reader::getOffset() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LinkCurvature::Builder::getOffset() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkCurvature::Builder::setOffset( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LinkCurvature::Reader::getCurvature() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LinkCurvature::Builder::getCurvature() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkCurvature::Builder::setCurvature( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::hasLinkID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasLinkID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::LinkIDType::Reader Link::Reader::getLinkID() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::LinkIDType::Builder Link::Builder::getLinkID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::LinkIDType::Pipeline Link::Pipeline::getLinkID() {
  return  ::senseAD::msg::sdmap::LinkIDType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Link::Builder::setLinkID( ::senseAD::msg::sdmap::LinkIDType::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::LinkIDType::Builder Link::Builder::initLinkID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Link::Builder::adoptLinkID(
    ::capnp::Orphan< ::senseAD::msg::sdmap::LinkIDType>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::LinkIDType> Link::Builder::disownLinkID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LinkIDType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t Link::Reader::getLaneNumSum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLaneNumSum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLaneNumSum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getLaneNumS2E() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLaneNumS2E() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLaneNumS2E( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getLaneNumE2S() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLaneNumE2S() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLaneNumE2S( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getLinkDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLinkDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLinkDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getSpeedLimitS2E() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getSpeedLimitS2E() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setSpeedLimitS2E( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getSpeedLimitE2S() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getSpeedLimitE2S() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setSpeedLimitE2S( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getSpeedClassType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getSpeedClassType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setSpeedClassType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Link::Reader::getStartAngle() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Link::Builder::getStartAngle() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setStartAngle( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Link::Reader::getEndAngle() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Link::Builder::getEndAngle() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setEndAngle( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::hasRoadKindTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasRoadKindTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader Link::Reader::getRoadKindTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Link::Builder::getRoadKindTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Link::Builder::setRoadKindTypes( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Link::Builder::setRoadKindTypes(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Link::Builder::initRoadKindTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptRoadKindTypes(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> Link::Builder::disownRoadKindTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Link::Reader::hasGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getGeometry() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Link::Builder::setGeometry( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initGeometry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptGeometry(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> Link::Builder::disownGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Link::Reader::hasLinkCurvatures() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasLinkCurvatures() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getLinkCurvatures() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getLinkCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Link::Builder::setLinkCurvatures( ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initLinkCurvatures(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptLinkCurvatures(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>> Link::Builder::disownLinkCurvatures() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkCurvature,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Link::Reader::hasGuidanceInfos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasGuidanceInfos() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getGuidanceInfos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getGuidanceInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Link::Builder::setGuidanceInfos( ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initGuidanceInfos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptGuidanceInfos(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>> Link::Builder::disownGuidanceInfos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LaneInfoMeta,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Link::Reader::hasNextLinkIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasNextLinkIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getNextLinkIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getNextLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Link::Builder::setNextLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initNextLinkIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptNextLinkIDs(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> Link::Builder::disownNextLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Link::Reader::hasPreviousLinkIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasPreviousLinkIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getPreviousLinkIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getPreviousLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Link::Builder::setPreviousLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initPreviousLinkIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptPreviousLinkIDs(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> Link::Builder::disownPreviousLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::int8_t Link::Reader::getRoadClassType() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Link::Builder::getRoadClassType() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setRoadClassType( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getConstructionType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getConstructionType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setConstructionType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Link::Reader::getLinkLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Link::Builder::getLinkLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLinkLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::hasPointSpeedLimit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasPointSpeedLimit() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getPointSpeedLimit() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getPointSpeedLimit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Link::Builder::setPointSpeedLimit( ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initPointSpeedLimit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptPointSpeedLimit(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>> Link::Builder::disownPointSpeedLimit() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::PointSpeedInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint8_t Link::Reader::getMainActionAmap() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getMainActionAmap() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setMainActionAmap( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getAssistantActionAmap() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getAssistantActionAmap() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setAssistantActionAmap( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointSpeedInfo::Reader::getPointSpeedType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointSpeedInfo::Builder::getPointSpeedType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PointSpeedInfo::Builder::setPointSpeedType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PointSpeedInfo::Reader::getSpeedLimit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointSpeedInfo::Builder::getSpeedLimit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PointSpeedInfo::Builder::setSpeedLimit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PointSpeedInfo::Reader::hasPointPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PointSpeedInfo::Builder::hasPointPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader PointSpeedInfo::Reader::getPointPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder PointSpeedInfo::Builder::getPointPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline PointSpeedInfo::Pipeline::getPointPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PointSpeedInfo::Builder::setPointPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder PointSpeedInfo::Builder::initPointPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PointSpeedInfo::Builder::adoptPointPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> PointSpeedInfo::Builder::disownPointPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t PointSpeedInfo::Reader::getLimitDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PointSpeedInfo::Builder::getLimitDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PointSpeedInfo::Builder::setLimitDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NodeIDType::Reader::getTileID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t NodeIDType::Builder::getTileID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NodeIDType::Builder::setTileID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t NodeIDType::Reader::getNodeID() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t NodeIDType::Builder::getNodeID() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NodeIDType::Builder::setNodeID( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LinkNode::Reader::hasNodeID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkNode::Builder::hasNodeID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::NodeIDType::Reader LinkNode::Reader::getNodeID() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::NodeIDType::Builder LinkNode::Builder::getNodeID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::NodeIDType::Pipeline LinkNode::Pipeline::getNodeID() {
  return  ::senseAD::msg::sdmap::NodeIDType::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LinkNode::Builder::setNodeID( ::senseAD::msg::sdmap::NodeIDType::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::NodeIDType::Builder LinkNode::Builder::initNodeID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkNode::Builder::adoptNodeID(
    ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType> LinkNode::Builder::disownNodeID() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LinkNode::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LinkNode::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LinkNode::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LinkNode::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LinkNode::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LinkNode::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LinkNode::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LinkNode::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LinkNode::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t LinkNode::Reader::getCrossFlag() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LinkNode::Builder::getCrossFlag() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkNode::Builder::setCrossFlag( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LinkNode::Reader::getTrafficLightFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool LinkNode::Builder::getTrafficLightFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LinkNode::Builder::setTrafficLightFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LinkNode::Reader::hasEnterLinkIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LinkNode::Builder::hasEnterLinkIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader LinkNode::Reader::getEnterLinkIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder LinkNode::Builder::getEnterLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LinkNode::Builder::setEnterLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder LinkNode::Builder::initEnterLinkIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LinkNode::Builder::adoptEnterLinkIDs(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> LinkNode::Builder::disownEnterLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LinkNode::Reader::hasOutLinkIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LinkNode::Builder::hasOutLinkIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader LinkNode::Reader::getOutLinkIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder LinkNode::Builder::getOutLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LinkNode::Builder::setOutLinkIDs( ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>::Builder LinkNode::Builder::initOutLinkIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LinkNode::Builder::adoptOutLinkIDs(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>> LinkNode::Builder::disownOutLinkIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkIDType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t LocalizationInfo::Reader::getTimeStamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LocalizationInfo::Builder::getTimeStamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LocalizationInfo::Builder::setTimeStamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LocalizationInfo::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LocalizationInfo::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LocalizationInfo::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LocalizationInfo::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LocalizationInfo::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LocalizationInfo::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LocalizationInfo::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LocalizationInfo::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LocalizationInfo::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasMapHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasMapHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::MapHeader::Reader SDMap::Reader::getMapHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::MapHeader::Builder SDMap::Builder::getMapHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::MapHeader::Pipeline SDMap::Pipeline::getMapHeader() {
  return  ::senseAD::msg::std_msgs::MapHeader::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SDMap::Builder::setMapHeader( ::senseAD::msg::std_msgs::MapHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::MapHeader::Builder SDMap::Builder::initMapHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::adoptMapHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::MapHeader>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::MapHeader> SDMap::Builder::disownMapHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::MapHeader>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasLinks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasLinks() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Reader SDMap::Reader::getLinks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::getLinks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::setLinks( ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::initLinks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SDMap::Builder::adoptLinks(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>> SDMap::Builder::disownLinks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::Link,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasStartLinkNodes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasStartLinkNodes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader SDMap::Reader::getStartLinkNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::getStartLinkNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::setStartLinkNodes( ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::initStartLinkNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SDMap::Builder::adoptStartLinkNodes(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>> SDMap::Builder::disownStartLinkNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasEndLinkNodes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasEndLinkNodes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader SDMap::Reader::getEndLinkNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::getEndLinkNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::setEndLinkNodes( ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>::Builder SDMap::Builder::initEndLinkNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SDMap::Builder::adoptEndLinkNodes(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>> SDMap::Builder::disownEndLinkNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::sdmap::LinkNode,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasNavPathInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasNavPathInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::NavPathInfo::Reader SDMap::Reader::getNavPathInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::NavPathInfo::Builder SDMap::Builder::getNavPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::NavPathInfo::Pipeline SDMap::Pipeline::getNavPathInfo() {
  return  ::senseAD::msg::sdmap::NavPathInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SDMap::Builder::setNavPathInfo( ::senseAD::msg::sdmap::NavPathInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::NavPathInfo::Builder SDMap::Builder::initNavPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::adoptNavPathInfo(
    ::capnp::Orphan< ::senseAD::msg::sdmap::NavPathInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::NavPathInfo> SDMap::Builder::disownNavPathInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NavPathInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SDMap::Reader::hasLocInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SDMap::Builder::hasLocInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::LocalizationInfo::Reader SDMap::Reader::getLocInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::LocalizationInfo::Builder SDMap::Builder::getLocInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::LocalizationInfo::Pipeline SDMap::Pipeline::getLocInfo() {
  return  ::senseAD::msg::sdmap::LocalizationInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void SDMap::Builder::setLocInfo( ::senseAD::msg::sdmap::LocalizationInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::LocalizationInfo::Builder SDMap::Builder::initLocInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SDMap::Builder::adoptLocInfo(
    ::capnp::Orphan< ::senseAD::msg::sdmap::LocalizationInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::LocalizationInfo> SDMap::Builder::disownLocInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::LocalizationInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool NavPathInfo::Reader::hasLinkRawIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavPathInfo::Builder::hasLinkRawIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader NavPathInfo::Reader::getLinkRawIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder NavPathInfo::Builder::getLinkRawIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavPathInfo::Builder::setLinkRawIDs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void NavPathInfo::Builder::setLinkRawIDs(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder NavPathInfo::Builder::initLinkRawIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NavPathInfo::Builder::adoptLinkRawIDs(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> NavPathInfo::Builder::disownLinkRawIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavPathInfo::Reader::hasCoordinates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavPathInfo::Builder::hasCoordinates() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader NavPathInfo::Reader::getCoordinates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder NavPathInfo::Builder::getCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavPathInfo::Builder::setCoordinates( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder NavPathInfo::Builder::initCoordinates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavPathInfo::Builder::adoptCoordinates(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> NavPathInfo::Builder::disownCoordinates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavPathInfo::Reader::hasDrivingDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavPathInfo::Builder::hasDrivingDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader NavPathInfo::Reader::getDrivingDirections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder NavPathInfo::Builder::getDrivingDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavPathInfo::Builder::setDrivingDirections( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void NavPathInfo::Builder::setDrivingDirections(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder NavPathInfo::Builder::initDrivingDirections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavPathInfo::Builder::adoptDrivingDirections(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> NavPathInfo::Builder::disownDrivingDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

