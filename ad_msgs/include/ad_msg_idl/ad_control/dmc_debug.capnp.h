// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: dmc_debug.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e7c26b3a2fa8de65);
CAPNP_DECLARE_SCHEMA(f286c17bf89e461f);
CAPNP_DECLARE_SCHEMA(a1af4f7c11051758);
CAPNP_DECLARE_SCHEMA(e758368777571f5b);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace control {

struct DMCInput {
  DMCInput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7c26b3a2fa8de65, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DMCDebug {
  DMCDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f286c17bf89e461f, 41, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DMCOutput {
  DMCOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1af4f7c11051758, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DMCInfo {
  DMCInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e758368777571f5b, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DMCInput::Reader {
public:
  typedef DMCInput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getFCrvCtrlCntr() const;

  inline float getFHeadingCtrlCntr() const;

  inline float getFPosY0CtrlCntr() const;

  inline  ::uint8_t getLdpscDgrSideSt() const;

  inline  ::uint8_t getLdpscSysOutSt() const;

  inline  ::uint8_t getUiLatCtrlModeNu() const;

  inline float getCdcCtrlErrDistY() const;

  inline float getCdcCtrlErrHeading() const;

  inline float getTjatctDeltaFCmd() const;

  inline bool getLgcEnableCtrlNu() const;

  inline float getFTrajTgtCurve1pm() const;

  inline float getAdasLonAccCmd() const;

  inline bool getAdasLonAccEnableflag() const;

  inline float getNopLonAccCmd() const;

  inline float getNopDeltaFCmd() const;

  inline bool getNopLonAccEnableFlag() const;

  inline bool getNopDeltaFEnableFlag() const;

  inline float getEngTRQNm() const;

  inline float getVehicleVelXMps() const;

  inline float getVehAccelMps2() const;

  inline float getVehAccelCommandMps2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DMCInput::Builder {
public:
  typedef DMCInput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFCrvCtrlCntr();
  inline void setFCrvCtrlCntr(float value);

  inline float getFHeadingCtrlCntr();
  inline void setFHeadingCtrlCntr(float value);

  inline float getFPosY0CtrlCntr();
  inline void setFPosY0CtrlCntr(float value);

  inline  ::uint8_t getLdpscDgrSideSt();
  inline void setLdpscDgrSideSt( ::uint8_t value);

  inline  ::uint8_t getLdpscSysOutSt();
  inline void setLdpscSysOutSt( ::uint8_t value);

  inline  ::uint8_t getUiLatCtrlModeNu();
  inline void setUiLatCtrlModeNu( ::uint8_t value);

  inline float getCdcCtrlErrDistY();
  inline void setCdcCtrlErrDistY(float value);

  inline float getCdcCtrlErrHeading();
  inline void setCdcCtrlErrHeading(float value);

  inline float getTjatctDeltaFCmd();
  inline void setTjatctDeltaFCmd(float value);

  inline bool getLgcEnableCtrlNu();
  inline void setLgcEnableCtrlNu(bool value);

  inline float getFTrajTgtCurve1pm();
  inline void setFTrajTgtCurve1pm(float value);

  inline float getAdasLonAccCmd();
  inline void setAdasLonAccCmd(float value);

  inline bool getAdasLonAccEnableflag();
  inline void setAdasLonAccEnableflag(bool value);

  inline float getNopLonAccCmd();
  inline void setNopLonAccCmd(float value);

  inline float getNopDeltaFCmd();
  inline void setNopDeltaFCmd(float value);

  inline bool getNopLonAccEnableFlag();
  inline void setNopLonAccEnableFlag(bool value);

  inline bool getNopDeltaFEnableFlag();
  inline void setNopDeltaFEnableFlag(bool value);

  inline float getEngTRQNm();
  inline void setEngTRQNm(float value);

  inline float getVehicleVelXMps();
  inline void setVehicleVelXMps(float value);

  inline float getVehAccelMps2();
  inline void setVehAccelMps2(float value);

  inline float getVehAccelCommandMps2();
  inline void setVehAccelCommandMps2(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DMCInput::Pipeline {
public:
  typedef DMCInput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DMCDebug::Reader {
public:
  typedef DMCDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAdpDycCorrFactor() const;

  inline float getCamLateralErrorSign() const;

  inline float getDycFilterKappaCommand() const;

  inline float getDycSteerAngleFeedforward() const;

  inline float getHecYawRateFilter() const;

  inline bool getInitialisationFlag() const;

  inline float getLatKappaLinzFilterOutput() const;

  inline float getLatOcIntegratorOutput() const;

  inline float getLatSatDynamicThresholdInt() const;

  inline float getLateralErrorDelta() const;

  inline float getLateralErrorMean() const;

  inline float getMeanSampleUpdateSum() const;

  inline float getMeanVehicleVelocity() const;

  inline float getMeanVehicleVelocitySum() const;

  inline float getMeanKappaCommand() const;

  inline float getMeanKappaCommandSum() const;

  inline bool getNewUpdateAval() const;

  inline float getNewUpdateAvalSum() const;

  inline float getSacAngleCommandCorr() const;

  inline float getSacAngleCommandYawrateFback() const;

  inline float getSacArbitratedAngleCmd() const;

  inline float getSacArbitratedAngleCmdRaw() const;

  inline float getSacCompensationAngleCommand() const;

  inline float getSacControlError() const;

  inline float getSacDeratedAngleCommand() const;

  inline float getSacIntegratorSatOut() const;

  inline float getSacRateLimAngleCommand() const;

  inline float getSacTrqDeratingFactor() const;

  inline float getSacYrcAngleCommand() const;

  inline float getSacYrcControlError() const;

  inline float getSatReqDynSteerAngleMax() const;

  inline float getSatReqSteerAngleMax() const;

  inline float getSatSaturatedAngleCommand() const;

  inline float getTdfCompositeDeratingFactor() const;

  inline float getTdfIdleDeratingFactor() const;

  inline float getTdfSelectedStateDeratingFactor() const;

  inline float getVehDeltaFOc() const;

  inline float getVehDeltaFOffset() const;

  inline bool getTdfDriverCounterSteering() const;

  inline float getTdfMaxSteerTorque() const;

  inline float getTdfSelectedTorqueSource() const;

  inline float getTdfTorqueDerFactorHFPath() const;

  inline float getTdfTorqueDeratingFactor() const;

  inline float getTdfTorqueDeratingSlopArb() const;

  inline float getTdfTrqDeratingThresholdArb() const;

  inline float getTdfVehicleSteerTorqueFactor() const;

  inline float getTdfTorqueRequestFactor() const;

  inline float getVehSteerTorqueComp() const;

  inline float getLatOcStatePreload() const;

  inline bool getLatOcCalHoldFlag() const;

  inline bool getLatOcCalHoldFlagShrt() const;

  inline bool getLatOcDisableFlag() const;

  inline bool getLatOcDysActive() const;

  inline float getLatOcFilteredKappaCam() const;

  inline bool getLatOcHighDriverTorque() const;

  inline bool getLatOcImplausLateralError() const;

  inline float getLatOcIntegratorInput() const;

  inline float getLatOcIntegratorInputKappa() const;

  inline float getLatOcIntegratorInputKappaDbg() const;

  inline float getLatOcIntegratorSatOut() const;

  inline bool getLatOcKappaActive() const;

  inline bool getLatOcKappaConEnbFlag() const;

  inline float getLatOcKappaLatencyState() const;

  inline float getLatOcKappaStatusDbg() const;

  inline bool getLatOcMaxDeltaFDotFlag() const;

  inline bool getLatOcMaxDrvTrqFlag() const;

  inline bool getLatOcMaxHeaErrFlag() const;

  inline bool getLatOcMaxKappaCmdFlag() const;

  inline bool getLatOcMaxLatAccFlag() const;

  inline float getLatOcSatIntegratorState() const;

  inline bool getLatOcTriggerFlagKappa() const;

  inline float getLatOcTriggerFlagKappaState() const;

  inline float getLatOcOffsetFilterOmega() const;

  inline bool getLatOcMinVehVelFlag() const;

  inline bool getLatOcMaxFltKappaCmdFlag() const;

  inline float getLatArbEpsTorqueRequest() const;

  inline float getLatDirectFeedthroughTrqPar() const;

  inline float getLatEpsTorqueRequestInterface() const;

  inline float getLatEpsTorqueRequestOutputLimted() const;

  inline float getLatTorqueGradientPar() const;

  inline float getLatTorqueRequestNoFric() const;

  inline float getRateLimiterOutput() const;

  inline float getSacActiveDampingTorque() const;

  inline float getSacControlErrorDMC2() const;

  inline float getSacDeltaFDotFiltered() const;

  inline bool getSacDisable() const;

  inline float getSacDynamicFeedforwardTorque() const;

  inline float getSacFilteredAngleCommand() const;

  inline float getSacIntegratorTorque() const;

  inline float getSacProportionalTorque() const;

  inline float getSacTorqueSatOut() const;

  inline float getSatSaturatedAngleCommandDMC2() const;

  inline float getEngTrqArw() const;

  inline float getEngTrqReqFF() const;

  inline float getEngTrqReqInteg() const;

  inline float getEngTrqReqProp() const;

  inline float getUintDelayTRQRate() const;

  inline float getUintDelayTRQRateFilter() const;

  inline float getUnitDelayTRQARWFitler() const;

  inline float getUnitDelayTRQIntergral() const;

  inline float getUnitDelayTorqueReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DMCDebug::Builder {
public:
  typedef DMCDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAdpDycCorrFactor();
  inline void setAdpDycCorrFactor(float value);

  inline float getCamLateralErrorSign();
  inline void setCamLateralErrorSign(float value);

  inline float getDycFilterKappaCommand();
  inline void setDycFilterKappaCommand(float value);

  inline float getDycSteerAngleFeedforward();
  inline void setDycSteerAngleFeedforward(float value);

  inline float getHecYawRateFilter();
  inline void setHecYawRateFilter(float value);

  inline bool getInitialisationFlag();
  inline void setInitialisationFlag(bool value);

  inline float getLatKappaLinzFilterOutput();
  inline void setLatKappaLinzFilterOutput(float value);

  inline float getLatOcIntegratorOutput();
  inline void setLatOcIntegratorOutput(float value);

  inline float getLatSatDynamicThresholdInt();
  inline void setLatSatDynamicThresholdInt(float value);

  inline float getLateralErrorDelta();
  inline void setLateralErrorDelta(float value);

  inline float getLateralErrorMean();
  inline void setLateralErrorMean(float value);

  inline float getMeanSampleUpdateSum();
  inline void setMeanSampleUpdateSum(float value);

  inline float getMeanVehicleVelocity();
  inline void setMeanVehicleVelocity(float value);

  inline float getMeanVehicleVelocitySum();
  inline void setMeanVehicleVelocitySum(float value);

  inline float getMeanKappaCommand();
  inline void setMeanKappaCommand(float value);

  inline float getMeanKappaCommandSum();
  inline void setMeanKappaCommandSum(float value);

  inline bool getNewUpdateAval();
  inline void setNewUpdateAval(bool value);

  inline float getNewUpdateAvalSum();
  inline void setNewUpdateAvalSum(float value);

  inline float getSacAngleCommandCorr();
  inline void setSacAngleCommandCorr(float value);

  inline float getSacAngleCommandYawrateFback();
  inline void setSacAngleCommandYawrateFback(float value);

  inline float getSacArbitratedAngleCmd();
  inline void setSacArbitratedAngleCmd(float value);

  inline float getSacArbitratedAngleCmdRaw();
  inline void setSacArbitratedAngleCmdRaw(float value);

  inline float getSacCompensationAngleCommand();
  inline void setSacCompensationAngleCommand(float value);

  inline float getSacControlError();
  inline void setSacControlError(float value);

  inline float getSacDeratedAngleCommand();
  inline void setSacDeratedAngleCommand(float value);

  inline float getSacIntegratorSatOut();
  inline void setSacIntegratorSatOut(float value);

  inline float getSacRateLimAngleCommand();
  inline void setSacRateLimAngleCommand(float value);

  inline float getSacTrqDeratingFactor();
  inline void setSacTrqDeratingFactor(float value);

  inline float getSacYrcAngleCommand();
  inline void setSacYrcAngleCommand(float value);

  inline float getSacYrcControlError();
  inline void setSacYrcControlError(float value);

  inline float getSatReqDynSteerAngleMax();
  inline void setSatReqDynSteerAngleMax(float value);

  inline float getSatReqSteerAngleMax();
  inline void setSatReqSteerAngleMax(float value);

  inline float getSatSaturatedAngleCommand();
  inline void setSatSaturatedAngleCommand(float value);

  inline float getTdfCompositeDeratingFactor();
  inline void setTdfCompositeDeratingFactor(float value);

  inline float getTdfIdleDeratingFactor();
  inline void setTdfIdleDeratingFactor(float value);

  inline float getTdfSelectedStateDeratingFactor();
  inline void setTdfSelectedStateDeratingFactor(float value);

  inline float getVehDeltaFOc();
  inline void setVehDeltaFOc(float value);

  inline float getVehDeltaFOffset();
  inline void setVehDeltaFOffset(float value);

  inline bool getTdfDriverCounterSteering();
  inline void setTdfDriverCounterSteering(bool value);

  inline float getTdfMaxSteerTorque();
  inline void setTdfMaxSteerTorque(float value);

  inline float getTdfSelectedTorqueSource();
  inline void setTdfSelectedTorqueSource(float value);

  inline float getTdfTorqueDerFactorHFPath();
  inline void setTdfTorqueDerFactorHFPath(float value);

  inline float getTdfTorqueDeratingFactor();
  inline void setTdfTorqueDeratingFactor(float value);

  inline float getTdfTorqueDeratingSlopArb();
  inline void setTdfTorqueDeratingSlopArb(float value);

  inline float getTdfTrqDeratingThresholdArb();
  inline void setTdfTrqDeratingThresholdArb(float value);

  inline float getTdfVehicleSteerTorqueFactor();
  inline void setTdfVehicleSteerTorqueFactor(float value);

  inline float getTdfTorqueRequestFactor();
  inline void setTdfTorqueRequestFactor(float value);

  inline float getVehSteerTorqueComp();
  inline void setVehSteerTorqueComp(float value);

  inline float getLatOcStatePreload();
  inline void setLatOcStatePreload(float value);

  inline bool getLatOcCalHoldFlag();
  inline void setLatOcCalHoldFlag(bool value);

  inline bool getLatOcCalHoldFlagShrt();
  inline void setLatOcCalHoldFlagShrt(bool value);

  inline bool getLatOcDisableFlag();
  inline void setLatOcDisableFlag(bool value);

  inline bool getLatOcDysActive();
  inline void setLatOcDysActive(bool value);

  inline float getLatOcFilteredKappaCam();
  inline void setLatOcFilteredKappaCam(float value);

  inline bool getLatOcHighDriverTorque();
  inline void setLatOcHighDriverTorque(bool value);

  inline bool getLatOcImplausLateralError();
  inline void setLatOcImplausLateralError(bool value);

  inline float getLatOcIntegratorInput();
  inline void setLatOcIntegratorInput(float value);

  inline float getLatOcIntegratorInputKappa();
  inline void setLatOcIntegratorInputKappa(float value);

  inline float getLatOcIntegratorInputKappaDbg();
  inline void setLatOcIntegratorInputKappaDbg(float value);

  inline float getLatOcIntegratorSatOut();
  inline void setLatOcIntegratorSatOut(float value);

  inline bool getLatOcKappaActive();
  inline void setLatOcKappaActive(bool value);

  inline bool getLatOcKappaConEnbFlag();
  inline void setLatOcKappaConEnbFlag(bool value);

  inline float getLatOcKappaLatencyState();
  inline void setLatOcKappaLatencyState(float value);

  inline float getLatOcKappaStatusDbg();
  inline void setLatOcKappaStatusDbg(float value);

  inline bool getLatOcMaxDeltaFDotFlag();
  inline void setLatOcMaxDeltaFDotFlag(bool value);

  inline bool getLatOcMaxDrvTrqFlag();
  inline void setLatOcMaxDrvTrqFlag(bool value);

  inline bool getLatOcMaxHeaErrFlag();
  inline void setLatOcMaxHeaErrFlag(bool value);

  inline bool getLatOcMaxKappaCmdFlag();
  inline void setLatOcMaxKappaCmdFlag(bool value);

  inline bool getLatOcMaxLatAccFlag();
  inline void setLatOcMaxLatAccFlag(bool value);

  inline float getLatOcSatIntegratorState();
  inline void setLatOcSatIntegratorState(float value);

  inline bool getLatOcTriggerFlagKappa();
  inline void setLatOcTriggerFlagKappa(bool value);

  inline float getLatOcTriggerFlagKappaState();
  inline void setLatOcTriggerFlagKappaState(float value);

  inline float getLatOcOffsetFilterOmega();
  inline void setLatOcOffsetFilterOmega(float value);

  inline bool getLatOcMinVehVelFlag();
  inline void setLatOcMinVehVelFlag(bool value);

  inline bool getLatOcMaxFltKappaCmdFlag();
  inline void setLatOcMaxFltKappaCmdFlag(bool value);

  inline float getLatArbEpsTorqueRequest();
  inline void setLatArbEpsTorqueRequest(float value);

  inline float getLatDirectFeedthroughTrqPar();
  inline void setLatDirectFeedthroughTrqPar(float value);

  inline float getLatEpsTorqueRequestInterface();
  inline void setLatEpsTorqueRequestInterface(float value);

  inline float getLatEpsTorqueRequestOutputLimted();
  inline void setLatEpsTorqueRequestOutputLimted(float value);

  inline float getLatTorqueGradientPar();
  inline void setLatTorqueGradientPar(float value);

  inline float getLatTorqueRequestNoFric();
  inline void setLatTorqueRequestNoFric(float value);

  inline float getRateLimiterOutput();
  inline void setRateLimiterOutput(float value);

  inline float getSacActiveDampingTorque();
  inline void setSacActiveDampingTorque(float value);

  inline float getSacControlErrorDMC2();
  inline void setSacControlErrorDMC2(float value);

  inline float getSacDeltaFDotFiltered();
  inline void setSacDeltaFDotFiltered(float value);

  inline bool getSacDisable();
  inline void setSacDisable(bool value);

  inline float getSacDynamicFeedforwardTorque();
  inline void setSacDynamicFeedforwardTorque(float value);

  inline float getSacFilteredAngleCommand();
  inline void setSacFilteredAngleCommand(float value);

  inline float getSacIntegratorTorque();
  inline void setSacIntegratorTorque(float value);

  inline float getSacProportionalTorque();
  inline void setSacProportionalTorque(float value);

  inline float getSacTorqueSatOut();
  inline void setSacTorqueSatOut(float value);

  inline float getSatSaturatedAngleCommandDMC2();
  inline void setSatSaturatedAngleCommandDMC2(float value);

  inline float getEngTrqArw();
  inline void setEngTrqArw(float value);

  inline float getEngTrqReqFF();
  inline void setEngTrqReqFF(float value);

  inline float getEngTrqReqInteg();
  inline void setEngTrqReqInteg(float value);

  inline float getEngTrqReqProp();
  inline void setEngTrqReqProp(float value);

  inline float getUintDelayTRQRate();
  inline void setUintDelayTRQRate(float value);

  inline float getUintDelayTRQRateFilter();
  inline void setUintDelayTRQRateFilter(float value);

  inline float getUnitDelayTRQARWFitler();
  inline void setUnitDelayTRQARWFitler(float value);

  inline float getUnitDelayTRQIntergral();
  inline void setUnitDelayTRQIntergral(float value);

  inline float getUnitDelayTorqueReq();
  inline void setUnitDelayTorqueReq(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DMCDebug::Pipeline {
public:
  typedef DMCDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DMCOutput::Reader {
public:
  typedef DMCOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getFSteerAngleDeg() const;

  inline float getFSteerWhlAngleDeg() const;

  inline float getFLonAccCmd() const;

  inline  ::uint8_t getUiEPSRequestNu() const;

  inline  ::uint8_t getUiLonAccRequestNu() const;

  inline float getFSteerWhlTqAddNm() const;

  inline float getFDampingLevelRmpNu() const;

  inline bool getBDMCValidStatus() const;

  inline float getFTorqueReqNm() const;

  inline float getFDecelReqMps2() const;

  inline bool getBBrakeActiveNu() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DMCOutput::Builder {
public:
  typedef DMCOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getFSteerAngleDeg();
  inline void setFSteerAngleDeg(float value);

  inline float getFSteerWhlAngleDeg();
  inline void setFSteerWhlAngleDeg(float value);

  inline float getFLonAccCmd();
  inline void setFLonAccCmd(float value);

  inline  ::uint8_t getUiEPSRequestNu();
  inline void setUiEPSRequestNu( ::uint8_t value);

  inline  ::uint8_t getUiLonAccRequestNu();
  inline void setUiLonAccRequestNu( ::uint8_t value);

  inline float getFSteerWhlTqAddNm();
  inline void setFSteerWhlTqAddNm(float value);

  inline float getFDampingLevelRmpNu();
  inline void setFDampingLevelRmpNu(float value);

  inline bool getBDMCValidStatus();
  inline void setBDMCValidStatus(bool value);

  inline float getFTorqueReqNm();
  inline void setFTorqueReqNm(float value);

  inline float getFDecelReqMps2();
  inline void setFDecelReqMps2(float value);

  inline bool getBBrakeActiveNu();
  inline void setBBrakeActiveNu(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DMCOutput::Pipeline {
public:
  typedef DMCOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DMCInfo::Reader {
public:
  typedef DMCInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasSDMCInput() const;
  inline  ::senseAD::msg::control::DMCInput::Reader getSDMCInput() const;

  inline bool hasSDMCDebug() const;
  inline  ::senseAD::msg::control::DMCDebug::Reader getSDMCDebug() const;

  inline bool hasSDMCOutput() const;
  inline  ::senseAD::msg::control::DMCOutput::Reader getSDMCOutput() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DMCInfo::Builder {
public:
  typedef DMCInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasSDMCInput();
  inline  ::senseAD::msg::control::DMCInput::Builder getSDMCInput();
  inline void setSDMCInput( ::senseAD::msg::control::DMCInput::Reader value);
  inline  ::senseAD::msg::control::DMCInput::Builder initSDMCInput();
  inline void adoptSDMCInput(::capnp::Orphan< ::senseAD::msg::control::DMCInput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::control::DMCInput> disownSDMCInput();

  inline bool hasSDMCDebug();
  inline  ::senseAD::msg::control::DMCDebug::Builder getSDMCDebug();
  inline void setSDMCDebug( ::senseAD::msg::control::DMCDebug::Reader value);
  inline  ::senseAD::msg::control::DMCDebug::Builder initSDMCDebug();
  inline void adoptSDMCDebug(::capnp::Orphan< ::senseAD::msg::control::DMCDebug>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::control::DMCDebug> disownSDMCDebug();

  inline bool hasSDMCOutput();
  inline  ::senseAD::msg::control::DMCOutput::Builder getSDMCOutput();
  inline void setSDMCOutput( ::senseAD::msg::control::DMCOutput::Reader value);
  inline  ::senseAD::msg::control::DMCOutput::Builder initSDMCOutput();
  inline void adoptSDMCOutput(::capnp::Orphan< ::senseAD::msg::control::DMCOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::control::DMCOutput> disownSDMCOutput();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DMCInfo::Pipeline {
public:
  typedef DMCInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::control::DMCInput::Pipeline getSDMCInput();
  inline  ::senseAD::msg::control::DMCDebug::Pipeline getSDMCDebug();
  inline  ::senseAD::msg::control::DMCOutput::Pipeline getSDMCOutput();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float DMCInput::Reader::getFCrvCtrlCntr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getFCrvCtrlCntr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setFCrvCtrlCntr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getFHeadingCtrlCntr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getFHeadingCtrlCntr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setFHeadingCtrlCntr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getFPosY0CtrlCntr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getFPosY0CtrlCntr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setFPosY0CtrlCntr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DMCInput::Reader::getLdpscDgrSideSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DMCInput::Builder::getLdpscDgrSideSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setLdpscDgrSideSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DMCInput::Reader::getLdpscSysOutSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DMCInput::Builder::getLdpscSysOutSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setLdpscSysOutSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DMCInput::Reader::getUiLatCtrlModeNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DMCInput::Builder::getUiLatCtrlModeNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setUiLatCtrlModeNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getCdcCtrlErrDistY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getCdcCtrlErrDistY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setCdcCtrlErrDistY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getCdcCtrlErrHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getCdcCtrlErrHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setCdcCtrlErrHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getTjatctDeltaFCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getTjatctDeltaFCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setTjatctDeltaFCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DMCInput::Reader::getLgcEnableCtrlNu() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline bool DMCInput::Builder::getLgcEnableCtrlNu() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setLgcEnableCtrlNu(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getFTrajTgtCurve1pm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getFTrajTgtCurve1pm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setFTrajTgtCurve1pm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getAdasLonAccCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getAdasLonAccCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setAdasLonAccCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DMCInput::Reader::getAdasLonAccEnableflag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}

inline bool DMCInput::Builder::getAdasLonAccEnableflag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setAdasLonAccEnableflag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getNopLonAccCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getNopLonAccCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setNopLonAccCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getNopDeltaFCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getNopDeltaFCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setNopDeltaFCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DMCInput::Reader::getNopLonAccEnableFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}

inline bool DMCInput::Builder::getNopLonAccEnableFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setNopLonAccEnableFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS, value);
}

inline bool DMCInput::Reader::getNopDeltaFEnableFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}

inline bool DMCInput::Builder::getNopDeltaFEnableFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setNopDeltaFEnableFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getEngTRQNm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getEngTRQNm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setEngTRQNm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getVehicleVelXMps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getVehicleVelXMps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setVehicleVelXMps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getVehAccelMps2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getVehAccelMps2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setVehAccelMps2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float DMCInput::Reader::getVehAccelCommandMps2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float DMCInput::Builder::getVehAccelCommandMps2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DMCInput::Builder::setVehAccelCommandMps2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getAdpDycCorrFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getAdpDycCorrFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setAdpDycCorrFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getCamLateralErrorSign() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getCamLateralErrorSign() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setCamLateralErrorSign(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getDycFilterKappaCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getDycFilterKappaCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setDycFilterKappaCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getDycSteerAngleFeedforward() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getDycSteerAngleFeedforward() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setDycSteerAngleFeedforward(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getHecYawRateFilter() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getHecYawRateFilter() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setHecYawRateFilter(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getInitialisationFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getInitialisationFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setInitialisationFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatKappaLinzFilterOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatKappaLinzFilterOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatKappaLinzFilterOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcIntegratorOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcIntegratorOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcIntegratorOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatSatDynamicThresholdInt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatSatDynamicThresholdInt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatSatDynamicThresholdInt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLateralErrorDelta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLateralErrorDelta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLateralErrorDelta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLateralErrorMean() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLateralErrorMean() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLateralErrorMean(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getMeanSampleUpdateSum() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getMeanSampleUpdateSum() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setMeanSampleUpdateSum(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getMeanVehicleVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getMeanVehicleVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setMeanVehicleVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getMeanVehicleVelocitySum() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getMeanVehicleVelocitySum() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setMeanVehicleVelocitySum(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getMeanKappaCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getMeanKappaCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setMeanKappaCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getMeanKappaCommandSum() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getMeanKappaCommandSum() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setMeanKappaCommandSum(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getNewUpdateAval() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getNewUpdateAval() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setNewUpdateAval(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getNewUpdateAvalSum() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getNewUpdateAvalSum() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setNewUpdateAvalSum(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacAngleCommandCorr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacAngleCommandCorr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacAngleCommandCorr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacAngleCommandYawrateFback() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacAngleCommandYawrateFback() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacAngleCommandYawrateFback(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacArbitratedAngleCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacArbitratedAngleCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacArbitratedAngleCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacArbitratedAngleCmdRaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacArbitratedAngleCmdRaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacArbitratedAngleCmdRaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacCompensationAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacCompensationAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacCompensationAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacControlError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacControlError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacControlError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacDeratedAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacDeratedAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacDeratedAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacIntegratorSatOut() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacIntegratorSatOut() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacIntegratorSatOut(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacRateLimAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacRateLimAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacRateLimAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacTrqDeratingFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacTrqDeratingFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacTrqDeratingFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacYrcAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacYrcAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacYrcAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacYrcControlError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacYrcControlError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacYrcControlError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSatReqDynSteerAngleMax() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSatReqDynSteerAngleMax() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSatReqDynSteerAngleMax(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSatReqSteerAngleMax() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSatReqSteerAngleMax() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSatReqSteerAngleMax(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSatSaturatedAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSatSaturatedAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSatSaturatedAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfCompositeDeratingFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfCompositeDeratingFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfCompositeDeratingFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfIdleDeratingFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfIdleDeratingFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfIdleDeratingFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfSelectedStateDeratingFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfSelectedStateDeratingFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfSelectedStateDeratingFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getVehDeltaFOc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getVehDeltaFOc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setVehDeltaFOc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getVehDeltaFOffset() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getVehDeltaFOffset() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setVehDeltaFOffset(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getTdfDriverCounterSteering() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getTdfDriverCounterSteering() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfDriverCounterSteering(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfMaxSteerTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfMaxSteerTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfMaxSteerTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfSelectedTorqueSource() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfSelectedTorqueSource() {
  return _builder.getDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfSelectedTorqueSource(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfTorqueDerFactorHFPath() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfTorqueDerFactorHFPath() {
  return _builder.getDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfTorqueDerFactorHFPath(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfTorqueDeratingFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfTorqueDeratingFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfTorqueDeratingFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfTorqueDeratingSlopArb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfTorqueDeratingSlopArb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfTorqueDeratingSlopArb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfTrqDeratingThresholdArb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfTrqDeratingThresholdArb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfTrqDeratingThresholdArb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfVehicleSteerTorqueFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfVehicleSteerTorqueFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfVehicleSteerTorqueFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getTdfTorqueRequestFactor() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getTdfTorqueRequestFactor() {
  return _builder.getDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setTdfTorqueRequestFactor(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getVehSteerTorqueComp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getVehSteerTorqueComp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setVehSteerTorqueComp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcStatePreload() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcStatePreload() {
  return _builder.getDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcStatePreload(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcCalHoldFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcCalHoldFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcCalHoldFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<163>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcCalHoldFlagShrt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcCalHoldFlagShrt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcCalHoldFlagShrt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<164>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcDisableFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcDisableFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcDisableFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<165>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcDysActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcDysActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcDysActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<166>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcFilteredKappaCam() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcFilteredKappaCam() {
  return _builder.getDataField<float>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcFilteredKappaCam(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcHighDriverTorque() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<167>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcHighDriverTorque() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<167>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcHighDriverTorque(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<167>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcImplausLateralError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcImplausLateralError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcImplausLateralError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<168>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcIntegratorInput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcIntegratorInput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcIntegratorInput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcIntegratorInputKappa() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcIntegratorInputKappa() {
  return _builder.getDataField<float>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcIntegratorInputKappa(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcIntegratorInputKappaDbg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcIntegratorInputKappaDbg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcIntegratorInputKappaDbg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcIntegratorSatOut() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcIntegratorSatOut() {
  return _builder.getDataField<float>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcIntegratorSatOut(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcKappaActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcKappaActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcKappaActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<169>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcKappaConEnbFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcKappaConEnbFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcKappaConEnbFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<170>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcKappaLatencyState() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcKappaLatencyState() {
  return _builder.getDataField<float>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcKappaLatencyState(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcKappaStatusDbg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcKappaStatusDbg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcKappaStatusDbg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxDeltaFDotFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxDeltaFDotFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxDeltaFDotFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<171>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxDrvTrqFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxDrvTrqFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxDrvTrqFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<172>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxHeaErrFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxHeaErrFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxHeaErrFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<173>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxKappaCmdFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxKappaCmdFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxKappaCmdFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<174>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxLatAccFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxLatAccFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxLatAccFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<175>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcSatIntegratorState() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcSatIntegratorState() {
  return _builder.getDataField<float>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcSatIntegratorState(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcTriggerFlagKappa() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcTriggerFlagKappa() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcTriggerFlagKappa(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<176>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcTriggerFlagKappaState() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcTriggerFlagKappaState() {
  return _builder.getDataField<float>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcTriggerFlagKappaState(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatOcOffsetFilterOmega() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatOcOffsetFilterOmega() {
  return _builder.getDataField<float>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcOffsetFilterOmega(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMinVehVelFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMinVehVelFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMinVehVelFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<177>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getLatOcMaxFltKappaCmdFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<178>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getLatOcMaxFltKappaCmdFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<178>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatOcMaxFltKappaCmdFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<178>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatArbEpsTorqueRequest() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatArbEpsTorqueRequest() {
  return _builder.getDataField<float>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatArbEpsTorqueRequest(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatDirectFeedthroughTrqPar() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatDirectFeedthroughTrqPar() {
  return _builder.getDataField<float>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatDirectFeedthroughTrqPar(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatEpsTorqueRequestInterface() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatEpsTorqueRequestInterface() {
  return _builder.getDataField<float>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatEpsTorqueRequestInterface(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatEpsTorqueRequestOutputLimted() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatEpsTorqueRequestOutputLimted() {
  return _builder.getDataField<float>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatEpsTorqueRequestOutputLimted(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatTorqueGradientPar() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatTorqueGradientPar() {
  return _builder.getDataField<float>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatTorqueGradientPar(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getLatTorqueRequestNoFric() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getLatTorqueRequestNoFric() {
  return _builder.getDataField<float>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setLatTorqueRequestNoFric(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getRateLimiterOutput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getRateLimiterOutput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setRateLimiterOutput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacActiveDampingTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacActiveDampingTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacActiveDampingTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacControlErrorDMC2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacControlErrorDMC2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacControlErrorDMC2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacDeltaFDotFiltered() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacDeltaFDotFiltered() {
  return _builder.getDataField<float>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacDeltaFDotFiltered(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool DMCDebug::Reader::getSacDisable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<179>() * ::capnp::ELEMENTS);
}

inline bool DMCDebug::Builder::getSacDisable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<179>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacDisable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<179>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacDynamicFeedforwardTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacDynamicFeedforwardTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacDynamicFeedforwardTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacFilteredAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacFilteredAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacFilteredAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacIntegratorTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacIntegratorTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacIntegratorTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacProportionalTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacProportionalTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacProportionalTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSacTorqueSatOut() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSacTorqueSatOut() {
  return _builder.getDataField<float>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSacTorqueSatOut(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getSatSaturatedAngleCommandDMC2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getSatSaturatedAngleCommandDMC2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setSatSaturatedAngleCommandDMC2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getEngTrqArw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getEngTrqArw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setEngTrqArw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getEngTrqReqFF() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getEngTrqReqFF() {
  return _builder.getDataField<float>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setEngTrqReqFF(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getEngTrqReqInteg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getEngTrqReqInteg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setEngTrqReqInteg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getEngTrqReqProp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getEngTrqReqProp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setEngTrqReqProp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getUintDelayTRQRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getUintDelayTRQRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setUintDelayTRQRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getUintDelayTRQRateFilter() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getUintDelayTRQRateFilter() {
  return _builder.getDataField<float>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setUintDelayTRQRateFilter(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getUnitDelayTRQARWFitler() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getUnitDelayTRQARWFitler() {
  return _builder.getDataField<float>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setUnitDelayTRQARWFitler(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getUnitDelayTRQIntergral() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getUnitDelayTRQIntergral() {
  return _builder.getDataField<float>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setUnitDelayTRQIntergral(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline float DMCDebug::Reader::getUnitDelayTorqueReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}

inline float DMCDebug::Builder::getUnitDelayTorqueReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}
inline void DMCDebug::Builder::setUnitDelayTorqueReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFSteerAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFSteerAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFSteerAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFSteerWhlAngleDeg() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFSteerWhlAngleDeg() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFSteerWhlAngleDeg(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFLonAccCmd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFLonAccCmd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFLonAccCmd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DMCOutput::Reader::getUiEPSRequestNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DMCOutput::Builder::getUiEPSRequestNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setUiEPSRequestNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DMCOutput::Reader::getUiLonAccRequestNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DMCOutput::Builder::getUiLonAccRequestNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setUiLonAccRequestNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFSteerWhlTqAddNm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFSteerWhlTqAddNm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFSteerWhlTqAddNm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFDampingLevelRmpNu() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFDampingLevelRmpNu() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFDampingLevelRmpNu(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DMCOutput::Reader::getBDMCValidStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}

inline bool DMCOutput::Builder::getBDMCValidStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setBDMCValidStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFTorqueReqNm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFTorqueReqNm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFTorqueReqNm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float DMCOutput::Reader::getFDecelReqMps2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DMCOutput::Builder::getFDecelReqMps2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setFDecelReqMps2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DMCOutput::Reader::getBBrakeActiveNu() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}

inline bool DMCOutput::Builder::getBBrakeActiveNu() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}
inline void DMCOutput::Builder::setBBrakeActiveNu(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS, value);
}

inline bool DMCInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DMCInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DMCInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DMCInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DMCInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DMCInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DMCInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DMCInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DMCInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DMCInfo::Reader::hasSDMCInput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DMCInfo::Builder::hasSDMCInput() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::control::DMCInput::Reader DMCInfo::Reader::getSDMCInput() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::control::DMCInput::Builder DMCInfo::Builder::getSDMCInput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::control::DMCInput::Pipeline DMCInfo::Pipeline::getSDMCInput() {
  return  ::senseAD::msg::control::DMCInput::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DMCInfo::Builder::setSDMCInput( ::senseAD::msg::control::DMCInput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::control::DMCInput::Builder DMCInfo::Builder::initSDMCInput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DMCInfo::Builder::adoptSDMCInput(
    ::capnp::Orphan< ::senseAD::msg::control::DMCInput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::control::DMCInput> DMCInfo::Builder::disownSDMCInput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCInput>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DMCInfo::Reader::hasSDMCDebug() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DMCInfo::Builder::hasSDMCDebug() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::control::DMCDebug::Reader DMCInfo::Reader::getSDMCDebug() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::control::DMCDebug::Builder DMCInfo::Builder::getSDMCDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::control::DMCDebug::Pipeline DMCInfo::Pipeline::getSDMCDebug() {
  return  ::senseAD::msg::control::DMCDebug::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DMCInfo::Builder::setSDMCDebug( ::senseAD::msg::control::DMCDebug::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::control::DMCDebug::Builder DMCInfo::Builder::initSDMCDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DMCInfo::Builder::adoptSDMCDebug(
    ::capnp::Orphan< ::senseAD::msg::control::DMCDebug>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::control::DMCDebug> DMCInfo::Builder::disownSDMCDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCDebug>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DMCInfo::Reader::hasSDMCOutput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DMCInfo::Builder::hasSDMCOutput() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::control::DMCOutput::Reader DMCInfo::Reader::getSDMCOutput() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::control::DMCOutput::Builder DMCInfo::Builder::getSDMCOutput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::control::DMCOutput::Pipeline DMCInfo::Pipeline::getSDMCOutput() {
  return  ::senseAD::msg::control::DMCOutput::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void DMCInfo::Builder::setSDMCOutput( ::senseAD::msg::control::DMCOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::control::DMCOutput::Builder DMCInfo::Builder::initSDMCOutput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DMCInfo::Builder::adoptSDMCOutput(
    ::capnp::Orphan< ::senseAD::msg::control::DMCOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::control::DMCOutput> DMCInfo::Builder::disownSDMCOutput() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::control::DMCOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

