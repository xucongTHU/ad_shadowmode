// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: l2plus_ved.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9a0edc6e56a09e9c);
CAPNP_DECLARE_SCHEMA(98fc5a4220294fd5);
CAPNP_DECLARE_SCHEMA(f99273de76d2cd3f);
CAPNP_DECLARE_SCHEMA(dc87af80031fb816);
CAPNP_DECLARE_SCHEMA(99b0089736d2c61b);
CAPNP_DECLARE_SCHEMA(d50ddc91ecfc7504);
CAPNP_DECLARE_SCHEMA(8fd4fc6bb060ac0d);
CAPNP_DECLARE_SCHEMA(a41f6f89b19e7e27);
CAPNP_DECLARE_SCHEMA(b30dc762d1d25bda);
CAPNP_DECLARE_SCHEMA(80ff9a869904d261);
CAPNP_DECLARE_SCHEMA(a92a2254aadb6850);
CAPNP_DECLARE_SCHEMA(d9c2b45ed67a14e0);
CAPNP_DECLARE_SCHEMA(9f86c803fd0a25c6);
CAPNP_DECLARE_SCHEMA(f68af3bfbfe6858b);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace l2plus_ved {

struct VEDDrvIntCurveVehDyn {
  VEDDrvIntCurveVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a0edc6e56a09e9c, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDLateral {
  VEDLateral() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98fc5a4220294fd5, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDSideSlipVehDyn {
  VEDSideSlipVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f99273de76d2cd3f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDMotVarVehDyn {
  VEDMotVarVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc87af80031fb816, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDAccelCorrVehDyn {
  VEDAccelCorrVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99b0089736d2c61b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDLongitudinal {
  VEDLongitudinal() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d50ddc91ecfc7504, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDInfo {
  VEDInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fd4fc6bb060ac0d, 2, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDLatAccelVehDyn {
  VEDLatAccelVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a41f6f89b19e7e27, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDYawRateVehDyn {
  VEDYawRateVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b30dc762d1d25bda, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDSignalHeader {
  VEDSignalHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80ff9a869904d261, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDCurveVehDyn {
  VEDCurveVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a92a2254aadb6850, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDMotionStateVehDyn {
  VEDMotionStateVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9c2b45ed67a14e0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDVeloCorrVehDyn {
  VEDVeloCorrVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f86c803fd0a25c6, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VEDLegacyVehDyn {
  VEDLegacyVehDyn() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f68af3bfbfe6858b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class VEDDrvIntCurveVehDyn::Reader {
public:
  typedef VEDDrvIntCurveVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCurve() const;

  inline float getVariance() const;

  inline float getGradient() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDDrvIntCurveVehDyn::Builder {
public:
  typedef VEDDrvIntCurveVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCurve();
  inline void setCurve(float value);

  inline float getVariance();
  inline void setVariance(float value);

  inline float getGradient();
  inline void setGradient(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDDrvIntCurveVehDyn::Pipeline {
public:
  typedef VEDDrvIntCurveVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDLateral::Reader {
public:
  typedef VEDLateral Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasYawRate() const;
  inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Reader getYawRate() const;

  inline float getOffCompStWheelangle() const;

  inline bool hasCurve() const;
  inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Reader getCurve() const;

  inline bool hasDrvIntCurve() const;
  inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Reader getDrvIntCurve() const;

  inline bool hasAccel() const;
  inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Reader getAccel() const;

  inline bool hasSlipAngle() const;
  inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Reader getSlipAngle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDLateral::Builder {
public:
  typedef VEDLateral Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasYawRate();
  inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Builder getYawRate();
  inline void setYawRate( ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Builder initYawRate();
  inline void adoptYawRate(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn> disownYawRate();

  inline float getOffCompStWheelangle();
  inline void setOffCompStWheelangle(float value);

  inline bool hasCurve();
  inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Builder getCurve();
  inline void setCurve( ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Builder initCurve();
  inline void adoptCurve(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn> disownCurve();

  inline bool hasDrvIntCurve();
  inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Builder getDrvIntCurve();
  inline void setDrvIntCurve( ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Builder initDrvIntCurve();
  inline void adoptDrvIntCurve(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn> disownDrvIntCurve();

  inline bool hasAccel();
  inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Builder getAccel();
  inline void setAccel( ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Builder initAccel();
  inline void adoptAccel(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn> disownAccel();

  inline bool hasSlipAngle();
  inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Builder getSlipAngle();
  inline void setSlipAngle( ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Builder initSlipAngle();
  inline void adoptSlipAngle(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn> disownSlipAngle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDLateral::Pipeline {
public:
  typedef VEDLateral Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Pipeline getYawRate();
  inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Pipeline getCurve();
  inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Pipeline getDrvIntCurve();
  inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Pipeline getAccel();
  inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Pipeline getSlipAngle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDSideSlipVehDyn::Reader {
public:
  typedef VEDSideSlipVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getSideSlipAngle() const;

  inline float getVariance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDSideSlipVehDyn::Builder {
public:
  typedef VEDSideSlipVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getSideSlipAngle();
  inline void setSideSlipAngle(float value);

  inline float getVariance();
  inline void setVariance(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDSideSlipVehDyn::Pipeline {
public:
  typedef VEDSideSlipVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDMotVarVehDyn::Reader {
public:
  typedef VEDMotVarVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVelocity() const;

  inline float getAccel() const;

  inline float getVarVelocity() const;

  inline float getVarAccel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDMotVarVehDyn::Builder {
public:
  typedef VEDMotVarVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVelocity();
  inline void setVelocity(float value);

  inline float getAccel();
  inline void setAccel(float value);

  inline float getVarVelocity();
  inline void setVarVelocity(float value);

  inline float getVarAccel();
  inline void setVarAccel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDMotVarVehDyn::Pipeline {
public:
  typedef VEDMotVarVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDAccelCorrVehDyn::Reader {
public:
  typedef VEDAccelCorrVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCorrAccel() const;

  inline float getCorrAccelVar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDAccelCorrVehDyn::Builder {
public:
  typedef VEDAccelCorrVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCorrAccel();
  inline void setCorrAccel(float value);

  inline float getCorrAccelVar();
  inline void setCorrAccelVar(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDAccelCorrVehDyn::Pipeline {
public:
  typedef VEDAccelCorrVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDLongitudinal::Reader {
public:
  typedef VEDLongitudinal Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMotVar() const;
  inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Reader getMotVar() const;

  inline bool hasVeloCorr() const;
  inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Reader getVeloCorr() const;

  inline bool hasAccelCorr() const;
  inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Reader getAccelCorr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDLongitudinal::Builder {
public:
  typedef VEDLongitudinal Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMotVar();
  inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Builder getMotVar();
  inline void setMotVar( ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Builder initMotVar();
  inline void adoptMotVar(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn> disownMotVar();

  inline bool hasVeloCorr();
  inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Builder getVeloCorr();
  inline void setVeloCorr( ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Builder initVeloCorr();
  inline void adoptVeloCorr(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn> disownVeloCorr();

  inline bool hasAccelCorr();
  inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Builder getAccelCorr();
  inline void setAccelCorr( ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Builder initAccelCorr();
  inline void adoptAccelCorr(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn> disownAccelCorr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDLongitudinal::Pipeline {
public:
  typedef VEDLongitudinal Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Pipeline getMotVar();
  inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Pipeline getVeloCorr();
  inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Pipeline getAccelCorr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDInfo::Reader {
public:
  typedef VEDInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMeasurementTimeNs() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearAcceleration() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearAcceleration() const;

  inline bool hasAngularVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getAngularVelocity() const;

  inline  ::uint32_t getUiVersionNumber() const;

  inline bool hasSigHeader() const;
  inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Reader getSigHeader() const;

  inline bool hasLongitudinal() const;
  inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Reader getLongitudinal() const;

  inline bool hasLateral() const;
  inline  ::senseAD::msg::l2plus_ved::VEDLateral::Reader getLateral() const;

  inline bool hasMotionState() const;
  inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Reader getMotionState() const;

  inline bool hasLegacy() const;
  inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Reader getLegacy() const;

  inline bool hasState() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDInfo::Builder {
public:
  typedef VEDInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMeasurementTimeNs();
  inline void setMeasurementTimeNs( ::uint64_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearAcceleration();

  inline bool hasAngularVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getAngularVelocity();
  inline void setAngularVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownAngularVelocity();

  inline  ::uint32_t getUiVersionNumber();
  inline void setUiVersionNumber( ::uint32_t value);

  inline bool hasSigHeader();
  inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Builder getSigHeader();
  inline void setSigHeader( ::senseAD::msg::l2plus_ved::VEDSignalHeader::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Builder initSigHeader();
  inline void adoptSigHeader(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSignalHeader>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSignalHeader> disownSigHeader();

  inline bool hasLongitudinal();
  inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Builder getLongitudinal();
  inline void setLongitudinal( ::senseAD::msg::l2plus_ved::VEDLongitudinal::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Builder initLongitudinal();
  inline void adoptLongitudinal(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLongitudinal>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLongitudinal> disownLongitudinal();

  inline bool hasLateral();
  inline  ::senseAD::msg::l2plus_ved::VEDLateral::Builder getLateral();
  inline void setLateral( ::senseAD::msg::l2plus_ved::VEDLateral::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDLateral::Builder initLateral();
  inline void adoptLateral(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLateral>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLateral> disownLateral();

  inline bool hasMotionState();
  inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Builder getMotionState();
  inline void setMotionState( ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Builder initMotionState();
  inline void adoptMotionState(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn> disownMotionState();

  inline bool hasLegacy();
  inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Builder getLegacy();
  inline void setLegacy( ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Reader value);
  inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Builder initLegacy();
  inline void adoptLegacy(::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn> disownLegacy();

  inline bool hasState();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getState();
  inline void setState( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setState(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDInfo::Pipeline {
public:
  typedef VEDInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getAngularVelocity();
  inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Pipeline getSigHeader();
  inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Pipeline getLongitudinal();
  inline  ::senseAD::msg::l2plus_ved::VEDLateral::Pipeline getLateral();
  inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Pipeline getMotionState();
  inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Pipeline getLegacy();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDLatAccelVehDyn::Reader {
public:
  typedef VEDLatAccelVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLatAccel() const;

  inline float getVariance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDLatAccelVehDyn::Builder {
public:
  typedef VEDLatAccelVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLatAccel();
  inline void setLatAccel(float value);

  inline float getVariance();
  inline void setVariance(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDLatAccelVehDyn::Pipeline {
public:
  typedef VEDLatAccelVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDYawRateVehDyn::Reader {
public:
  typedef VEDYawRateVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getYawRate() const;

  inline float getVariance() const;

  inline float getQuality() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDYawRateVehDyn::Builder {
public:
  typedef VEDYawRateVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getVariance();
  inline void setVariance(float value);

  inline float getQuality();
  inline void setQuality(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDYawRateVehDyn::Pipeline {
public:
  typedef VEDYawRateVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDSignalHeader::Reader {
public:
  typedef VEDSignalHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getUiTimestamp() const;

  inline  ::uint16_t getUiMeasurementCounter() const;

  inline  ::uint16_t getUiCycleCounter() const;

  inline  ::uint8_t getSigStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDSignalHeader::Builder {
public:
  typedef VEDSignalHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getUiTimestamp();
  inline void setUiTimestamp( ::uint32_t value);

  inline  ::uint16_t getUiMeasurementCounter();
  inline void setUiMeasurementCounter( ::uint16_t value);

  inline  ::uint16_t getUiCycleCounter();
  inline void setUiCycleCounter( ::uint16_t value);

  inline  ::uint8_t getSigStatus();
  inline void setSigStatus( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDSignalHeader::Pipeline {
public:
  typedef VEDSignalHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDCurveVehDyn::Reader {
public:
  typedef VEDCurveVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCurve() const;

  inline float getC1() const;

  inline float getGradient() const;

  inline float getVarC0() const;

  inline float getVarC1() const;

  inline float getQuality() const;

  inline float getCrvError() const;

  inline  ::uint8_t getCrvConf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDCurveVehDyn::Builder {
public:
  typedef VEDCurveVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCurve();
  inline void setCurve(float value);

  inline float getC1();
  inline void setC1(float value);

  inline float getGradient();
  inline void setGradient(float value);

  inline float getVarC0();
  inline void setVarC0(float value);

  inline float getVarC1();
  inline void setVarC1(float value);

  inline float getQuality();
  inline void setQuality(float value);

  inline float getCrvError();
  inline void setCrvError(float value);

  inline  ::uint8_t getCrvConf();
  inline void setCrvConf( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDCurveVehDyn::Pipeline {
public:
  typedef VEDCurveVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDMotionStateVehDyn::Reader {
public:
  typedef VEDMotionStateVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getMotState() const;

  inline float getConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDMotionStateVehDyn::Builder {
public:
  typedef VEDMotionStateVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getMotState();
  inline void setMotState( ::uint8_t value);

  inline float getConfidence();
  inline void setConfidence(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDMotionStateVehDyn::Pipeline {
public:
  typedef VEDMotionStateVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDVeloCorrVehDyn::Reader {
public:
  typedef VEDVeloCorrVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCorrFact() const;

  inline float getCorrVar() const;

  inline float getCorrVelo() const;

  inline float getCorrVeloVar() const;

  inline float getMinVelo() const;

  inline float getMaxVelo() const;

  inline  ::uint8_t getCorrQual() const;

  inline bool getRollerTestBench() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDVeloCorrVehDyn::Builder {
public:
  typedef VEDVeloCorrVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCorrFact();
  inline void setCorrFact(float value);

  inline float getCorrVar();
  inline void setCorrVar(float value);

  inline float getCorrVelo();
  inline void setCorrVelo(float value);

  inline float getCorrVeloVar();
  inline void setCorrVeloVar(float value);

  inline float getMinVelo();
  inline void setMinVelo(float value);

  inline float getMaxVelo();
  inline void setMaxVelo(float value);

  inline  ::uint8_t getCorrQual();
  inline void setCorrQual( ::uint8_t value);

  inline bool getRollerTestBench();
  inline void setRollerTestBench(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDVeloCorrVehDyn::Pipeline {
public:
  typedef VEDVeloCorrVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VEDLegacyVehDyn::Reader {
public:
  typedef VEDLegacyVehDyn Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getYawRateMaxJitter() const;

  inline bool getStandStill() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VEDLegacyVehDyn::Builder {
public:
  typedef VEDLegacyVehDyn Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getYawRateMaxJitter();
  inline void setYawRateMaxJitter(float value);

  inline bool getStandStill();
  inline void setStandStill(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VEDLegacyVehDyn::Pipeline {
public:
  typedef VEDLegacyVehDyn Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float VEDDrvIntCurveVehDyn::Reader::getCurve() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDDrvIntCurveVehDyn::Builder::getCurve() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDDrvIntCurveVehDyn::Builder::setCurve(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDDrvIntCurveVehDyn::Reader::getVariance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDDrvIntCurveVehDyn::Builder::getVariance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDDrvIntCurveVehDyn::Builder::setVariance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDDrvIntCurveVehDyn::Reader::getGradient() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VEDDrvIntCurveVehDyn::Builder::getGradient() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDDrvIntCurveVehDyn::Builder::setGradient(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool VEDLateral::Reader::hasYawRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLateral::Builder::hasYawRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Reader VEDLateral::Reader::getYawRate() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Builder VEDLateral::Builder::getYawRate() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Pipeline VEDLateral::Pipeline::getYawRate() {
  return  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VEDLateral::Builder::setYawRate( ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn::Builder VEDLateral::Builder::initYawRate() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VEDLateral::Builder::adoptYawRate(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn> VEDLateral::Builder::disownYawRate() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDYawRateVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float VEDLateral::Reader::getOffCompStWheelangle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDLateral::Builder::getOffCompStWheelangle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDLateral::Builder::setOffCompStWheelangle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VEDLateral::Reader::hasCurve() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLateral::Builder::hasCurve() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Reader VEDLateral::Reader::getCurve() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Builder VEDLateral::Builder::getCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Pipeline VEDLateral::Pipeline::getCurve() {
  return  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VEDLateral::Builder::setCurve( ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDCurveVehDyn::Builder VEDLateral::Builder::initCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VEDLateral::Builder::adoptCurve(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn> VEDLateral::Builder::disownCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDCurveVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VEDLateral::Reader::hasDrvIntCurve() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLateral::Builder::hasDrvIntCurve() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Reader VEDLateral::Reader::getDrvIntCurve() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Builder VEDLateral::Builder::getDrvIntCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Pipeline VEDLateral::Pipeline::getDrvIntCurve() {
  return  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VEDLateral::Builder::setDrvIntCurve( ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn::Builder VEDLateral::Builder::initDrvIntCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VEDLateral::Builder::adoptDrvIntCurve(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn> VEDLateral::Builder::disownDrvIntCurve() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDDrvIntCurveVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VEDLateral::Reader::hasAccel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLateral::Builder::hasAccel() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Reader VEDLateral::Reader::getAccel() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Builder VEDLateral::Builder::getAccel() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Pipeline VEDLateral::Pipeline::getAccel() {
  return  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VEDLateral::Builder::setAccel( ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn::Builder VEDLateral::Builder::initAccel() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VEDLateral::Builder::adoptAccel(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn> VEDLateral::Builder::disownAccel() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLatAccelVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VEDLateral::Reader::hasSlipAngle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLateral::Builder::hasSlipAngle() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Reader VEDLateral::Reader::getSlipAngle() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Builder VEDLateral::Builder::getSlipAngle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Pipeline VEDLateral::Pipeline::getSlipAngle() {
  return  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VEDLateral::Builder::setSlipAngle( ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn::Builder VEDLateral::Builder::initSlipAngle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VEDLateral::Builder::adoptSlipAngle(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn> VEDLateral::Builder::disownSlipAngle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSideSlipVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline float VEDSideSlipVehDyn::Reader::getSideSlipAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDSideSlipVehDyn::Builder::getSideSlipAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDSideSlipVehDyn::Builder::setSideSlipAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDSideSlipVehDyn::Reader::getVariance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDSideSlipVehDyn::Builder::getVariance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDSideSlipVehDyn::Builder::setVariance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDMotVarVehDyn::Reader::getVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDMotVarVehDyn::Builder::getVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDMotVarVehDyn::Builder::setVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDMotVarVehDyn::Reader::getAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDMotVarVehDyn::Builder::getAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDMotVarVehDyn::Builder::setAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDMotVarVehDyn::Reader::getVarVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VEDMotVarVehDyn::Builder::getVarVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDMotVarVehDyn::Builder::setVarVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float VEDMotVarVehDyn::Reader::getVarAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float VEDMotVarVehDyn::Builder::getVarAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VEDMotVarVehDyn::Builder::setVarAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float VEDAccelCorrVehDyn::Reader::getCorrAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDAccelCorrVehDyn::Builder::getCorrAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDAccelCorrVehDyn::Builder::setCorrAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDAccelCorrVehDyn::Reader::getCorrAccelVar() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDAccelCorrVehDyn::Builder::getCorrAccelVar() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDAccelCorrVehDyn::Builder::setCorrAccelVar(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool VEDLongitudinal::Reader::hasMotVar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLongitudinal::Builder::hasMotVar() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Reader VEDLongitudinal::Reader::getMotVar() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Builder VEDLongitudinal::Builder::getMotVar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Pipeline VEDLongitudinal::Pipeline::getMotVar() {
  return  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VEDLongitudinal::Builder::setMotVar( ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn::Builder VEDLongitudinal::Builder::initMotVar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VEDLongitudinal::Builder::adoptMotVar(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn> VEDLongitudinal::Builder::disownMotVar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotVarVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VEDLongitudinal::Reader::hasVeloCorr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLongitudinal::Builder::hasVeloCorr() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Reader VEDLongitudinal::Reader::getVeloCorr() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Builder VEDLongitudinal::Builder::getVeloCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Pipeline VEDLongitudinal::Pipeline::getVeloCorr() {
  return  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VEDLongitudinal::Builder::setVeloCorr( ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn::Builder VEDLongitudinal::Builder::initVeloCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VEDLongitudinal::Builder::adoptVeloCorr(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn> VEDLongitudinal::Builder::disownVeloCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDVeloCorrVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VEDLongitudinal::Reader::hasAccelCorr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VEDLongitudinal::Builder::hasAccelCorr() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Reader VEDLongitudinal::Reader::getAccelCorr() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Builder VEDLongitudinal::Builder::getAccelCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Pipeline VEDLongitudinal::Pipeline::getAccelCorr() {
  return  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VEDLongitudinal::Builder::setAccelCorr( ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn::Builder VEDLongitudinal::Builder::initAccelCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VEDLongitudinal::Builder::adoptAccelCorr(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn> VEDLongitudinal::Builder::disownAccelCorr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDAccelCorrVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader VEDInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder VEDInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline VEDInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder VEDInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> VEDInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t VEDInfo::Reader::getMeasurementTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VEDInfo::Builder::getMeasurementTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDInfo::Builder::setMeasurementTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VEDInfo::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader VEDInfo::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder VEDInfo::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder VEDInfo::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void VEDInfo::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> VEDInfo::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getLinearAcceleration() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader VEDInfo::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline VEDInfo::Pipeline::getAngularVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setAngularVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder VEDInfo::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> VEDInfo::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t VEDInfo::Reader::getUiVersionNumber() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t VEDInfo::Builder::getUiVersionNumber() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDInfo::Builder::setUiVersionNumber( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool VEDInfo::Reader::hasSigHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasSigHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Reader VEDInfo::Reader::getSigHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Builder VEDInfo::Builder::getSigHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Pipeline VEDInfo::Pipeline::getSigHeader() {
  return  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setSigHeader( ::senseAD::msg::l2plus_ved::VEDSignalHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDSignalHeader::Builder VEDInfo::Builder::initSigHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptSigHeader(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSignalHeader>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDSignalHeader> VEDInfo::Builder::disownSigHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDSignalHeader>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLongitudinal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLongitudinal() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Reader VEDInfo::Reader::getLongitudinal() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Builder VEDInfo::Builder::getLongitudinal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Pipeline VEDInfo::Pipeline::getLongitudinal() {
  return  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLongitudinal( ::senseAD::msg::l2plus_ved::VEDLongitudinal::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDLongitudinal::Builder VEDInfo::Builder::initLongitudinal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLongitudinal(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLongitudinal>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLongitudinal> VEDInfo::Builder::disownLongitudinal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLongitudinal>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLateral() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLateral() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDLateral::Reader VEDInfo::Reader::getLateral() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDLateral::Builder VEDInfo::Builder::getLateral() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDLateral::Pipeline VEDInfo::Pipeline::getLateral() {
  return  ::senseAD::msg::l2plus_ved::VEDLateral::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLateral( ::senseAD::msg::l2plus_ved::VEDLateral::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDLateral::Builder VEDInfo::Builder::initLateral() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLateral(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLateral>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLateral> VEDInfo::Builder::disownLateral() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLateral>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasMotionState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasMotionState() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Reader VEDInfo::Reader::getMotionState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Builder VEDInfo::Builder::getMotionState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Pipeline VEDInfo::Pipeline::getMotionState() {
  return  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setMotionState( ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn::Builder VEDInfo::Builder::initMotionState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptMotionState(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn> VEDInfo::Builder::disownMotionState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDMotionStateVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasLegacy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasLegacy() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Reader VEDInfo::Reader::getLegacy() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Builder VEDInfo::Builder::getLegacy() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Pipeline VEDInfo::Pipeline::getLegacy() {
  return  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void VEDInfo::Builder::setLegacy( ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn::Builder VEDInfo::Builder::initLegacy() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::adoptLegacy(
    ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn> VEDInfo::Builder::disownLegacy() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::l2plus_ved::VEDLegacyVehDyn>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool VEDInfo::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool VEDInfo::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader VEDInfo::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder VEDInfo::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void VEDInfo::Builder::setState( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void VEDInfo::Builder::setState(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder VEDInfo::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void VEDInfo::Builder::adoptState(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> VEDInfo::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline float VEDLatAccelVehDyn::Reader::getLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDLatAccelVehDyn::Builder::getLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDLatAccelVehDyn::Builder::setLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDLatAccelVehDyn::Reader::getVariance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDLatAccelVehDyn::Builder::getVariance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDLatAccelVehDyn::Builder::setVariance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDYawRateVehDyn::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDYawRateVehDyn::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDYawRateVehDyn::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDYawRateVehDyn::Reader::getVariance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDYawRateVehDyn::Builder::getVariance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDYawRateVehDyn::Builder::setVariance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDYawRateVehDyn::Reader::getQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VEDYawRateVehDyn::Builder::getQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDYawRateVehDyn::Builder::setQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t VEDSignalHeader::Reader::getUiTimestamp() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t VEDSignalHeader::Builder::getUiTimestamp() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDSignalHeader::Builder::setUiTimestamp( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t VEDSignalHeader::Reader::getUiMeasurementCounter() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t VEDSignalHeader::Builder::getUiMeasurementCounter() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDSignalHeader::Builder::setUiMeasurementCounter( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t VEDSignalHeader::Reader::getUiCycleCounter() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t VEDSignalHeader::Builder::getUiCycleCounter() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VEDSignalHeader::Builder::setUiCycleCounter( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VEDSignalHeader::Reader::getSigStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VEDSignalHeader::Builder::getSigStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void VEDSignalHeader::Builder::setSigStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getCurve() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getCurve() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setCurve(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getC1() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getC1() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setC1(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getGradient() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getGradient() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setGradient(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getVarC0() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getVarC0() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setVarC0(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getVarC1() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getVarC1() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setVarC1(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getQuality() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float VEDCurveVehDyn::Reader::getCrvError() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float VEDCurveVehDyn::Builder::getCrvError() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setCrvError(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VEDCurveVehDyn::Reader::getCrvConf() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VEDCurveVehDyn::Builder::getCrvConf() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void VEDCurveVehDyn::Builder::setCrvConf( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VEDMotionStateVehDyn::Reader::getMotState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VEDMotionStateVehDyn::Builder::getMotState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDMotionStateVehDyn::Builder::setMotState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDMotionStateVehDyn::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDMotionStateVehDyn::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDMotionStateVehDyn::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getCorrFact() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getCorrFact() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setCorrFact(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getCorrVar() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getCorrVar() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setCorrVar(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getCorrVelo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getCorrVelo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setCorrVelo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getCorrVeloVar() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getCorrVeloVar() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setCorrVeloVar(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getMinVelo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getMinVelo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setMinVelo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float VEDVeloCorrVehDyn::Reader::getMaxVelo() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float VEDVeloCorrVehDyn::Builder::getMaxVelo() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setMaxVelo(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VEDVeloCorrVehDyn::Reader::getCorrQual() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VEDVeloCorrVehDyn::Builder::getCorrQual() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setCorrQual( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool VEDVeloCorrVehDyn::Reader::getRollerTestBench() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS);
}

inline bool VEDVeloCorrVehDyn::Builder::getRollerTestBench() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS);
}
inline void VEDVeloCorrVehDyn::Builder::setRollerTestBench(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS, value);
}

inline float VEDLegacyVehDyn::Reader::getYawRateMaxJitter() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VEDLegacyVehDyn::Builder::getYawRateMaxJitter() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VEDLegacyVehDyn::Builder::setYawRateMaxJitter(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VEDLegacyVehDyn::Reader::getStandStill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool VEDLegacyVehDyn::Builder::getStandStill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void VEDLegacyVehDyn::Builder::setStandStill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

