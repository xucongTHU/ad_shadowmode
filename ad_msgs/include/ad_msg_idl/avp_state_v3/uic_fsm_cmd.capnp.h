// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: uic_fsm_cmd.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_hmi_v3/avp_customize_slot_req.capnp.h>
#include <ad_msg_idl/avp_hmi_v3/avp_hmi_req.capnp.h>
#include <ad_msg_idl/avp_hmi_v3/avp_map.capnp.h>
#include <ad_msg_idl/avp_parking_cmd/hmi_command.capnp.h>
#include <ad_msg_idl/avp_parking_cmd/parking_cmd.capnp.h>
#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b981a31ba6434e3d);
enum class AvpMainFuncType_b981a31ba6434e3d: uint16_t {
  NONE,
  APA,
  HPM,
  HPA,
  HSM,
  HPS,
  RA,
};
CAPNP_DECLARE_ENUM(AvpMainFuncType, b981a31ba6434e3d);
CAPNP_DECLARE_SCHEMA(bfd76309ebb7ca3c);
CAPNP_DECLARE_SCHEMA(a3b0727147b21a42);
CAPNP_DECLARE_SCHEMA(d8d580160b74a3c9);
CAPNP_DECLARE_SCHEMA(e6637866d6e3d0a6);
CAPNP_DECLARE_SCHEMA(fb343cbd3544a4e7);
CAPNP_DECLARE_SCHEMA(f8dfefcd3996ad59);
CAPNP_DECLARE_SCHEMA(cb2e8a1286fb5a32);
CAPNP_DECLARE_SCHEMA(fedf892ebfe3d6da);
CAPNP_DECLARE_SCHEMA(f8a8dd219db6df82);
CAPNP_DECLARE_SCHEMA(c712c1719b49add8);
CAPNP_DECLARE_SCHEMA(eabddbbabd2104f3);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_state_v3 {

typedef ::capnp::schemas::AvpMainFuncType_b981a31ba6434e3d AvpMainFuncType;

struct SlamMappingParam {
  SlamMappingParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bfd76309ebb7ca3c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlamLocalParam {
  SlamLocalParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3b0727147b21a42, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlamDummyParam {
  SlamDummyParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8d580160b74a3c9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlamRequest {
  SlamRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Param;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6637866d6e3d0a6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlamRequest::Param {
  Param() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MAPPING,
    LOCALIZATION,
    RESET,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb343cbd3544a4e7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UicFsmCmd {
  UicFsmCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8dfefcd3996ad59, 3, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpHmiButtonItem {
  AvpHmiButtonItem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb2e8a1286fb5a32, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpHmiTip {
  AvpHmiTip() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fedf892ebfe3d6da, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwitchAvpResult {
  SwitchAvpResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8a8dd219db6df82, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UicVisualizerInfo {
  UicVisualizerInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c712c1719b49add8, 2, 14)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvpSwitchModeResult {
  AvpSwitchModeResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eabddbbabd2104f3, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SlamMappingParam::Reader {
public:
  typedef SlamMappingParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamMappingParam::Builder {
public:
  typedef SlamMappingParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getHeight();
  inline void setHeight(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamMappingParam::Pipeline {
public:
  typedef SlamMappingParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamLocalParam::Reader {
public:
  typedef SlamLocalParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool getIsGnssMatch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamLocalParam::Builder {
public:
  typedef SlamLocalParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool getIsGnssMatch();
  inline void setIsGnssMatch(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamLocalParam::Pipeline {
public:
  typedef SlamLocalParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamDummyParam::Reader {
public:
  typedef SlamDummyParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamDummyParam::Builder {
public:
  typedef SlamDummyParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamDummyParam::Pipeline {
public:
  typedef SlamDummyParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamRequest::Reader {
public:
  typedef SlamRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline typename Param::Reader getParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamRequest::Builder {
public:
  typedef SlamRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline typename Param::Builder getParam();
  inline typename Param::Builder initParam();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamRequest::Pipeline {
public:
  typedef SlamRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Param::Pipeline getParam();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamRequest::Param::Reader {
public:
  typedef Param Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isMapping() const;
  inline bool hasMapping() const;
  inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Reader getMapping() const;

  inline bool isLocalization() const;
  inline bool hasLocalization() const;
  inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Reader getLocalization() const;

  inline bool isReset() const;
  inline bool hasReset() const;
  inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Reader getReset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamRequest::Param::Builder {
public:
  typedef Param Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isMapping();
  inline bool hasMapping();
  inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Builder getMapping();
  inline void setMapping( ::senseAD::msg::avp_state_v3::SlamMappingParam::Reader value);
  inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Builder initMapping();
  inline void adoptMapping(::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamMappingParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamMappingParam> disownMapping();

  inline bool isLocalization();
  inline bool hasLocalization();
  inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Builder getLocalization();
  inline void setLocalization( ::senseAD::msg::avp_state_v3::SlamLocalParam::Reader value);
  inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Builder initLocalization();
  inline void adoptLocalization(::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamLocalParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamLocalParam> disownLocalization();

  inline bool isReset();
  inline bool hasReset();
  inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Builder getReset();
  inline void setReset( ::senseAD::msg::avp_state_v3::SlamDummyParam::Reader value);
  inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Builder initReset();
  inline void adoptReset(::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamDummyParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamDummyParam> disownReset();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamRequest::Param::Pipeline {
public:
  typedef Param Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UicFsmCmd::Reader {
public:
  typedef UicFsmCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getUid() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline bool hasAvpParkingCmd() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader getAvpParkingCmd() const;

  inline bool hasAvpHmiCmd() const;
  inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Reader getAvpHmiCmd() const;

  inline bool hasAvpHmiReq() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Reader getAvpHmiReq() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getAvpMainFuncType() const;

  inline bool hasParkingOutDirection() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Reader getParkingOutDirection() const;

  inline bool hasSlamRequest() const;
  inline  ::senseAD::msg::avp_state_v3::SlamRequest::Reader getSlamRequest() const;

  inline  ::uint64_t getResetId() const;

  inline bool hasCustomizeSlot() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Reader getCustomizeSlot() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UicFsmCmd::Builder {
public:
  typedef UicFsmCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getUid();
  inline void setUid( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline bool hasAvpParkingCmd();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder getAvpParkingCmd();
  inline void setAvpParkingCmd( ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder initAvpParkingCmd();
  inline void adoptAvpParkingCmd(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD> disownAvpParkingCmd();

  inline bool hasAvpHmiCmd();
  inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Builder getAvpHmiCmd();
  inline void setAvpHmiCmd( ::senseAD::msg::avp_parking_cmd::HMICommand::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Builder initAvpHmiCmd();
  inline void adoptAvpHmiCmd(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::HMICommand>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::HMICommand> disownAvpHmiCmd();

  inline bool hasAvpHmiReq();
  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Builder getAvpHmiReq();
  inline void setAvpHmiReq( ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Builder initAvpHmiReq();
  inline void adoptAvpHmiReq(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpHmiReq> disownAvpHmiReq();

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getAvpMainFuncType();
  inline void setAvpMainFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value);

  inline bool hasParkingOutDirection();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Builder getParkingOutDirection();
  inline void setParkingOutDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Builder initParkingOutDirection();
  inline void adoptParkingOutDirection(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest> disownParkingOutDirection();

  inline bool hasSlamRequest();
  inline  ::senseAD::msg::avp_state_v3::SlamRequest::Builder getSlamRequest();
  inline void setSlamRequest( ::senseAD::msg::avp_state_v3::SlamRequest::Reader value);
  inline  ::senseAD::msg::avp_state_v3::SlamRequest::Builder initSlamRequest();
  inline void adoptSlamRequest(::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamRequest>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamRequest> disownSlamRequest();

  inline  ::uint64_t getResetId();
  inline void setResetId( ::uint64_t value);

  inline bool hasCustomizeSlot();
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Builder getCustomizeSlot();
  inline void setCustomizeSlot( ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Builder initCustomizeSlot();
  inline void adoptCustomizeSlot(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot> disownCustomizeSlot();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UicFsmCmd::Pipeline {
public:
  typedef UicFsmCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline getAvpParkingCmd();
  inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Pipeline getAvpHmiCmd();
  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Pipeline getAvpHmiReq();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Pipeline getParkingOutDirection();
  inline  ::senseAD::msg::avp_state_v3::SlamRequest::Pipeline getSlamRequest();
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Pipeline getCustomizeSlot();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpHmiButtonItem::Reader {
public:
  typedef AvpHmiButtonItem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiButton getButtonId() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

  inline bool getVisible() const;

  inline bool getEnabled() const;

  inline bool hasHints() const;
  inline  ::capnp::Text::Reader getHints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpHmiButtonItem::Builder {
public:
  typedef AvpHmiButtonItem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_hmi_v3::AvpHmiButton getButtonId();
  inline void setButtonId( ::senseAD::msg::avp_hmi_v3::AvpHmiButton value);

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

  inline bool getVisible();
  inline void setVisible(bool value);

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool hasHints();
  inline  ::capnp::Text::Builder getHints();
  inline void setHints( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHints(unsigned int size);
  inline void adoptHints(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpHmiButtonItem::Pipeline {
public:
  typedef AvpHmiButtonItem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpHmiTip::Reader {
public:
  typedef AvpHmiTip Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

  inline  ::int64_t getTimeout() const;

  inline bool hasLevel() const;
  inline  ::capnp::Text::Reader getLevel() const;

  inline bool hasButtons() const;
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader getButtons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpHmiTip::Builder {
public:
  typedef AvpHmiTip Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

  inline  ::int64_t getTimeout();
  inline void setTimeout( ::int64_t value);

  inline bool hasLevel();
  inline  ::capnp::Text::Builder getLevel();
  inline void setLevel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLevel(unsigned int size);
  inline void adoptLevel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLevel();

  inline bool hasButtons();
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder getButtons();
  inline void setButtons( ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder initButtons(unsigned int size);
  inline void adoptButtons(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>> disownButtons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpHmiTip::Pipeline {
public:
  typedef AvpHmiTip Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwitchAvpResult::Reader {
public:
  typedef SwitchAvpResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId() const;

  inline  ::uint8_t getResult() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwitchAvpResult::Builder {
public:
  typedef SwitchAvpResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId();
  inline void setReqId( ::uint64_t value);

  inline  ::uint8_t getResult();
  inline void setResult( ::uint8_t value);

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwitchAvpResult::Pipeline {
public:
  typedef SwitchAvpResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UicVisualizerInfo::Reader {
public:
  typedef UicVisualizerInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getUid() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline bool hasHmiText() const;
  inline  ::capnp::Text::Reader getHmiText() const;

  inline bool hasPlanningStatusText() const;
  inline  ::capnp::Text::Reader getPlanningStatusText() const;

  inline bool hasControlStatusText() const;
  inline  ::capnp::Text::Reader getControlStatusText() const;

  inline bool hasSlamStatusText() const;
  inline  ::capnp::Text::Reader getSlamStatusText() const;

  inline bool hasButtons() const;
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader getButtons() const;

  inline bool hasRecommendationDirections() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader getRecommendationDirections() const;

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getSelectedDirection() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getAvpMainFuncType() const;

  inline bool hasAvpTip() const;
  inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Reader getAvpTip() const;

  inline bool hasAvpMaps() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Reader getAvpMaps() const;

  inline bool hasNewMapInfo() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader getNewMapInfo() const;

  inline bool hasRecommendationDirectionsTail() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader getRecommendationDirectionsTail() const;

  inline bool hasRecommendationParkingInDirections() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader getRecommendationParkingInDirections() const;

  inline bool hasCustomizeSlotJudgeResult() const;
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Reader getCustomizeSlotJudgeResult() const;

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getSelectedDirectionTail() const;

  inline bool hasParkingInAlignSet() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader getParkingInAlignSet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UicVisualizerInfo::Builder {
public:
  typedef UicVisualizerInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getUid();
  inline void setUid( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline bool hasHmiText();
  inline  ::capnp::Text::Builder getHmiText();
  inline void setHmiText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHmiText(unsigned int size);
  inline void adoptHmiText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHmiText();

  inline bool hasPlanningStatusText();
  inline  ::capnp::Text::Builder getPlanningStatusText();
  inline void setPlanningStatusText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlanningStatusText(unsigned int size);
  inline void adoptPlanningStatusText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlanningStatusText();

  inline bool hasControlStatusText();
  inline  ::capnp::Text::Builder getControlStatusText();
  inline void setControlStatusText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initControlStatusText(unsigned int size);
  inline void adoptControlStatusText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownControlStatusText();

  inline bool hasSlamStatusText();
  inline  ::capnp::Text::Builder getSlamStatusText();
  inline void setSlamStatusText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSlamStatusText(unsigned int size);
  inline void adoptSlamStatusText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSlamStatusText();

  inline bool hasButtons();
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder getButtons();
  inline void setButtons( ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder initButtons(unsigned int size);
  inline void adoptButtons(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>> disownButtons();

  inline bool hasRecommendationDirections();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder getRecommendationDirections();
  inline void setRecommendationDirections( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRecommendationDirections(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder initRecommendationDirections(unsigned int size);
  inline void adoptRecommendationDirections(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> disownRecommendationDirections();

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getSelectedDirection();
  inline void setSelectedDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getAvpMainFuncType();
  inline void setAvpMainFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value);

  inline bool hasAvpTip();
  inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Builder getAvpTip();
  inline void setAvpTip( ::senseAD::msg::avp_state_v3::AvpHmiTip::Reader value);
  inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Builder initAvpTip();
  inline void adoptAvpTip(::capnp::Orphan< ::senseAD::msg::avp_state_v3::AvpHmiTip>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::AvpHmiTip> disownAvpTip();

  inline bool hasAvpMaps();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Builder getAvpMaps();
  inline void setAvpMaps( ::senseAD::msg::avp_hmi_v3::AvpMapList::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Builder initAvpMaps();
  inline void adoptAvpMaps(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapList>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapList> disownAvpMaps();

  inline bool hasNewMapInfo();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder getNewMapInfo();
  inline void setNewMapInfo( ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder initNewMapInfo();
  inline void adoptNewMapInfo(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem> disownNewMapInfo();

  inline bool hasRecommendationDirectionsTail();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder getRecommendationDirectionsTail();
  inline void setRecommendationDirectionsTail( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRecommendationDirectionsTail(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder initRecommendationDirectionsTail(unsigned int size);
  inline void adoptRecommendationDirectionsTail(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> disownRecommendationDirectionsTail();

  inline bool hasRecommendationParkingInDirections();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder getRecommendationParkingInDirections();
  inline void setRecommendationParkingInDirections( ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder initRecommendationParkingInDirections();
  inline void adoptRecommendationParkingInDirections(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection> disownRecommendationParkingInDirections();

  inline bool hasCustomizeSlotJudgeResult();
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Builder getCustomizeSlotJudgeResult();
  inline void setCustomizeSlotJudgeResult( ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Reader value);
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Builder initCustomizeSlotJudgeResult();
  inline void adoptCustomizeSlotJudgeResult(::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult> disownCustomizeSlotJudgeResult();

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getSelectedDirectionTail();
  inline void setSelectedDirectionTail( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value);

  inline bool hasParkingInAlignSet();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder getParkingInAlignSet();
  inline void setParkingInAlignSet( ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder initParkingInAlignSet();
  inline void adoptParkingInAlignSet(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup> disownParkingInAlignSet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UicVisualizerInfo::Pipeline {
public:
  typedef UicVisualizerInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Pipeline getAvpTip();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Pipeline getAvpMaps();
  inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline getNewMapInfo();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline getRecommendationParkingInDirections();
  inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Pipeline getCustomizeSlotJudgeResult();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline getParkingInAlignSet();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvpSwitchModeResult::Reader {
public:
  typedef AvpSwitchModeResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getUid() const;

  inline  ::uint8_t getState() const;

  inline  ::uint8_t getSwitchState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpSwitchModeResult::Builder {
public:
  typedef AvpSwitchModeResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getUid();
  inline void setUid( ::uint64_t value);

  inline  ::uint8_t getState();
  inline void setState( ::uint8_t value);

  inline  ::uint8_t getSwitchState();
  inline void setSwitchState( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpSwitchModeResult::Pipeline {
public:
  typedef AvpSwitchModeResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double SlamMappingParam::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double SlamMappingParam::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamMappingParam::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double SlamMappingParam::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double SlamMappingParam::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlamMappingParam::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SlamMappingParam::Reader::getHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double SlamMappingParam::Builder::getHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamMappingParam::Builder::setHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SlamLocalParam::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlamLocalParam::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamLocalParam::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SlamLocalParam::Reader::getIsGnssMatch() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool SlamLocalParam::Builder::getIsGnssMatch() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void SlamLocalParam::Builder::setIsGnssMatch(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SlamRequest::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlamRequest::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamRequest::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename SlamRequest::Param::Reader SlamRequest::Reader::getParam() const {
  return typename SlamRequest::Param::Reader(_reader);
}
inline typename SlamRequest::Param::Builder SlamRequest::Builder::getParam() {
  return typename SlamRequest::Param::Builder(_builder);
}
#if !CAPNP_LITE
inline typename SlamRequest::Param::Pipeline SlamRequest::Pipeline::getParam() {
  return typename SlamRequest::Param::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename SlamRequest::Param::Builder SlamRequest::Builder::initParam() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename SlamRequest::Param::Builder(_builder);
}
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Param::Which SlamRequest::Param::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Param::Which SlamRequest::Param::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool SlamRequest::Param::Reader::isMapping() const {
  return which() == SlamRequest::Param::MAPPING;
}
inline bool SlamRequest::Param::Builder::isMapping() {
  return which() == SlamRequest::Param::MAPPING;
}
inline bool SlamRequest::Param::Reader::hasMapping() const {
  if (which() != SlamRequest::Param::MAPPING) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlamRequest::Param::Builder::hasMapping() {
  if (which() != SlamRequest::Param::MAPPING) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Reader SlamRequest::Param::Reader::getMapping() const {
  KJ_IREQUIRE((which() == SlamRequest::Param::MAPPING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Builder SlamRequest::Param::Builder::getMapping() {
  KJ_IREQUIRE((which() == SlamRequest::Param::MAPPING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::setMapping( ::senseAD::msg::avp_state_v3::SlamMappingParam::Reader value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::MAPPING);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_state_v3::SlamMappingParam::Builder SlamRequest::Param::Builder::initMapping() {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::MAPPING);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::adoptMapping(
    ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamMappingParam>&& value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::MAPPING);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamMappingParam> SlamRequest::Param::Builder::disownMapping() {
  KJ_IREQUIRE((which() == SlamRequest::Param::MAPPING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamMappingParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SlamRequest::Param::Reader::isLocalization() const {
  return which() == SlamRequest::Param::LOCALIZATION;
}
inline bool SlamRequest::Param::Builder::isLocalization() {
  return which() == SlamRequest::Param::LOCALIZATION;
}
inline bool SlamRequest::Param::Reader::hasLocalization() const {
  if (which() != SlamRequest::Param::LOCALIZATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlamRequest::Param::Builder::hasLocalization() {
  if (which() != SlamRequest::Param::LOCALIZATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Reader SlamRequest::Param::Reader::getLocalization() const {
  KJ_IREQUIRE((which() == SlamRequest::Param::LOCALIZATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Builder SlamRequest::Param::Builder::getLocalization() {
  KJ_IREQUIRE((which() == SlamRequest::Param::LOCALIZATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::setLocalization( ::senseAD::msg::avp_state_v3::SlamLocalParam::Reader value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::LOCALIZATION);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_state_v3::SlamLocalParam::Builder SlamRequest::Param::Builder::initLocalization() {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::LOCALIZATION);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::adoptLocalization(
    ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamLocalParam>&& value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::LOCALIZATION);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamLocalParam> SlamRequest::Param::Builder::disownLocalization() {
  KJ_IREQUIRE((which() == SlamRequest::Param::LOCALIZATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamLocalParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SlamRequest::Param::Reader::isReset() const {
  return which() == SlamRequest::Param::RESET;
}
inline bool SlamRequest::Param::Builder::isReset() {
  return which() == SlamRequest::Param::RESET;
}
inline bool SlamRequest::Param::Reader::hasReset() const {
  if (which() != SlamRequest::Param::RESET) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlamRequest::Param::Builder::hasReset() {
  if (which() != SlamRequest::Param::RESET) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Reader SlamRequest::Param::Reader::getReset() const {
  KJ_IREQUIRE((which() == SlamRequest::Param::RESET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Builder SlamRequest::Param::Builder::getReset() {
  KJ_IREQUIRE((which() == SlamRequest::Param::RESET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::setReset( ::senseAD::msg::avp_state_v3::SlamDummyParam::Reader value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::RESET);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_state_v3::SlamDummyParam::Builder SlamRequest::Param::Builder::initReset() {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::RESET);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamRequest::Param::Builder::adoptReset(
    ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamDummyParam>&& value) {
  _builder.setDataField<SlamRequest::Param::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, SlamRequest::Param::RESET);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamDummyParam> SlamRequest::Param::Builder::disownReset() {
  KJ_IREQUIRE((which() == SlamRequest::Param::RESET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamDummyParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UicFsmCmd::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader UicFsmCmd::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder UicFsmCmd::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline UicFsmCmd::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder UicFsmCmd::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> UicFsmCmd::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t UicFsmCmd::Reader::getUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UicFsmCmd::Builder::getUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UicFsmCmd::Builder::setUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus UicFsmCmd::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus UicFsmCmd::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UicFsmCmd::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool UicFsmCmd::Reader::hasAvpParkingCmd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasAvpParkingCmd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader UicFsmCmd::Reader::getAvpParkingCmd() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder UicFsmCmd::Builder::getAvpParkingCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline UicFsmCmd::Pipeline::getAvpParkingCmd() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setAvpParkingCmd( ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder UicFsmCmd::Builder::initAvpParkingCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptAvpParkingCmd(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD> UicFsmCmd::Builder::disownAvpParkingCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UicFsmCmd::Reader::hasAvpHmiCmd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasAvpHmiCmd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Reader UicFsmCmd::Reader::getAvpHmiCmd() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Builder UicFsmCmd::Builder::getAvpHmiCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Pipeline UicFsmCmd::Pipeline::getAvpHmiCmd() {
  return  ::senseAD::msg::avp_parking_cmd::HMICommand::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setAvpHmiCmd( ::senseAD::msg::avp_parking_cmd::HMICommand::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::HMICommand::Builder UicFsmCmd::Builder::initAvpHmiCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptAvpHmiCmd(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::HMICommand>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::HMICommand> UicFsmCmd::Builder::disownAvpHmiCmd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::HMICommand>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UicFsmCmd::Reader::hasAvpHmiReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasAvpHmiReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Reader UicFsmCmd::Reader::getAvpHmiReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Builder UicFsmCmd::Builder::getAvpHmiReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Pipeline UicFsmCmd::Pipeline::getAvpHmiReq() {
  return  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setAvpHmiReq( ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpHmiReq::Builder UicFsmCmd::Builder::initAvpHmiReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptAvpHmiReq(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpHmiReq> UicFsmCmd::Builder::disownAvpHmiReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpHmiReq>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType UicFsmCmd::Reader::getAvpMainFuncType() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType UicFsmCmd::Builder::getAvpMainFuncType() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UicFsmCmd::Builder::setAvpMainFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool UicFsmCmd::Reader::hasParkingOutDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasParkingOutDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Reader UicFsmCmd::Reader::getParkingOutDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Builder UicFsmCmd::Builder::getParkingOutDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Pipeline UicFsmCmd::Pipeline::getParkingOutDirection() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setParkingOutDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest::Builder UicFsmCmd::Builder::initParkingOutDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptParkingOutDirection(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest> UicFsmCmd::Builder::disownParkingOutDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingOutDirectionRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool UicFsmCmd::Reader::hasSlamRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasSlamRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Reader UicFsmCmd::Reader::getSlamRequest() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Builder UicFsmCmd::Builder::getSlamRequest() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Pipeline UicFsmCmd::Pipeline::getSlamRequest() {
  return  ::senseAD::msg::avp_state_v3::SlamRequest::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setSlamRequest( ::senseAD::msg::avp_state_v3::SlamRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_state_v3::SlamRequest::Builder UicFsmCmd::Builder::initSlamRequest() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptSlamRequest(
    ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamRequest>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::SlamRequest> UicFsmCmd::Builder::disownSlamRequest() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::SlamRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t UicFsmCmd::Reader::getResetId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UicFsmCmd::Builder::getResetId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UicFsmCmd::Builder::setResetId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool UicFsmCmd::Reader::hasCustomizeSlot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool UicFsmCmd::Builder::hasCustomizeSlot() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Reader UicFsmCmd::Reader::getCustomizeSlot() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Builder UicFsmCmd::Builder::getCustomizeSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Pipeline UicFsmCmd::Pipeline::getCustomizeSlot() {
  return  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void UicFsmCmd::Builder::setCustomizeSlot( ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot::Builder UicFsmCmd::Builder::initCustomizeSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void UicFsmCmd::Builder::adoptCustomizeSlot(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot> UicFsmCmd::Builder::disownCustomizeSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlot>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_hmi_v3::AvpHmiButton AvpHmiButtonItem::Reader::getButtonId() const {
  return _reader.getDataField< ::senseAD::msg::avp_hmi_v3::AvpHmiButton>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_hmi_v3::AvpHmiButton AvpHmiButtonItem::Builder::getButtonId() {
  return _builder.getDataField< ::senseAD::msg::avp_hmi_v3::AvpHmiButton>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpHmiButtonItem::Builder::setButtonId( ::senseAD::msg::avp_hmi_v3::AvpHmiButton value) {
  _builder.setDataField< ::senseAD::msg::avp_hmi_v3::AvpHmiButton>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AvpHmiButtonItem::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpHmiButtonItem::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpHmiButtonItem::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpHmiButtonItem::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpHmiButtonItem::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpHmiButtonItem::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AvpHmiButtonItem::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpHmiButtonItem::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvpHmiButtonItem::Reader::getVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool AvpHmiButtonItem::Builder::getVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void AvpHmiButtonItem::Builder::setVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool AvpHmiButtonItem::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool AvpHmiButtonItem::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void AvpHmiButtonItem::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool AvpHmiButtonItem::Reader::hasHints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpHmiButtonItem::Builder::hasHints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpHmiButtonItem::Reader::getHints() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpHmiButtonItem::Builder::getHints() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpHmiButtonItem::Builder::setHints( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpHmiButtonItem::Builder::initHints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AvpHmiButtonItem::Builder::adoptHints(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpHmiButtonItem::Builder::disownHints() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AvpHmiTip::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpHmiTip::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpHmiTip::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpHmiTip::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpHmiTip::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpHmiTip::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AvpHmiTip::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpHmiTip::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AvpHmiTip::Reader::getTimeout() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AvpHmiTip::Builder::getTimeout() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpHmiTip::Builder::setTimeout( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AvpHmiTip::Reader::hasLevel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AvpHmiTip::Builder::hasLevel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AvpHmiTip::Reader::getLevel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AvpHmiTip::Builder::getLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AvpHmiTip::Builder::setLevel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AvpHmiTip::Builder::initLevel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AvpHmiTip::Builder::adoptLevel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AvpHmiTip::Builder::disownLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AvpHmiTip::Reader::hasButtons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AvpHmiTip::Builder::hasButtons() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader AvpHmiTip::Reader::getButtons() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder AvpHmiTip::Builder::getButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AvpHmiTip::Builder::setButtons( ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder AvpHmiTip::Builder::initButtons(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AvpHmiTip::Builder::adoptButtons(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>> AvpHmiTip::Builder::disownButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t SwitchAvpResult::Reader::getReqId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SwitchAvpResult::Builder::getReqId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SwitchAvpResult::Builder::setReqId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SwitchAvpResult::Reader::getResult() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SwitchAvpResult::Builder::getResult() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SwitchAvpResult::Builder::setResult( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool SwitchAvpResult::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwitchAvpResult::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SwitchAvpResult::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SwitchAvpResult::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwitchAvpResult::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SwitchAvpResult::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SwitchAvpResult::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SwitchAvpResult::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader UicVisualizerInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder UicVisualizerInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline UicVisualizerInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder UicVisualizerInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> UicVisualizerInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t UicVisualizerInfo::Reader::getUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t UicVisualizerInfo::Builder::getUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UicVisualizerInfo::Builder::setUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus UicVisualizerInfo::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus UicVisualizerInfo::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UicVisualizerInfo::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool UicVisualizerInfo::Reader::hasHmiText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasHmiText() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UicVisualizerInfo::Reader::getHmiText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::getHmiText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setHmiText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::initHmiText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptHmiText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UicVisualizerInfo::Builder::disownHmiText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasPlanningStatusText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasPlanningStatusText() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UicVisualizerInfo::Reader::getPlanningStatusText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::getPlanningStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setPlanningStatusText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::initPlanningStatusText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptPlanningStatusText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UicVisualizerInfo::Builder::disownPlanningStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasControlStatusText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasControlStatusText() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UicVisualizerInfo::Reader::getControlStatusText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::getControlStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setControlStatusText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::initControlStatusText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptControlStatusText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UicVisualizerInfo::Builder::disownControlStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasSlamStatusText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasSlamStatusText() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UicVisualizerInfo::Reader::getSlamStatusText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::getSlamStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setSlamStatusText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UicVisualizerInfo::Builder::initSlamStatusText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptSlamStatusText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UicVisualizerInfo::Builder::disownSlamStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasButtons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasButtons() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader UicVisualizerInfo::Reader::getButtons() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder UicVisualizerInfo::Builder::getButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setButtons( ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>::Builder UicVisualizerInfo::Builder::initButtons(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptButtons(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>> UicVisualizerInfo::Builder::disownButtons() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_state_v3::AvpHmiButtonItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasRecommendationDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasRecommendationDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader UicVisualizerInfo::Reader::getRecommendationDirections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder UicVisualizerInfo::Builder::getRecommendationDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setRecommendationDirections( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void UicVisualizerInfo::Builder::setRecommendationDirections(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder UicVisualizerInfo::Builder::initRecommendationDirections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptRecommendationDirections(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> UicVisualizerInfo::Builder::disownRecommendationDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection UicVisualizerInfo::Reader::getSelectedDirection() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection UicVisualizerInfo::Builder::getSelectedDirection() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UicVisualizerInfo::Builder::setSelectedDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType UicVisualizerInfo::Reader::getAvpMainFuncType() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType UicVisualizerInfo::Builder::getAvpMainFuncType() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UicVisualizerInfo::Builder::setAvpMainFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool UicVisualizerInfo::Reader::hasAvpTip() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasAvpTip() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Reader UicVisualizerInfo::Reader::getAvpTip() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Builder UicVisualizerInfo::Builder::getAvpTip() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Pipeline UicVisualizerInfo::Pipeline::getAvpTip() {
  return  ::senseAD::msg::avp_state_v3::AvpHmiTip::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setAvpTip( ::senseAD::msg::avp_state_v3::AvpHmiTip::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_state_v3::AvpHmiTip::Builder UicVisualizerInfo::Builder::initAvpTip() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptAvpTip(
    ::capnp::Orphan< ::senseAD::msg::avp_state_v3::AvpHmiTip>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_state_v3::AvpHmiTip> UicVisualizerInfo::Builder::disownAvpTip() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_state_v3::AvpHmiTip>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasAvpMaps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasAvpMaps() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Reader UicVisualizerInfo::Reader::getAvpMaps() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Builder UicVisualizerInfo::Builder::getAvpMaps() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Pipeline UicVisualizerInfo::Pipeline::getAvpMaps() {
  return  ::senseAD::msg::avp_hmi_v3::AvpMapList::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setAvpMaps( ::senseAD::msg::avp_hmi_v3::AvpMapList::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapList::Builder UicVisualizerInfo::Builder::initAvpMaps() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptAvpMaps(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapList>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapList> UicVisualizerInfo::Builder::disownAvpMaps() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapList>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasNewMapInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasNewMapInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader UicVisualizerInfo::Reader::getNewMapInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder UicVisualizerInfo::Builder::getNewMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline UicVisualizerInfo::Pipeline::getNewMapInfo() {
  return  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setNewMapInfo( ::senseAD::msg::avp_hmi_v3::AvpMapItem::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpMapItem::Builder UicVisualizerInfo::Builder::initNewMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptNewMapInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpMapItem> UicVisualizerInfo::Builder::disownNewMapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpMapItem>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasRecommendationDirectionsTail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasRecommendationDirectionsTail() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader UicVisualizerInfo::Reader::getRecommendationDirectionsTail() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder UicVisualizerInfo::Builder::getRecommendationDirectionsTail() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::setRecommendationDirectionsTail( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void UicVisualizerInfo::Builder::setRecommendationDirectionsTail(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder UicVisualizerInfo::Builder::initRecommendationDirectionsTail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void UicVisualizerInfo::Builder::adoptRecommendationDirectionsTail(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> UicVisualizerInfo::Builder::disownRecommendationDirectionsTail() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasRecommendationParkingInDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasRecommendationParkingInDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader UicVisualizerInfo::Reader::getRecommendationParkingInDirections() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder UicVisualizerInfo::Builder::getRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline UicVisualizerInfo::Pipeline::getRecommendationParkingInDirections() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setRecommendationParkingInDirections( ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder UicVisualizerInfo::Builder::initRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptRecommendationParkingInDirections(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection> UicVisualizerInfo::Builder::disownRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool UicVisualizerInfo::Reader::hasCustomizeSlotJudgeResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasCustomizeSlotJudgeResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Reader UicVisualizerInfo::Reader::getCustomizeSlotJudgeResult() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Builder UicVisualizerInfo::Builder::getCustomizeSlotJudgeResult() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Pipeline UicVisualizerInfo::Pipeline::getCustomizeSlotJudgeResult() {
  return  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setCustomizeSlotJudgeResult( ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult::Builder UicVisualizerInfo::Builder::initCustomizeSlotJudgeResult() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptCustomizeSlotJudgeResult(
    ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult> UicVisualizerInfo::Builder::disownCustomizeSlotJudgeResult() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_hmi_v3::AvpCustomizeSlotJudgeResult>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection UicVisualizerInfo::Reader::getSelectedDirectionTail() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection UicVisualizerInfo::Builder::getSelectedDirectionTail() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UicVisualizerInfo::Builder::setSelectedDirectionTail( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool UicVisualizerInfo::Reader::hasParkingInAlignSet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool UicVisualizerInfo::Builder::hasParkingInAlignSet() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader UicVisualizerInfo::Reader::getParkingInAlignSet() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder UicVisualizerInfo::Builder::getParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline UicVisualizerInfo::Pipeline::getParkingInAlignSet() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void UicVisualizerInfo::Builder::setParkingInAlignSet( ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder UicVisualizerInfo::Builder::initParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void UicVisualizerInfo::Builder::adoptParkingInAlignSet(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup> UicVisualizerInfo::Builder::disownParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool AvpSwitchModeResult::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpSwitchModeResult::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AvpSwitchModeResult::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpSwitchModeResult::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AvpSwitchModeResult::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AvpSwitchModeResult::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpSwitchModeResult::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpSwitchModeResult::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AvpSwitchModeResult::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t AvpSwitchModeResult::Reader::getUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpSwitchModeResult::Builder::getUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpSwitchModeResult::Builder::setUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AvpSwitchModeResult::Reader::getState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AvpSwitchModeResult::Builder::getState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AvpSwitchModeResult::Builder::setState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AvpSwitchModeResult::Reader::getSwitchState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AvpSwitchModeResult::Builder::getSwitchState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AvpSwitchModeResult::Builder::setSwitchState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

