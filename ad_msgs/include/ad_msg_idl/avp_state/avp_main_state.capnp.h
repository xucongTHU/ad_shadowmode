// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_main_state.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ec7122991f45a530);
CAPNP_DECLARE_SCHEMA(d78beb3422693290);
enum class State_d78beb3422693290: uint16_t {
  AVP_START_UP,
  AVP_TRAVEL_OUTSIDE,
  AVP_TRAVEL_AROUND_PARKING,
  AVP_ANONYMOUS_PARKING,
  AVP_FUNCTION_SELECT_NO_TRAJ,
  AVP_FUNCTION_SELECT,
  HPA_EXIT,
  HPA_MAPPING,
  HPA_MAPPING_VERIFY,
  HPA_MAPPING_DONE,
  HPA_SEARCHING_DELETED,
  HPA_STANDBY_DELETED,
  HPA_CRUISE,
  HPA_CRUISE_STOPPING,
  HPA_CRUISE_STOP_DONE,
  HPA_ALONG_PARKING,
  HPA_CRUISE_PAUSE,
  FLAG_HPP_CRUISE_END,
  AVP_PARKING_QUEST,
  AVP_PARKING_STOP_DONE,
  AVP_PARKING_STEER_DOING,
  AVP_PARKING_STEER_DONE,
  AVP_PARKING_DRIVE,
  AVP_PARKING_STOP_DOING,
  AVP_PARKING_DONE,
  AVP_PARKING_STANDBY,
  AVP_PARKING_PAUSE_DELETED,
  FLAG_AVP_PARKING_END,
  FLAG_AVP_EXCEPTION,
  AVP_EMERGENCY_BRAKE,
  AVP_PARKING_ABNORMAL,
  AVP_STATE_END,
};
CAPNP_DECLARE_ENUM(State, d78beb3422693290);
CAPNP_DECLARE_SCHEMA(c2b399dd13e93324);
enum class Module_c2b399dd13e93324: uint16_t {
  PERCEPTION_OD,
  PERCEPTION_RD,
  PLANNING,
  CONTROL,
  SLAM,
  PERCEPTION_FUSION,
  TOTAL_SIZE,
};
CAPNP_DECLARE_ENUM(Module, c2b399dd13e93324);
CAPNP_DECLARE_SCHEMA(da475b5c2344161d);
enum class Fbs_da475b5c2344161d: uint16_t {
  OK,
  FAIL,
  PAUSE,
  EMERGENCY_BRAKE,
  EMERGENCY_BRAKE_RELEASE,
  TRAJ_FINISH,
  ROUTE_TRACKING,
  ROUTE_TRACK_LOST,
  FOUND_IDLE_SLOT,
  NEAR_PARKING,
  FARAWAY_PARKING,
  SMOOTHLY_SUMMON,
  NONE,
};
CAPNP_DECLARE_ENUM(Fbs, da475b5c2344161d);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_state {

struct AvpMainState {
  AvpMainState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::State_d78beb3422693290 State;

  typedef ::capnp::schemas::Module_c2b399dd13e93324 Module;

  typedef ::capnp::schemas::Fbs_da475b5c2344161d Fbs;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec7122991f45a530, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AvpMainState::Reader {
public:
  typedef AvpMainState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getUid() const;

  inline  ::uint32_t getState() const;

  inline  ::uint8_t getSwitchState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvpMainState::Builder {
public:
  typedef AvpMainState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getUid();
  inline void setUid( ::uint64_t value);

  inline  ::uint32_t getState();
  inline void setState( ::uint32_t value);

  inline  ::uint8_t getSwitchState();
  inline void setSwitchState( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvpMainState::Pipeline {
public:
  typedef AvpMainState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AvpMainState::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvpMainState::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AvpMainState::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMainState::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AvpMainState::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AvpMainState::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AvpMainState::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvpMainState::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AvpMainState::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t AvpMainState::Reader::getUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AvpMainState::Builder::getUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvpMainState::Builder::setUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AvpMainState::Reader::getState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AvpMainState::Builder::getState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AvpMainState::Builder::setState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AvpMainState::Reader::getSwitchState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AvpMainState::Builder::getSwitchState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AvpMainState::Builder::setSwitchState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

