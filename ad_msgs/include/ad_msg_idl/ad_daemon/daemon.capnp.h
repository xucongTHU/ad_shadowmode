// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: daemon.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c2ee337b0aa32a7f);
CAPNP_DECLARE_SCHEMA(9eb0d4029fd59d62);
enum class Status_9eb0d4029fd59d62: uint16_t {
  WAITING,
  STARTING,
  RUNNING,
  SUSPENDED,
  RESUMING,
  MODE_SWITCHING,
  STOPPING,
  STOPPED,
  FAILED,
  READY,
  RESET,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(Status, 9eb0d4029fd59d62);
CAPNP_DECLARE_SCHEMA(df7de7a3553718dd);
enum class Mode_df7de7a3553718dd: uint16_t {
  MANUAL,
  AUTONOMOUS,
  PILOT,
  PARKING,
};
CAPNP_DECLARE_ENUM(Mode, df7de7a3553718dd);
CAPNP_DECLARE_SCHEMA(f46c86f76c9c80d4);
CAPNP_DECLARE_SCHEMA(c92eb88a6c14714a);
CAPNP_DECLARE_SCHEMA(bc4f63d89da8a175);
CAPNP_DECLARE_SCHEMA(d2747f9d63dbe0df);
CAPNP_DECLARE_SCHEMA(f9ea516124a058f7);
CAPNP_DECLARE_SCHEMA(f8bbe99744ca5ee8);
enum class CtrlRequest_f8bbe99744ca5ee8: uint16_t {
  NONE,
  STOP,
  DRIVING,
  PILOT,
  PARKING,
};
CAPNP_DECLARE_ENUM(CtrlRequest, f8bbe99744ca5ee8);
CAPNP_DECLARE_SCHEMA(bc2c4d0827332cef);
CAPNP_DECLARE_SCHEMA(89536c9bddb5e5ca);
CAPNP_DECLARE_SCHEMA(bc7a160f8da88ee7);
CAPNP_DECLARE_SCHEMA(85fb1f0adf72a58d);
CAPNP_DECLARE_SCHEMA(b67ae2c63ae950e0);
CAPNP_DECLARE_SCHEMA(8bd4d65ce3a6a3a0);
CAPNP_DECLARE_SCHEMA(945d3b2b912efa09);
CAPNP_DECLARE_SCHEMA(b6370c15d9712986);
CAPNP_DECLARE_SCHEMA(e3eb3dc3267a88bb);
CAPNP_DECLARE_SCHEMA(db5d98270f2cfd04);
CAPNP_DECLARE_SCHEMA(c921b290f9ab8e64);
CAPNP_DECLARE_SCHEMA(b9fb144b64124226);
CAPNP_DECLARE_SCHEMA(b9e78d317f7ef1d5);
CAPNP_DECLARE_SCHEMA(e34bc16a027f6212);
CAPNP_DECLARE_SCHEMA(cb67a979efe8d98b);
CAPNP_DECLARE_SCHEMA(f611b2c67aa8bd4a);
CAPNP_DECLARE_SCHEMA(9ba9cdb119c57d58);
enum class ProcState_9ba9cdb119c57d58: uint16_t {
  UNKNOWN,
  RUNNING,
  FAILED,
};
CAPNP_DECLARE_ENUM(ProcState, 9ba9cdb119c57d58);
CAPNP_DECLARE_SCHEMA(ececc8e5937602f8);
CAPNP_DECLARE_SCHEMA(ab1dc48cc6d5e3cc);
CAPNP_DECLARE_SCHEMA(c1048881538fe447);
CAPNP_DECLARE_SCHEMA(99bf83881e8cc0a6);
CAPNP_DECLARE_SCHEMA(d624f8b3b6acb269);
CAPNP_DECLARE_SCHEMA(a46a4456e20bc1d5);
CAPNP_DECLARE_SCHEMA(a133b663e66536ab);
CAPNP_DECLARE_SCHEMA(a301d76cb0eb51db);
CAPNP_DECLARE_SCHEMA(fbad90bccf2d8252);
CAPNP_DECLARE_SCHEMA(991c5294717c8046);
CAPNP_DECLARE_SCHEMA(aef114f05bcc7662);
CAPNP_DECLARE_SCHEMA(a0f59db89a2b5e33);
CAPNP_DECLARE_SCHEMA(a2ccb50e25f2e284);
CAPNP_DECLARE_SCHEMA(c67b708426ba7072);
CAPNP_DECLARE_SCHEMA(c002c7be9bec09fc);
CAPNP_DECLARE_SCHEMA(ee78d1d1bdb6953f);
CAPNP_DECLARE_SCHEMA(d46d7fa59b8ee8d3);
CAPNP_DECLARE_SCHEMA(d3e7026445ad7142);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace daemon {
namespace msg {

struct ComponentStateInfo {
  ComponentStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Status_9eb0d4029fd59d62 Status;

  typedef ::capnp::schemas::Mode_df7de7a3553718dd Mode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2ee337b0aa32a7f, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FunctionCost {
  FunctionCost() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f46c86f76c9c80d4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DaemonRequest {
  DaemonRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    START_PROJECT,
    STOP_PROJECT,
    RESET_PROJECT,
    START_RECORD,
    STOP_RECORD,
    COPY_RECORD,
    START_NODE,
    STOP_NODE,
    QUERY_STATUS,
    ATTACH_PROCESS,
    QUERY_OPTIONS,
    QUERY_VISUALIZATION_NODES,
    CONT_REPLAY,
    REPLAYER_STATUS_ONCE,
    SWITCH_MODE,
    PERSIST_TAG,
    GET_VEHICLE,
    GET_NETWORK_STATUS,
    GET_DISK_INFO,
    GET_PKG_VERSION,
    CALIBRATION,
    RESTART_NODE,
    GET_COPY_PERCENTAGE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c92eb88a6c14714a, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DaemonRespond {
  DaemonRespond() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CMD_RESPOND,
    QUERY_STATUS_RESPONSE,
    ATTACH_PROCESS_RESPONSE,
    QUERY_OPTIONS_RESPONSE,
    QUERY_VISUALIZATION_NODES_RESPONSE,
    GET_DISK_INFO_RESPONSE,
    GET_COPY_PERCENTAGE_RESPONSE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc4f63d89da8a175, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NodeCtrlMsg {
  NodeCtrlMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2747f9d63dbe0df, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Ctrl {
  Ctrl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CtrlRequest_f8bbe99744ca5ee8 CtrlRequest;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9ea516124a058f7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CmdRespond {
  CmdRespond() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc2c4d0827332cef, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StartProject {
  StartProject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89536c9bddb5e5ca, 1, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopProject {
  StopProject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc7a160f8da88ee7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ResetProject {
  ResetProject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85fb1f0adf72a58d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StartRecord {
  StartRecord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b67ae2c63ae950e0, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopRecord {
  StopRecord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bd4d65ce3a6a3a0, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopRecordResponse {
  StopRecordResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(945d3b2b912efa09, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CopyRecord {
  CopyRecord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6370c15d9712986, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetCopyPercentage {
  GetCopyPercentage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3eb3dc3267a88bb, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetCopyPercentageResponse {
  GetCopyPercentageResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db5d98270f2cfd04, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StartNode {
  StartNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c921b290f9ab8e64, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopNode {
  StopNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9fb144b64124226, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RestartNode {
  RestartNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9e78d317f7ef1d5, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryStatus {
  QueryStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e34bc16a027f6212, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryStatusResponse {
  QueryStatusResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb67a979efe8d98b, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryNodeResponse {
  QueryNodeResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ProcState_9ba9cdb119c57d58 ProcState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f611b2c67aa8bd4a, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AttachProcess {
  AttachProcess() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ececc8e5937602f8, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AttachProcessResponse {
  AttachProcessResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab1dc48cc6d5e3cc, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SocInfo {
  SocInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1048881538fe447, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryOptions {
  QueryOptions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99bf83881e8cc0a6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryOptionsResponse {
  QueryOptionsResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d624f8b3b6acb269, 0, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryVisualizationNodes {
  QueryVisualizationNodes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a46a4456e20bc1d5, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryVisualizationNodesResponse {
  QueryVisualizationNodesResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a133b663e66536ab, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ContReplay {
  ContReplay() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a301d76cb0eb51db, 1, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReplayerStatusOnce {
  ReplayerStatusOnce() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbad90bccf2d8252, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReplayerStatusOnceResponse {
  ReplayerStatusOnceResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(991c5294717c8046, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SwitchMode {
  SwitchMode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aef114f05bcc7662, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PersistTag {
  PersistTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0f59db89a2b5e33, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetVehicle {
  GetVehicle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2ccb50e25f2e284, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetNetworkStatus {
  GetNetworkStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c67b708426ba7072, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetDiskInfo {
  GetDiskInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c002c7be9bec09fc, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetDiskInfoResponse {
  GetDiskInfoResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee78d1d1bdb6953f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetPkgVersion {
  GetPkgVersion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d46d7fa59b8ee8d3, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Calibration {
  Calibration() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3e7026445ad7142, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ComponentStateInfo::Reader {
public:
  typedef ComponentStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Status getStatus() const;

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode getMode() const;

  inline  ::uint32_t getPid() const;

  inline  ::uint64_t getWallTimeNs() const;

  inline bool hasFunctionCostTimeList() const;
  inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Reader getFunctionCostTimeList() const;

  inline  ::uint64_t getNodeCostTime() const;

  inline bool hasExtData() const;
  inline  ::capnp::Data::Reader getExtData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ComponentStateInfo::Builder {
public:
  typedef ComponentStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Status getStatus();
  inline void setStatus( ::senseAD::daemon::msg::ComponentStateInfo::Status value);

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode getMode();
  inline void setMode( ::senseAD::daemon::msg::ComponentStateInfo::Mode value);

  inline  ::uint32_t getPid();
  inline void setPid( ::uint32_t value);

  inline  ::uint64_t getWallTimeNs();
  inline void setWallTimeNs( ::uint64_t value);

  inline bool hasFunctionCostTimeList();
  inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Builder getFunctionCostTimeList();
  inline void setFunctionCostTimeList( ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Builder initFunctionCostTimeList(unsigned int size);
  inline void adoptFunctionCostTimeList(::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>> disownFunctionCostTimeList();

  inline  ::uint64_t getNodeCostTime();
  inline void setNodeCostTime( ::uint64_t value);

  inline bool hasExtData();
  inline  ::capnp::Data::Builder getExtData();
  inline void setExtData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initExtData(unsigned int size);
  inline void adoptExtData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownExtData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ComponentStateInfo::Pipeline {
public:
  typedef ComponentStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FunctionCost::Reader {
public:
  typedef FunctionCost Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFunctionName() const;
  inline  ::capnp::Text::Reader getFunctionName() const;

  inline float getCostTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FunctionCost::Builder {
public:
  typedef FunctionCost Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFunctionName();
  inline  ::capnp::Text::Builder getFunctionName();
  inline void setFunctionName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFunctionName(unsigned int size);
  inline void adoptFunctionName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFunctionName();

  inline float getCostTime();
  inline void setCostTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FunctionCost::Pipeline {
public:
  typedef FunctionCost Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DaemonRequest::Reader {
public:
  typedef DaemonRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint32_t getTimeOut() const;

  inline bool isStartProject() const;
  inline bool hasStartProject() const;
  inline  ::senseAD::daemon::msg::StartProject::Reader getStartProject() const;

  inline bool isStopProject() const;
  inline bool hasStopProject() const;
  inline  ::senseAD::daemon::msg::StopProject::Reader getStopProject() const;

  inline bool isResetProject() const;
  inline bool hasResetProject() const;
  inline  ::senseAD::daemon::msg::ResetProject::Reader getResetProject() const;

  inline bool isStartRecord() const;
  inline bool hasStartRecord() const;
  inline  ::senseAD::daemon::msg::StartRecord::Reader getStartRecord() const;

  inline bool isStopRecord() const;
  inline bool hasStopRecord() const;
  inline  ::senseAD::daemon::msg::StopRecord::Reader getStopRecord() const;

  inline bool isCopyRecord() const;
  inline bool hasCopyRecord() const;
  inline  ::senseAD::daemon::msg::CopyRecord::Reader getCopyRecord() const;

  inline bool isStartNode() const;
  inline bool hasStartNode() const;
  inline  ::senseAD::daemon::msg::StartNode::Reader getStartNode() const;

  inline bool isStopNode() const;
  inline bool hasStopNode() const;
  inline  ::senseAD::daemon::msg::StopNode::Reader getStopNode() const;

  inline bool isQueryStatus() const;
  inline bool hasQueryStatus() const;
  inline  ::senseAD::daemon::msg::QueryStatus::Reader getQueryStatus() const;

  inline bool isAttachProcess() const;
  inline bool hasAttachProcess() const;
  inline  ::senseAD::daemon::msg::AttachProcess::Reader getAttachProcess() const;

  inline bool isQueryOptions() const;
  inline bool hasQueryOptions() const;
  inline  ::senseAD::daemon::msg::QueryOptions::Reader getQueryOptions() const;

  inline bool isQueryVisualizationNodes() const;
  inline bool hasQueryVisualizationNodes() const;
  inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Reader getQueryVisualizationNodes() const;

  inline bool isContReplay() const;
  inline bool hasContReplay() const;
  inline  ::senseAD::daemon::msg::ContReplay::Reader getContReplay() const;

  inline bool isReplayerStatusOnce() const;
  inline bool hasReplayerStatusOnce() const;
  inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Reader getReplayerStatusOnce() const;

  inline bool isSwitchMode() const;
  inline bool hasSwitchMode() const;
  inline  ::senseAD::daemon::msg::SwitchMode::Reader getSwitchMode() const;

  inline bool isPersistTag() const;
  inline bool hasPersistTag() const;
  inline  ::senseAD::daemon::msg::PersistTag::Reader getPersistTag() const;

  inline bool isGetVehicle() const;
  inline bool hasGetVehicle() const;
  inline  ::senseAD::daemon::msg::GetVehicle::Reader getGetVehicle() const;

  inline bool isGetNetworkStatus() const;
  inline bool hasGetNetworkStatus() const;
  inline  ::senseAD::daemon::msg::GetNetworkStatus::Reader getGetNetworkStatus() const;

  inline bool isGetDiskInfo() const;
  inline bool hasGetDiskInfo() const;
  inline  ::senseAD::daemon::msg::GetDiskInfo::Reader getGetDiskInfo() const;

  inline bool isGetPkgVersion() const;
  inline bool hasGetPkgVersion() const;
  inline  ::senseAD::daemon::msg::GetPkgVersion::Reader getGetPkgVersion() const;

  inline bool isCalibration() const;
  inline bool hasCalibration() const;
  inline  ::senseAD::daemon::msg::Calibration::Reader getCalibration() const;

  inline bool isRestartNode() const;
  inline bool hasRestartNode() const;
  inline  ::senseAD::daemon::msg::RestartNode::Reader getRestartNode() const;

  inline bool isGetCopyPercentage() const;
  inline bool hasGetCopyPercentage() const;
  inline  ::senseAD::daemon::msg::GetCopyPercentage::Reader getGetCopyPercentage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DaemonRequest::Builder {
public:
  typedef DaemonRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint32_t getTimeOut();
  inline void setTimeOut( ::uint32_t value);

  inline bool isStartProject();
  inline bool hasStartProject();
  inline  ::senseAD::daemon::msg::StartProject::Builder getStartProject();
  inline void setStartProject( ::senseAD::daemon::msg::StartProject::Reader value);
  inline  ::senseAD::daemon::msg::StartProject::Builder initStartProject();
  inline void adoptStartProject(::capnp::Orphan< ::senseAD::daemon::msg::StartProject>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StartProject> disownStartProject();

  inline bool isStopProject();
  inline bool hasStopProject();
  inline  ::senseAD::daemon::msg::StopProject::Builder getStopProject();
  inline void setStopProject( ::senseAD::daemon::msg::StopProject::Reader value);
  inline  ::senseAD::daemon::msg::StopProject::Builder initStopProject();
  inline void adoptStopProject(::capnp::Orphan< ::senseAD::daemon::msg::StopProject>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StopProject> disownStopProject();

  inline bool isResetProject();
  inline bool hasResetProject();
  inline  ::senseAD::daemon::msg::ResetProject::Builder getResetProject();
  inline void setResetProject( ::senseAD::daemon::msg::ResetProject::Reader value);
  inline  ::senseAD::daemon::msg::ResetProject::Builder initResetProject();
  inline void adoptResetProject(::capnp::Orphan< ::senseAD::daemon::msg::ResetProject>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::ResetProject> disownResetProject();

  inline bool isStartRecord();
  inline bool hasStartRecord();
  inline  ::senseAD::daemon::msg::StartRecord::Builder getStartRecord();
  inline void setStartRecord( ::senseAD::daemon::msg::StartRecord::Reader value);
  inline  ::senseAD::daemon::msg::StartRecord::Builder initStartRecord();
  inline void adoptStartRecord(::capnp::Orphan< ::senseAD::daemon::msg::StartRecord>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StartRecord> disownStartRecord();

  inline bool isStopRecord();
  inline bool hasStopRecord();
  inline  ::senseAD::daemon::msg::StopRecord::Builder getStopRecord();
  inline void setStopRecord( ::senseAD::daemon::msg::StopRecord::Reader value);
  inline  ::senseAD::daemon::msg::StopRecord::Builder initStopRecord();
  inline void adoptStopRecord(::capnp::Orphan< ::senseAD::daemon::msg::StopRecord>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StopRecord> disownStopRecord();

  inline bool isCopyRecord();
  inline bool hasCopyRecord();
  inline  ::senseAD::daemon::msg::CopyRecord::Builder getCopyRecord();
  inline void setCopyRecord( ::senseAD::daemon::msg::CopyRecord::Reader value);
  inline  ::senseAD::daemon::msg::CopyRecord::Builder initCopyRecord();
  inline void adoptCopyRecord(::capnp::Orphan< ::senseAD::daemon::msg::CopyRecord>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::CopyRecord> disownCopyRecord();

  inline bool isStartNode();
  inline bool hasStartNode();
  inline  ::senseAD::daemon::msg::StartNode::Builder getStartNode();
  inline void setStartNode( ::senseAD::daemon::msg::StartNode::Reader value);
  inline  ::senseAD::daemon::msg::StartNode::Builder initStartNode();
  inline void adoptStartNode(::capnp::Orphan< ::senseAD::daemon::msg::StartNode>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StartNode> disownStartNode();

  inline bool isStopNode();
  inline bool hasStopNode();
  inline  ::senseAD::daemon::msg::StopNode::Builder getStopNode();
  inline void setStopNode( ::senseAD::daemon::msg::StopNode::Reader value);
  inline  ::senseAD::daemon::msg::StopNode::Builder initStopNode();
  inline void adoptStopNode(::capnp::Orphan< ::senseAD::daemon::msg::StopNode>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::StopNode> disownStopNode();

  inline bool isQueryStatus();
  inline bool hasQueryStatus();
  inline  ::senseAD::daemon::msg::QueryStatus::Builder getQueryStatus();
  inline void setQueryStatus( ::senseAD::daemon::msg::QueryStatus::Reader value);
  inline  ::senseAD::daemon::msg::QueryStatus::Builder initQueryStatus();
  inline void adoptQueryStatus(::capnp::Orphan< ::senseAD::daemon::msg::QueryStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatus> disownQueryStatus();

  inline bool isAttachProcess();
  inline bool hasAttachProcess();
  inline  ::senseAD::daemon::msg::AttachProcess::Builder getAttachProcess();
  inline void setAttachProcess( ::senseAD::daemon::msg::AttachProcess::Reader value);
  inline  ::senseAD::daemon::msg::AttachProcess::Builder initAttachProcess();
  inline void adoptAttachProcess(::capnp::Orphan< ::senseAD::daemon::msg::AttachProcess>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcess> disownAttachProcess();

  inline bool isQueryOptions();
  inline bool hasQueryOptions();
  inline  ::senseAD::daemon::msg::QueryOptions::Builder getQueryOptions();
  inline void setQueryOptions( ::senseAD::daemon::msg::QueryOptions::Reader value);
  inline  ::senseAD::daemon::msg::QueryOptions::Builder initQueryOptions();
  inline void adoptQueryOptions(::capnp::Orphan< ::senseAD::daemon::msg::QueryOptions>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptions> disownQueryOptions();

  inline bool isQueryVisualizationNodes();
  inline bool hasQueryVisualizationNodes();
  inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Builder getQueryVisualizationNodes();
  inline void setQueryVisualizationNodes( ::senseAD::daemon::msg::QueryVisualizationNodes::Reader value);
  inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Builder initQueryVisualizationNodes();
  inline void adoptQueryVisualizationNodes(::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodes>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodes> disownQueryVisualizationNodes();

  inline bool isContReplay();
  inline bool hasContReplay();
  inline  ::senseAD::daemon::msg::ContReplay::Builder getContReplay();
  inline void setContReplay( ::senseAD::daemon::msg::ContReplay::Reader value);
  inline  ::senseAD::daemon::msg::ContReplay::Builder initContReplay();
  inline void adoptContReplay(::capnp::Orphan< ::senseAD::daemon::msg::ContReplay>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::ContReplay> disownContReplay();

  inline bool isReplayerStatusOnce();
  inline bool hasReplayerStatusOnce();
  inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Builder getReplayerStatusOnce();
  inline void setReplayerStatusOnce( ::senseAD::daemon::msg::ReplayerStatusOnce::Reader value);
  inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Builder initReplayerStatusOnce();
  inline void adoptReplayerStatusOnce(::capnp::Orphan< ::senseAD::daemon::msg::ReplayerStatusOnce>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::ReplayerStatusOnce> disownReplayerStatusOnce();

  inline bool isSwitchMode();
  inline bool hasSwitchMode();
  inline  ::senseAD::daemon::msg::SwitchMode::Builder getSwitchMode();
  inline void setSwitchMode( ::senseAD::daemon::msg::SwitchMode::Reader value);
  inline  ::senseAD::daemon::msg::SwitchMode::Builder initSwitchMode();
  inline void adoptSwitchMode(::capnp::Orphan< ::senseAD::daemon::msg::SwitchMode>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::SwitchMode> disownSwitchMode();

  inline bool isPersistTag();
  inline bool hasPersistTag();
  inline  ::senseAD::daemon::msg::PersistTag::Builder getPersistTag();
  inline void setPersistTag( ::senseAD::daemon::msg::PersistTag::Reader value);
  inline  ::senseAD::daemon::msg::PersistTag::Builder initPersistTag();
  inline void adoptPersistTag(::capnp::Orphan< ::senseAD::daemon::msg::PersistTag>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::PersistTag> disownPersistTag();

  inline bool isGetVehicle();
  inline bool hasGetVehicle();
  inline  ::senseAD::daemon::msg::GetVehicle::Builder getGetVehicle();
  inline void setGetVehicle( ::senseAD::daemon::msg::GetVehicle::Reader value);
  inline  ::senseAD::daemon::msg::GetVehicle::Builder initGetVehicle();
  inline void adoptGetVehicle(::capnp::Orphan< ::senseAD::daemon::msg::GetVehicle>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetVehicle> disownGetVehicle();

  inline bool isGetNetworkStatus();
  inline bool hasGetNetworkStatus();
  inline  ::senseAD::daemon::msg::GetNetworkStatus::Builder getGetNetworkStatus();
  inline void setGetNetworkStatus( ::senseAD::daemon::msg::GetNetworkStatus::Reader value);
  inline  ::senseAD::daemon::msg::GetNetworkStatus::Builder initGetNetworkStatus();
  inline void adoptGetNetworkStatus(::capnp::Orphan< ::senseAD::daemon::msg::GetNetworkStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetNetworkStatus> disownGetNetworkStatus();

  inline bool isGetDiskInfo();
  inline bool hasGetDiskInfo();
  inline  ::senseAD::daemon::msg::GetDiskInfo::Builder getGetDiskInfo();
  inline void setGetDiskInfo( ::senseAD::daemon::msg::GetDiskInfo::Reader value);
  inline  ::senseAD::daemon::msg::GetDiskInfo::Builder initGetDiskInfo();
  inline void adoptGetDiskInfo(::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfo> disownGetDiskInfo();

  inline bool isGetPkgVersion();
  inline bool hasGetPkgVersion();
  inline  ::senseAD::daemon::msg::GetPkgVersion::Builder getGetPkgVersion();
  inline void setGetPkgVersion( ::senseAD::daemon::msg::GetPkgVersion::Reader value);
  inline  ::senseAD::daemon::msg::GetPkgVersion::Builder initGetPkgVersion();
  inline void adoptGetPkgVersion(::capnp::Orphan< ::senseAD::daemon::msg::GetPkgVersion>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetPkgVersion> disownGetPkgVersion();

  inline bool isCalibration();
  inline bool hasCalibration();
  inline  ::senseAD::daemon::msg::Calibration::Builder getCalibration();
  inline void setCalibration( ::senseAD::daemon::msg::Calibration::Reader value);
  inline  ::senseAD::daemon::msg::Calibration::Builder initCalibration();
  inline void adoptCalibration(::capnp::Orphan< ::senseAD::daemon::msg::Calibration>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::Calibration> disownCalibration();

  inline bool isRestartNode();
  inline bool hasRestartNode();
  inline  ::senseAD::daemon::msg::RestartNode::Builder getRestartNode();
  inline void setRestartNode( ::senseAD::daemon::msg::RestartNode::Reader value);
  inline  ::senseAD::daemon::msg::RestartNode::Builder initRestartNode();
  inline void adoptRestartNode(::capnp::Orphan< ::senseAD::daemon::msg::RestartNode>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::RestartNode> disownRestartNode();

  inline bool isGetCopyPercentage();
  inline bool hasGetCopyPercentage();
  inline  ::senseAD::daemon::msg::GetCopyPercentage::Builder getGetCopyPercentage();
  inline void setGetCopyPercentage( ::senseAD::daemon::msg::GetCopyPercentage::Reader value);
  inline  ::senseAD::daemon::msg::GetCopyPercentage::Builder initGetCopyPercentage();
  inline void adoptGetCopyPercentage(::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentage>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentage> disownGetCopyPercentage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DaemonRequest::Pipeline {
public:
  typedef DaemonRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DaemonRespond::Reader {
public:
  typedef DaemonRespond Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasResp() const;
  inline  ::senseAD::daemon::msg::CmdRespond::Reader getResp() const;

  inline bool isCmdRespond() const;
  inline bool hasCmdRespond() const;
  inline  ::senseAD::daemon::msg::CmdRespond::Reader getCmdRespond() const;

  inline bool isQueryStatusResponse() const;
  inline bool hasQueryStatusResponse() const;
  inline  ::senseAD::daemon::msg::QueryStatusResponse::Reader getQueryStatusResponse() const;

  inline bool isAttachProcessResponse() const;
  inline bool hasAttachProcessResponse() const;
  inline  ::senseAD::daemon::msg::AttachProcessResponse::Reader getAttachProcessResponse() const;

  inline bool isQueryOptionsResponse() const;
  inline bool hasQueryOptionsResponse() const;
  inline  ::senseAD::daemon::msg::QueryOptionsResponse::Reader getQueryOptionsResponse() const;

  inline bool isQueryVisualizationNodesResponse() const;
  inline bool hasQueryVisualizationNodesResponse() const;
  inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Reader getQueryVisualizationNodesResponse() const;

  inline bool isGetDiskInfoResponse() const;
  inline bool hasGetDiskInfoResponse() const;
  inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Reader getGetDiskInfoResponse() const;

  inline bool isGetCopyPercentageResponse() const;
  inline bool hasGetCopyPercentageResponse() const;
  inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Reader getGetCopyPercentageResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DaemonRespond::Builder {
public:
  typedef DaemonRespond Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasResp();
  inline  ::senseAD::daemon::msg::CmdRespond::Builder getResp();
  inline void setResp( ::senseAD::daemon::msg::CmdRespond::Reader value);
  inline  ::senseAD::daemon::msg::CmdRespond::Builder initResp();
  inline void adoptResp(::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond> disownResp();

  inline bool isCmdRespond();
  inline bool hasCmdRespond();
  inline  ::senseAD::daemon::msg::CmdRespond::Builder getCmdRespond();
  inline void setCmdRespond( ::senseAD::daemon::msg::CmdRespond::Reader value);
  inline  ::senseAD::daemon::msg::CmdRespond::Builder initCmdRespond();
  inline void adoptCmdRespond(::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond> disownCmdRespond();

  inline bool isQueryStatusResponse();
  inline bool hasQueryStatusResponse();
  inline  ::senseAD::daemon::msg::QueryStatusResponse::Builder getQueryStatusResponse();
  inline void setQueryStatusResponse( ::senseAD::daemon::msg::QueryStatusResponse::Reader value);
  inline  ::senseAD::daemon::msg::QueryStatusResponse::Builder initQueryStatusResponse();
  inline void adoptQueryStatusResponse(::capnp::Orphan< ::senseAD::daemon::msg::QueryStatusResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatusResponse> disownQueryStatusResponse();

  inline bool isAttachProcessResponse();
  inline bool hasAttachProcessResponse();
  inline  ::senseAD::daemon::msg::AttachProcessResponse::Builder getAttachProcessResponse();
  inline void setAttachProcessResponse( ::senseAD::daemon::msg::AttachProcessResponse::Reader value);
  inline  ::senseAD::daemon::msg::AttachProcessResponse::Builder initAttachProcessResponse();
  inline void adoptAttachProcessResponse(::capnp::Orphan< ::senseAD::daemon::msg::AttachProcessResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcessResponse> disownAttachProcessResponse();

  inline bool isQueryOptionsResponse();
  inline bool hasQueryOptionsResponse();
  inline  ::senseAD::daemon::msg::QueryOptionsResponse::Builder getQueryOptionsResponse();
  inline void setQueryOptionsResponse( ::senseAD::daemon::msg::QueryOptionsResponse::Reader value);
  inline  ::senseAD::daemon::msg::QueryOptionsResponse::Builder initQueryOptionsResponse();
  inline void adoptQueryOptionsResponse(::capnp::Orphan< ::senseAD::daemon::msg::QueryOptionsResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptionsResponse> disownQueryOptionsResponse();

  inline bool isQueryVisualizationNodesResponse();
  inline bool hasQueryVisualizationNodesResponse();
  inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Builder getQueryVisualizationNodesResponse();
  inline void setQueryVisualizationNodesResponse( ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Reader value);
  inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Builder initQueryVisualizationNodesResponse();
  inline void adoptQueryVisualizationNodesResponse(::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodesResponse> disownQueryVisualizationNodesResponse();

  inline bool isGetDiskInfoResponse();
  inline bool hasGetDiskInfoResponse();
  inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Builder getGetDiskInfoResponse();
  inline void setGetDiskInfoResponse( ::senseAD::daemon::msg::GetDiskInfoResponse::Reader value);
  inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Builder initGetDiskInfoResponse();
  inline void adoptGetDiskInfoResponse(::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfoResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfoResponse> disownGetDiskInfoResponse();

  inline bool isGetCopyPercentageResponse();
  inline bool hasGetCopyPercentageResponse();
  inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Builder getGetCopyPercentageResponse();
  inline void setGetCopyPercentageResponse( ::senseAD::daemon::msg::GetCopyPercentageResponse::Reader value);
  inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Builder initGetCopyPercentageResponse();
  inline void adoptGetCopyPercentageResponse(::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentageResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentageResponse> disownGetCopyPercentageResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DaemonRespond::Pipeline {
public:
  typedef DaemonRespond Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::daemon::msg::CmdRespond::Pipeline getResp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodeCtrlMsg::Reader {
public:
  typedef NodeCtrlMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasNodeList() const;
  inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Reader getNodeList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodeCtrlMsg::Builder {
public:
  typedef NodeCtrlMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasNodeList();
  inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Builder getNodeList();
  inline void setNodeList( ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Builder initNodeList(unsigned int size);
  inline void adoptNodeList(::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>> disownNodeList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodeCtrlMsg::Pipeline {
public:
  typedef NodeCtrlMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Ctrl::Reader {
public:
  typedef Ctrl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeName() const;
  inline  ::capnp::Text::Reader getNodeName() const;

  inline  ::senseAD::daemon::msg::Ctrl::CtrlRequest getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Ctrl::Builder {
public:
  typedef Ctrl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeName();
  inline  ::capnp::Text::Builder getNodeName();
  inline void setNodeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNodeName(unsigned int size);
  inline void adoptNodeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNodeName();

  inline  ::senseAD::daemon::msg::Ctrl::CtrlRequest getRequest();
  inline void setRequest( ::senseAD::daemon::msg::Ctrl::CtrlRequest value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Ctrl::Pipeline {
public:
  typedef Ctrl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CmdRespond::Reader {
public:
  typedef CmdRespond Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getResult() const;

  inline bool hasDetail() const;
  inline  ::capnp::Text::Reader getDetail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CmdRespond::Builder {
public:
  typedef CmdRespond Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getResult();
  inline void setResult(bool value);

  inline bool hasDetail();
  inline  ::capnp::Text::Builder getDetail();
  inline void setDetail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDetail(unsigned int size);
  inline void adoptDetail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDetail();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CmdRespond::Pipeline {
public:
  typedef CmdRespond Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StartProject::Reader {
public:
  typedef StartProject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDataPath() const;
  inline  ::capnp::Text::Reader getDataPath() const;

  inline bool hasMode() const;
  inline  ::capnp::Text::Reader getMode() const;

  inline bool hasVehicle() const;
  inline  ::capnp::Text::Reader getVehicle() const;

  inline bool hasCase() const;
  inline  ::capnp::Text::Reader getCase() const;

  inline bool hasPlace() const;
  inline  ::capnp::Text::Reader getPlace() const;

  inline bool hasRoutingCase() const;
  inline  ::capnp::Text::Reader getRoutingCase() const;

  inline bool hasCustomArguments() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCustomArguments() const;

  inline bool hasEnvArguments() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getEnvArguments() const;

  inline bool getAttachable() const;

  inline bool getUseCachedConfig() const;

  inline bool hasCustomMode() const;
  inline  ::capnp::Text::Reader getCustomMode() const;

  inline bool hasNsysNode() const;
  inline  ::capnp::Text::Reader getNsysNode() const;

  inline bool hasRosBag() const;
  inline  ::capnp::Text::Reader getRosBag() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool getIsVisualizerMode() const;

  inline bool getWithOutVideo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StartProject::Builder {
public:
  typedef StartProject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDataPath();
  inline  ::capnp::Text::Builder getDataPath();
  inline void setDataPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDataPath(unsigned int size);
  inline void adoptDataPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDataPath();

  inline bool hasMode();
  inline  ::capnp::Text::Builder getMode();
  inline void setMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMode(unsigned int size);
  inline void adoptMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMode();

  inline bool hasVehicle();
  inline  ::capnp::Text::Builder getVehicle();
  inline void setVehicle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVehicle(unsigned int size);
  inline void adoptVehicle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVehicle();

  inline bool hasCase();
  inline  ::capnp::Text::Builder getCase();
  inline void setCase( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCase(unsigned int size);
  inline void adoptCase(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCase();

  inline bool hasPlace();
  inline  ::capnp::Text::Builder getPlace();
  inline void setPlace( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlace(unsigned int size);
  inline void adoptPlace(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlace();

  inline bool hasRoutingCase();
  inline  ::capnp::Text::Builder getRoutingCase();
  inline void setRoutingCase( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoutingCase(unsigned int size);
  inline void adoptRoutingCase(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoutingCase();

  inline bool hasCustomArguments();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCustomArguments();
  inline void setCustomArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCustomArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCustomArguments(unsigned int size);
  inline void adoptCustomArguments(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCustomArguments();

  inline bool hasEnvArguments();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getEnvArguments();
  inline void setEnvArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setEnvArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initEnvArguments(unsigned int size);
  inline void adoptEnvArguments(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownEnvArguments();

  inline bool getAttachable();
  inline void setAttachable(bool value);

  inline bool getUseCachedConfig();
  inline void setUseCachedConfig(bool value);

  inline bool hasCustomMode();
  inline  ::capnp::Text::Builder getCustomMode();
  inline void setCustomMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCustomMode(unsigned int size);
  inline void adoptCustomMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCustomMode();

  inline bool hasNsysNode();
  inline  ::capnp::Text::Builder getNsysNode();
  inline void setNsysNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNsysNode(unsigned int size);
  inline void adoptNsysNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNsysNode();

  inline bool hasRosBag();
  inline  ::capnp::Text::Builder getRosBag();
  inline void setRosBag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRosBag(unsigned int size);
  inline void adoptRosBag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRosBag();

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool getIsVisualizerMode();
  inline void setIsVisualizerMode(bool value);

  inline bool getWithOutVideo();
  inline void setWithOutVideo(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StartProject::Pipeline {
public:
  typedef StartProject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopProject::Reader {
public:
  typedef StopProject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopProject::Builder {
public:
  typedef StopProject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopProject::Pipeline {
public:
  typedef StopProject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResetProject::Reader {
public:
  typedef ResetProject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDataPath() const;
  inline  ::capnp::Text::Reader getDataPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResetProject::Builder {
public:
  typedef ResetProject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDataPath();
  inline  ::capnp::Text::Builder getDataPath();
  inline void setDataPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDataPath(unsigned int size);
  inline void adoptDataPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDataPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResetProject::Pipeline {
public:
  typedef ResetProject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StartRecord::Reader {
public:
  typedef StartRecord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StartRecord::Builder {
public:
  typedef StartRecord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StartRecord::Pipeline {
public:
  typedef StartRecord Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopRecord::Reader {
public:
  typedef StopRecord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopRecord::Builder {
public:
  typedef StopRecord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopRecord::Pipeline {
public:
  typedef StopRecord Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopRecordResponse::Reader {
public:
  typedef StopRecordResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getResult() const;

  inline bool hasDetail() const;
  inline  ::capnp::Text::Reader getDetail() const;

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopRecordResponse::Builder {
public:
  typedef StopRecordResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getResult();
  inline void setResult(bool value);

  inline bool hasDetail();
  inline  ::capnp::Text::Builder getDetail();
  inline void setDetail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDetail(unsigned int size);
  inline void adoptDetail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDetail();

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopRecordResponse::Pipeline {
public:
  typedef StopRecordResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CopyRecord::Reader {
public:
  typedef CopyRecord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::capnp::Text::Reader getPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CopyRecord::Builder {
public:
  typedef CopyRecord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::capnp::Text::Builder getPath();
  inline void setPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPath(unsigned int size);
  inline void adoptPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CopyRecord::Pipeline {
public:
  typedef CopyRecord Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetCopyPercentage::Reader {
public:
  typedef GetCopyPercentage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetCopyPercentage::Builder {
public:
  typedef GetCopyPercentage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetCopyPercentage::Pipeline {
public:
  typedef GetCopyPercentage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetCopyPercentageResponse::Reader {
public:
  typedef GetCopyPercentageResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getCopyPercentage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetCopyPercentageResponse::Builder {
public:
  typedef GetCopyPercentageResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getCopyPercentage();
  inline void setCopyPercentage(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetCopyPercentageResponse::Pipeline {
public:
  typedef GetCopyPercentageResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StartNode::Reader {
public:
  typedef StartNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeName() const;
  inline  ::capnp::Text::Reader getNodeName() const;

  inline bool hasBashPath() const;
  inline  ::capnp::Text::Reader getBashPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StartNode::Builder {
public:
  typedef StartNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeName();
  inline  ::capnp::Text::Builder getNodeName();
  inline void setNodeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNodeName(unsigned int size);
  inline void adoptNodeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNodeName();

  inline bool hasBashPath();
  inline  ::capnp::Text::Builder getBashPath();
  inline void setBashPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBashPath(unsigned int size);
  inline void adoptBashPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBashPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StartNode::Pipeline {
public:
  typedef StartNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopNode::Reader {
public:
  typedef StopNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeName() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getNodeName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopNode::Builder {
public:
  typedef StopNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeName();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getNodeName();
  inline void setNodeName( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setNodeName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initNodeName(unsigned int size);
  inline void adoptNodeName(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownNodeName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopNode::Pipeline {
public:
  typedef StopNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RestartNode::Reader {
public:
  typedef RestartNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodeName() const;
  inline  ::capnp::Text::Reader getNodeName() const;

  inline bool hasBashPath() const;
  inline  ::capnp::Text::Reader getBashPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RestartNode::Builder {
public:
  typedef RestartNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodeName();
  inline  ::capnp::Text::Builder getNodeName();
  inline void setNodeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNodeName(unsigned int size);
  inline void adoptNodeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNodeName();

  inline bool hasBashPath();
  inline  ::capnp::Text::Builder getBashPath();
  inline void setBashPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBashPath(unsigned int size);
  inline void adoptBashPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBashPath();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RestartNode::Pipeline {
public:
  typedef RestartNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryStatus::Reader {
public:
  typedef QueryStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryStatus::Builder {
public:
  typedef QueryStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryStatus::Pipeline {
public:
  typedef QueryStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryStatusResponse::Reader {
public:
  typedef QueryStatusResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsRunning() const;

  inline bool hasCurrentState() const;
  inline  ::capnp::Text::Reader getCurrentState() const;

  inline bool hasDrivingMode() const;
  inline  ::capnp::Text::Reader getDrivingMode() const;

  inline bool hasNodeList() const;
  inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Reader getNodeList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryStatusResponse::Builder {
public:
  typedef QueryStatusResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsRunning();
  inline void setIsRunning(bool value);

  inline bool hasCurrentState();
  inline  ::capnp::Text::Builder getCurrentState();
  inline void setCurrentState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrentState(unsigned int size);
  inline void adoptCurrentState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrentState();

  inline bool hasDrivingMode();
  inline  ::capnp::Text::Builder getDrivingMode();
  inline void setDrivingMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDrivingMode(unsigned int size);
  inline void adoptDrivingMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDrivingMode();

  inline bool hasNodeList();
  inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Builder getNodeList();
  inline void setNodeList( ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Builder initNodeList(unsigned int size);
  inline void adoptNodeList(::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>> disownNodeList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryStatusResponse::Pipeline {
public:
  typedef QueryStatusResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryNodeResponse::Reader {
public:
  typedef QueryNodeResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::senseAD::daemon::msg::QueryNodeResponse::ProcState getIsRunning() const;

  inline  ::int32_t getPid() const;

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Status getStatus() const;

  inline bool getIgnoreStatus() const;

  inline bool hasSoc() const;
  inline  ::capnp::Text::Reader getSoc() const;

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode getMode() const;

  inline bool getIsLostMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryNodeResponse::Builder {
public:
  typedef QueryNodeResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::senseAD::daemon::msg::QueryNodeResponse::ProcState getIsRunning();
  inline void setIsRunning( ::senseAD::daemon::msg::QueryNodeResponse::ProcState value);

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Status getStatus();
  inline void setStatus( ::senseAD::daemon::msg::ComponentStateInfo::Status value);

  inline bool getIgnoreStatus();
  inline void setIgnoreStatus(bool value);

  inline bool hasSoc();
  inline  ::capnp::Text::Builder getSoc();
  inline void setSoc( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSoc(unsigned int size);
  inline void adoptSoc(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSoc();

  inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode getMode();
  inline void setMode( ::senseAD::daemon::msg::ComponentStateInfo::Mode value);

  inline bool getIsLostMsg();
  inline void setIsLostMsg(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryNodeResponse::Pipeline {
public:
  typedef QueryNodeResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttachProcess::Reader {
public:
  typedef AttachProcess Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasProcessName() const;
  inline  ::capnp::Text::Reader getProcessName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttachProcess::Builder {
public:
  typedef AttachProcess Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProcessName();
  inline  ::capnp::Text::Builder getProcessName();
  inline void setProcessName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProcessName(unsigned int size);
  inline void adoptProcessName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProcessName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttachProcess::Pipeline {
public:
  typedef AttachProcess Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttachProcessResponse::Reader {
public:
  typedef AttachProcessResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getResult() const;

  inline bool hasDetail() const;
  inline  ::capnp::Text::Reader getDetail() const;

  inline bool hasSoc() const;
  inline  ::senseAD::daemon::msg::SocInfo::Reader getSoc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttachProcessResponse::Builder {
public:
  typedef AttachProcessResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getResult();
  inline void setResult(bool value);

  inline bool hasDetail();
  inline  ::capnp::Text::Builder getDetail();
  inline void setDetail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDetail(unsigned int size);
  inline void adoptDetail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDetail();

  inline bool hasSoc();
  inline  ::senseAD::daemon::msg::SocInfo::Builder getSoc();
  inline void setSoc( ::senseAD::daemon::msg::SocInfo::Reader value);
  inline  ::senseAD::daemon::msg::SocInfo::Builder initSoc();
  inline void adoptSoc(::capnp::Orphan< ::senseAD::daemon::msg::SocInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::daemon::msg::SocInfo> disownSoc();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttachProcessResponse::Pipeline {
public:
  typedef AttachProcessResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::daemon::msg::SocInfo::Pipeline getSoc();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SocInfo::Reader {
public:
  typedef SocInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMachineType() const;
  inline  ::capnp::Text::Reader getMachineType() const;

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasIp() const;
  inline  ::capnp::Text::Reader getIp() const;

  inline bool hasPassword() const;
  inline  ::capnp::Text::Reader getPassword() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SocInfo::Builder {
public:
  typedef SocInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMachineType();
  inline  ::capnp::Text::Builder getMachineType();
  inline void setMachineType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMachineType(unsigned int size);
  inline void adoptMachineType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMachineType();

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasIp();
  inline  ::capnp::Text::Builder getIp();
  inline void setIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initIp(unsigned int size);
  inline void adoptIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownIp();

  inline bool hasPassword();
  inline  ::capnp::Text::Builder getPassword();
  inline void setPassword( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPassword(unsigned int size);
  inline void adoptPassword(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPassword();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SocInfo::Pipeline {
public:
  typedef SocInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryOptions::Reader {
public:
  typedef QueryOptions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryOptions::Builder {
public:
  typedef QueryOptions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryOptions::Pipeline {
public:
  typedef QueryOptions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryOptionsResponse::Reader {
public:
  typedef QueryOptionsResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMode() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getMode() const;

  inline bool hasVehicle() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getVehicle() const;

  inline bool hasCase() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCase() const;

  inline bool hasLayOuts() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getLayOuts() const;

  inline bool hasPlace() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getPlace() const;

  inline bool hasRoute() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getRoute() const;

  inline bool hasSensorScheme() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSensorScheme() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryOptionsResponse::Builder {
public:
  typedef QueryOptionsResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMode();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getMode();
  inline void setMode( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setMode(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initMode(unsigned int size);
  inline void adoptMode(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownMode();

  inline bool hasVehicle();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getVehicle();
  inline void setVehicle( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setVehicle(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initVehicle(unsigned int size);
  inline void adoptVehicle(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownVehicle();

  inline bool hasCase();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCase();
  inline void setCase( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCase(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCase(unsigned int size);
  inline void adoptCase(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCase();

  inline bool hasLayOuts();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getLayOuts();
  inline void setLayOuts( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setLayOuts(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initLayOuts(unsigned int size);
  inline void adoptLayOuts(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownLayOuts();

  inline bool hasPlace();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getPlace();
  inline void setPlace( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setPlace(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initPlace(unsigned int size);
  inline void adoptPlace(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownPlace();

  inline bool hasRoute();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getRoute();
  inline void setRoute( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setRoute(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initRoute(unsigned int size);
  inline void adoptRoute(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownRoute();

  inline bool hasSensorScheme();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSensorScheme();
  inline void setSensorScheme( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSensorScheme(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSensorScheme(unsigned int size);
  inline void adoptSensorScheme(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSensorScheme();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryOptionsResponse::Pipeline {
public:
  typedef QueryOptionsResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryVisualizationNodes::Reader {
public:
  typedef QueryVisualizationNodes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryVisualizationNodes::Builder {
public:
  typedef QueryVisualizationNodes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryVisualizationNodes::Pipeline {
public:
  typedef QueryVisualizationNodes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryVisualizationNodesResponse::Reader {
public:
  typedef QueryVisualizationNodesResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNodes() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getNodes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryVisualizationNodesResponse::Builder {
public:
  typedef QueryVisualizationNodesResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNodes();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getNodes();
  inline void setNodes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setNodes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initNodes(unsigned int size);
  inline void adoptNodes(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownNodes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryVisualizationNodesResponse::Pipeline {
public:
  typedef QueryVisualizationNodesResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ContReplay::Reader {
public:
  typedef ContReplay Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDataPath() const;
  inline  ::capnp::Text::Reader getDataPath() const;

  inline bool hasMode() const;
  inline  ::capnp::Text::Reader getMode() const;

  inline bool hasVehicl() const;
  inline  ::capnp::Text::Reader getVehicl() const;

  inline bool hasCase() const;
  inline  ::capnp::Text::Reader getCase() const;

  inline bool hasPlace() const;
  inline  ::capnp::Text::Reader getPlace() const;

  inline bool hasRoutingcase() const;
  inline  ::capnp::Text::Reader getRoutingcase() const;

  inline bool hasCustomArguments() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCustomArguments() const;

  inline bool hasEnvArguments() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getEnvArguments() const;

  inline bool getAttachable() const;

  inline bool getUseCachedConfig() const;

  inline bool hasCustomMode() const;
  inline  ::capnp::Text::Reader getCustomMode() const;

  inline bool hasNsysNode() const;
  inline  ::capnp::Text::Reader getNsysNode() const;

  inline bool hasRosBag() const;
  inline  ::capnp::Text::Reader getRosBag() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool getIsReplayerReady() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ContReplay::Builder {
public:
  typedef ContReplay Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDataPath();
  inline  ::capnp::Text::Builder getDataPath();
  inline void setDataPath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDataPath(unsigned int size);
  inline void adoptDataPath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDataPath();

  inline bool hasMode();
  inline  ::capnp::Text::Builder getMode();
  inline void setMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMode(unsigned int size);
  inline void adoptMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMode();

  inline bool hasVehicl();
  inline  ::capnp::Text::Builder getVehicl();
  inline void setVehicl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVehicl(unsigned int size);
  inline void adoptVehicl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVehicl();

  inline bool hasCase();
  inline  ::capnp::Text::Builder getCase();
  inline void setCase( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCase(unsigned int size);
  inline void adoptCase(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCase();

  inline bool hasPlace();
  inline  ::capnp::Text::Builder getPlace();
  inline void setPlace( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlace(unsigned int size);
  inline void adoptPlace(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlace();

  inline bool hasRoutingcase();
  inline  ::capnp::Text::Builder getRoutingcase();
  inline void setRoutingcase( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoutingcase(unsigned int size);
  inline void adoptRoutingcase(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoutingcase();

  inline bool hasCustomArguments();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCustomArguments();
  inline void setCustomArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCustomArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCustomArguments(unsigned int size);
  inline void adoptCustomArguments(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCustomArguments();

  inline bool hasEnvArguments();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getEnvArguments();
  inline void setEnvArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setEnvArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initEnvArguments(unsigned int size);
  inline void adoptEnvArguments(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownEnvArguments();

  inline bool getAttachable();
  inline void setAttachable(bool value);

  inline bool getUseCachedConfig();
  inline void setUseCachedConfig(bool value);

  inline bool hasCustomMode();
  inline  ::capnp::Text::Builder getCustomMode();
  inline void setCustomMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCustomMode(unsigned int size);
  inline void adoptCustomMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCustomMode();

  inline bool hasNsysNode();
  inline  ::capnp::Text::Builder getNsysNode();
  inline void setNsysNode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNsysNode(unsigned int size);
  inline void adoptNsysNode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNsysNode();

  inline bool hasRosBag();
  inline  ::capnp::Text::Builder getRosBag();
  inline void setRosBag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRosBag(unsigned int size);
  inline void adoptRosBag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRosBag();

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool getIsReplayerReady();
  inline void setIsReplayerReady(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ContReplay::Pipeline {
public:
  typedef ContReplay Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReplayerStatusOnce::Reader {
public:
  typedef ReplayerStatusOnce Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReplayerStatusOnce::Builder {
public:
  typedef ReplayerStatusOnce Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReplayerStatusOnce::Pipeline {
public:
  typedef ReplayerStatusOnce Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReplayerStatusOnceResponse::Reader {
public:
  typedef ReplayerStatusOnceResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReplayerStatus() const;
  inline  ::capnp::Text::Reader getReplayerStatus() const;

  inline bool getIsReplayerRunning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReplayerStatusOnceResponse::Builder {
public:
  typedef ReplayerStatusOnceResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReplayerStatus();
  inline  ::capnp::Text::Builder getReplayerStatus();
  inline void setReplayerStatus( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReplayerStatus(unsigned int size);
  inline void adoptReplayerStatus(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReplayerStatus();

  inline bool getIsReplayerRunning();
  inline void setIsReplayerRunning(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReplayerStatusOnceResponse::Pipeline {
public:
  typedef ReplayerStatusOnceResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SwitchMode::Reader {
public:
  typedef SwitchMode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMode() const;
  inline  ::capnp::Text::Reader getMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SwitchMode::Builder {
public:
  typedef SwitchMode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMode();
  inline  ::capnp::Text::Builder getMode();
  inline void setMode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMode(unsigned int size);
  inline void adoptMode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMode();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SwitchMode::Pipeline {
public:
  typedef SwitchMode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PersistTag::Reader {
public:
  typedef PersistTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFileType() const;
  inline  ::capnp::Text::Reader getFileType() const;

  inline bool hasContent() const;
  inline  ::capnp::Text::Reader getContent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PersistTag::Builder {
public:
  typedef PersistTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFileType();
  inline  ::capnp::Text::Builder getFileType();
  inline void setFileType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFileType(unsigned int size);
  inline void adoptFileType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFileType();

  inline bool hasContent();
  inline  ::capnp::Text::Builder getContent();
  inline void setContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PersistTag::Pipeline {
public:
  typedef PersistTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetVehicle::Reader {
public:
  typedef GetVehicle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetVehicle::Builder {
public:
  typedef GetVehicle Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetVehicle::Pipeline {
public:
  typedef GetVehicle Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetNetworkStatus::Reader {
public:
  typedef GetNetworkStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetNetworkStatus::Builder {
public:
  typedef GetNetworkStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetNetworkStatus::Pipeline {
public:
  typedef GetNetworkStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetDiskInfo::Reader {
public:
  typedef GetDiskInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetDiskInfo::Builder {
public:
  typedef GetDiskInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetDiskInfo::Pipeline {
public:
  typedef GetDiskInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetDiskInfoResponse::Reader {
public:
  typedef GetDiskInfoResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsDiskExist() const;

  inline bool getIsWritable() const;

  inline bool hasDiskOwner() const;
  inline  ::capnp::Text::Reader getDiskOwner() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetDiskInfoResponse::Builder {
public:
  typedef GetDiskInfoResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsDiskExist();
  inline void setIsDiskExist(bool value);

  inline bool getIsWritable();
  inline void setIsWritable(bool value);

  inline bool hasDiskOwner();
  inline  ::capnp::Text::Builder getDiskOwner();
  inline void setDiskOwner( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDiskOwner(unsigned int size);
  inline void adoptDiskOwner(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDiskOwner();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetDiskInfoResponse::Pipeline {
public:
  typedef GetDiskInfoResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetPkgVersion::Reader {
public:
  typedef GetPkgVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetPkgVersion::Builder {
public:
  typedef GetPkgVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetPkgVersion::Pipeline {
public:
  typedef GetPkgVersion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Calibration::Reader {
public:
  typedef Calibration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Calibration::Builder {
public:
  typedef Calibration Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getPlaceHolder();
  inline void setPlaceHolder( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Calibration::Pipeline {
public:
  typedef Calibration Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ComponentStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ComponentStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ComponentStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ComponentStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ComponentStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ComponentStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ComponentStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ComponentStateInfo::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ComponentStateInfo::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ComponentStateInfo::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ComponentStateInfo::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ComponentStateInfo::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Status ComponentStateInfo::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Status ComponentStateInfo::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setStatus( ::senseAD::daemon::msg::ComponentStateInfo::Status value) {
  _builder.setDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode ComponentStateInfo::Reader::getMode() const {
  return _reader.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode ComponentStateInfo::Builder::getMode() {
  return _builder.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setMode( ::senseAD::daemon::msg::ComponentStateInfo::Mode value) {
  _builder.setDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ComponentStateInfo::Reader::getPid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ComponentStateInfo::Builder::getPid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setPid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ComponentStateInfo::Reader::getWallTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ComponentStateInfo::Builder::getWallTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setWallTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ComponentStateInfo::Reader::hasFunctionCostTimeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasFunctionCostTimeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Reader ComponentStateInfo::Reader::getFunctionCostTimeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Builder ComponentStateInfo::Builder::getFunctionCostTimeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setFunctionCostTimeList( ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>::Builder ComponentStateInfo::Builder::initFunctionCostTimeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptFunctionCostTimeList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>> ComponentStateInfo::Builder::disownFunctionCostTimeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::FunctionCost,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t ComponentStateInfo::Reader::getNodeCostTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ComponentStateInfo::Builder::getNodeCostTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ComponentStateInfo::Builder::setNodeCostTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ComponentStateInfo::Reader::hasExtData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ComponentStateInfo::Builder::hasExtData() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ComponentStateInfo::Reader::getExtData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ComponentStateInfo::Builder::getExtData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ComponentStateInfo::Builder::setExtData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ComponentStateInfo::Builder::initExtData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ComponentStateInfo::Builder::adoptExtData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ComponentStateInfo::Builder::disownExtData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FunctionCost::Reader::hasFunctionName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FunctionCost::Builder::hasFunctionName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FunctionCost::Reader::getFunctionName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FunctionCost::Builder::getFunctionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FunctionCost::Builder::setFunctionName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FunctionCost::Builder::initFunctionName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FunctionCost::Builder::adoptFunctionName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FunctionCost::Builder::disownFunctionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float FunctionCost::Reader::getCostTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float FunctionCost::Builder::getCostTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FunctionCost::Builder::setCostTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::daemon::msg::DaemonRequest::Which DaemonRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::daemon::msg::DaemonRequest::Which DaemonRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DaemonRequest::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DaemonRequest::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DaemonRequest::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DaemonRequest::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DaemonRequest::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DaemonRequest::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DaemonRequest::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t DaemonRequest::Reader::getTimeOut() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DaemonRequest::Builder::getTimeOut() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DaemonRequest::Builder::setTimeOut( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DaemonRequest::Reader::isStartProject() const {
  return which() == DaemonRequest::START_PROJECT;
}
inline bool DaemonRequest::Builder::isStartProject() {
  return which() == DaemonRequest::START_PROJECT;
}
inline bool DaemonRequest::Reader::hasStartProject() const {
  if (which() != DaemonRequest::START_PROJECT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStartProject() {
  if (which() != DaemonRequest::START_PROJECT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StartProject::Reader DaemonRequest::Reader::getStartProject() const {
  KJ_IREQUIRE((which() == DaemonRequest::START_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StartProject::Builder DaemonRequest::Builder::getStartProject() {
  KJ_IREQUIRE((which() == DaemonRequest::START_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStartProject( ::senseAD::daemon::msg::StartProject::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StartProject::Builder DaemonRequest::Builder::initStartProject() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_PROJECT);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStartProject(
    ::capnp::Orphan< ::senseAD::daemon::msg::StartProject>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StartProject> DaemonRequest::Builder::disownStartProject() {
  KJ_IREQUIRE((which() == DaemonRequest::START_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartProject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isStopProject() const {
  return which() == DaemonRequest::STOP_PROJECT;
}
inline bool DaemonRequest::Builder::isStopProject() {
  return which() == DaemonRequest::STOP_PROJECT;
}
inline bool DaemonRequest::Reader::hasStopProject() const {
  if (which() != DaemonRequest::STOP_PROJECT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStopProject() {
  if (which() != DaemonRequest::STOP_PROJECT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StopProject::Reader DaemonRequest::Reader::getStopProject() const {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StopProject::Builder DaemonRequest::Builder::getStopProject() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStopProject( ::senseAD::daemon::msg::StopProject::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StopProject::Builder DaemonRequest::Builder::initStopProject() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_PROJECT);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStopProject(
    ::capnp::Orphan< ::senseAD::daemon::msg::StopProject>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StopProject> DaemonRequest::Builder::disownStopProject() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopProject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isResetProject() const {
  return which() == DaemonRequest::RESET_PROJECT;
}
inline bool DaemonRequest::Builder::isResetProject() {
  return which() == DaemonRequest::RESET_PROJECT;
}
inline bool DaemonRequest::Reader::hasResetProject() const {
  if (which() != DaemonRequest::RESET_PROJECT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasResetProject() {
  if (which() != DaemonRequest::RESET_PROJECT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::ResetProject::Reader DaemonRequest::Reader::getResetProject() const {
  KJ_IREQUIRE((which() == DaemonRequest::RESET_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::ResetProject::Builder DaemonRequest::Builder::getResetProject() {
  KJ_IREQUIRE((which() == DaemonRequest::RESET_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setResetProject( ::senseAD::daemon::msg::ResetProject::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESET_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::ResetProject::Builder DaemonRequest::Builder::initResetProject() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESET_PROJECT);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptResetProject(
    ::capnp::Orphan< ::senseAD::daemon::msg::ResetProject>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESET_PROJECT);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::ResetProject> DaemonRequest::Builder::disownResetProject() {
  KJ_IREQUIRE((which() == DaemonRequest::RESET_PROJECT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ResetProject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isStartRecord() const {
  return which() == DaemonRequest::START_RECORD;
}
inline bool DaemonRequest::Builder::isStartRecord() {
  return which() == DaemonRequest::START_RECORD;
}
inline bool DaemonRequest::Reader::hasStartRecord() const {
  if (which() != DaemonRequest::START_RECORD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStartRecord() {
  if (which() != DaemonRequest::START_RECORD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StartRecord::Reader DaemonRequest::Reader::getStartRecord() const {
  KJ_IREQUIRE((which() == DaemonRequest::START_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StartRecord::Builder DaemonRequest::Builder::getStartRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::START_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStartRecord( ::senseAD::daemon::msg::StartRecord::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StartRecord::Builder DaemonRequest::Builder::initStartRecord() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_RECORD);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStartRecord(
    ::capnp::Orphan< ::senseAD::daemon::msg::StartRecord>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StartRecord> DaemonRequest::Builder::disownStartRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::START_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartRecord>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isStopRecord() const {
  return which() == DaemonRequest::STOP_RECORD;
}
inline bool DaemonRequest::Builder::isStopRecord() {
  return which() == DaemonRequest::STOP_RECORD;
}
inline bool DaemonRequest::Reader::hasStopRecord() const {
  if (which() != DaemonRequest::STOP_RECORD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStopRecord() {
  if (which() != DaemonRequest::STOP_RECORD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StopRecord::Reader DaemonRequest::Reader::getStopRecord() const {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StopRecord::Builder DaemonRequest::Builder::getStopRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStopRecord( ::senseAD::daemon::msg::StopRecord::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StopRecord::Builder DaemonRequest::Builder::initStopRecord() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_RECORD);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStopRecord(
    ::capnp::Orphan< ::senseAD::daemon::msg::StopRecord>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StopRecord> DaemonRequest::Builder::disownStopRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopRecord>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isCopyRecord() const {
  return which() == DaemonRequest::COPY_RECORD;
}
inline bool DaemonRequest::Builder::isCopyRecord() {
  return which() == DaemonRequest::COPY_RECORD;
}
inline bool DaemonRequest::Reader::hasCopyRecord() const {
  if (which() != DaemonRequest::COPY_RECORD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasCopyRecord() {
  if (which() != DaemonRequest::COPY_RECORD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::CopyRecord::Reader DaemonRequest::Reader::getCopyRecord() const {
  KJ_IREQUIRE((which() == DaemonRequest::COPY_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::CopyRecord::Builder DaemonRequest::Builder::getCopyRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::COPY_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setCopyRecord( ::senseAD::daemon::msg::CopyRecord::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::COPY_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::CopyRecord::Builder DaemonRequest::Builder::initCopyRecord() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::COPY_RECORD);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptCopyRecord(
    ::capnp::Orphan< ::senseAD::daemon::msg::CopyRecord>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::COPY_RECORD);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::CopyRecord> DaemonRequest::Builder::disownCopyRecord() {
  KJ_IREQUIRE((which() == DaemonRequest::COPY_RECORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CopyRecord>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isStartNode() const {
  return which() == DaemonRequest::START_NODE;
}
inline bool DaemonRequest::Builder::isStartNode() {
  return which() == DaemonRequest::START_NODE;
}
inline bool DaemonRequest::Reader::hasStartNode() const {
  if (which() != DaemonRequest::START_NODE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStartNode() {
  if (which() != DaemonRequest::START_NODE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StartNode::Reader DaemonRequest::Reader::getStartNode() const {
  KJ_IREQUIRE((which() == DaemonRequest::START_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StartNode::Builder DaemonRequest::Builder::getStartNode() {
  KJ_IREQUIRE((which() == DaemonRequest::START_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStartNode( ::senseAD::daemon::msg::StartNode::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StartNode::Builder DaemonRequest::Builder::initStartNode() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_NODE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStartNode(
    ::capnp::Orphan< ::senseAD::daemon::msg::StartNode>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::START_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StartNode> DaemonRequest::Builder::disownStartNode() {
  KJ_IREQUIRE((which() == DaemonRequest::START_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StartNode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isStopNode() const {
  return which() == DaemonRequest::STOP_NODE;
}
inline bool DaemonRequest::Builder::isStopNode() {
  return which() == DaemonRequest::STOP_NODE;
}
inline bool DaemonRequest::Reader::hasStopNode() const {
  if (which() != DaemonRequest::STOP_NODE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasStopNode() {
  if (which() != DaemonRequest::STOP_NODE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::StopNode::Reader DaemonRequest::Reader::getStopNode() const {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::StopNode::Builder DaemonRequest::Builder::getStopNode() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setStopNode( ::senseAD::daemon::msg::StopNode::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::StopNode::Builder DaemonRequest::Builder::initStopNode() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_NODE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptStopNode(
    ::capnp::Orphan< ::senseAD::daemon::msg::StopNode>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::STOP_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::StopNode> DaemonRequest::Builder::disownStopNode() {
  KJ_IREQUIRE((which() == DaemonRequest::STOP_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::StopNode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isQueryStatus() const {
  return which() == DaemonRequest::QUERY_STATUS;
}
inline bool DaemonRequest::Builder::isQueryStatus() {
  return which() == DaemonRequest::QUERY_STATUS;
}
inline bool DaemonRequest::Reader::hasQueryStatus() const {
  if (which() != DaemonRequest::QUERY_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasQueryStatus() {
  if (which() != DaemonRequest::QUERY_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryStatus::Reader DaemonRequest::Reader::getQueryStatus() const {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryStatus::Builder DaemonRequest::Builder::getQueryStatus() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setQueryStatus( ::senseAD::daemon::msg::QueryStatus::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_STATUS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryStatus::Builder DaemonRequest::Builder::initQueryStatus() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_STATUS);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptQueryStatus(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatus>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_STATUS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatus> DaemonRequest::Builder::disownQueryStatus() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isAttachProcess() const {
  return which() == DaemonRequest::ATTACH_PROCESS;
}
inline bool DaemonRequest::Builder::isAttachProcess() {
  return which() == DaemonRequest::ATTACH_PROCESS;
}
inline bool DaemonRequest::Reader::hasAttachProcess() const {
  if (which() != DaemonRequest::ATTACH_PROCESS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasAttachProcess() {
  if (which() != DaemonRequest::ATTACH_PROCESS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::AttachProcess::Reader DaemonRequest::Reader::getAttachProcess() const {
  KJ_IREQUIRE((which() == DaemonRequest::ATTACH_PROCESS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::AttachProcess::Builder DaemonRequest::Builder::getAttachProcess() {
  KJ_IREQUIRE((which() == DaemonRequest::ATTACH_PROCESS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setAttachProcess( ::senseAD::daemon::msg::AttachProcess::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::ATTACH_PROCESS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::AttachProcess::Builder DaemonRequest::Builder::initAttachProcess() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::ATTACH_PROCESS);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptAttachProcess(
    ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcess>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::ATTACH_PROCESS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcess> DaemonRequest::Builder::disownAttachProcess() {
  KJ_IREQUIRE((which() == DaemonRequest::ATTACH_PROCESS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcess>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isQueryOptions() const {
  return which() == DaemonRequest::QUERY_OPTIONS;
}
inline bool DaemonRequest::Builder::isQueryOptions() {
  return which() == DaemonRequest::QUERY_OPTIONS;
}
inline bool DaemonRequest::Reader::hasQueryOptions() const {
  if (which() != DaemonRequest::QUERY_OPTIONS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasQueryOptions() {
  if (which() != DaemonRequest::QUERY_OPTIONS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryOptions::Reader DaemonRequest::Reader::getQueryOptions() const {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_OPTIONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryOptions::Builder DaemonRequest::Builder::getQueryOptions() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_OPTIONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setQueryOptions( ::senseAD::daemon::msg::QueryOptions::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_OPTIONS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryOptions::Builder DaemonRequest::Builder::initQueryOptions() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_OPTIONS);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptQueryOptions(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptions>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_OPTIONS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptions> DaemonRequest::Builder::disownQueryOptions() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_OPTIONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptions>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isQueryVisualizationNodes() const {
  return which() == DaemonRequest::QUERY_VISUALIZATION_NODES;
}
inline bool DaemonRequest::Builder::isQueryVisualizationNodes() {
  return which() == DaemonRequest::QUERY_VISUALIZATION_NODES;
}
inline bool DaemonRequest::Reader::hasQueryVisualizationNodes() const {
  if (which() != DaemonRequest::QUERY_VISUALIZATION_NODES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasQueryVisualizationNodes() {
  if (which() != DaemonRequest::QUERY_VISUALIZATION_NODES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Reader DaemonRequest::Reader::getQueryVisualizationNodes() const {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_VISUALIZATION_NODES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Builder DaemonRequest::Builder::getQueryVisualizationNodes() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_VISUALIZATION_NODES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setQueryVisualizationNodes( ::senseAD::daemon::msg::QueryVisualizationNodes::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_VISUALIZATION_NODES);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodes::Builder DaemonRequest::Builder::initQueryVisualizationNodes() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_VISUALIZATION_NODES);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptQueryVisualizationNodes(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodes>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::QUERY_VISUALIZATION_NODES);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodes> DaemonRequest::Builder::disownQueryVisualizationNodes() {
  KJ_IREQUIRE((which() == DaemonRequest::QUERY_VISUALIZATION_NODES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodes>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isContReplay() const {
  return which() == DaemonRequest::CONT_REPLAY;
}
inline bool DaemonRequest::Builder::isContReplay() {
  return which() == DaemonRequest::CONT_REPLAY;
}
inline bool DaemonRequest::Reader::hasContReplay() const {
  if (which() != DaemonRequest::CONT_REPLAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasContReplay() {
  if (which() != DaemonRequest::CONT_REPLAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::ContReplay::Reader DaemonRequest::Reader::getContReplay() const {
  KJ_IREQUIRE((which() == DaemonRequest::CONT_REPLAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::ContReplay::Builder DaemonRequest::Builder::getContReplay() {
  KJ_IREQUIRE((which() == DaemonRequest::CONT_REPLAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setContReplay( ::senseAD::daemon::msg::ContReplay::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CONT_REPLAY);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::ContReplay::Builder DaemonRequest::Builder::initContReplay() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CONT_REPLAY);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptContReplay(
    ::capnp::Orphan< ::senseAD::daemon::msg::ContReplay>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CONT_REPLAY);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::ContReplay> DaemonRequest::Builder::disownContReplay() {
  KJ_IREQUIRE((which() == DaemonRequest::CONT_REPLAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ContReplay>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isReplayerStatusOnce() const {
  return which() == DaemonRequest::REPLAYER_STATUS_ONCE;
}
inline bool DaemonRequest::Builder::isReplayerStatusOnce() {
  return which() == DaemonRequest::REPLAYER_STATUS_ONCE;
}
inline bool DaemonRequest::Reader::hasReplayerStatusOnce() const {
  if (which() != DaemonRequest::REPLAYER_STATUS_ONCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasReplayerStatusOnce() {
  if (which() != DaemonRequest::REPLAYER_STATUS_ONCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Reader DaemonRequest::Reader::getReplayerStatusOnce() const {
  KJ_IREQUIRE((which() == DaemonRequest::REPLAYER_STATUS_ONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Builder DaemonRequest::Builder::getReplayerStatusOnce() {
  KJ_IREQUIRE((which() == DaemonRequest::REPLAYER_STATUS_ONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setReplayerStatusOnce( ::senseAD::daemon::msg::ReplayerStatusOnce::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::REPLAYER_STATUS_ONCE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::ReplayerStatusOnce::Builder DaemonRequest::Builder::initReplayerStatusOnce() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::REPLAYER_STATUS_ONCE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptReplayerStatusOnce(
    ::capnp::Orphan< ::senseAD::daemon::msg::ReplayerStatusOnce>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::REPLAYER_STATUS_ONCE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::ReplayerStatusOnce> DaemonRequest::Builder::disownReplayerStatusOnce() {
  KJ_IREQUIRE((which() == DaemonRequest::REPLAYER_STATUS_ONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::ReplayerStatusOnce>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isSwitchMode() const {
  return which() == DaemonRequest::SWITCH_MODE;
}
inline bool DaemonRequest::Builder::isSwitchMode() {
  return which() == DaemonRequest::SWITCH_MODE;
}
inline bool DaemonRequest::Reader::hasSwitchMode() const {
  if (which() != DaemonRequest::SWITCH_MODE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasSwitchMode() {
  if (which() != DaemonRequest::SWITCH_MODE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::SwitchMode::Reader DaemonRequest::Reader::getSwitchMode() const {
  KJ_IREQUIRE((which() == DaemonRequest::SWITCH_MODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::SwitchMode::Builder DaemonRequest::Builder::getSwitchMode() {
  KJ_IREQUIRE((which() == DaemonRequest::SWITCH_MODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setSwitchMode( ::senseAD::daemon::msg::SwitchMode::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::SWITCH_MODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::SwitchMode::Builder DaemonRequest::Builder::initSwitchMode() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::SWITCH_MODE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptSwitchMode(
    ::capnp::Orphan< ::senseAD::daemon::msg::SwitchMode>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::SWITCH_MODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::SwitchMode> DaemonRequest::Builder::disownSwitchMode() {
  KJ_IREQUIRE((which() == DaemonRequest::SWITCH_MODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SwitchMode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isPersistTag() const {
  return which() == DaemonRequest::PERSIST_TAG;
}
inline bool DaemonRequest::Builder::isPersistTag() {
  return which() == DaemonRequest::PERSIST_TAG;
}
inline bool DaemonRequest::Reader::hasPersistTag() const {
  if (which() != DaemonRequest::PERSIST_TAG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasPersistTag() {
  if (which() != DaemonRequest::PERSIST_TAG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::PersistTag::Reader DaemonRequest::Reader::getPersistTag() const {
  KJ_IREQUIRE((which() == DaemonRequest::PERSIST_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::PersistTag::Builder DaemonRequest::Builder::getPersistTag() {
  KJ_IREQUIRE((which() == DaemonRequest::PERSIST_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setPersistTag( ::senseAD::daemon::msg::PersistTag::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::PERSIST_TAG);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::PersistTag::Builder DaemonRequest::Builder::initPersistTag() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::PERSIST_TAG);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptPersistTag(
    ::capnp::Orphan< ::senseAD::daemon::msg::PersistTag>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::PERSIST_TAG);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::PersistTag> DaemonRequest::Builder::disownPersistTag() {
  KJ_IREQUIRE((which() == DaemonRequest::PERSIST_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::PersistTag>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isGetVehicle() const {
  return which() == DaemonRequest::GET_VEHICLE;
}
inline bool DaemonRequest::Builder::isGetVehicle() {
  return which() == DaemonRequest::GET_VEHICLE;
}
inline bool DaemonRequest::Reader::hasGetVehicle() const {
  if (which() != DaemonRequest::GET_VEHICLE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasGetVehicle() {
  if (which() != DaemonRequest::GET_VEHICLE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetVehicle::Reader DaemonRequest::Reader::getGetVehicle() const {
  KJ_IREQUIRE((which() == DaemonRequest::GET_VEHICLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetVehicle::Builder DaemonRequest::Builder::getGetVehicle() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_VEHICLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setGetVehicle( ::senseAD::daemon::msg::GetVehicle::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_VEHICLE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetVehicle::Builder DaemonRequest::Builder::initGetVehicle() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_VEHICLE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptGetVehicle(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetVehicle>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_VEHICLE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetVehicle> DaemonRequest::Builder::disownGetVehicle() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_VEHICLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetVehicle>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isGetNetworkStatus() const {
  return which() == DaemonRequest::GET_NETWORK_STATUS;
}
inline bool DaemonRequest::Builder::isGetNetworkStatus() {
  return which() == DaemonRequest::GET_NETWORK_STATUS;
}
inline bool DaemonRequest::Reader::hasGetNetworkStatus() const {
  if (which() != DaemonRequest::GET_NETWORK_STATUS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasGetNetworkStatus() {
  if (which() != DaemonRequest::GET_NETWORK_STATUS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetNetworkStatus::Reader DaemonRequest::Reader::getGetNetworkStatus() const {
  KJ_IREQUIRE((which() == DaemonRequest::GET_NETWORK_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetNetworkStatus::Builder DaemonRequest::Builder::getGetNetworkStatus() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_NETWORK_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setGetNetworkStatus( ::senseAD::daemon::msg::GetNetworkStatus::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_NETWORK_STATUS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetNetworkStatus::Builder DaemonRequest::Builder::initGetNetworkStatus() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_NETWORK_STATUS);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptGetNetworkStatus(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetNetworkStatus>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_NETWORK_STATUS);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetNetworkStatus> DaemonRequest::Builder::disownGetNetworkStatus() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_NETWORK_STATUS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetNetworkStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isGetDiskInfo() const {
  return which() == DaemonRequest::GET_DISK_INFO;
}
inline bool DaemonRequest::Builder::isGetDiskInfo() {
  return which() == DaemonRequest::GET_DISK_INFO;
}
inline bool DaemonRequest::Reader::hasGetDiskInfo() const {
  if (which() != DaemonRequest::GET_DISK_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasGetDiskInfo() {
  if (which() != DaemonRequest::GET_DISK_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetDiskInfo::Reader DaemonRequest::Reader::getGetDiskInfo() const {
  KJ_IREQUIRE((which() == DaemonRequest::GET_DISK_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetDiskInfo::Builder DaemonRequest::Builder::getGetDiskInfo() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_DISK_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setGetDiskInfo( ::senseAD::daemon::msg::GetDiskInfo::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_DISK_INFO);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetDiskInfo::Builder DaemonRequest::Builder::initGetDiskInfo() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_DISK_INFO);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptGetDiskInfo(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfo>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_DISK_INFO);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfo> DaemonRequest::Builder::disownGetDiskInfo() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_DISK_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isGetPkgVersion() const {
  return which() == DaemonRequest::GET_PKG_VERSION;
}
inline bool DaemonRequest::Builder::isGetPkgVersion() {
  return which() == DaemonRequest::GET_PKG_VERSION;
}
inline bool DaemonRequest::Reader::hasGetPkgVersion() const {
  if (which() != DaemonRequest::GET_PKG_VERSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasGetPkgVersion() {
  if (which() != DaemonRequest::GET_PKG_VERSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetPkgVersion::Reader DaemonRequest::Reader::getGetPkgVersion() const {
  KJ_IREQUIRE((which() == DaemonRequest::GET_PKG_VERSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetPkgVersion::Builder DaemonRequest::Builder::getGetPkgVersion() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_PKG_VERSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setGetPkgVersion( ::senseAD::daemon::msg::GetPkgVersion::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_PKG_VERSION);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetPkgVersion::Builder DaemonRequest::Builder::initGetPkgVersion() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_PKG_VERSION);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptGetPkgVersion(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetPkgVersion>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_PKG_VERSION);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetPkgVersion> DaemonRequest::Builder::disownGetPkgVersion() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_PKG_VERSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetPkgVersion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isCalibration() const {
  return which() == DaemonRequest::CALIBRATION;
}
inline bool DaemonRequest::Builder::isCalibration() {
  return which() == DaemonRequest::CALIBRATION;
}
inline bool DaemonRequest::Reader::hasCalibration() const {
  if (which() != DaemonRequest::CALIBRATION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasCalibration() {
  if (which() != DaemonRequest::CALIBRATION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::Calibration::Reader DaemonRequest::Reader::getCalibration() const {
  KJ_IREQUIRE((which() == DaemonRequest::CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::Calibration::Builder DaemonRequest::Builder::getCalibration() {
  KJ_IREQUIRE((which() == DaemonRequest::CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setCalibration( ::senseAD::daemon::msg::Calibration::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CALIBRATION);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::Calibration::Builder DaemonRequest::Builder::initCalibration() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CALIBRATION);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptCalibration(
    ::capnp::Orphan< ::senseAD::daemon::msg::Calibration>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::CALIBRATION);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::Calibration> DaemonRequest::Builder::disownCalibration() {
  KJ_IREQUIRE((which() == DaemonRequest::CALIBRATION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::Calibration>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isRestartNode() const {
  return which() == DaemonRequest::RESTART_NODE;
}
inline bool DaemonRequest::Builder::isRestartNode() {
  return which() == DaemonRequest::RESTART_NODE;
}
inline bool DaemonRequest::Reader::hasRestartNode() const {
  if (which() != DaemonRequest::RESTART_NODE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasRestartNode() {
  if (which() != DaemonRequest::RESTART_NODE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::RestartNode::Reader DaemonRequest::Reader::getRestartNode() const {
  KJ_IREQUIRE((which() == DaemonRequest::RESTART_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::RestartNode::Builder DaemonRequest::Builder::getRestartNode() {
  KJ_IREQUIRE((which() == DaemonRequest::RESTART_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setRestartNode( ::senseAD::daemon::msg::RestartNode::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESTART_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::RestartNode::Builder DaemonRequest::Builder::initRestartNode() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESTART_NODE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptRestartNode(
    ::capnp::Orphan< ::senseAD::daemon::msg::RestartNode>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::RESTART_NODE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::RestartNode> DaemonRequest::Builder::disownRestartNode() {
  KJ_IREQUIRE((which() == DaemonRequest::RESTART_NODE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::RestartNode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRequest::Reader::isGetCopyPercentage() const {
  return which() == DaemonRequest::GET_COPY_PERCENTAGE;
}
inline bool DaemonRequest::Builder::isGetCopyPercentage() {
  return which() == DaemonRequest::GET_COPY_PERCENTAGE;
}
inline bool DaemonRequest::Reader::hasGetCopyPercentage() const {
  if (which() != DaemonRequest::GET_COPY_PERCENTAGE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRequest::Builder::hasGetCopyPercentage() {
  if (which() != DaemonRequest::GET_COPY_PERCENTAGE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetCopyPercentage::Reader DaemonRequest::Reader::getGetCopyPercentage() const {
  KJ_IREQUIRE((which() == DaemonRequest::GET_COPY_PERCENTAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetCopyPercentage::Builder DaemonRequest::Builder::getGetCopyPercentage() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_COPY_PERCENTAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::setGetCopyPercentage( ::senseAD::daemon::msg::GetCopyPercentage::Reader value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_COPY_PERCENTAGE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetCopyPercentage::Builder DaemonRequest::Builder::initGetCopyPercentage() {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_COPY_PERCENTAGE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRequest::Builder::adoptGetCopyPercentage(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentage>&& value) {
  _builder.setDataField<DaemonRequest::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DaemonRequest::GET_COPY_PERCENTAGE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentage> DaemonRequest::Builder::disownGetCopyPercentage() {
  KJ_IREQUIRE((which() == DaemonRequest::GET_COPY_PERCENTAGE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentage>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::daemon::msg::DaemonRespond::Which DaemonRespond::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::daemon::msg::DaemonRespond::Which DaemonRespond::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DaemonRespond::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DaemonRespond::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DaemonRespond::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DaemonRespond::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DaemonRespond::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DaemonRespond::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DaemonRespond::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::hasResp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasResp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::CmdRespond::Reader DaemonRespond::Reader::getResp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::CmdRespond::Builder DaemonRespond::Builder::getResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::daemon::msg::CmdRespond::Pipeline DaemonRespond::Pipeline::getResp() {
  return  ::senseAD::daemon::msg::CmdRespond::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DaemonRespond::Builder::setResp( ::senseAD::daemon::msg::CmdRespond::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::CmdRespond::Builder DaemonRespond::Builder::initResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptResp(
    ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond> DaemonRespond::Builder::disownResp() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isCmdRespond() const {
  return which() == DaemonRespond::CMD_RESPOND;
}
inline bool DaemonRespond::Builder::isCmdRespond() {
  return which() == DaemonRespond::CMD_RESPOND;
}
inline bool DaemonRespond::Reader::hasCmdRespond() const {
  if (which() != DaemonRespond::CMD_RESPOND) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasCmdRespond() {
  if (which() != DaemonRespond::CMD_RESPOND) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::CmdRespond::Reader DaemonRespond::Reader::getCmdRespond() const {
  KJ_IREQUIRE((which() == DaemonRespond::CMD_RESPOND),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::CmdRespond::Builder DaemonRespond::Builder::getCmdRespond() {
  KJ_IREQUIRE((which() == DaemonRespond::CMD_RESPOND),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setCmdRespond( ::senseAD::daemon::msg::CmdRespond::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::CMD_RESPOND);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::CmdRespond::Builder DaemonRespond::Builder::initCmdRespond() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::CMD_RESPOND);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptCmdRespond(
    ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::CMD_RESPOND);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::CmdRespond> DaemonRespond::Builder::disownCmdRespond() {
  KJ_IREQUIRE((which() == DaemonRespond::CMD_RESPOND),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::CmdRespond>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isQueryStatusResponse() const {
  return which() == DaemonRespond::QUERY_STATUS_RESPONSE;
}
inline bool DaemonRespond::Builder::isQueryStatusResponse() {
  return which() == DaemonRespond::QUERY_STATUS_RESPONSE;
}
inline bool DaemonRespond::Reader::hasQueryStatusResponse() const {
  if (which() != DaemonRespond::QUERY_STATUS_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasQueryStatusResponse() {
  if (which() != DaemonRespond::QUERY_STATUS_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryStatusResponse::Reader DaemonRespond::Reader::getQueryStatusResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_STATUS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryStatusResponse::Builder DaemonRespond::Builder::getQueryStatusResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_STATUS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setQueryStatusResponse( ::senseAD::daemon::msg::QueryStatusResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_STATUS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryStatusResponse::Builder DaemonRespond::Builder::initQueryStatusResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_STATUS_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptQueryStatusResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatusResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_STATUS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryStatusResponse> DaemonRespond::Builder::disownQueryStatusResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_STATUS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryStatusResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isAttachProcessResponse() const {
  return which() == DaemonRespond::ATTACH_PROCESS_RESPONSE;
}
inline bool DaemonRespond::Builder::isAttachProcessResponse() {
  return which() == DaemonRespond::ATTACH_PROCESS_RESPONSE;
}
inline bool DaemonRespond::Reader::hasAttachProcessResponse() const {
  if (which() != DaemonRespond::ATTACH_PROCESS_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasAttachProcessResponse() {
  if (which() != DaemonRespond::ATTACH_PROCESS_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::AttachProcessResponse::Reader DaemonRespond::Reader::getAttachProcessResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::ATTACH_PROCESS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::AttachProcessResponse::Builder DaemonRespond::Builder::getAttachProcessResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::ATTACH_PROCESS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setAttachProcessResponse( ::senseAD::daemon::msg::AttachProcessResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::ATTACH_PROCESS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::AttachProcessResponse::Builder DaemonRespond::Builder::initAttachProcessResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::ATTACH_PROCESS_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptAttachProcessResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcessResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::ATTACH_PROCESS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::AttachProcessResponse> DaemonRespond::Builder::disownAttachProcessResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::ATTACH_PROCESS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::AttachProcessResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isQueryOptionsResponse() const {
  return which() == DaemonRespond::QUERY_OPTIONS_RESPONSE;
}
inline bool DaemonRespond::Builder::isQueryOptionsResponse() {
  return which() == DaemonRespond::QUERY_OPTIONS_RESPONSE;
}
inline bool DaemonRespond::Reader::hasQueryOptionsResponse() const {
  if (which() != DaemonRespond::QUERY_OPTIONS_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasQueryOptionsResponse() {
  if (which() != DaemonRespond::QUERY_OPTIONS_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryOptionsResponse::Reader DaemonRespond::Reader::getQueryOptionsResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_OPTIONS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryOptionsResponse::Builder DaemonRespond::Builder::getQueryOptionsResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_OPTIONS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setQueryOptionsResponse( ::senseAD::daemon::msg::QueryOptionsResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_OPTIONS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryOptionsResponse::Builder DaemonRespond::Builder::initQueryOptionsResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_OPTIONS_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptQueryOptionsResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptionsResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_OPTIONS_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryOptionsResponse> DaemonRespond::Builder::disownQueryOptionsResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_OPTIONS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryOptionsResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isQueryVisualizationNodesResponse() const {
  return which() == DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE;
}
inline bool DaemonRespond::Builder::isQueryVisualizationNodesResponse() {
  return which() == DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE;
}
inline bool DaemonRespond::Reader::hasQueryVisualizationNodesResponse() const {
  if (which() != DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasQueryVisualizationNodesResponse() {
  if (which() != DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Reader DaemonRespond::Reader::getQueryVisualizationNodesResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Builder DaemonRespond::Builder::getQueryVisualizationNodesResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setQueryVisualizationNodesResponse( ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::QueryVisualizationNodesResponse::Builder DaemonRespond::Builder::initQueryVisualizationNodesResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptQueryVisualizationNodesResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::QueryVisualizationNodesResponse> DaemonRespond::Builder::disownQueryVisualizationNodesResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::QUERY_VISUALIZATION_NODES_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::QueryVisualizationNodesResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isGetDiskInfoResponse() const {
  return which() == DaemonRespond::GET_DISK_INFO_RESPONSE;
}
inline bool DaemonRespond::Builder::isGetDiskInfoResponse() {
  return which() == DaemonRespond::GET_DISK_INFO_RESPONSE;
}
inline bool DaemonRespond::Reader::hasGetDiskInfoResponse() const {
  if (which() != DaemonRespond::GET_DISK_INFO_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasGetDiskInfoResponse() {
  if (which() != DaemonRespond::GET_DISK_INFO_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Reader DaemonRespond::Reader::getGetDiskInfoResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::GET_DISK_INFO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Builder DaemonRespond::Builder::getGetDiskInfoResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::GET_DISK_INFO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setGetDiskInfoResponse( ::senseAD::daemon::msg::GetDiskInfoResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_DISK_INFO_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetDiskInfoResponse::Builder DaemonRespond::Builder::initGetDiskInfoResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_DISK_INFO_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptGetDiskInfoResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfoResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_DISK_INFO_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetDiskInfoResponse> DaemonRespond::Builder::disownGetDiskInfoResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::GET_DISK_INFO_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetDiskInfoResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DaemonRespond::Reader::isGetCopyPercentageResponse() const {
  return which() == DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE;
}
inline bool DaemonRespond::Builder::isGetCopyPercentageResponse() {
  return which() == DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE;
}
inline bool DaemonRespond::Reader::hasGetCopyPercentageResponse() const {
  if (which() != DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DaemonRespond::Builder::hasGetCopyPercentageResponse() {
  if (which() != DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Reader DaemonRespond::Reader::getGetCopyPercentageResponse() const {
  KJ_IREQUIRE((which() == DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Builder DaemonRespond::Builder::getGetCopyPercentageResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::setGetCopyPercentageResponse( ::senseAD::daemon::msg::GetCopyPercentageResponse::Reader value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::GetCopyPercentageResponse::Builder DaemonRespond::Builder::initGetCopyPercentageResponse() {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE);
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DaemonRespond::Builder::adoptGetCopyPercentageResponse(
    ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentageResponse>&& value) {
  _builder.setDataField<DaemonRespond::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE);
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::GetCopyPercentageResponse> DaemonRespond::Builder::disownGetCopyPercentageResponse() {
  KJ_IREQUIRE((which() == DaemonRespond::GET_COPY_PERCENTAGE_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::GetCopyPercentageResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NodeCtrlMsg::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NodeCtrlMsg::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader NodeCtrlMsg::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeCtrlMsg::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline NodeCtrlMsg::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NodeCtrlMsg::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder NodeCtrlMsg::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NodeCtrlMsg::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> NodeCtrlMsg::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NodeCtrlMsg::Reader::hasNodeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NodeCtrlMsg::Builder::hasNodeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Reader NodeCtrlMsg::Reader::getNodeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Builder NodeCtrlMsg::Builder::getNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NodeCtrlMsg::Builder::setNodeList( ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>::Builder NodeCtrlMsg::Builder::initNodeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NodeCtrlMsg::Builder::adoptNodeList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>> NodeCtrlMsg::Builder::disownNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::Ctrl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Ctrl::Reader::hasNodeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Ctrl::Builder::hasNodeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Ctrl::Reader::getNodeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Ctrl::Builder::getNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Ctrl::Builder::setNodeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Ctrl::Builder::initNodeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Ctrl::Builder::adoptNodeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Ctrl::Builder::disownNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::daemon::msg::Ctrl::CtrlRequest Ctrl::Reader::getRequest() const {
  return _reader.getDataField< ::senseAD::daemon::msg::Ctrl::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::Ctrl::CtrlRequest Ctrl::Builder::getRequest() {
  return _builder.getDataField< ::senseAD::daemon::msg::Ctrl::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Ctrl::Builder::setRequest( ::senseAD::daemon::msg::Ctrl::CtrlRequest value) {
  _builder.setDataField< ::senseAD::daemon::msg::Ctrl::CtrlRequest>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CmdRespond::Reader::getResult() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CmdRespond::Builder::getResult() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CmdRespond::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CmdRespond::Reader::hasDetail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CmdRespond::Builder::hasDetail() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CmdRespond::Reader::getDetail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CmdRespond::Builder::getDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CmdRespond::Builder::setDetail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CmdRespond::Builder::initDetail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CmdRespond::Builder::adoptDetail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CmdRespond::Builder::disownDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasDataPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasDataPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getDataPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setDataPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initDataPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptDataPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasVehicle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasVehicle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getVehicle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getVehicle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setVehicle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initVehicle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptVehicle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownVehicle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasCase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasCase() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getCase() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setCase( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initCase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptCase(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasPlace() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasPlace() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getPlace() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setPlace( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initPlace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptPlace(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasRoutingCase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasRoutingCase() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getRoutingCase() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getRoutingCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setRoutingCase( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initRoutingCase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptRoutingCase(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownRoutingCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasCustomArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasCustomArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader StartProject::Reader::getCustomArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StartProject::Builder::getCustomArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setCustomArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void StartProject::Builder::setCustomArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StartProject::Builder::initCustomArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptCustomArguments(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> StartProject::Builder::disownCustomArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasEnvArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasEnvArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader StartProject::Reader::getEnvArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StartProject::Builder::getEnvArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setEnvArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void StartProject::Builder::setEnvArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StartProject::Builder::initEnvArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptEnvArguments(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> StartProject::Builder::disownEnvArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::getAttachable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool StartProject::Builder::getAttachable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StartProject::Builder::setAttachable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StartProject::Reader::getUseCachedConfig() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool StartProject::Builder::getUseCachedConfig() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void StartProject::Builder::setUseCachedConfig(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool StartProject::Reader::hasCustomMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasCustomMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getCustomMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getCustomMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setCustomMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initCustomMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptCustomMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownCustomMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasNsysNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasNsysNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getNsysNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getNsysNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setNsysNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initNsysNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptNsysNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownNsysNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasRosBag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasRosBag() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getRosBag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getRosBag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setRosBag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initRosBag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptRosBag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownRosBag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool StartProject::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartProject::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartProject::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void StartProject::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartProject::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void StartProject::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartProject::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool StartProject::Reader::getIsVisualizerMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool StartProject::Builder::getIsVisualizerMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void StartProject::Builder::setIsVisualizerMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool StartProject::Reader::getWithOutVideo() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool StartProject::Builder::getWithOutVideo() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void StartProject::Builder::setWithOutVideo(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void StopProject::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StopProject::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopProject::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ResetProject::Reader::hasDataPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ResetProject::Builder::hasDataPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ResetProject::Reader::getDataPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ResetProject::Builder::getDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ResetProject::Builder::setDataPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ResetProject::Builder::initDataPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ResetProject::Builder::adoptDataPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ResetProject::Builder::disownDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::Void StartRecord::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StartRecord::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StartRecord::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void StopRecord::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StopRecord::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopRecord::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StopRecordResponse::Reader::getResult() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool StopRecordResponse::Builder::getResult() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopRecordResponse::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StopRecordResponse::Reader::hasDetail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopRecordResponse::Builder::hasDetail() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StopRecordResponse::Reader::getDetail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StopRecordResponse::Builder::getDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopRecordResponse::Builder::setDetail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StopRecordResponse::Builder::initDetail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StopRecordResponse::Builder::adoptDetail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StopRecordResponse::Builder::disownDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StopRecordResponse::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StopRecordResponse::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StopRecordResponse::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StopRecordResponse::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StopRecordResponse::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StopRecordResponse::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StopRecordResponse::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StopRecordResponse::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CopyRecord::Reader::hasPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CopyRecord::Builder::hasPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CopyRecord::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CopyRecord::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CopyRecord::Builder::setPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CopyRecord::Builder::initPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CopyRecord::Builder::adoptPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CopyRecord::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::Void GetCopyPercentage::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void GetCopyPercentage::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetCopyPercentage::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double GetCopyPercentageResponse::Reader::getCopyPercentage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double GetCopyPercentageResponse::Builder::getCopyPercentage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetCopyPercentageResponse::Builder::setCopyPercentage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StartNode::Reader::hasNodeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StartNode::Builder::hasNodeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartNode::Reader::getNodeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartNode::Builder::getNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StartNode::Builder::setNodeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartNode::Builder::initNodeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StartNode::Builder::adoptNodeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartNode::Builder::disownNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StartNode::Reader::hasBashPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StartNode::Builder::hasBashPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StartNode::Reader::getBashPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StartNode::Builder::getBashPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StartNode::Builder::setBashPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StartNode::Builder::initBashPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StartNode::Builder::adoptBashPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StartNode::Builder::disownBashPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool StopNode::Reader::hasNodeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopNode::Builder::hasNodeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader StopNode::Reader::getNodeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StopNode::Builder::getNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopNode::Builder::setNodeName( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void StopNode::Builder::setNodeName(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder StopNode::Builder::initNodeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StopNode::Builder::adoptNodeName(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> StopNode::Builder::disownNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RestartNode::Reader::hasNodeName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RestartNode::Builder::hasNodeName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RestartNode::Reader::getNodeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RestartNode::Builder::getNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RestartNode::Builder::setNodeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RestartNode::Builder::initNodeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RestartNode::Builder::adoptNodeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RestartNode::Builder::disownNodeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RestartNode::Reader::hasBashPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RestartNode::Builder::hasBashPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RestartNode::Reader::getBashPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RestartNode::Builder::getBashPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RestartNode::Builder::setBashPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RestartNode::Builder::initBashPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RestartNode::Builder::adoptBashPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RestartNode::Builder::disownBashPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::capnp::Void QueryStatus::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void QueryStatus::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryStatus::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueryStatusResponse::Reader::getIsRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool QueryStatusResponse::Builder::getIsRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryStatusResponse::Builder::setIsRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueryStatusResponse::Reader::hasCurrentState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryStatusResponse::Builder::hasCurrentState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueryStatusResponse::Reader::getCurrentState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueryStatusResponse::Builder::getCurrentState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryStatusResponse::Builder::setCurrentState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueryStatusResponse::Builder::initCurrentState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueryStatusResponse::Builder::adoptCurrentState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueryStatusResponse::Builder::disownCurrentState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QueryStatusResponse::Reader::hasDrivingMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueryStatusResponse::Builder::hasDrivingMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueryStatusResponse::Reader::getDrivingMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueryStatusResponse::Builder::getDrivingMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryStatusResponse::Builder::setDrivingMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueryStatusResponse::Builder::initDrivingMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QueryStatusResponse::Builder::adoptDrivingMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueryStatusResponse::Builder::disownDrivingMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QueryStatusResponse::Reader::hasNodeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool QueryStatusResponse::Builder::hasNodeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Reader QueryStatusResponse::Reader::getNodeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Builder QueryStatusResponse::Builder::getNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QueryStatusResponse::Builder::setNodeList( ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>::Builder QueryStatusResponse::Builder::initNodeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void QueryStatusResponse::Builder::adoptNodeList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>> QueryStatusResponse::Builder::disownNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::daemon::msg::QueryNodeResponse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool QueryNodeResponse::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryNodeResponse::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueryNodeResponse::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueryNodeResponse::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryNodeResponse::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueryNodeResponse::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueryNodeResponse::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueryNodeResponse::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::daemon::msg::QueryNodeResponse::ProcState QueryNodeResponse::Reader::getIsRunning() const {
  return _reader.getDataField< ::senseAD::daemon::msg::QueryNodeResponse::ProcState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::QueryNodeResponse::ProcState QueryNodeResponse::Builder::getIsRunning() {
  return _builder.getDataField< ::senseAD::daemon::msg::QueryNodeResponse::ProcState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setIsRunning( ::senseAD::daemon::msg::QueryNodeResponse::ProcState value) {
  _builder.setDataField< ::senseAD::daemon::msg::QueryNodeResponse::ProcState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QueryNodeResponse::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t QueryNodeResponse::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Status QueryNodeResponse::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Status QueryNodeResponse::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setStatus( ::senseAD::daemon::msg::ComponentStateInfo::Status value) {
  _builder.setDataField< ::senseAD::daemon::msg::ComponentStateInfo::Status>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QueryNodeResponse::Reader::getIgnoreStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool QueryNodeResponse::Builder::getIgnoreStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setIgnoreStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool QueryNodeResponse::Reader::hasSoc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueryNodeResponse::Builder::hasSoc() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueryNodeResponse::Reader::getSoc() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueryNodeResponse::Builder::getSoc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryNodeResponse::Builder::setSoc( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueryNodeResponse::Builder::initSoc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QueryNodeResponse::Builder::adoptSoc(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueryNodeResponse::Builder::disownSoc() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode QueryNodeResponse::Reader::getMode() const {
  return _reader.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::daemon::msg::ComponentStateInfo::Mode QueryNodeResponse::Builder::getMode() {
  return _builder.getDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setMode( ::senseAD::daemon::msg::ComponentStateInfo::Mode value) {
  _builder.setDataField< ::senseAD::daemon::msg::ComponentStateInfo::Mode>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool QueryNodeResponse::Reader::getIsLostMsg() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool QueryNodeResponse::Builder::getIsLostMsg() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void QueryNodeResponse::Builder::setIsLostMsg(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool AttachProcess::Reader::hasProcessName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AttachProcess::Builder::hasProcessName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AttachProcess::Reader::getProcessName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AttachProcess::Builder::getProcessName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttachProcess::Builder::setProcessName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AttachProcess::Builder::initProcessName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AttachProcess::Builder::adoptProcessName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AttachProcess::Builder::disownProcessName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AttachProcessResponse::Reader::getResult() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AttachProcessResponse::Builder::getResult() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AttachProcessResponse::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AttachProcessResponse::Reader::hasDetail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AttachProcessResponse::Builder::hasDetail() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AttachProcessResponse::Reader::getDetail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AttachProcessResponse::Builder::getDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttachProcessResponse::Builder::setDetail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AttachProcessResponse::Builder::initDetail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AttachProcessResponse::Builder::adoptDetail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AttachProcessResponse::Builder::disownDetail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AttachProcessResponse::Reader::hasSoc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AttachProcessResponse::Builder::hasSoc() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::daemon::msg::SocInfo::Reader AttachProcessResponse::Reader::getSoc() const {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::daemon::msg::SocInfo::Builder AttachProcessResponse::Builder::getSoc() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::daemon::msg::SocInfo::Pipeline AttachProcessResponse::Pipeline::getSoc() {
  return  ::senseAD::daemon::msg::SocInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AttachProcessResponse::Builder::setSoc( ::senseAD::daemon::msg::SocInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::daemon::msg::SocInfo::Builder AttachProcessResponse::Builder::initSoc() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttachProcessResponse::Builder::adoptSoc(
    ::capnp::Orphan< ::senseAD::daemon::msg::SocInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::daemon::msg::SocInfo> AttachProcessResponse::Builder::disownSoc() {
  return ::capnp::_::PointerHelpers< ::senseAD::daemon::msg::SocInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SocInfo::Reader::hasMachineType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SocInfo::Builder::hasMachineType() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SocInfo::Reader::getMachineType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SocInfo::Builder::getMachineType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SocInfo::Builder::setMachineType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SocInfo::Builder::initMachineType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SocInfo::Builder::adoptMachineType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SocInfo::Builder::disownMachineType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SocInfo::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SocInfo::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SocInfo::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SocInfo::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SocInfo::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SocInfo::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SocInfo::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SocInfo::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SocInfo::Reader::hasIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SocInfo::Builder::hasIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SocInfo::Reader::getIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SocInfo::Builder::getIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SocInfo::Builder::setIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SocInfo::Builder::initIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SocInfo::Builder::adoptIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SocInfo::Builder::disownIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SocInfo::Reader::hasPassword() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SocInfo::Builder::hasPassword() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SocInfo::Reader::getPassword() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SocInfo::Builder::getPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SocInfo::Builder::setPassword( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SocInfo::Builder::initPassword(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SocInfo::Builder::adoptPassword(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SocInfo::Builder::disownPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::capnp::Void QueryOptions::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void QueryOptions::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryOptions::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueryOptionsResponse::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setMode( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setMode(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptMode(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasVehicle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasVehicle() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getVehicle() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getVehicle() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setVehicle( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setVehicle(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initVehicle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptVehicle(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownVehicle() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasCase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasCase() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getCase() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getCase() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setCase( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setCase(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initCase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptCase(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownCase() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasLayOuts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasLayOuts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getLayOuts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getLayOuts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setLayOuts( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setLayOuts(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initLayOuts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptLayOuts(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownLayOuts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasPlace() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasPlace() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getPlace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setPlace( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setPlace(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initPlace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptPlace(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasRoute() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasRoute() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getRoute() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getRoute() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setRoute( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setRoute(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initRoute(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptRoute(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownRoute() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool QueryOptionsResponse::Reader::hasSensorScheme() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool QueryOptionsResponse::Builder::hasSensorScheme() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryOptionsResponse::Reader::getSensorScheme() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::getSensorScheme() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void QueryOptionsResponse::Builder::setSensorScheme( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void QueryOptionsResponse::Builder::setSensorScheme(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryOptionsResponse::Builder::initSensorScheme(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void QueryOptionsResponse::Builder::adoptSensorScheme(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryOptionsResponse::Builder::disownSensorScheme() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::capnp::Void QueryVisualizationNodes::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void QueryVisualizationNodes::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueryVisualizationNodes::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueryVisualizationNodesResponse::Reader::hasNodes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryVisualizationNodesResponse::Builder::hasNodes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader QueryVisualizationNodesResponse::Reader::getNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryVisualizationNodesResponse::Builder::getNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryVisualizationNodesResponse::Builder::setNodes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void QueryVisualizationNodesResponse::Builder::setNodes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder QueryVisualizationNodesResponse::Builder::initNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueryVisualizationNodesResponse::Builder::adoptNodes(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> QueryVisualizationNodesResponse::Builder::disownNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasDataPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasDataPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getDataPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setDataPath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initDataPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptDataPath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownDataPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasVehicl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasVehicl() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getVehicl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getVehicl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setVehicl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initVehicl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptVehicl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownVehicl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasCase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasCase() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getCase() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setCase( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initCase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptCase(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownCase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasPlace() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasPlace() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getPlace() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setPlace( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initPlace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptPlace(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownPlace() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasRoutingcase() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasRoutingcase() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getRoutingcase() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getRoutingcase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setRoutingcase( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initRoutingcase(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptRoutingcase(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownRoutingcase() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasCustomArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasCustomArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ContReplay::Reader::getCustomArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ContReplay::Builder::getCustomArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setCustomArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void ContReplay::Builder::setCustomArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ContReplay::Builder::initCustomArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptCustomArguments(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ContReplay::Builder::disownCustomArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasEnvArguments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasEnvArguments() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ContReplay::Reader::getEnvArguments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ContReplay::Builder::getEnvArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setEnvArguments( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void ContReplay::Builder::setEnvArguments(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ContReplay::Builder::initEnvArguments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptEnvArguments(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ContReplay::Builder::disownEnvArguments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::getAttachable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ContReplay::Builder::getAttachable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ContReplay::Builder::setAttachable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ContReplay::Reader::getUseCachedConfig() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ContReplay::Builder::getUseCachedConfig() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ContReplay::Builder::setUseCachedConfig(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ContReplay::Reader::hasCustomMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasCustomMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getCustomMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getCustomMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setCustomMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initCustomMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptCustomMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownCustomMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasNsysNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasNsysNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getNsysNode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getNsysNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setNsysNode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initNsysNode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptNsysNode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownNsysNode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasRosBag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasRosBag() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getRosBag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getRosBag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setRosBag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initRosBag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptRosBag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownRosBag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ContReplay::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ContReplay::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ContReplay::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ContReplay::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ContReplay::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void ContReplay::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ContReplay::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool ContReplay::Reader::getIsReplayerReady() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool ContReplay::Builder::getIsReplayerReady() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ContReplay::Builder::setIsReplayerReady(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void ReplayerStatusOnce::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void ReplayerStatusOnce::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReplayerStatusOnce::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReplayerStatusOnceResponse::Reader::hasReplayerStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReplayerStatusOnceResponse::Builder::hasReplayerStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ReplayerStatusOnceResponse::Reader::getReplayerStatus() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ReplayerStatusOnceResponse::Builder::getReplayerStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReplayerStatusOnceResponse::Builder::setReplayerStatus( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ReplayerStatusOnceResponse::Builder::initReplayerStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ReplayerStatusOnceResponse::Builder::adoptReplayerStatus(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ReplayerStatusOnceResponse::Builder::disownReplayerStatus() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReplayerStatusOnceResponse::Reader::getIsReplayerRunning() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ReplayerStatusOnceResponse::Builder::getIsReplayerRunning() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReplayerStatusOnceResponse::Builder::setIsReplayerRunning(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SwitchMode::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SwitchMode::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SwitchMode::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SwitchMode::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SwitchMode::Builder::setMode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SwitchMode::Builder::initMode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SwitchMode::Builder::adoptMode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SwitchMode::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PersistTag::Reader::hasFileType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PersistTag::Builder::hasFileType() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PersistTag::Reader::getFileType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PersistTag::Builder::getFileType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PersistTag::Builder::setFileType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PersistTag::Builder::initFileType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PersistTag::Builder::adoptFileType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PersistTag::Builder::disownFileType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PersistTag::Reader::hasContent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PersistTag::Builder::hasContent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PersistTag::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PersistTag::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PersistTag::Builder::setContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PersistTag::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PersistTag::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PersistTag::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::capnp::Void GetVehicle::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void GetVehicle::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetVehicle::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void GetNetworkStatus::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void GetNetworkStatus::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetNetworkStatus::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void GetDiskInfo::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void GetDiskInfo::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetDiskInfo::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetDiskInfoResponse::Reader::getIsDiskExist() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GetDiskInfoResponse::Builder::getIsDiskExist() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetDiskInfoResponse::Builder::setIsDiskExist(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetDiskInfoResponse::Reader::getIsWritable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool GetDiskInfoResponse::Builder::getIsWritable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GetDiskInfoResponse::Builder::setIsWritable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GetDiskInfoResponse::Reader::hasDiskOwner() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetDiskInfoResponse::Builder::hasDiskOwner() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GetDiskInfoResponse::Reader::getDiskOwner() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GetDiskInfoResponse::Builder::getDiskOwner() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetDiskInfoResponse::Builder::setDiskOwner( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GetDiskInfoResponse::Builder::initDiskOwner(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetDiskInfoResponse::Builder::adoptDiskOwner(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GetDiskInfoResponse::Builder::disownDiskOwner() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::Void GetPkgVersion::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void GetPkgVersion::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetPkgVersion::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::Void Calibration::Reader::getPlaceHolder() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Calibration::Builder::getPlaceHolder() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Calibration::Builder::setPlaceHolder( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

