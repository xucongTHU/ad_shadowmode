// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: planning.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8ae3db9808f77f02);
CAPNP_DECLARE_SCHEMA(e33e191d19d4a30e);
CAPNP_DECLARE_SCHEMA(af8f590859e8a178);
enum class Gear_af8f590859e8a178: uint16_t {
  GEAR_NONE,
  GEAR_PARK,
  GEAR_REVERSE,
  GEAR_NEUTRAL,
  GEAR_DRIVE,
  GEAR_LOW,
};
CAPNP_DECLARE_ENUM(Gear, af8f590859e8a178);
CAPNP_DECLARE_SCHEMA(d84d59ca75e7449e);
enum class TurnSignal_d84d59ca75e7449e: uint16_t {
  TURN_NONE,
  TURN_LEFT,
  TURN_RIGHT,
  TURN_EMERGENCY,
};
CAPNP_DECLARE_ENUM(TurnSignal, d84d59ca75e7449e);
CAPNP_DECLARE_SCHEMA(d827507ae8757ed8);
enum class TrajectoryMode_d827507ae8757ed8: uint16_t {
  MODE_NONE,
  MODE_ACC,
  MODE_LKA,
};
CAPNP_DECLARE_ENUM(TrajectoryMode, d827507ae8757ed8);
CAPNP_DECLARE_SCHEMA(febe74d969b4fdea);
enum class MapType_febe74d969b4fdea: uint16_t {
  MAPLESS,
  HDMAP,
  MEMORY_MAP,
};
CAPNP_DECLARE_ENUM(MapType, febe74d969b4fdea);
CAPNP_DECLARE_SCHEMA(a35fffa2a1f5eb1a);
enum class TurnSteer_a35fffa2a1f5eb1a: uint16_t {
  STEER_NONE,
  STEER_RETURN,
  STEER_COMPLETED,
  STEER_COMPLETED_HALF,
};
CAPNP_DECLARE_ENUM(TurnSteer, a35fffa2a1f5eb1a);
CAPNP_DECLARE_SCHEMA(fd6ee6c7b5906e71);
CAPNP_DECLARE_SCHEMA(ebd16167cfc2924d);
CAPNP_DECLARE_SCHEMA(bd212665915fd695);
CAPNP_DECLARE_SCHEMA(8340b33158ddc7b6);
CAPNP_DECLARE_SCHEMA(f5b4acda486cff2f);
CAPNP_DECLARE_SCHEMA(e83f95a4038e8fe2);
enum class TrafficLightShape_e83f95a4038e8fe2: uint16_t {
  NONE,
  UNKNOWN,
  CIRCLE,
  PEDESTRIAN,
  LEFT_ARROW,
  STRAIGHT_ARROW,
  RIGHT_ARROW,
  AROUND_ARROW,
  LEFT_STRAIGHT_ARROW,
  LEFT_AROUND_ARROW,
  RIGHT_STRAIGHT_ARROW,
  BICYCLE,
  TRAFFIC_CLOSE,
  TIMER,
  TRAFFIC_ALLOW,
  OTHER,
};
CAPNP_DECLARE_ENUM(TrafficLightShape, e83f95a4038e8fe2);
CAPNP_DECLARE_SCHEMA(86bd378146386233);
enum class TrafficLightStatus_86bd378146386233: uint16_t {
  UNKNOWN,
  INVALID,
  OFF,
  GREEN,
  YELLOW,
  RED,
};
CAPNP_DECLARE_ENUM(TrafficLightStatus, 86bd378146386233);
CAPNP_DECLARE_SCHEMA(b8337a86b0ded384);
CAPNP_DECLARE_SCHEMA(a6d54a8328b9ecd4);
CAPNP_DECLARE_SCHEMA(a7ac99e2ed009327);
enum class TrafficSignType_a7ac99e2ed009327: uint16_t {
  UNKNOWN,
  ROADWORKS,
  STOP,
  OVERTAKINGPROHIBITED,
  ENDOFPROHIBITIONONOVERTAKING,
  CHILDRENANDSCHOOLZONE,
  MINSPEEDLIMIT,
  MAXSPEEDLIMIT,
  ENDOFSPEEDLIMIT,
  NOENTRANCE,
  ALLSPEEDLIMITCANCEL,
  NOPARKINGSIGN,
  STARTOFHIGHWAY,
  ENDOFHIGHWAY,
  LEFTCURVE,
  RIGHTCURVE,
  SERIESCURVES,
  OTHERS,
  SPEEDLIMIT5,
  SPEEDLIMIT10,
  SPEEDLIMIT20,
  SPEEDLIMIT30,
  SPEEDLIMIT40,
  SPEEDLIMIT50,
  SPEEDLIMIT60,
  SPEEDLIMIT70,
  SPEEDLIMIT80,
  SPEEDLIMIT90,
  SPEEDLIMIT100,
  SPEEDLIMIT110,
  SPEEDLIMIT120,
  ENDSPEEDLIMIT5,
  ENDSPEEDLIMIT10,
  ENDSPEEDLIMIT20,
  ENDSPEEDLIMIT30,
  ENDSPEEDLIMIT40,
  ENDSPEEDLIMIT50,
  ENDSPEEDLIMIT60,
  ENDSPEEDLIMIT70,
  ENDSPEEDLIMIT80,
  ENDSPEEDLIMIT90,
  ENDSPEEDLIMIT100,
  ENDSPEEDLIMIT110,
  ENDSPEEDLIMIT120,
  MINIMUMSPEEDLIMIT50,
  MINIMUMSPEEDLIMIT60,
  MINIMUMSPEEDLIMIT70,
  MINIMUMSPEEDLIMIT80,
  MINIMUMSPEEDLIMIT90,
  MINIMUMSPEEDLIMIT100,
  MINIMUMSPEEDLIMIT110,
  OVERTAKERESTRICTION,
  ENDINGOFOVERTAKERESTRICTION,
  VARIABLESPEEDLIMIT10,
  VARIABLESPEEDLIMIT20,
  VARIABLESPEEDLIMIT30,
  VARIABLESPEEDLIMIT40,
  VARIABLESPEEDLIMIT50,
  VARIABLESPEEDLIMIT60,
  VARIABLESPEEDLIMIT70,
  VARIABLESPEEDLIMIT80,
  VARIABLESPEEDLIMIT90,
  VARIABLESPEEDLIMIT100,
  VARIABLESPEEDLIMIT110,
  VARIABLESPEEDLIMIT120,
  VARIABLESIGNOTHERS,
  MERGELEFT,
  MERGERIGHT,
  ATTENTIONTOPEDESTRIANS,
  ATTENTIONTOCHILDREN,
  STOPSIGN,
  SLOWDOWNANDGIVEWAY,
  NOLEFTTURN,
  NORIGHTTURN,
  NOUTURN,
  NOAUDIBLEWARNING,
  LEFTTURNSIGN,
  RIGHTTURNSIGN,
  PEDESTRIANCROSSING,
  UTURNLANE,
  NUMBEROFLANESBECOMINGLESS,
  LANEREDUCING,
  WORKZONESIGN,
  LANECHANGED,
  LEFTTURNLANE,
  RIGHTTURNLANE,
  TOLLGATE,
  LEFTTURNANDFORWARDLANE,
  RIGHTTURNANDFORWARDLANE,
  LEFTTURNANDUTURNLANE,
  BUSLANE,
  CLOSETOTOLLGATE,
  SCHOOLAHEADLOWDOWN,
  RAMP,
  MILITARYCONTROLZONE,
  RADIOOBSERVATORY,
  TRAFFICSIGNALL,
  SPEEDLIMIT15,
  SPEEDLIMIT35,
  ENDSPEEDLIMIT35,
  XLANDR,
  XPARKING,
  XENTER,
  XHEIGHT,
  XWEIGHT,
  XENTRY,
  XSTRAIGHT,
  SKIP,
  XWIDTH,
  STRAIGHTLANE,
};
CAPNP_DECLARE_ENUM(TrafficSignType, a7ac99e2ed009327);
CAPNP_DECLARE_SCHEMA(a0e4662eff2eec70);
CAPNP_DECLARE_SCHEMA(cf809c515a1a0915);
CAPNP_DECLARE_SCHEMA(87830644dbddfc13);
CAPNP_DECLARE_SCHEMA(bb134ee7b03b5fc2);
CAPNP_DECLARE_SCHEMA(9b1d0cb396b68a51);
CAPNP_DECLARE_SCHEMA(8622309743b663c3);
CAPNP_DECLARE_SCHEMA(b524798f8c075422);
CAPNP_DECLARE_SCHEMA(9b89b7b33a5984e6);
CAPNP_DECLARE_SCHEMA(8c8d45de2cca8126);
CAPNP_DECLARE_SCHEMA(841869983a86acfa);
CAPNP_DECLARE_SCHEMA(f2e185f79963a118);
CAPNP_DECLARE_SCHEMA(e3e0d0b39a66f35c);
CAPNP_DECLARE_SCHEMA(81aa08baa2ede3a0);
CAPNP_DECLARE_SCHEMA(a7aed1a362cfbe86);
CAPNP_DECLARE_SCHEMA(e1ac51d10dacd0ba);
CAPNP_DECLARE_SCHEMA(98e3263e9c2bcb4e);
enum class NopSystemState_98e3263e9c2bcb4e: uint16_t {
  NOP_SYSTEM_STATE_DISABLE,
  NOP_SYSTEM_STATE_ERROR,
  NOP_SYSTEM_STATE_PASSIVE,
  NOP_SYSTEM_STATE_STANDBY,
  NOP_SYSTEM_STATE_ACTIVE,
  NOP_SYSTEM_STATE_SUSPEND_LONG,
  NOP_SYSTEM_STATE_DEGRATE,
  NOP_SYSTEM_STATE_TAKE_OVER,
  NOP_SYSTEM_STATE_SUSPEND_LAT,
  NOP_SYSTEM_STATE_SUSPEND_BOTH,
};
CAPNP_DECLARE_ENUM(NopSystemState, 98e3263e9c2bcb4e);
CAPNP_DECLARE_SCHEMA(d321d7259222b3a2);
enum class SystemState_d321d7259222b3a2: uint16_t {
  AUTOPILOT_DISABLE,
  AUTOPILOT_LFP_ACTIVE,
  AUTOPILOT_NOP_ACTIVE,
  AUTOPILOT_ACC_ACTIVE,
};
CAPNP_DECLARE_ENUM(SystemState, d321d7259222b3a2);
CAPNP_DECLARE_SCHEMA(8d0362f4c4ed9236);
CAPNP_DECLARE_SCHEMA(fbec872e03e8328d);
enum class MemoryDriveState_fbec872e03e8328d: uint16_t {
  DISACTIVE,
  STANDBY,
  ACTIVE,
  OVERRIDE,
  TAKEOVER,
};
CAPNP_DECLARE_ENUM(MemoryDriveState, fbec872e03e8328d);
CAPNP_DECLARE_SCHEMA(e8b71cab65c56d32);
CAPNP_DECLARE_SCHEMA(b23ac65c272c8927);
enum class ChangeStatus_b23ac65c272c8927: uint16_t {
  NO_CHANGE,
  PRE_CHANGE,
  CHANGE_CONTINUING,
  CHANGE_COMPLETED,
  CHANGE_FAILED,
};
CAPNP_DECLARE_ENUM(ChangeStatus, b23ac65c272c8927);
CAPNP_DECLARE_SCHEMA(dba4a9a0f0d42bd6);
CAPNP_DECLARE_SCHEMA(bef1dd4ec7d0be3c);
CAPNP_DECLARE_SCHEMA(8c1c39c2ed8bcfd9);
enum class PlannerErr_8c1c39c2ed8bcfd9: uint16_t {
  SUCCESS,
  NULL_PTR,
  CONFIG_I_O_ERROR,
  INVALID_PARAM,
  NO_ACTIVATED_PPL,
  INTERNAL_ERROR,
};
CAPNP_DECLARE_ENUM(PlannerErr, 8c1c39c2ed8bcfd9);
CAPNP_DECLARE_SCHEMA(92a55851ab7d597d);
enum class PathPlannerFail_92a55851ab7d597d: uint16_t {
  SUCCESS,
  INPUT_NULLPTR,
  INPUT_ERROR,
  SOLVE_FAIL,
  CHECK_SOLUTION_FAIL,
};
CAPNP_DECLARE_ENUM(PathPlannerFail, 92a55851ab7d597d);
CAPNP_DECLARE_SCHEMA(d03483556e7e7265);
enum class LatSolverFail_d03483556e7e7265: uint16_t {
  SUCCESS,
  ERROR_INPUT,
  ERROR_NULL_PTR,
  ERROR_SETUP,
  ERROR_OUTPUT_NAN,
};
CAPNP_DECLARE_ENUM(LatSolverFail, d03483556e7e7265);
CAPNP_DECLARE_SCHEMA(8c1d67cb99b2a687);
enum class AbnomalOrigin_8c1d67cb99b2a687: uint16_t {
  NORMAL,
  SPEED_JUMP,
  ACCELERATION_JUMP,
  LONGI_POS_JUMP,
};
CAPNP_DECLARE_ENUM(AbnomalOrigin, 8c1d67cb99b2a687);
CAPNP_DECLARE_SCHEMA(9cc43a5bbab83dec);
enum class InvalidLongiSpeed_9cc43a5bbab83dec: uint16_t {
  VALID,
  SPEED_S_INVALID,
  SPEED_SIZE_INVALID,
};
CAPNP_DECLARE_ENUM(InvalidLongiSpeed, 9cc43a5bbab83dec);
CAPNP_DECLARE_SCHEMA(d1a8f4a5d691ddc8);
enum class LongiSolverFail_d1a8f4a5d691ddc8: uint16_t {
  SUCCESS,
  INVALID_S_OUTPUT,
  INVALID_V_OUTPUT,
  INVALID_ACC_OUTPUT,
  INVALID_JERK_OUTPUT,
};
CAPNP_DECLARE_ENUM(LongiSolverFail, d1a8f4a5d691ddc8);
CAPNP_DECLARE_SCHEMA(dd320fe4a70c16e7);
enum class HnopActiveFail_dd320fe4a70c16e7: uint16_t {
  SUCCESS,
  INVALID_LINKID,
  INVALID_ROAD_TYPE,
  INVALID_MAP_TYPE,
  NO_ROUTING_INFO,
};
CAPNP_DECLARE_ENUM(HnopActiveFail, dd320fe4a70c16e7);
CAPNP_DECLARE_SCHEMA(f069045c254328a0);
CAPNP_DECLARE_SCHEMA(db38c3a3026d365b);
CAPNP_DECLARE_SCHEMA(c1c4a2403e5bc314);
CAPNP_DECLARE_SCHEMA(a124a002b85a7b6c);
CAPNP_DECLARE_SCHEMA(b16addb609bd4895);
CAPNP_DECLARE_SCHEMA(d7d7b2cb90dc6767);
CAPNP_DECLARE_SCHEMA(b496732e2c2bbe97);
CAPNP_DECLARE_SCHEMA(989216862f2636b2);
enum class VehicleState_989216862f2636b2: uint16_t {
  DISACTIVE,
  LCC_STANDBY,
  LCC_ACTIVE,
  LCC_OVERRIDE,
  LCC_TAKEOVER,
  NOP_STANDBY,
  NOP_ACTIVE,
  NOP_OVERRIDE,
  NOP_TAKEOVER,
};
CAPNP_DECLARE_ENUM(VehicleState, 989216862f2636b2);
CAPNP_DECLARE_SCHEMA(943f9c138ab822a0);
enum class ILCChangeDirection_943f9c138ab822a0: uint16_t {
  NONE,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(ILCChangeDirection, 943f9c138ab822a0);
CAPNP_DECLARE_SCHEMA(ef0c6089adeb0f14);
enum class NopActiveEnum_ef0c6089adeb0f14: uint16_t {
  UNKNOWN,
  INVALID,
  HNOP_VALID,
  CNOP_MAPLESS_VALID,
  CNOP_HDMAP_VALID,
};
CAPNP_DECLARE_ENUM(NopActiveEnum, ef0c6089adeb0f14);
CAPNP_DECLARE_SCHEMA(fb5577b24a17f290);
enum class PilotUnavailableReason_fb5577b24a17f290: uint16_t {
  SUCCESS,
  SCENARIO_MODEL_ERR,
  PLANNING_INPUT_ERR,
  PLANNING_PREPROCESS_ERR,
  BEHAVIOUR_PLANNING_ERR,
  MOTION_PLANNING_ERR,
  PLANNING_POSTPROCESS_ERR,
  UNDEFINED_ERR,
};
CAPNP_DECLARE_ENUM(PilotUnavailableReason, fb5577b24a17f290);
CAPNP_DECLARE_SCHEMA(d00c70b1fbde0e72);
enum class TurnTypeEnum_d00c70b1fbde0e72: uint16_t {
  UNKNOWN,
  LANE_CHANGE,
  LEFT_TURN,
  RIGHT_TURN,
  LEFT_U_TURN,
  RIGHT_U_TURN,
};
CAPNP_DECLARE_ENUM(TurnTypeEnum, d00c70b1fbde0e72);
CAPNP_DECLARE_SCHEMA(e32b2ed5051e1a6a);
enum class LcTypeEnum_e32b2ed5051e1a6a: uint16_t {
  UNKNOWN,
  ILC,
  RLC,
  ELC,
  INTERFLOW,
  IMPLICIT,
  HIGH_SPEED_LIMIT,
  AVOIDANCE_LC,
};
CAPNP_DECLARE_ENUM(LcTypeEnum, e32b2ed5051e1a6a);
CAPNP_DECLARE_SCHEMA(85865c1d9eb8a23e);
enum class BiasTypeEnum_85865c1d9eb8a23e: uint16_t {
  NO_BIAS,
  LEFT_BIAS,
  RIGHT_BIAS,
};
CAPNP_DECLARE_ENUM(BiasTypeEnum, 85865c1d9eb8a23e);
CAPNP_DECLARE_SCHEMA(bb1731b789442781);
enum class BorrowTypeEnum_bb1731b789442781: uint16_t {
  NO_BORROW,
  LEFT_BORROW,
  RIGHT_BORROW,
};
CAPNP_DECLARE_ENUM(BorrowTypeEnum, bb1731b789442781);
CAPNP_DECLARE_SCHEMA(cec2a646b05359d8);
enum class OriginUpdateReasonEnum_cec2a646b05359d8: uint16_t {
  NA,
  LAT_UPDATE,
  LON_UPDATE,
  SPEED_UPDATE,
  THETA_UPDATE,
  TIME_UPDATE,
};
CAPNP_DECLARE_ENUM(OriginUpdateReasonEnum, cec2a646b05359d8);
CAPNP_DECLARE_SCHEMA(f6a1b2d0d3b6f0d2);
enum class LaneChgFailReasonEnum_f6a1b2d0d3b6f0d2: uint16_t {
  SUCCESS,
  LC_P_P_L_FAIL_CONTINUOUSLY,
  DRIVER_CANCEL_LC,
  SOLIDLINE_IN_LC_DIRECTION,
};
CAPNP_DECLARE_ENUM(LaneChgFailReasonEnum, f6a1b2d0d3b6f0d2);
CAPNP_DECLARE_SCHEMA(9827261d0774c77c);
enum class LaneChgRiskObjEnum_9827261d0774c77c: uint16_t {
  NO_RISK,
  REAR,
  NEIGHBOR_FRONT,
  LEFT_FRONT,
  LEFT_REAR,
  RIGHT_FRONT,
  RIGHT_REAR,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(LaneChgRiskObjEnum, 9827261d0774c77c);
CAPNP_DECLARE_SCHEMA(e813b9bfeb9d288b);
enum class NearDestinationReminderEnum_e813b9bfeb9d288b: uint16_t {
  DEFAULT,
  REMINDER1000M,
  REMINDER500M,
  REMINDER100M,
};
CAPNP_DECLARE_ENUM(NearDestinationReminderEnum, e813b9bfeb9d288b);
CAPNP_DECLARE_SCHEMA(b58033bd1dde4606);
CAPNP_DECLARE_SCHEMA(c2d23427f5b7922c);
CAPNP_DECLARE_SCHEMA(9366a35b2890011c);
CAPNP_DECLARE_SCHEMA(e0fd59e5cd4d2ec4);
CAPNP_DECLARE_SCHEMA(aec446e855f89399);
enum class NOPStatusEnum_aec446e855f89399: uint16_t {
  UNKNOWN,
  NOT_READY,
  AVAILABLE,
  ACTIVE,
};
CAPNP_DECLARE_ENUM(NOPStatusEnum, aec446e855f89399);
CAPNP_DECLARE_SCHEMA(e72d273535e10432);
CAPNP_DECLARE_SCHEMA(81ad3ae8ecc8ffcf);
enum class TurningLightSignal_81ad3ae8ecc8ffcf: uint16_t {
  NEUTRAL,
  LEFT,
  ERROR,
  RIGHT,
};
CAPNP_DECLARE_ENUM(TurningLightSignal, 81ad3ae8ecc8ffcf);
CAPNP_DECLARE_SCHEMA(843b224ba5cf40c9);
enum class EVPHandsOffAlert_843b224ba5cf40c9: uint16_t {
  HANDS_ON,
  DETECT_HANDS_OFF,
  LEVEL1_ALARM,
  LEVEL2_ALARM,
  LEVEL3_ALARM,
  TIMES3_H_O_R,
  RMF_MODE,
};
CAPNP_DECLARE_ENUM(EVPHandsOffAlert, 843b224ba5cf40c9);
CAPNP_DECLARE_SCHEMA(c6b9e13b297d8446);
enum class SpdLimWarnReq_c6b9e13b297d8446: uint16_t {
  NOWARNING,
  WARNING,
};
CAPNP_DECLARE_ENUM(SpdLimWarnReq, c6b9e13b297d8446);
CAPNP_DECLARE_SCHEMA(c161c8a93bc85690);
enum class SetTimeGap_c161c8a93bc85690: uint16_t {
  TIME_GAP0,
  TIME_GAP1,
  TIME_GAP2,
  TIME_GAP3,
  TIME_GAP4,
  AUTO,
};
CAPNP_DECLARE_ENUM(SetTimeGap, c161c8a93bc85690);
CAPNP_DECLARE_SCHEMA(be717e7d99969f3d);
enum class WheelRotDir_be717e7d99969f3d: uint16_t {
  UNKNOWN,
  FORWARD,
  REVERSE,
  NOT_SUPPORTED,
  FAILED,
};
CAPNP_DECLARE_ENUM(WheelRotDir, be717e7d99969f3d);
CAPNP_DECLARE_SCHEMA(bd341345c548a91a);
enum class TransEstdGear_bd341345c548a91a: uint16_t {
  NOT_SUPPORTED,
  FIRST_GEAR,
  SECOND_GEAR,
  THIRD_GEAR,
  FOURTH_GEAR,
  FIFTH_GEAR,
  SIXTH_GEAR,
  SEVENTH_GEAR,
  EIGHTH_GEAR,
  NINTH_GEAR,
  TENTH_GEAR,
  UNUSED,
  CVT_FORWARD_GEAR,
  NEUTRAL_GEAR,
  REVERSE_GEAR,
  PARK_GEAR,
};
CAPNP_DECLARE_ENUM(TransEstdGear, bd341345c548a91a);
CAPNP_DECLARE_SCHEMA(bdd029a55b3f4b34);
CAPNP_DECLARE_SCHEMA(87db00209f12fa52);
enum class StateMachine_87db00209f12fa52: uint16_t {
  UNKNONWN,
  NOT_READY,
  ACC_READY,
  ACC_ENABLE,
  ACC_ACITVE,
  LFP_READY,
  LFP_ENABLE,
  LFP_ACITVE,
  NOP_READY,
  NOP_ENABLE,
  NOP_ACITVE,
};
CAPNP_DECLARE_ENUM(StateMachine, 87db00209f12fa52);
CAPNP_DECLARE_SCHEMA(9e300dd07c60b718);
enum class Override_9e300dd07c60b718: uint16_t {
  UNKOWN,
  LONGI_OVERRIDE,
  LATERAL_OVERRIDE,
  BOTH_OVERRIDE,
};
CAPNP_DECLARE_ENUM(Override, 9e300dd07c60b718);
CAPNP_DECLARE_SCHEMA(b90bd86c53f3e94f);
enum class PilotSwitch_b90bd86c53f3e94f: uint16_t {
  OFF,
  ACC_ON,
  LFP_ON,
  ACC_OFF,
  LFP_OFF,
};
CAPNP_DECLARE_ENUM(PilotSwitch, b90bd86c53f3e94f);
CAPNP_DECLARE_SCHEMA(b1bfeaa54bf2f426);
CAPNP_DECLARE_SCHEMA(e62cc4ffdd14b688);
enum class DSLearningCommand_e62cc4ffdd14b688: uint16_t {
  DEFAULT,
  START_REQ,
  END_REQ,
};
CAPNP_DECLARE_ENUM(DSLearningCommand, e62cc4ffdd14b688);
CAPNP_DECLARE_SCHEMA(976f1b4bd103bea1);
CAPNP_DECLARE_SCHEMA(aa127a6893a4b083);
enum class DSLearningStatus_aa127a6893a4b083: uint16_t {
  DEFAULT,
  START_RES,
  END_RES,
  FAIL_RES,
};
CAPNP_DECLARE_ENUM(DSLearningStatus, aa127a6893a4b083);
CAPNP_DECLARE_SCHEMA(e0b11079ca5ddc21);
CAPNP_DECLARE_SCHEMA(be5a2559952278f7);
enum class DSManageCommand_be5a2559952278f7: uint16_t {
  DEFAULT,
  SET,
  UNSET,
  GET_STYLE_LIST,
};
CAPNP_DECLARE_ENUM(DSManageCommand, be5a2559952278f7);
CAPNP_DECLARE_SCHEMA(82b1fb58ddb91595);
CAPNP_DECLARE_SCHEMA(f7d3f0ba9c3f7a86);
enum class DSManageStatus_f7d3f0ba9c3f7a86: uint16_t {
  DEFAULT,
  SUCCESS_TO_SET,
  FAIL_TO_SET,
  SUCCESS_TO_GET_LIST,
  FAIL_TO_GET_LIST,
};
CAPNP_DECLARE_ENUM(DSManageStatus, f7d3f0ba9c3f7a86);
CAPNP_DECLARE_SCHEMA(e59cf60d402c494c);
CAPNP_DECLARE_SCHEMA(fab9a50aea071eb0);
enum class MultiModalCommand_fab9a50aea071eb0: uint16_t {
  DEFAULT,
  TURN_LEFT,
  TURN_RIGHT,
  TO_ACCELERATE,
  TO_DECELERATE,
};
CAPNP_DECLARE_ENUM(MultiModalCommand, fab9a50aea071eb0);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace planning {

struct TrajectoryPoint {
  TrajectoryPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ae3db9808f77f02, 7, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Trajectory {
  Trajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Gear_af8f590859e8a178 Gear;

  typedef ::capnp::schemas::TurnSignal_d84d59ca75e7449e TurnSignal;

  typedef ::capnp::schemas::TrajectoryMode_d827507ae8757ed8 TrajectoryMode;

  typedef ::capnp::schemas::MapType_febe74d969b4fdea MapType;

  typedef ::capnp::schemas::TurnSteer_a35fffa2a1f5eb1a TurnSteer;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e33e191d19d4a30e, 9, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLight {
  TrafficLight() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd6ee6c7b5906e71, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReflineDebug {
  ReflineDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebd16167cfc2924d, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningLine {
  PlanningLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd212665915fd695, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReferencePoint {
  ReferencePoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8340b33158ddc7b6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLightInfo {
  TrafficLightInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::TrafficLightShape_e83f95a4038e8fe2 TrafficLightShape;

  typedef ::capnp::schemas::TrafficLightStatus_86bd378146386233 TrafficLightStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5b4acda486cff2f, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopPoint {
  StopPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8337a86b0ded384, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficSignInfo {
  TrafficSignInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::TrafficSignType_a7ac99e2ed009327 TrafficSignType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6d54a8328b9ecd4, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReferenceLane {
  ReferenceLane() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0e4662eff2eec70, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReferenceLanes {
  ReferenceLanes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf809c515a1a0915, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RelativeLocalization {
  RelativeLocalization() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87830644dbddfc13, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopPointByObject {
  StopPointByObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb134ee7b03b5fc2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObjectLabel {
  ObjectLabel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b1d0cb396b68a51, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObjectTag {
  ObjectTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8622309743b663c3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningDebug {
  PlanningDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b524798f8c075422, 12, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DecisionTarget {
  DecisionTarget() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b89b7b33a5984e6, 7, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DecisionDebug {
  DecisionDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c8d45de2cca8126, 11, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NopOutHandsOff {
  NopOutHandsOff() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(841869983a86acfa, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NopOutVehStateRequest {
  NopOutVehStateRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2e185f79963a118, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DecisionOutput {
  DecisionOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3e0d0b39a66f35c, 9, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct XDebugMsgs {
  XDebugMsgs() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81aa08baa2ede3a0, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DriverIntentionInfo {
  DriverIntentionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7aed1a362cfbe86, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningRequestSystemState {
  PlanningRequestSystemState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::NopSystemState_98e3263e9c2bcb4e NopSystemState;

  typedef ::capnp::schemas::SystemState_d321d7259222b3a2 SystemState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1ac51d10dacd0ba, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MemoryDriveInfo {
  MemoryDriveInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::MemoryDriveState_fbec872e03e8328d MemoryDriveState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d0362f4c4ed9236, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneChangeState {
  LaneChangeState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ChangeStatus_b23ac65c272c8927 ChangeStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8b71cab65c56d32, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ErrorCode {
  ErrorCode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dba4a9a0f0d42bd6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FailReason {
  FailReason() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::PlannerErr_8c1c39c2ed8bcfd9 PlannerErr;

  typedef ::capnp::schemas::PathPlannerFail_92a55851ab7d597d PathPlannerFail;

  typedef ::capnp::schemas::LatSolverFail_d03483556e7e7265 LatSolverFail;

  typedef ::capnp::schemas::AbnomalOrigin_8c1d67cb99b2a687 AbnomalOrigin;

  typedef ::capnp::schemas::InvalidLongiSpeed_9cc43a5bbab83dec InvalidLongiSpeed;

  typedef ::capnp::schemas::LongiSolverFail_d1a8f4a5d691ddc8 LongiSolverFail;

  typedef ::capnp::schemas::HnopActiveFail_dd320fe4a70c16e7 HnopActiveFail;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bef1dd4ec7d0be3c, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct KeyObj {
  KeyObj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f069045c254328a0, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LcTargetLaneGapInfo {
  LcTargetLaneGapInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db38c3a3026d365b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PipelineInfo {
  PipelineInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1c4a2403e5bc314, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EfficiencyLaneVhgInfo {
  EfficiencyLaneVhgInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a124a002b85a7b6c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SpeedLimitInfo {
  SpeedLimitInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b16addb609bd4895, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObjElactoer {
  ObjElactoer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7d7b2cb90dc6767, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningState {
  PlanningState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VehicleState_989216862f2636b2 VehicleState;

  typedef ::capnp::schemas::ILCChangeDirection_943f9c138ab822a0 ILCChangeDirection;

  typedef ::capnp::schemas::NopActiveEnum_ef0c6089adeb0f14 NopActiveEnum;

  typedef ::capnp::schemas::PilotUnavailableReason_fb5577b24a17f290 PilotUnavailableReason;

  typedef ::capnp::schemas::TurnTypeEnum_d00c70b1fbde0e72 TurnTypeEnum;

  typedef ::capnp::schemas::LcTypeEnum_e32b2ed5051e1a6a LcTypeEnum;

  typedef ::capnp::schemas::BiasTypeEnum_85865c1d9eb8a23e BiasTypeEnum;

  typedef ::capnp::schemas::BorrowTypeEnum_bb1731b789442781 BorrowTypeEnum;

  typedef ::capnp::schemas::OriginUpdateReasonEnum_cec2a646b05359d8 OriginUpdateReasonEnum;

  typedef ::capnp::schemas::LaneChgFailReasonEnum_f6a1b2d0d3b6f0d2 LaneChgFailReasonEnum;

  typedef ::capnp::schemas::LaneChgRiskObjEnum_9827261d0774c77c LaneChgRiskObjEnum;

  typedef ::capnp::schemas::NearDestinationReminderEnum_e813b9bfeb9d288b NearDestinationReminderEnum;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b496732e2c2bbe97, 7, 18)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CutInPrevention {
  CutInPrevention() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b58033bd1dde4606, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningVisData {
  PlanningVisData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2d23427f5b7922c, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningStateManual {
  PlanningStateManual() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9366a35b2890011c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NOPStatus {
  NOPStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::NOPStatusEnum_aec446e855f89399 NOPStatusEnum;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0fd59e5cd4d2ec4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Vehicleprocessing {
  Vehicleprocessing() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::TurningLightSignal_81ad3ae8ecc8ffcf TurningLightSignal;

  typedef ::capnp::schemas::EVPHandsOffAlert_843b224ba5cf40c9 EVPHandsOffAlert;

  typedef ::capnp::schemas::SpdLimWarnReq_c6b9e13b297d8446 SpdLimWarnReq;

  typedef ::capnp::schemas::SetTimeGap_c161c8a93bc85690 SetTimeGap;

  typedef ::capnp::schemas::WheelRotDir_be717e7d99969f3d WheelRotDir;

  typedef ::capnp::schemas::TransEstdGear_bd341345c548a91a TransEstdGear;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e72d273535e10432, 14, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MCUStateMachineInfo {
  MCUStateMachineInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::StateMachine_87db00209f12fa52 StateMachine;

  typedef ::capnp::schemas::Override_9e300dd07c60b718 Override;

  typedef ::capnp::schemas::PilotSwitch_b90bd86c53f3e94f PilotSwitch;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdd029a55b3f4b34, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingStyleLearningRequest {
  DrivingStyleLearningRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DSLearningCommand_e62cc4ffdd14b688 DSLearningCommand;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1bfeaa54bf2f426, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingStyleLearningResponse {
  DrivingStyleLearningResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DSLearningStatus_aa127a6893a4b083 DSLearningStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(976f1b4bd103bea1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingStyleManageRequest {
  DrivingStyleManageRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DSManageCommand_be5a2559952278f7 DSManageCommand;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0b11079ca5ddc21, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DrivingStyleManageResponse {
  DrivingStyleManageResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DSManageStatus_f7d3f0ba9c3f7a86 DSManageStatus;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82b1fb58ddb91595, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SRControl {
  SRControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::MultiModalCommand_fab9a50aea071eb0 MultiModalCommand;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e59cf60d402c494c, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TrajectoryPoint::Reader {
public:
  typedef TrajectoryPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline bool hasDirection() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getDirection() const;

  inline double getVelocity() const;

  inline float getTheta() const;

  inline float getCurvature() const;

  inline double getSumDistance() const;

  inline double getTimeDifference() const;

  inline double getYawRate() const;

  inline double getAcceleration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrajectoryPoint::Builder {
public:
  typedef TrajectoryPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline bool hasDirection();
  inline  ::senseAD::msg::std_msgs::Point::Builder getDirection();
  inline void setDirection( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initDirection();
  inline void adoptDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownDirection();

  inline double getVelocity();
  inline void setVelocity(double value);

  inline float getTheta();
  inline void setTheta(float value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline double getSumDistance();
  inline void setSumDistance(double value);

  inline double getTimeDifference();
  inline void setTimeDifference(double value);

  inline double getYawRate();
  inline void setYawRate(double value);

  inline double getAcceleration();
  inline void setAcceleration(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrajectoryPoint::Pipeline {
public:
  typedef TrajectoryPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Trajectory::Reader {
public:
  typedef Trajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasTrajPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader getTrajPointArray() const;

  inline  ::senseAD::msg::planning::Trajectory::Gear getGearEnum() const;

  inline  ::senseAD::msg::planning::Trajectory::TurnSignal getTurnSignalEnum() const;

  inline bool getUpdatedByVehicleStatus() const;

  inline  ::senseAD::msg::planning::Trajectory::TrajectoryMode getTrajectoryMode() const;

  inline  ::uint8_t getTrajState() const;

  inline  ::uint64_t getTrajTimestampNs() const;

  inline  ::senseAD::msg::planning::Trajectory::MapType getMapType() const;

  inline double getLongiPosError() const;

  inline double getLongiVelError() const;

  inline double getLongiAccError() const;

  inline double getHeadingError() const;

  inline double getLateralPosError() const;

  inline bool hasTrajectoryEnds() const;
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader getTrajectoryEnds() const;

  inline  ::senseAD::msg::planning::Trajectory::TurnSteer getTurnSteerEnum() const;

  inline double getTrajSumDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Trajectory::Builder {
public:
  typedef Trajectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasTrajPointArray();
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder getTrajPointArray();
  inline void setTrajPointArray( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder initTrajPointArray(unsigned int size);
  inline void adoptTrajPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> disownTrajPointArray();

  inline  ::senseAD::msg::planning::Trajectory::Gear getGearEnum();
  inline void setGearEnum( ::senseAD::msg::planning::Trajectory::Gear value);

  inline  ::senseAD::msg::planning::Trajectory::TurnSignal getTurnSignalEnum();
  inline void setTurnSignalEnum( ::senseAD::msg::planning::Trajectory::TurnSignal value);

  inline bool getUpdatedByVehicleStatus();
  inline void setUpdatedByVehicleStatus(bool value);

  inline  ::senseAD::msg::planning::Trajectory::TrajectoryMode getTrajectoryMode();
  inline void setTrajectoryMode( ::senseAD::msg::planning::Trajectory::TrajectoryMode value);

  inline  ::uint8_t getTrajState();
  inline void setTrajState( ::uint8_t value);

  inline  ::uint64_t getTrajTimestampNs();
  inline void setTrajTimestampNs( ::uint64_t value);

  inline  ::senseAD::msg::planning::Trajectory::MapType getMapType();
  inline void setMapType( ::senseAD::msg::planning::Trajectory::MapType value);

  inline double getLongiPosError();
  inline void setLongiPosError(double value);

  inline double getLongiVelError();
  inline void setLongiVelError(double value);

  inline double getLongiAccError();
  inline void setLongiAccError(double value);

  inline double getHeadingError();
  inline void setHeadingError(double value);

  inline double getLateralPosError();
  inline void setLateralPosError(double value);

  inline bool hasTrajectoryEnds();
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder getTrajectoryEnds();
  inline void setTrajectoryEnds( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder initTrajectoryEnds(unsigned int size);
  inline void adoptTrajectoryEnds(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> disownTrajectoryEnds();

  inline  ::senseAD::msg::planning::Trajectory::TurnSteer getTurnSteerEnum();
  inline void setTurnSteerEnum( ::senseAD::msg::planning::Trajectory::TurnSteer value);

  inline double getTrajSumDistance();
  inline void setTrajSumDistance(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Trajectory::Pipeline {
public:
  typedef Trajectory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLight::Reader {
public:
  typedef TrafficLight Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasSignalSequence() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getSignalSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLight::Builder {
public:
  typedef TrafficLight Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasSignalSequence();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getSignalSequence();
  inline void setSignalSequence( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSignalSequence(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initSignalSequence(unsigned int size);
  inline void adoptSignalSequence(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownSignalSequence();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLight::Pipeline {
public:
  typedef TrafficLight Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReflineDebug::Reader {
public:
  typedef ReflineDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPathPts() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPathPts() const;

  inline  ::uint32_t getOriginIdx() const;

  inline  ::uint32_t getIfValid() const;

  inline  ::uint32_t getFirstInvalidIdx() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReflineDebug::Builder {
public:
  typedef ReflineDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPathPts();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPathPts();
  inline void setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPathPts(unsigned int size);
  inline void adoptPathPts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPathPts();

  inline  ::uint32_t getOriginIdx();
  inline void setOriginIdx( ::uint32_t value);

  inline  ::uint32_t getIfValid();
  inline void setIfValid( ::uint32_t value);

  inline  ::uint32_t getFirstInvalidIdx();
  inline void setFirstInvalidIdx( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReflineDebug::Pipeline {
public:
  typedef ReflineDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningLine::Reader {
public:
  typedef PlanningLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasColors() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getColors() const;

  inline double getWidth() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningLine::Builder {
public:
  typedef PlanningLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPoints();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasColors();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getColors();
  inline void setColors( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColors(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initColors(unsigned int size);
  inline void adoptColors(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownColors();

  inline double getWidth();
  inline void setWidth(double value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningLine::Pipeline {
public:
  typedef PlanningLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReferencePoint::Reader {
public:
  typedef ReferencePoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPoint() const;

  inline float getHeading() const;

  inline float getCurvature() const;

  inline float getSpeedLimit() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReferencePoint::Builder {
public:
  typedef ReferencePoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPoint();
  inline void setPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPoint();
  inline void adoptPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPoint();

  inline float getHeading();
  inline void setHeading(float value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReferencePoint::Pipeline {
public:
  typedef ReferencePoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLightInfo::Reader {
public:
  typedef TrafficLightInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape getShape() const;

  inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus getStatus() const;

  inline  ::uint8_t getCountdown() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLightInfo::Builder {
public:
  typedef TrafficLightInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape getShape();
  inline void setShape( ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape value);

  inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus getStatus();
  inline void setStatus( ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus value);

  inline  ::uint8_t getCountdown();
  inline void setCountdown( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLightInfo::Pipeline {
public:
  typedef TrafficLightInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopPoint::Reader {
public:
  typedef StopPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopPoint::Builder {
public:
  typedef StopPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopPoint::Pipeline {
public:
  typedef StopPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficSignInfo::Reader {
public:
  typedef TrafficSignInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasCentroId() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getCentroId() const;

  inline float getLength() const;

  inline float getWidth() const;

  inline float getHeight() const;

  inline  ::uint8_t getDetectionStatus() const;

  inline  ::uint8_t getConfidence() const;

  inline  ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficSignInfo::Builder {
public:
  typedef TrafficSignInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasCentroId();
  inline  ::senseAD::msg::std_msgs::Point::Builder getCentroId();
  inline void setCentroId( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initCentroId();
  inline void adoptCentroId(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownCentroId();

  inline float getLength();
  inline void setLength(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getHeight();
  inline void setHeight(float value);

  inline  ::uint8_t getDetectionStatus();
  inline void setDetectionStatus( ::uint8_t value);

  inline  ::uint8_t getConfidence();
  inline void setConfidence( ::uint8_t value);

  inline  ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType getType();
  inline void setType( ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficSignInfo::Pipeline {
public:
  typedef TrafficSignInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getCentroId();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReferenceLane::Reader {
public:
  typedef ReferenceLane Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getId() const;

  inline bool getIsTargetLane() const;

  inline bool getJointed() const;

  inline  ::uint8_t getSource() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasStopPoints() const;
  inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Reader getStopPoints() const;

  inline bool hasTrafficLightInfo() const;
  inline  ::senseAD::msg::planning::TrafficLightInfo::Reader getTrafficLightInfo() const;

  inline  ::uint8_t getPositionToStopLine() const;

  inline bool hasTrafficSignInfo() const;
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Reader getTrafficSignInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReferenceLane::Builder {
public:
  typedef ReferenceLane Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getId();
  inline void setId( ::int8_t value);

  inline bool getIsTargetLane();
  inline void setIsTargetLane(bool value);

  inline bool getJointed();
  inline void setJointed(bool value);

  inline  ::uint8_t getSource();
  inline void setSource( ::uint8_t value);

  inline bool hasPoints();
  inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasStopPoints();
  inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Builder getStopPoints();
  inline void setStopPoints( ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Builder initStopPoints(unsigned int size);
  inline void adoptStopPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>> disownStopPoints();

  inline bool hasTrafficLightInfo();
  inline  ::senseAD::msg::planning::TrafficLightInfo::Builder getTrafficLightInfo();
  inline void setTrafficLightInfo( ::senseAD::msg::planning::TrafficLightInfo::Reader value);
  inline  ::senseAD::msg::planning::TrafficLightInfo::Builder initTrafficLightInfo();
  inline void adoptTrafficLightInfo(::capnp::Orphan< ::senseAD::msg::planning::TrafficLightInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::TrafficLightInfo> disownTrafficLightInfo();

  inline  ::uint8_t getPositionToStopLine();
  inline void setPositionToStopLine( ::uint8_t value);

  inline bool hasTrafficSignInfo();
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Builder getTrafficSignInfo();
  inline void setTrafficSignInfo( ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Builder initTrafficSignInfo(unsigned int size);
  inline void adoptTrafficSignInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>> disownTrafficSignInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReferenceLane::Pipeline {
public:
  typedef ReferenceLane Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::planning::TrafficLightInfo::Pipeline getTrafficLightInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReferenceLanes::Reader {
public:
  typedef ReferenceLanes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasLanes() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Reader getLanes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReferenceLanes::Builder {
public:
  typedef ReferenceLanes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasLanes();
  inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Builder getLanes();
  inline void setLanes( ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Builder initLanes(unsigned int size);
  inline void adoptLanes(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>> disownLanes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReferenceLanes::Pipeline {
public:
  typedef ReferenceLanes Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RelativeLocalization::Reader {
public:
  typedef RelativeLocalization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint8_t getHdMapStatus() const;

  inline float getDisToRamp() const;

  inline float getDisToSplit() const;

  inline float getDisToMerge() const;

  inline  ::int8_t getSplitDirection() const;

  inline  ::int8_t getMergeDirection() const;

  inline  ::uint8_t getTotalLaneNum() const;

  inline  ::uint8_t getCurrentLaneIndex() const;

  inline  ::uint8_t getLeftLineType() const;

  inline  ::uint8_t getRightLineType() const;

  inline float getLeftDisToSolid() const;

  inline float getRightDisToSolid() const;

  inline  ::uint8_t getLaneType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RelativeLocalization::Builder {
public:
  typedef RelativeLocalization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint8_t getHdMapStatus();
  inline void setHdMapStatus( ::uint8_t value);

  inline float getDisToRamp();
  inline void setDisToRamp(float value);

  inline float getDisToSplit();
  inline void setDisToSplit(float value);

  inline float getDisToMerge();
  inline void setDisToMerge(float value);

  inline  ::int8_t getSplitDirection();
  inline void setSplitDirection( ::int8_t value);

  inline  ::int8_t getMergeDirection();
  inline void setMergeDirection( ::int8_t value);

  inline  ::uint8_t getTotalLaneNum();
  inline void setTotalLaneNum( ::uint8_t value);

  inline  ::uint8_t getCurrentLaneIndex();
  inline void setCurrentLaneIndex( ::uint8_t value);

  inline  ::uint8_t getLeftLineType();
  inline void setLeftLineType( ::uint8_t value);

  inline  ::uint8_t getRightLineType();
  inline void setRightLineType( ::uint8_t value);

  inline float getLeftDisToSolid();
  inline void setLeftDisToSolid(float value);

  inline float getRightDisToSolid();
  inline void setRightDisToSolid(float value);

  inline  ::uint8_t getLaneType();
  inline void setLaneType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RelativeLocalization::Pipeline {
public:
  typedef RelativeLocalization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopPointByObject::Reader {
public:
  typedef StopPointByObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPoint() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopPointByObject::Builder {
public:
  typedef StopPointByObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPoint();
  inline void setPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPoint();
  inline void adoptPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPoint();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopPointByObject::Pipeline {
public:
  typedef StopPointByObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObjectLabel::Reader {
public:
  typedef ObjectLabel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline  ::uint8_t getLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjectLabel::Builder {
public:
  typedef ObjectLabel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::uint8_t getLabel();
  inline void setLabel( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjectLabel::Pipeline {
public:
  typedef ObjectLabel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObjectTag::Reader {
public:
  typedef ObjectTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline  ::uint8_t getTag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjectTag::Builder {
public:
  typedef ObjectTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::uint8_t getTag();
  inline void setTag( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjectTag::Pipeline {
public:
  typedef ObjectTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningDebug::Reader {
public:
  typedef PlanningDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint32_t getNum() const;

  inline  ::uint64_t getPredictTimestamp() const;

  inline bool hasX() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getX() const;

  inline bool hasY() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getY() const;

  inline bool hasV() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getV() const;

  inline bool hasYaw() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getYaw() const;

  inline bool hasA() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getA() const;

  inline bool hasJerk() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getJerk() const;

  inline double getSpeedLimit() const;

  inline double getStopDistance() const;

  inline double getSpeedRef() const;

  inline double getPlaceholder1() const;

  inline double getPlaceholder2() const;

  inline double getPlaceholder3() const;

  inline double getOriginPointX() const;

  inline double getDeltaXScenemap() const;

  inline double getDeltaXEstimation() const;

  inline bool hasObstacleTagBinary() const;
  inline  ::capnp::Text::Reader getObstacleTagBinary() const;

  inline bool hasPpTextboxString() const;
  inline  ::capnp::Text::Reader getPpTextboxString() const;

  inline bool hasLines() const;
  inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader getLines() const;

  inline bool getLongiDpSuccess() const;

  inline bool getLateralDpSuccess() const;

  inline bool getLongiSolveSuccess() const;

  inline bool getLatSolveSuccess() const;

  inline  ::uint8_t getScenarioType() const;

  inline  ::uint8_t getStageType() const;

  inline bool hasLeaderId() const;
  inline  ::capnp::Text::Reader getLeaderId() const;

  inline bool hasStageName() const;
  inline  ::capnp::Text::Reader getStageName() const;

  inline bool hasStopPointsByObject() const;
  inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Reader getStopPointsByObject() const;

  inline bool hasObjectLabel() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Reader getObjectLabel() const;

  inline bool hasObjectTag() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Reader getObjectTag() const;

  inline bool hasPolicies() const;
  inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Reader getPolicies() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningDebug::Builder {
public:
  typedef PlanningDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint32_t getNum();
  inline void setNum( ::uint32_t value);

  inline  ::uint64_t getPredictTimestamp();
  inline void setPredictTimestamp( ::uint64_t value);

  inline bool hasX();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getX();
  inline void setX( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setX(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initX(unsigned int size);
  inline void adoptX(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownX();

  inline bool hasY();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getY();
  inline void setY( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setY(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initY(unsigned int size);
  inline void adoptY(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownY();

  inline bool hasV();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getV();
  inline void setV( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setV(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownV();

  inline bool hasYaw();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getYaw();
  inline void setYaw( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYaw(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initYaw(unsigned int size);
  inline void adoptYaw(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownYaw();

  inline bool hasA();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getA();
  inline void setA( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setA(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initA(unsigned int size);
  inline void adoptA(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownA();

  inline bool hasJerk();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getJerk();
  inline void setJerk( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setJerk(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initJerk(unsigned int size);
  inline void adoptJerk(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownJerk();

  inline double getSpeedLimit();
  inline void setSpeedLimit(double value);

  inline double getStopDistance();
  inline void setStopDistance(double value);

  inline double getSpeedRef();
  inline void setSpeedRef(double value);

  inline double getPlaceholder1();
  inline void setPlaceholder1(double value);

  inline double getPlaceholder2();
  inline void setPlaceholder2(double value);

  inline double getPlaceholder3();
  inline void setPlaceholder3(double value);

  inline double getOriginPointX();
  inline void setOriginPointX(double value);

  inline double getDeltaXScenemap();
  inline void setDeltaXScenemap(double value);

  inline double getDeltaXEstimation();
  inline void setDeltaXEstimation(double value);

  inline bool hasObstacleTagBinary();
  inline  ::capnp::Text::Builder getObstacleTagBinary();
  inline void setObstacleTagBinary( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initObstacleTagBinary(unsigned int size);
  inline void adoptObstacleTagBinary(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownObstacleTagBinary();

  inline bool hasPpTextboxString();
  inline  ::capnp::Text::Builder getPpTextboxString();
  inline void setPpTextboxString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPpTextboxString(unsigned int size);
  inline void adoptPpTextboxString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPpTextboxString();

  inline bool hasLines();
  inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder getLines();
  inline void setLines( ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder initLines(unsigned int size);
  inline void adoptLines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>> disownLines();

  inline bool getLongiDpSuccess();
  inline void setLongiDpSuccess(bool value);

  inline bool getLateralDpSuccess();
  inline void setLateralDpSuccess(bool value);

  inline bool getLongiSolveSuccess();
  inline void setLongiSolveSuccess(bool value);

  inline bool getLatSolveSuccess();
  inline void setLatSolveSuccess(bool value);

  inline  ::uint8_t getScenarioType();
  inline void setScenarioType( ::uint8_t value);

  inline  ::uint8_t getStageType();
  inline void setStageType( ::uint8_t value);

  inline bool hasLeaderId();
  inline  ::capnp::Text::Builder getLeaderId();
  inline void setLeaderId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLeaderId(unsigned int size);
  inline void adoptLeaderId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLeaderId();

  inline bool hasStageName();
  inline  ::capnp::Text::Builder getStageName();
  inline void setStageName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStageName(unsigned int size);
  inline void adoptStageName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStageName();

  inline bool hasStopPointsByObject();
  inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Builder getStopPointsByObject();
  inline void setStopPointsByObject( ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Builder initStopPointsByObject(unsigned int size);
  inline void adoptStopPointsByObject(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>> disownStopPointsByObject();

  inline bool hasObjectLabel();
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Builder getObjectLabel();
  inline void setObjectLabel( ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Builder initObjectLabel(unsigned int size);
  inline void adoptObjectLabel(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>> disownObjectLabel();

  inline bool hasObjectTag();
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Builder getObjectTag();
  inline void setObjectTag( ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Builder initObjectTag(unsigned int size);
  inline void adoptObjectTag(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>> disownObjectTag();

  inline bool hasPolicies();
  inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Builder getPolicies();
  inline void setPolicies( ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Builder initPolicies(unsigned int size);
  inline void adoptPolicies(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>> disownPolicies();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningDebug::Pipeline {
public:
  typedef PlanningDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DecisionTarget::Reader {
public:
  typedef DecisionTarget Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline float getCurrentVelocity() const;

  inline  ::int32_t getLateralScenario() const;

  inline  ::int32_t getLongitudinalScenario() const;

  inline  ::int32_t getLateralTask() const;

  inline  ::int32_t getLongitudinalTask() const;

  inline  ::uint8_t getArea() const;

  inline  ::uint8_t getLatact() const;

  inline  ::uint8_t getLngact() const;

  inline  ::uint8_t getChangeDirection() const;

  inline  ::uint8_t getPreChangeDirection() const;

  inline bool hasCurrentReflineEnu() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getCurrentReflineEnu() const;

  inline bool hasTargetReflineEnu() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getTargetReflineEnu() const;

  inline float getSpeedLimit() const;

  inline float getHeadwayTime() const;

  inline bool hasStopPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getStopPoint() const;

  inline bool hasSpeedLimitPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getSpeedLimitPoint() const;

  inline  ::uint8_t getRoutingLaneChangeFlag() const;

  inline bool hasLaneTypeChangePoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getLaneTypeChangePoint() const;

  inline bool getRoutingChangeLaneTwiceFlag() const;

  inline bool hasLaneTypeChangeTwicePoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getLaneTypeChangeTwicePoint() const;

  inline bool getReflineChangeFlag() const;

  inline  ::uint8_t getSignalBlub() const;

  inline  ::uint8_t getTurntype() const;

  inline bool getTrafficStop() const;

  inline  ::uint8_t getNopSystemState() const;

  inline  ::uint64_t getDmppStartTime() const;

  inline double getDist2ramp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DecisionTarget::Builder {
public:
  typedef DecisionTarget Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline float getCurrentVelocity();
  inline void setCurrentVelocity(float value);

  inline  ::int32_t getLateralScenario();
  inline void setLateralScenario( ::int32_t value);

  inline  ::int32_t getLongitudinalScenario();
  inline void setLongitudinalScenario( ::int32_t value);

  inline  ::int32_t getLateralTask();
  inline void setLateralTask( ::int32_t value);

  inline  ::int32_t getLongitudinalTask();
  inline void setLongitudinalTask( ::int32_t value);

  inline  ::uint8_t getArea();
  inline void setArea( ::uint8_t value);

  inline  ::uint8_t getLatact();
  inline void setLatact( ::uint8_t value);

  inline  ::uint8_t getLngact();
  inline void setLngact( ::uint8_t value);

  inline  ::uint8_t getChangeDirection();
  inline void setChangeDirection( ::uint8_t value);

  inline  ::uint8_t getPreChangeDirection();
  inline void setPreChangeDirection( ::uint8_t value);

  inline bool hasCurrentReflineEnu();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getCurrentReflineEnu();
  inline void setCurrentReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initCurrentReflineEnu(unsigned int size);
  inline void adoptCurrentReflineEnu(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownCurrentReflineEnu();

  inline bool hasTargetReflineEnu();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getTargetReflineEnu();
  inline void setTargetReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initTargetReflineEnu(unsigned int size);
  inline void adoptTargetReflineEnu(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownTargetReflineEnu();

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline float getHeadwayTime();
  inline void setHeadwayTime(float value);

  inline bool hasStopPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getStopPoint();
  inline void setStopPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initStopPoint();
  inline void adoptStopPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownStopPoint();

  inline bool hasSpeedLimitPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getSpeedLimitPoint();
  inline void setSpeedLimitPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initSpeedLimitPoint();
  inline void adoptSpeedLimitPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownSpeedLimitPoint();

  inline  ::uint8_t getRoutingLaneChangeFlag();
  inline void setRoutingLaneChangeFlag( ::uint8_t value);

  inline bool hasLaneTypeChangePoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getLaneTypeChangePoint();
  inline void setLaneTypeChangePoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initLaneTypeChangePoint();
  inline void adoptLaneTypeChangePoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownLaneTypeChangePoint();

  inline bool getRoutingChangeLaneTwiceFlag();
  inline void setRoutingChangeLaneTwiceFlag(bool value);

  inline bool hasLaneTypeChangeTwicePoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getLaneTypeChangeTwicePoint();
  inline void setLaneTypeChangeTwicePoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initLaneTypeChangeTwicePoint();
  inline void adoptLaneTypeChangeTwicePoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownLaneTypeChangeTwicePoint();

  inline bool getReflineChangeFlag();
  inline void setReflineChangeFlag(bool value);

  inline  ::uint8_t getSignalBlub();
  inline void setSignalBlub( ::uint8_t value);

  inline  ::uint8_t getTurntype();
  inline void setTurntype( ::uint8_t value);

  inline bool getTrafficStop();
  inline void setTrafficStop(bool value);

  inline  ::uint8_t getNopSystemState();
  inline void setNopSystemState( ::uint8_t value);

  inline  ::uint64_t getDmppStartTime();
  inline void setDmppStartTime( ::uint64_t value);

  inline double getDist2ramp();
  inline void setDist2ramp(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DecisionTarget::Pipeline {
public:
  typedef DecisionTarget Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getStopPoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getSpeedLimitPoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getLaneTypeChangePoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getLaneTypeChangeTwicePoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DecisionDebug::Reader {
public:
  typedef DecisionDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasReflines() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader getReflines() const;

  inline bool hasJunctionReflines() const;
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader getJunctionReflines() const;

  inline bool getArriveTargetLane() const;

  inline  ::uint32_t getLateralStage() const;

  inline  ::uint32_t getIfNeedRoutingLanechange() const;

  inline  ::uint32_t getLanechangeCauseSrlIdx() const;

  inline  ::uint32_t getLanechangeRoutingIdx() const;

  inline  ::uint32_t getFaultVehicleCount() const;

  inline  ::uint32_t getEfficientLane() const;

  inline bool hasEfficientCount() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getEfficientCount() const;

  inline  ::uint32_t getEffLcScenario() const;

  inline bool hasLongsceneApplied() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLongsceneApplied() const;

  inline  ::uint32_t getHighlightLongscene() const;

  inline bool hasLatsceneTrans() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLatsceneTrans() const;

  inline  ::uint32_t getLatStage() const;

  inline double getDist2junction() const;

  inline bool hasCurrRoadid() const;
  inline  ::capnp::Text::Reader getCurrRoadid() const;

  inline bool hasCurrLandid() const;
  inline  ::capnp::Text::Reader getCurrLandid() const;

  inline  ::uint32_t getIfInJunction() const;

  inline  ::uint32_t getReflineChangeFlag() const;

  inline  ::uint32_t getRoutingChangeLaneTwiceFlag() const;

  inline bool hasTrafficlights() const;
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader getTrafficlights() const;

  inline bool hasReflineBlockForUnknown() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getReflineBlockForUnknown() const;

  inline bool hasJunctionLinkBlockForUnknown() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getJunctionLinkBlockForUnknown() const;

  inline bool hasBlockUnknownIdLine() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getBlockUnknownIdLine() const;

  inline bool hasCipvIds() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getCipvIds() const;

  inline double getEgoCarD() const;

  inline bool hasBuffer() const;
  inline  ::capnp::Text::Reader getBuffer() const;

  inline  ::int64_t getLeftLineId() const;

  inline  ::int64_t getRightLineId() const;

  inline  ::int16_t getLeftLineType() const;

  inline  ::int16_t getRightLineType() const;

  inline bool hasDmTextboxString() const;
  inline  ::capnp::Text::Reader getDmTextboxString() const;

  inline bool getCipvTakeover() const;

  inline bool getConfirmEfficiencyChange() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DecisionDebug::Builder {
public:
  typedef DecisionDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasReflines();
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder getReflines();
  inline void setReflines( ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder initReflines(unsigned int size);
  inline void adoptReflines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>> disownReflines();

  inline bool hasJunctionReflines();
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder getJunctionReflines();
  inline void setJunctionReflines( ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder initJunctionReflines(unsigned int size);
  inline void adoptJunctionReflines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>> disownJunctionReflines();

  inline bool getArriveTargetLane();
  inline void setArriveTargetLane(bool value);

  inline  ::uint32_t getLateralStage();
  inline void setLateralStage( ::uint32_t value);

  inline  ::uint32_t getIfNeedRoutingLanechange();
  inline void setIfNeedRoutingLanechange( ::uint32_t value);

  inline  ::uint32_t getLanechangeCauseSrlIdx();
  inline void setLanechangeCauseSrlIdx( ::uint32_t value);

  inline  ::uint32_t getLanechangeRoutingIdx();
  inline void setLanechangeRoutingIdx( ::uint32_t value);

  inline  ::uint32_t getFaultVehicleCount();
  inline void setFaultVehicleCount( ::uint32_t value);

  inline  ::uint32_t getEfficientLane();
  inline void setEfficientLane( ::uint32_t value);

  inline bool hasEfficientCount();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getEfficientCount();
  inline void setEfficientCount( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setEfficientCount(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initEfficientCount(unsigned int size);
  inline void adoptEfficientCount(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownEfficientCount();

  inline  ::uint32_t getEffLcScenario();
  inline void setEffLcScenario( ::uint32_t value);

  inline bool hasLongsceneApplied();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLongsceneApplied();
  inline void setLongsceneApplied( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLongsceneApplied(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLongsceneApplied(unsigned int size);
  inline void adoptLongsceneApplied(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLongsceneApplied();

  inline  ::uint32_t getHighlightLongscene();
  inline void setHighlightLongscene( ::uint32_t value);

  inline bool hasLatsceneTrans();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLatsceneTrans();
  inline void setLatsceneTrans( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLatsceneTrans(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLatsceneTrans(unsigned int size);
  inline void adoptLatsceneTrans(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLatsceneTrans();

  inline  ::uint32_t getLatStage();
  inline void setLatStage( ::uint32_t value);

  inline double getDist2junction();
  inline void setDist2junction(double value);

  inline bool hasCurrRoadid();
  inline  ::capnp::Text::Builder getCurrRoadid();
  inline void setCurrRoadid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrRoadid(unsigned int size);
  inline void adoptCurrRoadid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrRoadid();

  inline bool hasCurrLandid();
  inline  ::capnp::Text::Builder getCurrLandid();
  inline void setCurrLandid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrLandid(unsigned int size);
  inline void adoptCurrLandid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrLandid();

  inline  ::uint32_t getIfInJunction();
  inline void setIfInJunction( ::uint32_t value);

  inline  ::uint32_t getReflineChangeFlag();
  inline void setReflineChangeFlag( ::uint32_t value);

  inline  ::uint32_t getRoutingChangeLaneTwiceFlag();
  inline void setRoutingChangeLaneTwiceFlag( ::uint32_t value);

  inline bool hasTrafficlights();
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder getTrafficlights();
  inline void setTrafficlights( ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder initTrafficlights(unsigned int size);
  inline void adoptTrafficlights(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>> disownTrafficlights();

  inline bool hasReflineBlockForUnknown();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getReflineBlockForUnknown();
  inline void setReflineBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReflineBlockForUnknown(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initReflineBlockForUnknown(unsigned int size);
  inline void adoptReflineBlockForUnknown(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownReflineBlockForUnknown();

  inline bool hasJunctionLinkBlockForUnknown();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getJunctionLinkBlockForUnknown();
  inline void setJunctionLinkBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setJunctionLinkBlockForUnknown(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initJunctionLinkBlockForUnknown(unsigned int size);
  inline void adoptJunctionLinkBlockForUnknown(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownJunctionLinkBlockForUnknown();

  inline bool hasBlockUnknownIdLine();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getBlockUnknownIdLine();
  inline void setBlockUnknownIdLine( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBlockUnknownIdLine(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initBlockUnknownIdLine(unsigned int size);
  inline void adoptBlockUnknownIdLine(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownBlockUnknownIdLine();

  inline bool hasCipvIds();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getCipvIds();
  inline void setCipvIds( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCipvIds(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initCipvIds(unsigned int size);
  inline void adoptCipvIds(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownCipvIds();

  inline double getEgoCarD();
  inline void setEgoCarD(double value);

  inline bool hasBuffer();
  inline  ::capnp::Text::Builder getBuffer();
  inline void setBuffer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBuffer(unsigned int size);
  inline void adoptBuffer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBuffer();

  inline  ::int64_t getLeftLineId();
  inline void setLeftLineId( ::int64_t value);

  inline  ::int64_t getRightLineId();
  inline void setRightLineId( ::int64_t value);

  inline  ::int16_t getLeftLineType();
  inline void setLeftLineType( ::int16_t value);

  inline  ::int16_t getRightLineType();
  inline void setRightLineType( ::int16_t value);

  inline bool hasDmTextboxString();
  inline  ::capnp::Text::Builder getDmTextboxString();
  inline void setDmTextboxString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDmTextboxString(unsigned int size);
  inline void adoptDmTextboxString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDmTextboxString();

  inline bool getCipvTakeover();
  inline void setCipvTakeover(bool value);

  inline bool getConfirmEfficiencyChange();
  inline void setConfirmEfficiencyChange(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DecisionDebug::Pipeline {
public:
  typedef DecisionDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NopOutHandsOff::Reader {
public:
  typedef NopOutHandsOff Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getUilateralCtrHandsOffWarningNu() const;

  inline bool getBEnaHandsOffCnfm() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NopOutHandsOff::Builder {
public:
  typedef NopOutHandsOff Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getUilateralCtrHandsOffWarningNu();
  inline void setUilateralCtrHandsOffWarningNu( ::uint8_t value);

  inline bool getBEnaHandsOffCnfm();
  inline void setBEnaHandsOffCnfm(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NopOutHandsOff::Pipeline {
public:
  typedef NopOutHandsOff Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NopOutVehStateRequest::Reader {
public:
  typedef NopOutVehStateRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getBHazardLightReq() const;

  inline bool getBHighBeamReq() const;

  inline bool getBLowBeamReq() const;

  inline  ::uint8_t getUiLightRemindNu() const;

  inline bool getBVehicleHornReq() const;

  inline bool getBStolenAlarmWarnReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NopOutVehStateRequest::Builder {
public:
  typedef NopOutVehStateRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getBHazardLightReq();
  inline void setBHazardLightReq(bool value);

  inline bool getBHighBeamReq();
  inline void setBHighBeamReq(bool value);

  inline bool getBLowBeamReq();
  inline void setBLowBeamReq(bool value);

  inline  ::uint8_t getUiLightRemindNu();
  inline void setUiLightRemindNu( ::uint8_t value);

  inline bool getBVehicleHornReq();
  inline void setBVehicleHornReq(bool value);

  inline bool getBStolenAlarmWarnReq();
  inline void setBStolenAlarmWarnReq(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NopOutVehStateRequest::Pipeline {
public:
  typedef NopOutVehStateRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DecisionOutput::Reader {
public:
  typedef DecisionOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int8_t getUiSystemStateMachineNu() const;

  inline  ::uint8_t getUiP2NStateReminderNu() const;

  inline  ::uint8_t getUiStateReminderNu() const;

  inline  ::uint64_t getUiActiveConditionBtf() const;

  inline  ::uint64_t getUiSuppressionConditionBtf() const;

  inline  ::uint8_t getPpLatLongState() const;

  inline  ::int8_t getUiMrmStatusNu() const;

  inline  ::uint8_t getUiStateNu() const;

  inline bool hasSHandsOffState() const;
  inline  ::senseAD::msg::planning::NopOutHandsOff::Reader getSHandsOffState() const;

  inline bool getBEyeOff() const;

  inline  ::uint8_t getUiNnpScenariosNu() const;

  inline  ::uint8_t getUiNnprinoNu() const;

  inline  ::uint8_t getUiVoiceModeNu() const;

  inline  ::uint8_t getUiOnOffAudioPlayNu() const;

  inline  ::uint8_t getUiAutoOnOffSetNu() const;

  inline  ::uint8_t getUiSndStateNu() const;

  inline  ::uint8_t getUiVoiceNotifFrequencyModeNu() const;

  inline  ::uint8_t getUiCancelAudioPlayNu() const;

  inline  ::uint8_t getUiDrivingModeNu() const;

  inline  ::uint8_t getUiAlcModeNu() const;

  inline  ::uint8_t getUiOverrideStateNu() const;

  inline  ::uint8_t getUiTrafficStateNu() const;

  inline  ::uint8_t getUiSpeedAdaptConfirmNu() const;

  inline  ::uint8_t getUiOsaStatusNu() const;

  inline  ::uint8_t getUiPayModeConfirmNu() const;

  inline  ::uint8_t getUiPayModeConfirmReqNu() const;

  inline  ::uint8_t getUiLaneChangeAudioPlayNu() const;

  inline  ::uint8_t getUiLcSndRequestNu() const;

  inline  ::uint8_t getUiLaneChangeInforNu() const;

  inline  ::uint8_t getUiLaneChangeDirctionNu() const;

  inline  ::uint8_t getUiLaneChangePendingAlertNu() const;

  inline  ::uint8_t getUiOverTakeConfirmNu() const;

  inline  ::uint8_t getUiCruiseSpeedAddFeedbcakNu() const;

  inline  ::uint8_t getUiCruiseSpeedMinusFeedbackNu() const;

  inline  ::uint8_t getUiCruiseDistanceAddFeedbackNu() const;

  inline  ::uint8_t getUiCruiseDistanceMinusFeedbackNu() const;

  inline  ::uint16_t getUiLongitudeCtrlSetSpeedKph() const;

  inline  ::uint8_t getUiCurrentHeadwaySettingNu() const;

  inline bool hasVehState() const;
  inline  ::senseAD::msg::planning::NopOutVehStateRequest::Reader getVehState() const;

  inline  ::uint8_t getDist2rampReminder() const;

  inline bool getEnteringRamp() const;

  inline  ::uint8_t getDist2rampExitReminder() const;

  inline bool getMergingMainRoad() const;

  inline  ::uint8_t getDist2routeEndReminder() const;

  inline  ::uint8_t getTakeOverType() const;

  inline  ::int8_t getUiDispStateMachineNu() const;

  inline  ::uint64_t getUiNNPSSMInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DecisionOutput::Builder {
public:
  typedef DecisionOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int8_t getUiSystemStateMachineNu();
  inline void setUiSystemStateMachineNu( ::int8_t value);

  inline  ::uint8_t getUiP2NStateReminderNu();
  inline void setUiP2NStateReminderNu( ::uint8_t value);

  inline  ::uint8_t getUiStateReminderNu();
  inline void setUiStateReminderNu( ::uint8_t value);

  inline  ::uint64_t getUiActiveConditionBtf();
  inline void setUiActiveConditionBtf( ::uint64_t value);

  inline  ::uint64_t getUiSuppressionConditionBtf();
  inline void setUiSuppressionConditionBtf( ::uint64_t value);

  inline  ::uint8_t getPpLatLongState();
  inline void setPpLatLongState( ::uint8_t value);

  inline  ::int8_t getUiMrmStatusNu();
  inline void setUiMrmStatusNu( ::int8_t value);

  inline  ::uint8_t getUiStateNu();
  inline void setUiStateNu( ::uint8_t value);

  inline bool hasSHandsOffState();
  inline  ::senseAD::msg::planning::NopOutHandsOff::Builder getSHandsOffState();
  inline void setSHandsOffState( ::senseAD::msg::planning::NopOutHandsOff::Reader value);
  inline  ::senseAD::msg::planning::NopOutHandsOff::Builder initSHandsOffState();
  inline void adoptSHandsOffState(::capnp::Orphan< ::senseAD::msg::planning::NopOutHandsOff>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::NopOutHandsOff> disownSHandsOffState();

  inline bool getBEyeOff();
  inline void setBEyeOff(bool value);

  inline  ::uint8_t getUiNnpScenariosNu();
  inline void setUiNnpScenariosNu( ::uint8_t value);

  inline  ::uint8_t getUiNnprinoNu();
  inline void setUiNnprinoNu( ::uint8_t value);

  inline  ::uint8_t getUiVoiceModeNu();
  inline void setUiVoiceModeNu( ::uint8_t value);

  inline  ::uint8_t getUiOnOffAudioPlayNu();
  inline void setUiOnOffAudioPlayNu( ::uint8_t value);

  inline  ::uint8_t getUiAutoOnOffSetNu();
  inline void setUiAutoOnOffSetNu( ::uint8_t value);

  inline  ::uint8_t getUiSndStateNu();
  inline void setUiSndStateNu( ::uint8_t value);

  inline  ::uint8_t getUiVoiceNotifFrequencyModeNu();
  inline void setUiVoiceNotifFrequencyModeNu( ::uint8_t value);

  inline  ::uint8_t getUiCancelAudioPlayNu();
  inline void setUiCancelAudioPlayNu( ::uint8_t value);

  inline  ::uint8_t getUiDrivingModeNu();
  inline void setUiDrivingModeNu( ::uint8_t value);

  inline  ::uint8_t getUiAlcModeNu();
  inline void setUiAlcModeNu( ::uint8_t value);

  inline  ::uint8_t getUiOverrideStateNu();
  inline void setUiOverrideStateNu( ::uint8_t value);

  inline  ::uint8_t getUiTrafficStateNu();
  inline void setUiTrafficStateNu( ::uint8_t value);

  inline  ::uint8_t getUiSpeedAdaptConfirmNu();
  inline void setUiSpeedAdaptConfirmNu( ::uint8_t value);

  inline  ::uint8_t getUiOsaStatusNu();
  inline void setUiOsaStatusNu( ::uint8_t value);

  inline  ::uint8_t getUiPayModeConfirmNu();
  inline void setUiPayModeConfirmNu( ::uint8_t value);

  inline  ::uint8_t getUiPayModeConfirmReqNu();
  inline void setUiPayModeConfirmReqNu( ::uint8_t value);

  inline  ::uint8_t getUiLaneChangeAudioPlayNu();
  inline void setUiLaneChangeAudioPlayNu( ::uint8_t value);

  inline  ::uint8_t getUiLcSndRequestNu();
  inline void setUiLcSndRequestNu( ::uint8_t value);

  inline  ::uint8_t getUiLaneChangeInforNu();
  inline void setUiLaneChangeInforNu( ::uint8_t value);

  inline  ::uint8_t getUiLaneChangeDirctionNu();
  inline void setUiLaneChangeDirctionNu( ::uint8_t value);

  inline  ::uint8_t getUiLaneChangePendingAlertNu();
  inline void setUiLaneChangePendingAlertNu( ::uint8_t value);

  inline  ::uint8_t getUiOverTakeConfirmNu();
  inline void setUiOverTakeConfirmNu( ::uint8_t value);

  inline  ::uint8_t getUiCruiseSpeedAddFeedbcakNu();
  inline void setUiCruiseSpeedAddFeedbcakNu( ::uint8_t value);

  inline  ::uint8_t getUiCruiseSpeedMinusFeedbackNu();
  inline void setUiCruiseSpeedMinusFeedbackNu( ::uint8_t value);

  inline  ::uint8_t getUiCruiseDistanceAddFeedbackNu();
  inline void setUiCruiseDistanceAddFeedbackNu( ::uint8_t value);

  inline  ::uint8_t getUiCruiseDistanceMinusFeedbackNu();
  inline void setUiCruiseDistanceMinusFeedbackNu( ::uint8_t value);

  inline  ::uint16_t getUiLongitudeCtrlSetSpeedKph();
  inline void setUiLongitudeCtrlSetSpeedKph( ::uint16_t value);

  inline  ::uint8_t getUiCurrentHeadwaySettingNu();
  inline void setUiCurrentHeadwaySettingNu( ::uint8_t value);

  inline bool hasVehState();
  inline  ::senseAD::msg::planning::NopOutVehStateRequest::Builder getVehState();
  inline void setVehState( ::senseAD::msg::planning::NopOutVehStateRequest::Reader value);
  inline  ::senseAD::msg::planning::NopOutVehStateRequest::Builder initVehState();
  inline void adoptVehState(::capnp::Orphan< ::senseAD::msg::planning::NopOutVehStateRequest>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::NopOutVehStateRequest> disownVehState();

  inline  ::uint8_t getDist2rampReminder();
  inline void setDist2rampReminder( ::uint8_t value);

  inline bool getEnteringRamp();
  inline void setEnteringRamp(bool value);

  inline  ::uint8_t getDist2rampExitReminder();
  inline void setDist2rampExitReminder( ::uint8_t value);

  inline bool getMergingMainRoad();
  inline void setMergingMainRoad(bool value);

  inline  ::uint8_t getDist2routeEndReminder();
  inline void setDist2routeEndReminder( ::uint8_t value);

  inline  ::uint8_t getTakeOverType();
  inline void setTakeOverType( ::uint8_t value);

  inline  ::int8_t getUiDispStateMachineNu();
  inline void setUiDispStateMachineNu( ::int8_t value);

  inline  ::uint64_t getUiNNPSSMInfo();
  inline void setUiNNPSSMInfo( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DecisionOutput::Pipeline {
public:
  typedef DecisionOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::planning::NopOutHandsOff::Pipeline getSHandsOffState();
  inline  ::senseAD::msg::planning::NopOutVehStateRequest::Pipeline getVehState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class XDebugMsgs::Reader {
public:
  typedef XDebugMsgs Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasJson() const;
  inline  ::capnp::Text::Reader getJson() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class XDebugMsgs::Builder {
public:
  typedef XDebugMsgs Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasJson();
  inline  ::capnp::Text::Builder getJson();
  inline void setJson( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initJson(unsigned int size);
  inline void adoptJson(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownJson();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class XDebugMsgs::Pipeline {
public:
  typedef XDebugMsgs Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DriverIntentionInfo::Reader {
public:
  typedef DriverIntentionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline double getManualSetSpeed() const;

  inline bool getFuctionStatus() const;

  inline  ::uint8_t getLaneChangeDirction() const;

  inline bool hasCipvInfo() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getCipvInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DriverIntentionInfo::Builder {
public:
  typedef DriverIntentionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline double getManualSetSpeed();
  inline void setManualSetSpeed(double value);

  inline bool getFuctionStatus();
  inline void setFuctionStatus(bool value);

  inline  ::uint8_t getLaneChangeDirction();
  inline void setLaneChangeDirction( ::uint8_t value);

  inline bool hasCipvInfo();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getCipvInfo();
  inline void setCipvInfo( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCipvInfo(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initCipvInfo(unsigned int size);
  inline void adoptCipvInfo(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownCipvInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DriverIntentionInfo::Pipeline {
public:
  typedef DriverIntentionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningRequestSystemState::Reader {
public:
  typedef PlanningRequestSystemState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getNopSystemStateEnum() const;

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getLfpSystemStateEnum() const;

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getAccSystemStateEnum() const;

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::SystemState getSystemState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningRequestSystemState::Builder {
public:
  typedef PlanningRequestSystemState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getNopSystemStateEnum();
  inline void setNopSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value);

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getLfpSystemStateEnum();
  inline void setLfpSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value);

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState getAccSystemStateEnum();
  inline void setAccSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value);

  inline  ::senseAD::msg::planning::PlanningRequestSystemState::SystemState getSystemState();
  inline void setSystemState( ::senseAD::msg::planning::PlanningRequestSystemState::SystemState value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningRequestSystemState::Pipeline {
public:
  typedef PlanningRequestSystemState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MemoryDriveInfo::Reader {
public:
  typedef MemoryDriveInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState getMemoryDriveState() const;

  inline double getTravelTime() const;

  inline double getRemainingMileage() const;

  inline double getTotalMileage() const;

  inline bool hasMemoryTrajectory() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getMemoryTrajectory() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemoryDriveInfo::Builder {
public:
  typedef MemoryDriveInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState getMemoryDriveState();
  inline void setMemoryDriveState( ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState value);

  inline double getTravelTime();
  inline void setTravelTime(double value);

  inline double getRemainingMileage();
  inline void setRemainingMileage(double value);

  inline double getTotalMileage();
  inline void setTotalMileage(double value);

  inline bool hasMemoryTrajectory();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getMemoryTrajectory();
  inline void setMemoryTrajectory( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initMemoryTrajectory(unsigned int size);
  inline void adoptMemoryTrajectory(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownMemoryTrajectory();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemoryDriveInfo::Pipeline {
public:
  typedef MemoryDriveInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneChangeState::Reader {
public:
  typedef LaneChangeState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::LaneChangeState::ChangeStatus getChangeStatus() const;

  inline bool hasTargetPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getTargetPosition() const;

  inline double getHeading() const;

  inline  ::int32_t getGapFrontId() const;

  inline  ::int32_t getGapRearId() const;

  inline  ::uint16_t getHmiChangingState() const;

  inline  ::uint16_t getHmiCrossingIntersectionWarning() const;

  inline  ::uint16_t getHmiEgoIntersectionAction() const;

  inline  ::uint16_t getHmiTurningDirection() const;

  inline  ::uint16_t getHmiLaneBiasFlag() const;

  inline  ::uint32_t getHmiLaneBiasObjectId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneChangeState::Builder {
public:
  typedef LaneChangeState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::LaneChangeState::ChangeStatus getChangeStatus();
  inline void setChangeStatus( ::senseAD::msg::planning::LaneChangeState::ChangeStatus value);

  inline bool hasTargetPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getTargetPosition();
  inline void setTargetPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initTargetPosition();
  inline void adoptTargetPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownTargetPosition();

  inline double getHeading();
  inline void setHeading(double value);

  inline  ::int32_t getGapFrontId();
  inline void setGapFrontId( ::int32_t value);

  inline  ::int32_t getGapRearId();
  inline void setGapRearId( ::int32_t value);

  inline  ::uint16_t getHmiChangingState();
  inline void setHmiChangingState( ::uint16_t value);

  inline  ::uint16_t getHmiCrossingIntersectionWarning();
  inline void setHmiCrossingIntersectionWarning( ::uint16_t value);

  inline  ::uint16_t getHmiEgoIntersectionAction();
  inline void setHmiEgoIntersectionAction( ::uint16_t value);

  inline  ::uint16_t getHmiTurningDirection();
  inline void setHmiTurningDirection( ::uint16_t value);

  inline  ::uint16_t getHmiLaneBiasFlag();
  inline void setHmiLaneBiasFlag( ::uint16_t value);

  inline  ::uint32_t getHmiLaneBiasObjectId();
  inline void setHmiLaneBiasObjectId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneChangeState::Pipeline {
public:
  typedef LaneChangeState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getTargetPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ErrorCode::Reader {
public:
  typedef ErrorCode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getLosttopic() const;

  inline  ::uint8_t getTopictimeout() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ErrorCode::Builder {
public:
  typedef ErrorCode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getLosttopic();
  inline void setLosttopic( ::uint8_t value);

  inline  ::uint8_t getTopictimeout();
  inline void setTopictimeout( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ErrorCode::Pipeline {
public:
  typedef ErrorCode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FailReason::Reader {
public:
  typedef FailReason Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::FailReason::PlannerErr getPlannerErr() const;

  inline  ::senseAD::msg::planning::FailReason::PathPlannerFail getPathPlannerFail() const;

  inline  ::senseAD::msg::planning::FailReason::LatSolverFail getLatSolverFail() const;

  inline  ::senseAD::msg::planning::FailReason::AbnomalOrigin getAbnomalOrigin() const;

  inline  ::senseAD::msg::planning::FailReason::InvalidLongiSpeed getInvalidLongiSpeed() const;

  inline  ::senseAD::msg::planning::FailReason::LongiSolverFail getLongiSolverFail() const;

  inline  ::uint8_t getReflineBuildResult() const;

  inline  ::senseAD::msg::planning::FailReason::HnopActiveFail getHnopActiveFail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FailReason::Builder {
public:
  typedef FailReason Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::FailReason::PlannerErr getPlannerErr();
  inline void setPlannerErr( ::senseAD::msg::planning::FailReason::PlannerErr value);

  inline  ::senseAD::msg::planning::FailReason::PathPlannerFail getPathPlannerFail();
  inline void setPathPlannerFail( ::senseAD::msg::planning::FailReason::PathPlannerFail value);

  inline  ::senseAD::msg::planning::FailReason::LatSolverFail getLatSolverFail();
  inline void setLatSolverFail( ::senseAD::msg::planning::FailReason::LatSolverFail value);

  inline  ::senseAD::msg::planning::FailReason::AbnomalOrigin getAbnomalOrigin();
  inline void setAbnomalOrigin( ::senseAD::msg::planning::FailReason::AbnomalOrigin value);

  inline  ::senseAD::msg::planning::FailReason::InvalidLongiSpeed getInvalidLongiSpeed();
  inline void setInvalidLongiSpeed( ::senseAD::msg::planning::FailReason::InvalidLongiSpeed value);

  inline  ::senseAD::msg::planning::FailReason::LongiSolverFail getLongiSolverFail();
  inline void setLongiSolverFail( ::senseAD::msg::planning::FailReason::LongiSolverFail value);

  inline  ::uint8_t getReflineBuildResult();
  inline void setReflineBuildResult( ::uint8_t value);

  inline  ::senseAD::msg::planning::FailReason::HnopActiveFail getHnopActiveFail();
  inline void setHnopActiveFail( ::senseAD::msg::planning::FailReason::HnopActiveFail value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FailReason::Pipeline {
public:
  typedef FailReason Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KeyObj::Reader {
public:
  typedef KeyObj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBorrowObjId() const;

  inline  ::uint32_t getBiasObjId() const;

  inline  ::uint32_t getLcRiskObjId() const;

  inline  ::uint32_t getCutinId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KeyObj::Builder {
public:
  typedef KeyObj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBorrowObjId();
  inline void setBorrowObjId( ::uint32_t value);

  inline  ::uint32_t getBiasObjId();
  inline void setBiasObjId( ::uint32_t value);

  inline  ::uint32_t getLcRiskObjId();
  inline void setLcRiskObjId( ::uint32_t value);

  inline  ::uint32_t getCutinId();
  inline void setCutinId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KeyObj::Pipeline {
public:
  typedef KeyObj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LcTargetLaneGapInfo::Reader {
public:
  typedef LcTargetLaneGapInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTargetLaneFrontId() const;

  inline  ::uint32_t getTargetLaneRearId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LcTargetLaneGapInfo::Builder {
public:
  typedef LcTargetLaneGapInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTargetLaneFrontId();
  inline void setTargetLaneFrontId( ::uint32_t value);

  inline  ::uint32_t getTargetLaneRearId();
  inline void setTargetLaneRearId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LcTargetLaneGapInfo::Pipeline {
public:
  typedef LcTargetLaneGapInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PipelineInfo::Reader {
public:
  typedef PipelineInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getLaneKeepPplStatus() const;

  inline  ::int8_t getLeftLanechgPplStatus() const;

  inline  ::uint8_t getLeftLaneChgPplSuccessCounter() const;

  inline  ::int8_t getRightLanechgPplStatus() const;

  inline  ::uint8_t getRightLaneChgPplSuccessCounter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PipelineInfo::Builder {
public:
  typedef PipelineInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getLaneKeepPplStatus();
  inline void setLaneKeepPplStatus( ::int8_t value);

  inline  ::int8_t getLeftLanechgPplStatus();
  inline void setLeftLanechgPplStatus( ::int8_t value);

  inline  ::uint8_t getLeftLaneChgPplSuccessCounter();
  inline void setLeftLaneChgPplSuccessCounter( ::uint8_t value);

  inline  ::int8_t getRightLanechgPplStatus();
  inline void setRightLanechgPplStatus( ::int8_t value);

  inline  ::uint8_t getRightLaneChgPplSuccessCounter();
  inline void setRightLaneChgPplSuccessCounter( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PipelineInfo::Pipeline {
public:
  typedef PipelineInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EfficiencyLaneVhgInfo::Reader {
public:
  typedef EfficiencyLaneVhgInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsEgoSpdSuppressed() const;

  inline bool getIsNeighborFastOrFurther() const;

  inline bool getIsNeighborRisk() const;

  inline float getLaneChgEfficiencyScore() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EfficiencyLaneVhgInfo::Builder {
public:
  typedef EfficiencyLaneVhgInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsEgoSpdSuppressed();
  inline void setIsEgoSpdSuppressed(bool value);

  inline bool getIsNeighborFastOrFurther();
  inline void setIsNeighborFastOrFurther(bool value);

  inline bool getIsNeighborRisk();
  inline void setIsNeighborRisk(bool value);

  inline float getLaneChgEfficiencyScore();
  inline void setLaneChgEfficiencyScore(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EfficiencyLaneVhgInfo::Pipeline {
public:
  typedef EfficiencyLaneVhgInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SpeedLimitInfo::Reader {
public:
  typedef SpeedLimitInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getCurSpeedLimit() const;

  inline  ::uint32_t getCurLinkType() const;

  inline  ::uint8_t getNextSpeedLimit() const;

  inline  ::uint32_t getNextDiffSpeedLimitLinkType() const;

  inline  ::uint32_t getDisToNextDiffSpdLimitLink() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SpeedLimitInfo::Builder {
public:
  typedef SpeedLimitInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getCurSpeedLimit();
  inline void setCurSpeedLimit( ::uint8_t value);

  inline  ::uint32_t getCurLinkType();
  inline void setCurLinkType( ::uint32_t value);

  inline  ::uint8_t getNextSpeedLimit();
  inline void setNextSpeedLimit( ::uint8_t value);

  inline  ::uint32_t getNextDiffSpeedLimitLinkType();
  inline void setNextDiffSpeedLimitLinkType( ::uint32_t value);

  inline  ::uint32_t getDisToNextDiffSpdLimitLink();
  inline void setDisToNextDiffSpdLimitLink( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SpeedLimitInfo::Pipeline {
public:
  typedef SpeedLimitInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObjElactoer::Reader {
public:
  typedef ObjElactoer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLeadersId() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLeadersId() const;

  inline bool hasNeighboursId() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getNeighboursId() const;

  inline bool hasOncomingId() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getOncomingId() const;

  inline bool hasCrossingId() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getCrossingId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjElactoer::Builder {
public:
  typedef ObjElactoer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLeadersId();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLeadersId();
  inline void setLeadersId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLeadersId(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLeadersId(unsigned int size);
  inline void adoptLeadersId(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLeadersId();

  inline bool hasNeighboursId();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getNeighboursId();
  inline void setNeighboursId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNeighboursId(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initNeighboursId(unsigned int size);
  inline void adoptNeighboursId(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownNeighboursId();

  inline bool hasOncomingId();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getOncomingId();
  inline void setOncomingId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOncomingId(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initOncomingId(unsigned int size);
  inline void adoptOncomingId(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownOncomingId();

  inline bool hasCrossingId();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getCrossingId();
  inline void setCrossingId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCrossingId(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initCrossingId(unsigned int size);
  inline void adoptCrossingId(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownCrossingId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjElactoer::Pipeline {
public:
  typedef ObjElactoer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningState::Reader {
public:
  typedef PlanningState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::planning::PlanningState::VehicleState getVehicleState() const;

  inline double getSelectedSpeed() const;

  inline  ::int32_t getSelectedTimeHeadway() const;

  inline  ::senseAD::msg::planning::PlanningState::ILCChangeDirection getILCState() const;

  inline  ::int32_t getCIPV() const;

  inline bool hasKeyVRUs() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getKeyVRUs() const;

  inline double getSpeedLimit() const;

  inline bool hasTrajectory() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getTrajectory() const;

  inline bool hasMemoryDriveInfo() const;
  inline  ::senseAD::msg::planning::MemoryDriveInfo::Reader getMemoryDriveInfo() const;

  inline bool hasLaneChangeState() const;
  inline  ::senseAD::msg::planning::LaneChangeState::Reader getLaneChangeState() const;

  inline  ::senseAD::msg::planning::PlanningState::NopActiveEnum getNopActive() const;

  inline  ::uint32_t getSocPlannerStateMachie() const;

  inline  ::senseAD::msg::planning::PlanningState::PilotUnavailableReason getSocPilotUnavailableReason() const;

  inline  ::senseAD::msg::planning::PlanningState::TurnTypeEnum getTurnType() const;

  inline bool hasErrorType() const;
  inline  ::senseAD::msg::planning::ErrorCode::Reader getErrorType() const;

  inline bool hasAbnormalType() const;
  inline  ::senseAD::msg::planning::FailReason::Reader getAbnormalType() const;

  inline  ::senseAD::msg::planning::PlanningState::LcTypeEnum getLcType() const;

  inline  ::senseAD::msg::planning::PlanningState::BiasTypeEnum getBiasType() const;

  inline  ::senseAD::msg::planning::PlanningState::BorrowTypeEnum getBorrowType() const;

  inline  ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum getOriginUpdateReason() const;

  inline  ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum getLaneChgFailReason() const;

  inline  ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum getLaneChgRiskObj() const;

  inline bool getIsLaneChgDesiredSpeed() const;

  inline bool hasReflineUsedLaneIds() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getReflineUsedLaneIds() const;

  inline bool getReflineModyReq() const;

  inline bool hasKeyObj() const;
  inline  ::senseAD::msg::planning::KeyObj::Reader getKeyObj() const;

  inline bool hasLcTargetLaneGapInfo() const;
  inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Reader getLcTargetLaneGapInfo() const;

  inline bool hasPipelineInfo() const;
  inline  ::senseAD::msg::planning::PipelineInfo::Reader getPipelineInfo() const;

  inline bool hasEfficiencyLaneVhgInfo() const;
  inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Reader getEfficiencyLaneVhgInfo() const;

  inline bool hasSpeedLimitInfo() const;
  inline  ::senseAD::msg::planning::SpeedLimitInfo::Reader getSpeedLimitInfo() const;

  inline bool hasObjElactoer() const;
  inline  ::senseAD::msg::planning::ObjElactoer::Reader getObjElactoer() const;

  inline bool hasTrajPointArraySR() const;
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader getTrajPointArraySR() const;

  inline  ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum getNearDestinationReminer() const;

  inline bool hasDrivingStyleLearningRes() const;
  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Reader getDrivingStyleLearningRes() const;

  inline bool hasDrivingStyleManageRes() const;
  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Reader getDrivingStyleManageRes() const;

  inline bool hasCutInPrevention() const;
  inline  ::senseAD::msg::planning::CutInPrevention::Reader getCutInPrevention() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningState::Builder {
public:
  typedef PlanningState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::planning::PlanningState::VehicleState getVehicleState();
  inline void setVehicleState( ::senseAD::msg::planning::PlanningState::VehicleState value);

  inline double getSelectedSpeed();
  inline void setSelectedSpeed(double value);

  inline  ::int32_t getSelectedTimeHeadway();
  inline void setSelectedTimeHeadway( ::int32_t value);

  inline  ::senseAD::msg::planning::PlanningState::ILCChangeDirection getILCState();
  inline void setILCState( ::senseAD::msg::planning::PlanningState::ILCChangeDirection value);

  inline  ::int32_t getCIPV();
  inline void setCIPV( ::int32_t value);

  inline bool hasKeyVRUs();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getKeyVRUs();
  inline void setKeyVRUs( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKeyVRUs(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initKeyVRUs(unsigned int size);
  inline void adoptKeyVRUs(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownKeyVRUs();

  inline double getSpeedLimit();
  inline void setSpeedLimit(double value);

  inline bool hasTrajectory();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getTrajectory();
  inline void setTrajectory( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initTrajectory(unsigned int size);
  inline void adoptTrajectory(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownTrajectory();

  inline bool hasMemoryDriveInfo();
  inline  ::senseAD::msg::planning::MemoryDriveInfo::Builder getMemoryDriveInfo();
  inline void setMemoryDriveInfo( ::senseAD::msg::planning::MemoryDriveInfo::Reader value);
  inline  ::senseAD::msg::planning::MemoryDriveInfo::Builder initMemoryDriveInfo();
  inline void adoptMemoryDriveInfo(::capnp::Orphan< ::senseAD::msg::planning::MemoryDriveInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::MemoryDriveInfo> disownMemoryDriveInfo();

  inline bool hasLaneChangeState();
  inline  ::senseAD::msg::planning::LaneChangeState::Builder getLaneChangeState();
  inline void setLaneChangeState( ::senseAD::msg::planning::LaneChangeState::Reader value);
  inline  ::senseAD::msg::planning::LaneChangeState::Builder initLaneChangeState();
  inline void adoptLaneChangeState(::capnp::Orphan< ::senseAD::msg::planning::LaneChangeState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::LaneChangeState> disownLaneChangeState();

  inline  ::senseAD::msg::planning::PlanningState::NopActiveEnum getNopActive();
  inline void setNopActive( ::senseAD::msg::planning::PlanningState::NopActiveEnum value);

  inline  ::uint32_t getSocPlannerStateMachie();
  inline void setSocPlannerStateMachie( ::uint32_t value);

  inline  ::senseAD::msg::planning::PlanningState::PilotUnavailableReason getSocPilotUnavailableReason();
  inline void setSocPilotUnavailableReason( ::senseAD::msg::planning::PlanningState::PilotUnavailableReason value);

  inline  ::senseAD::msg::planning::PlanningState::TurnTypeEnum getTurnType();
  inline void setTurnType( ::senseAD::msg::planning::PlanningState::TurnTypeEnum value);

  inline bool hasErrorType();
  inline  ::senseAD::msg::planning::ErrorCode::Builder getErrorType();
  inline void setErrorType( ::senseAD::msg::planning::ErrorCode::Reader value);
  inline  ::senseAD::msg::planning::ErrorCode::Builder initErrorType();
  inline void adoptErrorType(::capnp::Orphan< ::senseAD::msg::planning::ErrorCode>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::ErrorCode> disownErrorType();

  inline bool hasAbnormalType();
  inline  ::senseAD::msg::planning::FailReason::Builder getAbnormalType();
  inline void setAbnormalType( ::senseAD::msg::planning::FailReason::Reader value);
  inline  ::senseAD::msg::planning::FailReason::Builder initAbnormalType();
  inline void adoptAbnormalType(::capnp::Orphan< ::senseAD::msg::planning::FailReason>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::FailReason> disownAbnormalType();

  inline  ::senseAD::msg::planning::PlanningState::LcTypeEnum getLcType();
  inline void setLcType( ::senseAD::msg::planning::PlanningState::LcTypeEnum value);

  inline  ::senseAD::msg::planning::PlanningState::BiasTypeEnum getBiasType();
  inline void setBiasType( ::senseAD::msg::planning::PlanningState::BiasTypeEnum value);

  inline  ::senseAD::msg::planning::PlanningState::BorrowTypeEnum getBorrowType();
  inline void setBorrowType( ::senseAD::msg::planning::PlanningState::BorrowTypeEnum value);

  inline  ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum getOriginUpdateReason();
  inline void setOriginUpdateReason( ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum value);

  inline  ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum getLaneChgFailReason();
  inline void setLaneChgFailReason( ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum value);

  inline  ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum getLaneChgRiskObj();
  inline void setLaneChgRiskObj( ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum value);

  inline bool getIsLaneChgDesiredSpeed();
  inline void setIsLaneChgDesiredSpeed(bool value);

  inline bool hasReflineUsedLaneIds();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getReflineUsedLaneIds();
  inline void setReflineUsedLaneIds( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReflineUsedLaneIds(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initReflineUsedLaneIds(unsigned int size);
  inline void adoptReflineUsedLaneIds(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownReflineUsedLaneIds();

  inline bool getReflineModyReq();
  inline void setReflineModyReq(bool value);

  inline bool hasKeyObj();
  inline  ::senseAD::msg::planning::KeyObj::Builder getKeyObj();
  inline void setKeyObj( ::senseAD::msg::planning::KeyObj::Reader value);
  inline  ::senseAD::msg::planning::KeyObj::Builder initKeyObj();
  inline void adoptKeyObj(::capnp::Orphan< ::senseAD::msg::planning::KeyObj>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::KeyObj> disownKeyObj();

  inline bool hasLcTargetLaneGapInfo();
  inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Builder getLcTargetLaneGapInfo();
  inline void setLcTargetLaneGapInfo( ::senseAD::msg::planning::LcTargetLaneGapInfo::Reader value);
  inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Builder initLcTargetLaneGapInfo();
  inline void adoptLcTargetLaneGapInfo(::capnp::Orphan< ::senseAD::msg::planning::LcTargetLaneGapInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::LcTargetLaneGapInfo> disownLcTargetLaneGapInfo();

  inline bool hasPipelineInfo();
  inline  ::senseAD::msg::planning::PipelineInfo::Builder getPipelineInfo();
  inline void setPipelineInfo( ::senseAD::msg::planning::PipelineInfo::Reader value);
  inline  ::senseAD::msg::planning::PipelineInfo::Builder initPipelineInfo();
  inline void adoptPipelineInfo(::capnp::Orphan< ::senseAD::msg::planning::PipelineInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::PipelineInfo> disownPipelineInfo();

  inline bool hasEfficiencyLaneVhgInfo();
  inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Builder getEfficiencyLaneVhgInfo();
  inline void setEfficiencyLaneVhgInfo( ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Reader value);
  inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Builder initEfficiencyLaneVhgInfo();
  inline void adoptEfficiencyLaneVhgInfo(::capnp::Orphan< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::EfficiencyLaneVhgInfo> disownEfficiencyLaneVhgInfo();

  inline bool hasSpeedLimitInfo();
  inline  ::senseAD::msg::planning::SpeedLimitInfo::Builder getSpeedLimitInfo();
  inline void setSpeedLimitInfo( ::senseAD::msg::planning::SpeedLimitInfo::Reader value);
  inline  ::senseAD::msg::planning::SpeedLimitInfo::Builder initSpeedLimitInfo();
  inline void adoptSpeedLimitInfo(::capnp::Orphan< ::senseAD::msg::planning::SpeedLimitInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::SpeedLimitInfo> disownSpeedLimitInfo();

  inline bool hasObjElactoer();
  inline  ::senseAD::msg::planning::ObjElactoer::Builder getObjElactoer();
  inline void setObjElactoer( ::senseAD::msg::planning::ObjElactoer::Reader value);
  inline  ::senseAD::msg::planning::ObjElactoer::Builder initObjElactoer();
  inline void adoptObjElactoer(::capnp::Orphan< ::senseAD::msg::planning::ObjElactoer>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::ObjElactoer> disownObjElactoer();

  inline bool hasTrajPointArraySR();
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder getTrajPointArraySR();
  inline void setTrajPointArraySR( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder initTrajPointArraySR(unsigned int size);
  inline void adoptTrajPointArraySR(::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> disownTrajPointArraySR();

  inline  ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum getNearDestinationReminer();
  inline void setNearDestinationReminer( ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum value);

  inline bool hasDrivingStyleLearningRes();
  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Builder getDrivingStyleLearningRes();
  inline void setDrivingStyleLearningRes( ::senseAD::msg::planning::DrivingStyleLearningResponse::Reader value);
  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Builder initDrivingStyleLearningRes();
  inline void adoptDrivingStyleLearningRes(::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningResponse> disownDrivingStyleLearningRes();

  inline bool hasDrivingStyleManageRes();
  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Builder getDrivingStyleManageRes();
  inline void setDrivingStyleManageRes( ::senseAD::msg::planning::DrivingStyleManageResponse::Reader value);
  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Builder initDrivingStyleManageRes();
  inline void adoptDrivingStyleManageRes(::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageResponse>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageResponse> disownDrivingStyleManageRes();

  inline bool hasCutInPrevention();
  inline  ::senseAD::msg::planning::CutInPrevention::Builder getCutInPrevention();
  inline void setCutInPrevention( ::senseAD::msg::planning::CutInPrevention::Reader value);
  inline  ::senseAD::msg::planning::CutInPrevention::Builder initCutInPrevention();
  inline void adoptCutInPrevention(::capnp::Orphan< ::senseAD::msg::planning::CutInPrevention>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::CutInPrevention> disownCutInPrevention();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningState::Pipeline {
public:
  typedef PlanningState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::planning::MemoryDriveInfo::Pipeline getMemoryDriveInfo();
  inline  ::senseAD::msg::planning::LaneChangeState::Pipeline getLaneChangeState();
  inline  ::senseAD::msg::planning::ErrorCode::Pipeline getErrorType();
  inline  ::senseAD::msg::planning::FailReason::Pipeline getAbnormalType();
  inline  ::senseAD::msg::planning::KeyObj::Pipeline getKeyObj();
  inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Pipeline getLcTargetLaneGapInfo();
  inline  ::senseAD::msg::planning::PipelineInfo::Pipeline getPipelineInfo();
  inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Pipeline getEfficiencyLaneVhgInfo();
  inline  ::senseAD::msg::planning::SpeedLimitInfo::Pipeline getSpeedLimitInfo();
  inline  ::senseAD::msg::planning::ObjElactoer::Pipeline getObjElactoer();
  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Pipeline getDrivingStyleLearningRes();
  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Pipeline getDrivingStyleManageRes();
  inline  ::senseAD::msg::planning::CutInPrevention::Pipeline getCutInPrevention();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CutInPrevention::Reader {
public:
  typedef CutInPrevention Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReductTimeGap() const;

  inline  ::uint8_t getStopBlockage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CutInPrevention::Builder {
public:
  typedef CutInPrevention Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getReductTimeGap();
  inline void setReductTimeGap( ::uint8_t value);

  inline  ::uint8_t getStopBlockage();
  inline void setStopBlockage( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CutInPrevention::Pipeline {
public:
  typedef CutInPrevention Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningVisData::Reader {
public:
  typedef PlanningVisData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasVisualData() const;
  inline  ::capnp::Data::Reader getVisualData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningVisData::Builder {
public:
  typedef PlanningVisData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasVisualData();
  inline  ::capnp::Data::Builder getVisualData();
  inline void setVisualData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initVisualData(unsigned int size);
  inline void adoptVisualData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownVisualData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningVisData::Pipeline {
public:
  typedef PlanningVisData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningStateManual::Reader {
public:
  typedef PlanningStateManual Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool getAccelPdlOvrd() const;

  inline bool getBrkPdlPrsd() const;

  inline bool getStrWhlOvrd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningStateManual::Builder {
public:
  typedef PlanningStateManual Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool getAccelPdlOvrd();
  inline void setAccelPdlOvrd(bool value);

  inline bool getBrkPdlPrsd();
  inline void setBrkPdlPrsd(bool value);

  inline bool getStrWhlOvrd();
  inline void setStrWhlOvrd(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningStateManual::Pipeline {
public:
  typedef PlanningStateManual Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NOPStatus::Reader {
public:
  typedef NOPStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::planning::NOPStatus::NOPStatusEnum getNopStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NOPStatus::Builder {
public:
  typedef NOPStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::planning::NOPStatus::NOPStatusEnum getNopStatus();
  inline void setNopStatus( ::senseAD::msg::planning::NOPStatus::NOPStatusEnum value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NOPStatus::Pipeline {
public:
  typedef NOPStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vehicleprocessing::Reader {
public:
  typedef Vehicleprocessing Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimeStamp() const;

  inline float getVehicleSpd() const;

  inline float getLongitudinalAccel() const;

  inline float getLatAccel() const;

  inline float getYawrate() const;

  inline float getFrontWheelAng() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal getTurningLightSignal() const;

  inline bool getLongiEngaged() const;

  inline bool getLateralEngaged() const;

  inline float getSetSpeed() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap getSetTimeGap() const;

  inline float getWheelSpdFL() const;

  inline float getWheelSpdFR() const;

  inline float getWheelSpdRL() const;

  inline float getWheelSpdRR() const;

  inline float getWheelSpdLD() const;

  inline float getWheelSpdRD() const;

  inline float getWheelSpdLND() const;

  inline float getWheelSpdRND() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirLND() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirRND() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirLD() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirRD() const;

  inline float getSteerWheelAngle() const;

  inline float getSteerWheelAngleRate() const;

  inline  ::uint32_t getYawRateTimestamp() const;

  inline bool getAbsActive() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear getGearPos() const;

  inline  ::uint8_t getAccIcon() const;

  inline  ::uint8_t getLfpIcon() const;

  inline  ::uint8_t getNopIcon() const;

  inline float getAebDecelReq() const;

  inline  ::uint8_t getAutoBrkSysAtvMask() const;

  inline  ::uint8_t getLgSfBrkMode() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert getEvphandsoffalert() const;

  inline  ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq getSpdLimWarnReq() const;

  inline  ::uint8_t getAccMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vehicleprocessing::Builder {
public:
  typedef Vehicleprocessing Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimeStamp();
  inline void setTimeStamp( ::uint64_t value);

  inline float getVehicleSpd();
  inline void setVehicleSpd(float value);

  inline float getLongitudinalAccel();
  inline void setLongitudinalAccel(float value);

  inline float getLatAccel();
  inline void setLatAccel(float value);

  inline float getYawrate();
  inline void setYawrate(float value);

  inline float getFrontWheelAng();
  inline void setFrontWheelAng(float value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal getTurningLightSignal();
  inline void setTurningLightSignal( ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal value);

  inline bool getLongiEngaged();
  inline void setLongiEngaged(bool value);

  inline bool getLateralEngaged();
  inline void setLateralEngaged(bool value);

  inline float getSetSpeed();
  inline void setSetSpeed(float value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap getSetTimeGap();
  inline void setSetTimeGap( ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap value);

  inline float getWheelSpdFL();
  inline void setWheelSpdFL(float value);

  inline float getWheelSpdFR();
  inline void setWheelSpdFR(float value);

  inline float getWheelSpdRL();
  inline void setWheelSpdRL(float value);

  inline float getWheelSpdRR();
  inline void setWheelSpdRR(float value);

  inline float getWheelSpdLD();
  inline void setWheelSpdLD(float value);

  inline float getWheelSpdRD();
  inline void setWheelSpdRD(float value);

  inline float getWheelSpdLND();
  inline void setWheelSpdLND(float value);

  inline float getWheelSpdRND();
  inline void setWheelSpdRND(float value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirLND();
  inline void setWheelRotDirLND( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirRND();
  inline void setWheelRotDirRND( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirLD();
  inline void setWheelRotDirLD( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir getWheelRotDirRD();
  inline void setWheelRotDirRD( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value);

  inline float getSteerWheelAngle();
  inline void setSteerWheelAngle(float value);

  inline float getSteerWheelAngleRate();
  inline void setSteerWheelAngleRate(float value);

  inline  ::uint32_t getYawRateTimestamp();
  inline void setYawRateTimestamp( ::uint32_t value);

  inline bool getAbsActive();
  inline void setAbsActive(bool value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear getGearPos();
  inline void setGearPos( ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear value);

  inline  ::uint8_t getAccIcon();
  inline void setAccIcon( ::uint8_t value);

  inline  ::uint8_t getLfpIcon();
  inline void setLfpIcon( ::uint8_t value);

  inline  ::uint8_t getNopIcon();
  inline void setNopIcon( ::uint8_t value);

  inline float getAebDecelReq();
  inline void setAebDecelReq(float value);

  inline  ::uint8_t getAutoBrkSysAtvMask();
  inline void setAutoBrkSysAtvMask( ::uint8_t value);

  inline  ::uint8_t getLgSfBrkMode();
  inline void setLgSfBrkMode( ::uint8_t value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert getEvphandsoffalert();
  inline void setEvphandsoffalert( ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert value);

  inline  ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq getSpdLimWarnReq();
  inline void setSpdLimWarnReq( ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq value);

  inline  ::uint8_t getAccMode();
  inline void setAccMode( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vehicleprocessing::Pipeline {
public:
  typedef Vehicleprocessing Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MCUStateMachineInfo::Reader {
public:
  typedef MCUStateMachineInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine getMcuStateMachene() const;

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::Override getMcuDrvOverride() const;

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch getMcuPilotSwitch() const;

  inline bool getMcuAccActvCdt() const;

  inline bool getMcuLfpActvCdt() const;

  inline bool getMcuNopActvCdt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MCUStateMachineInfo::Builder {
public:
  typedef MCUStateMachineInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine getMcuStateMachene();
  inline void setMcuStateMachene( ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine value);

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::Override getMcuDrvOverride();
  inline void setMcuDrvOverride( ::senseAD::msg::planning::MCUStateMachineInfo::Override value);

  inline  ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch getMcuPilotSwitch();
  inline void setMcuPilotSwitch( ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch value);

  inline bool getMcuAccActvCdt();
  inline void setMcuAccActvCdt(bool value);

  inline bool getMcuLfpActvCdt();
  inline void setMcuLfpActvCdt(bool value);

  inline bool getMcuNopActvCdt();
  inline void setMcuNopActvCdt(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MCUStateMachineInfo::Pipeline {
public:
  typedef MCUStateMachineInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingStyleLearningRequest::Reader {
public:
  typedef DrivingStyleLearningRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand getCommand() const;

  inline bool hasDrivingStyleName() const;
  inline  ::capnp::Text::Reader getDrivingStyleName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingStyleLearningRequest::Builder {
public:
  typedef DrivingStyleLearningRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand getCommand();
  inline void setCommand( ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand value);

  inline bool hasDrivingStyleName();
  inline  ::capnp::Text::Builder getDrivingStyleName();
  inline void setDrivingStyleName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDrivingStyleName(unsigned int size);
  inline void adoptDrivingStyleName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDrivingStyleName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingStyleLearningRequest::Pipeline {
public:
  typedef DrivingStyleLearningRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingStyleLearningResponse::Reader {
public:
  typedef DrivingStyleLearningResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus getStatus() const;

  inline bool hasDrivingStyleName() const;
  inline  ::capnp::Text::Reader getDrivingStyleName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingStyleLearningResponse::Builder {
public:
  typedef DrivingStyleLearningResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus getStatus();
  inline void setStatus( ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus value);

  inline bool hasDrivingStyleName();
  inline  ::capnp::Text::Builder getDrivingStyleName();
  inline void setDrivingStyleName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDrivingStyleName(unsigned int size);
  inline void adoptDrivingStyleName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDrivingStyleName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingStyleLearningResponse::Pipeline {
public:
  typedef DrivingStyleLearningResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingStyleManageRequest::Reader {
public:
  typedef DrivingStyleManageRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand getCommand() const;

  inline bool hasDrivingStyleName() const;
  inline  ::capnp::Text::Reader getDrivingStyleName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingStyleManageRequest::Builder {
public:
  typedef DrivingStyleManageRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand getCommand();
  inline void setCommand( ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand value);

  inline bool hasDrivingStyleName();
  inline  ::capnp::Text::Builder getDrivingStyleName();
  inline void setDrivingStyleName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDrivingStyleName(unsigned int size);
  inline void adoptDrivingStyleName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDrivingStyleName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingStyleManageRequest::Pipeline {
public:
  typedef DrivingStyleManageRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DrivingStyleManageResponse::Reader {
public:
  typedef DrivingStyleManageResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus getStatus() const;

  inline bool hasDrivingStyleNames() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getDrivingStyleNames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DrivingStyleManageResponse::Builder {
public:
  typedef DrivingStyleManageResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus getStatus();
  inline void setStatus( ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus value);

  inline bool hasDrivingStyleNames();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getDrivingStyleNames();
  inline void setDrivingStyleNames( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setDrivingStyleNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initDrivingStyleNames(unsigned int size);
  inline void adoptDrivingStyleNames(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownDrivingStyleNames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DrivingStyleManageResponse::Pipeline {
public:
  typedef DrivingStyleManageResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SRControl::Reader {
public:
  typedef SRControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasDrivingStyleLearningReq() const;
  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Reader getDrivingStyleLearningReq() const;

  inline bool hasDrivingStyleManageReq() const;
  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Reader getDrivingStyleManageReq() const;

  inline  ::senseAD::msg::planning::SRControl::MultiModalCommand getMultiModal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SRControl::Builder {
public:
  typedef SRControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasDrivingStyleLearningReq();
  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Builder getDrivingStyleLearningReq();
  inline void setDrivingStyleLearningReq( ::senseAD::msg::planning::DrivingStyleLearningRequest::Reader value);
  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Builder initDrivingStyleLearningReq();
  inline void adoptDrivingStyleLearningReq(::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningRequest>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningRequest> disownDrivingStyleLearningReq();

  inline bool hasDrivingStyleManageReq();
  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Builder getDrivingStyleManageReq();
  inline void setDrivingStyleManageReq( ::senseAD::msg::planning::DrivingStyleManageRequest::Reader value);
  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Builder initDrivingStyleManageReq();
  inline void adoptDrivingStyleManageReq(::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageRequest>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageRequest> disownDrivingStyleManageReq();

  inline  ::senseAD::msg::planning::SRControl::MultiModalCommand getMultiModal();
  inline void setMultiModal( ::senseAD::msg::planning::SRControl::MultiModalCommand value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SRControl::Pipeline {
public:
  typedef SRControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Pipeline getDrivingStyleLearningReq();
  inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Pipeline getDrivingStyleManageReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TrajectoryPoint::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrajectoryPoint::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TrajectoryPoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrajectoryPoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrajectoryPoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrajectoryPoint::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrajectoryPoint::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrajectoryPoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrajectoryPoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrajectoryPoint::Reader::hasDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrajectoryPoint::Builder::hasDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrajectoryPoint::Reader::getDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::getDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrajectoryPoint::Pipeline::getDirection() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TrajectoryPoint::Builder::setDirection( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::initDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrajectoryPoint::Builder::adoptDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrajectoryPoint::Builder::disownDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double TrajectoryPoint::Reader::getVelocity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getVelocity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setVelocity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrajectoryPoint::Reader::getTheta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float TrajectoryPoint::Builder::getTheta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTheta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float TrajectoryPoint::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float TrajectoryPoint::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getSumDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getSumDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setSumDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getTimeDifference() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getTimeDifference() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTimeDifference(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getYawRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getYawRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setYawRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getAcceleration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getAcceleration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setAcceleration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Trajectory::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Trajectory::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Trajectory::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Trajectory::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Trajectory::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Trajectory::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Trajectory::Reader::hasTrajPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasTrajPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader Trajectory::Reader::getTrajPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::getTrajPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::setTrajPointArray( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::initTrajPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Trajectory::Builder::adoptTrajPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> Trajectory::Builder::disownTrajPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::Trajectory::Gear Trajectory::Reader::getGearEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Trajectory::Gear Trajectory::Builder::getGearEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setGearEnum( ::senseAD::msg::planning::Trajectory::Gear value) {
  _builder.setDataField< ::senseAD::msg::planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Trajectory::TurnSignal Trajectory::Reader::getTurnSignalEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Trajectory::TurnSignal Trajectory::Builder::getTurnSignalEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTurnSignalEnum( ::senseAD::msg::planning::Trajectory::TurnSignal value) {
  _builder.setDataField< ::senseAD::msg::planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::getUpdatedByVehicleStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Trajectory::Builder::getUpdatedByVehicleStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setUpdatedByVehicleStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Trajectory::TrajectoryMode Trajectory::Reader::getTrajectoryMode() const {
  return _reader.getDataField< ::senseAD::msg::planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Trajectory::TrajectoryMode Trajectory::Builder::getTrajectoryMode() {
  return _builder.getDataField< ::senseAD::msg::planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajectoryMode( ::senseAD::msg::planning::Trajectory::TrajectoryMode value) {
  _builder.setDataField< ::senseAD::msg::planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Trajectory::Reader::getTrajState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Trajectory::Builder::getTrajState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Trajectory::Reader::getTrajTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Trajectory::Builder::getTrajTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Trajectory::MapType Trajectory::Reader::getMapType() const {
  return _reader.getDataField< ::senseAD::msg::planning::Trajectory::MapType>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Trajectory::MapType Trajectory::Builder::getMapType() {
  return _builder.getDataField< ::senseAD::msg::planning::Trajectory::MapType>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setMapType( ::senseAD::msg::planning::Trajectory::MapType value) {
  _builder.setDataField< ::senseAD::msg::planning::Trajectory::MapType>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getLongiPosError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getLongiPosError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setLongiPosError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getLongiVelError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getLongiVelError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setLongiVelError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getLongiAccError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getLongiAccError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setLongiAccError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getHeadingError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getHeadingError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setHeadingError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getLateralPosError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getLateralPosError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setLateralPosError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::hasTrajectoryEnds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasTrajectoryEnds() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader Trajectory::Reader::getTrajectoryEnds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::getTrajectoryEnds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::setTrajectoryEnds( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::initTrajectoryEnds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Trajectory::Builder::adoptTrajectoryEnds(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> Trajectory::Builder::disownTrajectoryEnds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::Trajectory::TurnSteer Trajectory::Reader::getTurnSteerEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::Trajectory::TurnSteer>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Trajectory::TurnSteer Trajectory::Builder::getTurnSteerEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::Trajectory::TurnSteer>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTurnSteerEnum( ::senseAD::msg::planning::Trajectory::TurnSteer value) {
  _builder.setDataField< ::senseAD::msg::planning::Trajectory::TurnSteer>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getTrajSumDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getTrajSumDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajSumDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLight::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TrafficLight::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLight::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TrafficLight::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficLight::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLight::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TrafficLight::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TrafficLight::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TrafficLight::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TrafficLight::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TrafficLight::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasSignalSequence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasSignalSequence() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader TrafficLight::Reader::getSignalSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TrafficLight::Builder::getSignalSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setSignalSequence( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void TrafficLight::Builder::setSignalSequence(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TrafficLight::Builder::initSignalSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptSignalSequence(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> TrafficLight::Builder::disownSignalSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ReflineDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReflineDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ReflineDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReflineDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ReflineDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReflineDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReflineDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReflineDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ReflineDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReflineDebug::Reader::hasPathPts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReflineDebug::Builder::hasPathPts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader ReflineDebug::Reader::getPathPts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ReflineDebug::Builder::getPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReflineDebug::Builder::setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ReflineDebug::Builder::initPathPts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReflineDebug::Builder::adoptPathPts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> ReflineDebug::Builder::disownPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t ReflineDebug::Reader::getOriginIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getOriginIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setOriginIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ReflineDebug::Reader::getIfValid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getIfValid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setIfValid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ReflineDebug::Reader::getFirstInvalidIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getFirstInvalidIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setFirstInvalidIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningLine::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningLine::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningLine::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningLine::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningLine::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningLine::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningLine::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlanningLine::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader PlanningLine::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningLine::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningLine::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlanningLine::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> PlanningLine::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningLine::Reader::hasColors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasColors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningLine::Reader::getColors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningLine::Builder::getColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::setColors( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void PlanningLine::Builder::setColors(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningLine::Builder::initColors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PlanningLine::Builder::adoptColors(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningLine::Builder::disownColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double PlanningLine::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double PlanningLine::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningLine::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningLine::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningLine::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningLine::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningLine::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PlanningLine::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningLine::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ReferencePoint::Reader::hasPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReferencePoint::Builder::hasPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader ReferencePoint::Reader::getPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder ReferencePoint::Builder::getPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline ReferencePoint::Pipeline::getPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReferencePoint::Builder::setPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder ReferencePoint::Builder::initPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReferencePoint::Builder::adoptPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> ReferencePoint::Builder::disownPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ReferencePoint::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ReferencePoint::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReferencePoint::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ReferencePoint::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ReferencePoint::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReferencePoint::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ReferencePoint::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ReferencePoint::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReferencePoint::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TrafficLightInfo::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficLightInfo::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightInfo::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightInfo::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrafficLightInfo::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrafficLightInfo::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrafficLightInfo::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficLightInfo::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrafficLightInfo::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLightInfo::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrafficLightInfo::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape TrafficLightInfo::Reader::getShape() const {
  return _reader.getDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape TrafficLightInfo::Builder::getShape() {
  return _builder.getDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setShape( ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape value) {
  _builder.setDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightShape>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus TrafficLightInfo::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus TrafficLightInfo::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setStatus( ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus value) {
  _builder.setDataField< ::senseAD::msg::planning::TrafficLightInfo::TrafficLightStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficLightInfo::Reader::getCountdown() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficLightInfo::Builder::getCountdown() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setCountdown( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StopPoint::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StopPoint::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopPoint::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StopPoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopPoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader StopPoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopPoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline StopPoint::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void StopPoint::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopPoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopPoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> StopPoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TrafficSignInfo::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficSignInfo::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSignInfo::Reader::hasCentroId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSignInfo::Builder::hasCentroId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrafficSignInfo::Reader::getCentroId() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrafficSignInfo::Builder::getCentroId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrafficSignInfo::Pipeline::getCentroId() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficSignInfo::Builder::setCentroId( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrafficSignInfo::Builder::initCentroId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficSignInfo::Builder::adoptCentroId(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrafficSignInfo::Builder::disownCentroId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float TrafficSignInfo::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TrafficSignInfo::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSignInfo::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float TrafficSignInfo::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSignInfo::Reader::getHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float TrafficSignInfo::Builder::getHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficSignInfo::Reader::getDetectionStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficSignInfo::Builder::getDetectionStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setDetectionStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficSignInfo::Reader::getConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficSignInfo::Builder::getConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType TrafficSignInfo::Reader::getType() const {
  return _reader.getDataField< ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType TrafficSignInfo::Builder::getType() {
  return _builder.getDataField< ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void TrafficSignInfo::Builder::setType( ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType value) {
  _builder.setDataField< ::senseAD::msg::planning::TrafficSignInfo::TrafficSignType>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t ReferenceLane::Reader::getId() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t ReferenceLane::Builder::getId() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReferenceLane::Builder::setId( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReferenceLane::Reader::getIsTargetLane() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool ReferenceLane::Builder::getIsTargetLane() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ReferenceLane::Builder::setIsTargetLane(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ReferenceLane::Reader::getJointed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool ReferenceLane::Builder::getJointed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ReferenceLane::Builder::setJointed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ReferenceLane::Reader::getSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ReferenceLane::Builder::getSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReferenceLane::Builder::setSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ReferenceLane::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLane::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLane::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReferenceLane::Builder::setPoints( ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ReferenceLane::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>> ReferenceLane::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferencePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReferenceLane::Reader::hasStopPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLane::Builder::hasStopPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLane::Reader::getStopPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::getStopPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReferenceLane::Builder::setStopPoints( ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::initStopPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReferenceLane::Builder::adoptStopPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>> ReferenceLane::Builder::disownStopPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReferenceLane::Reader::hasTrafficLightInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLane::Builder::hasTrafficLightInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::TrafficLightInfo::Reader ReferenceLane::Reader::getTrafficLightInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::TrafficLightInfo::Builder ReferenceLane::Builder::getTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::TrafficLightInfo::Pipeline ReferenceLane::Pipeline::getTrafficLightInfo() {
  return  ::senseAD::msg::planning::TrafficLightInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ReferenceLane::Builder::setTrafficLightInfo( ::senseAD::msg::planning::TrafficLightInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::TrafficLightInfo::Builder ReferenceLane::Builder::initTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ReferenceLane::Builder::adoptTrafficLightInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::TrafficLightInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::TrafficLightInfo> ReferenceLane::Builder::disownTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::TrafficLightInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t ReferenceLane::Reader::getPositionToStopLine() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ReferenceLane::Builder::getPositionToStopLine() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ReferenceLane::Builder::setPositionToStopLine( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ReferenceLane::Reader::hasTrafficSignInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLane::Builder::hasTrafficSignInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Reader ReferenceLane::Reader::getTrafficSignInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::getTrafficSignInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ReferenceLane::Builder::setTrafficSignInfo( ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>::Builder ReferenceLane::Builder::initTrafficSignInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ReferenceLane::Builder::adoptTrafficSignInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>> ReferenceLane::Builder::disownTrafficSignInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficSignInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ReferenceLanes::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLanes::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ReferenceLanes::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReferenceLanes::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ReferenceLanes::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReferenceLanes::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReferenceLanes::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReferenceLanes::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ReferenceLanes::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReferenceLanes::Reader::hasLanes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLanes::Builder::hasLanes() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Reader ReferenceLanes::Reader::getLanes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Builder ReferenceLanes::Builder::getLanes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReferenceLanes::Builder::setLanes( ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>::Builder ReferenceLanes::Builder::initLanes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReferenceLanes::Builder::adoptLanes(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>> ReferenceLanes::Builder::disownLanes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReferenceLane,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RelativeLocalization::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RelativeLocalization::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RelativeLocalization::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RelativeLocalization::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RelativeLocalization::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RelativeLocalization::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RelativeLocalization::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RelativeLocalization::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RelativeLocalization::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t RelativeLocalization::Reader::getHdMapStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getHdMapStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setHdMapStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float RelativeLocalization::Reader::getDisToRamp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float RelativeLocalization::Builder::getDisToRamp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setDisToRamp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RelativeLocalization::Reader::getDisToSplit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RelativeLocalization::Builder::getDisToSplit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setDisToSplit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RelativeLocalization::Reader::getDisToMerge() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RelativeLocalization::Builder::getDisToMerge() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setDisToMerge(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RelativeLocalization::Reader::getSplitDirection() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RelativeLocalization::Builder::getSplitDirection() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setSplitDirection( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RelativeLocalization::Reader::getMergeDirection() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t RelativeLocalization::Builder::getMergeDirection() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setMergeDirection( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RelativeLocalization::Reader::getTotalLaneNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getTotalLaneNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setTotalLaneNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RelativeLocalization::Reader::getCurrentLaneIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getCurrentLaneIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setCurrentLaneIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RelativeLocalization::Reader::getLeftLineType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getLeftLineType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setLeftLineType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RelativeLocalization::Reader::getRightLineType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getRightLineType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setRightLineType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float RelativeLocalization::Reader::getLeftDisToSolid() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float RelativeLocalization::Builder::getLeftDisToSolid() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setLeftDisToSolid(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float RelativeLocalization::Reader::getRightDisToSolid() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float RelativeLocalization::Builder::getRightDisToSolid() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setRightDisToSolid(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RelativeLocalization::Reader::getLaneType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RelativeLocalization::Builder::getLaneType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void RelativeLocalization::Builder::setLaneType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool StopPointByObject::Reader::hasPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopPointByObject::Builder::hasPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader StopPointByObject::Reader::getPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopPointByObject::Builder::getPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline StopPointByObject::Pipeline::getPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void StopPointByObject::Builder::setPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopPointByObject::Builder::initPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopPointByObject::Builder::adoptPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> StopPointByObject::Builder::disownPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StopPointByObject::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StopPointByObject::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StopPointByObject::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StopPointByObject::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StopPointByObject::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StopPointByObject::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StopPointByObject::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StopPointByObject::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t ObjectLabel::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ObjectLabel::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObjectLabel::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ObjectLabel::Reader::getLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ObjectLabel::Builder::getLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ObjectLabel::Builder::setLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ObjectTag::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ObjectTag::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObjectTag::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ObjectTag::Reader::getTag() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ObjectTag::Builder::getTag() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ObjectTag::Builder::setTag( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t PlanningDebug::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningDebug::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlanningDebug::Reader::getNum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlanningDebug::Builder::getNum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setNum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PlanningDebug::Reader::getPredictTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningDebug::Builder::getPredictTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPredictTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setX( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setX(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initX(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptX(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setY( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setY(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initY(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptY(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setV( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setV(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasYaw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasYaw() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getYaw() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getYaw() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setYaw( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setYaw(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initYaw(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptYaw(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownYaw() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setA( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setA(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptA(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasJerk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasJerk() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PlanningDebug::Reader::getJerk() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::getJerk() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setJerk( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void PlanningDebug::Builder::setJerk(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PlanningDebug::Builder::initJerk(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptJerk(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PlanningDebug::Builder::disownJerk() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline double PlanningDebug::Reader::getSpeedLimit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getSpeedLimit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setSpeedLimit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getStopDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getStopDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setStopDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getSpeedRef() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getSpeedRef() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setSpeedRef(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getOriginPointX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getOriginPointX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setOriginPointX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getDeltaXScenemap() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getDeltaXScenemap() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setDeltaXScenemap(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getDeltaXEstimation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getDeltaXEstimation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setDeltaXEstimation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasObstacleTagBinary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasObstacleTagBinary() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getObstacleTagBinary() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getObstacleTagBinary() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setObstacleTagBinary( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initObstacleTagBinary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptObstacleTagBinary(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownObstacleTagBinary() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasPpTextboxString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasPpTextboxString() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getPpTextboxString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getPpTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setPpTextboxString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initPpTextboxString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptPpTextboxString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownPpTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setLines( ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptLines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::PlanningLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::getLongiDpSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool PlanningDebug::Builder::getLongiDpSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setLongiDpSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::getLateralDpSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool PlanningDebug::Builder::getLateralDpSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setLateralDpSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::getLongiSolveSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool PlanningDebug::Builder::getLongiSolveSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setLongiSolveSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::getLatSolveSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline bool PlanningDebug::Builder::getLatSolveSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setLatSolveSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PlanningDebug::Reader::getScenarioType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PlanningDebug::Builder::getScenarioType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setScenarioType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PlanningDebug::Reader::getStageType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PlanningDebug::Builder::getStageType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setStageType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasLeaderId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasLeaderId() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getLeaderId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getLeaderId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setLeaderId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initLeaderId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptLeaderId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownLeaderId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasStageName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasStageName() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getStageName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getStageName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setStageName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initStageName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptStageName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownStageName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasStopPointsByObject() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasStopPointsByObject() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getStopPointsByObject() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getStopPointsByObject() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setStopPointsByObject( ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initStopPointsByObject(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptStopPointsByObject(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownStopPointsByObject() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::StopPointByObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasObjectLabel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasObjectLabel() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getObjectLabel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getObjectLabel() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setObjectLabel( ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initObjectLabel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptObjectLabel(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownObjectLabel() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectLabel,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasObjectTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasObjectTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getObjectTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getObjectTag() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setObjectTag( ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initObjectTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptObjectTag(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownObjectTag() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ObjectTag,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasPolicies() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasPolicies() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getPolicies() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getPolicies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setPolicies( ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initPolicies(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptPolicies(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownPolicies() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::Trajectory,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DecisionTarget::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionTarget::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DecisionTarget::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionTarget::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DecisionTarget::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DecisionTarget::Reader::getCurrentVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DecisionTarget::Builder::getCurrentVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setCurrentVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLateralScenario() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLateralScenario() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLateralScenario( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLongitudinalScenario() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLongitudinalScenario() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLongitudinalScenario( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLateralTask() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLateralTask() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLateralTask( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLongitudinalTask() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLongitudinalTask() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLongitudinalTask( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getArea() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getArea() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setArea( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getLatact() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getLatact() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLatact( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getLngact() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getLngact() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLngact( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getChangeDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getChangeDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setChangeDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getPreChangeDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getPreChangeDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setPreChangeDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasCurrentReflineEnu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasCurrentReflineEnu() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader DecisionTarget::Reader::getCurrentReflineEnu() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::getCurrentReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::setCurrentReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::initCurrentReflineEnu(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DecisionTarget::Builder::adoptCurrentReflineEnu(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> DecisionTarget::Builder::disownCurrentReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasTargetReflineEnu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasTargetReflineEnu() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader DecisionTarget::Reader::getTargetReflineEnu() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::getTargetReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::setTargetReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::initTargetReflineEnu(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DecisionTarget::Builder::adoptTargetReflineEnu(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> DecisionTarget::Builder::disownTargetReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DecisionTarget::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float DecisionTarget::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float DecisionTarget::Reader::getHeadwayTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float DecisionTarget::Builder::getHeadwayTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setHeadwayTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasStopPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasStopPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getStopPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getStopPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setStopPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptStopPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasSpeedLimitPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasSpeedLimitPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getSpeedLimitPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getSpeedLimitPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setSpeedLimitPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptSpeedLimitPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint8_t DecisionTarget::Reader::getRoutingLaneChangeFlag() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getRoutingLaneChangeFlag() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setRoutingLaneChangeFlag( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasLaneTypeChangePoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasLaneTypeChangePoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getLaneTypeChangePoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getLaneTypeChangePoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setLaneTypeChangePoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptLaneTypeChangePoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::getRoutingChangeLaneTwiceFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getRoutingChangeLaneTwiceFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setRoutingChangeLaneTwiceFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<208>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasLaneTypeChangeTwicePoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasLaneTypeChangeTwicePoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getLaneTypeChangeTwicePoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getLaneTypeChangeTwicePoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setLaneTypeChangeTwicePoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptLaneTypeChangeTwicePoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::getReflineChangeFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getReflineChangeFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setReflineChangeFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<209>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getSignalBlub() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getSignalBlub() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setSignalBlub( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getTurntype() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getTurntype() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setTurntype( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::getTrafficStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<210>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getTrafficStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<210>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setTrafficStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<210>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionTarget::Reader::getNopSystemState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionTarget::Builder::getNopSystemState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setNopSystemState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DecisionTarget::Reader::getDmppStartTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DecisionTarget::Builder::getDmppStartTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setDmppStartTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double DecisionTarget::Reader::getDist2ramp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double DecisionTarget::Builder::getDist2ramp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setDist2ramp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DecisionDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DecisionDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DecisionDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DecisionDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasReflines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasReflines() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getReflines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setReflines( ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initReflines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptReflines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasJunctionReflines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasJunctionReflines() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getJunctionReflines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getJunctionReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setJunctionReflines( ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initJunctionReflines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptJunctionReflines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownJunctionReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::getArriveTargetLane() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DecisionDebug::Builder::getArriveTargetLane() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setArriveTargetLane(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLateralStage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLateralStage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLateralStage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getIfNeedRoutingLanechange() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getIfNeedRoutingLanechange() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setIfNeedRoutingLanechange( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLanechangeCauseSrlIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLanechangeCauseSrlIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLanechangeCauseSrlIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLanechangeRoutingIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLanechangeRoutingIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLanechangeRoutingIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getFaultVehicleCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getFaultVehicleCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setFaultVehicleCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getEfficientLane() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getEfficientLane() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setEfficientLane( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasEfficientCount() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasEfficientCount() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getEfficientCount() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getEfficientCount() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setEfficientCount( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setEfficientCount(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initEfficientCount(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptEfficientCount(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownEfficientCount() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getEffLcScenario() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getEffLcScenario() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setEffLcScenario( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasLongsceneApplied() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasLongsceneApplied() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getLongsceneApplied() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getLongsceneApplied() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setLongsceneApplied( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setLongsceneApplied(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initLongsceneApplied(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptLongsceneApplied(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownLongsceneApplied() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getHighlightLongscene() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getHighlightLongscene() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setHighlightLongscene( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasLatsceneTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasLatsceneTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getLatsceneTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getLatsceneTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setLatsceneTrans( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setLatsceneTrans(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initLatsceneTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptLatsceneTrans(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownLatsceneTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getLatStage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLatStage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLatStage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double DecisionDebug::Reader::getDist2junction() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double DecisionDebug::Builder::getDist2junction() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setDist2junction(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasCurrRoadid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasCurrRoadid() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getCurrRoadid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getCurrRoadid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setCurrRoadid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initCurrRoadid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptCurrRoadid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownCurrRoadid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasCurrLandid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasCurrLandid() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getCurrLandid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getCurrLandid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setCurrLandid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initCurrLandid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptCurrLandid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownCurrLandid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getIfInJunction() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getIfInJunction() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setIfInJunction( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getReflineChangeFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getReflineChangeFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setReflineChangeFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getRoutingChangeLaneTwiceFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getRoutingChangeLaneTwiceFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setRoutingChangeLaneTwiceFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasTrafficlights() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasTrafficlights() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getTrafficlights() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getTrafficlights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setTrafficlights( ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initTrafficlights(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptTrafficlights(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownTrafficlights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrafficLight,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasReflineBlockForUnknown() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasReflineBlockForUnknown() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getReflineBlockForUnknown() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getReflineBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setReflineBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setReflineBlockForUnknown(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initReflineBlockForUnknown(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptReflineBlockForUnknown(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownReflineBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasJunctionLinkBlockForUnknown() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasJunctionLinkBlockForUnknown() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getJunctionLinkBlockForUnknown() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getJunctionLinkBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setJunctionLinkBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setJunctionLinkBlockForUnknown(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initJunctionLinkBlockForUnknown(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptJunctionLinkBlockForUnknown(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownJunctionLinkBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasBlockUnknownIdLine() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasBlockUnknownIdLine() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getBlockUnknownIdLine() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getBlockUnknownIdLine() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setBlockUnknownIdLine( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setBlockUnknownIdLine(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initBlockUnknownIdLine(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptBlockUnknownIdLine(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownBlockUnknownIdLine() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasCipvIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasCipvIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getCipvIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getCipvIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setCipvIds( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setCipvIds(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initCipvIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptCipvIds(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownCipvIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline double DecisionDebug::Reader::getEgoCarD() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double DecisionDebug::Builder::getEgoCarD() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setEgoCarD(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasBuffer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasBuffer() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getBuffer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getBuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setBuffer( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptBuffer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownBuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::int64_t DecisionDebug::Reader::getLeftLineId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DecisionDebug::Builder::getLeftLineId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLeftLineId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t DecisionDebug::Reader::getRightLineId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DecisionDebug::Builder::getRightLineId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setRightLineId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t DecisionDebug::Reader::getLeftLineType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t DecisionDebug::Builder::getLeftLineType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLeftLineType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t DecisionDebug::Reader::getRightLineType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::int16_t DecisionDebug::Builder::getRightLineType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setRightLineType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasDmTextboxString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasDmTextboxString() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getDmTextboxString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getDmTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setDmTextboxString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initDmTextboxString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptDmTextboxString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownDmTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::getCipvTakeover() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool DecisionDebug::Builder::getCipvTakeover() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setCipvTakeover(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::getConfirmEfficiencyChange() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DecisionDebug::Builder::getConfirmEfficiencyChange() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setConfirmEfficiencyChange(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t NopOutHandsOff::Reader::getUilateralCtrHandsOffWarningNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t NopOutHandsOff::Builder::getUilateralCtrHandsOffWarningNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NopOutHandsOff::Builder::setUilateralCtrHandsOffWarningNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutHandsOff::Reader::getBEnaHandsOffCnfm() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool NopOutHandsOff::Builder::getBEnaHandsOffCnfm() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void NopOutHandsOff::Builder::setBEnaHandsOffCnfm(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutVehStateRequest::Reader::getBHazardLightReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NopOutVehStateRequest::Builder::getBHazardLightReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setBHazardLightReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutVehStateRequest::Reader::getBHighBeamReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool NopOutVehStateRequest::Builder::getBHighBeamReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setBHighBeamReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutVehStateRequest::Reader::getBLowBeamReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool NopOutVehStateRequest::Builder::getBLowBeamReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setBLowBeamReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t NopOutVehStateRequest::Reader::getUiLightRemindNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t NopOutVehStateRequest::Builder::getUiLightRemindNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setUiLightRemindNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutVehStateRequest::Reader::getBVehicleHornReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool NopOutVehStateRequest::Builder::getBVehicleHornReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setBVehicleHornReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool NopOutVehStateRequest::Reader::getBStolenAlarmWarnReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool NopOutVehStateRequest::Builder::getBStolenAlarmWarnReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void NopOutVehStateRequest::Builder::setBStolenAlarmWarnReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionOutput::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionOutput::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DecisionOutput::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionOutput::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DecisionOutput::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DecisionOutput::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionOutput::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DecisionOutput::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DecisionOutput::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int8_t DecisionOutput::Reader::getUiSystemStateMachineNu() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DecisionOutput::Builder::getUiSystemStateMachineNu() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiSystemStateMachineNu( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiP2NStateReminderNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiP2NStateReminderNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiP2NStateReminderNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiStateReminderNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiStateReminderNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiStateReminderNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DecisionOutput::Reader::getUiActiveConditionBtf() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DecisionOutput::Builder::getUiActiveConditionBtf() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiActiveConditionBtf( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DecisionOutput::Reader::getUiSuppressionConditionBtf() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DecisionOutput::Builder::getUiSuppressionConditionBtf() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiSuppressionConditionBtf( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getPpLatLongState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getPpLatLongState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setPpLatLongState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DecisionOutput::Reader::getUiMrmStatusNu() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DecisionOutput::Builder::getUiMrmStatusNu() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiMrmStatusNu( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiStateNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiStateNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiStateNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionOutput::Reader::hasSHandsOffState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionOutput::Builder::hasSHandsOffState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::NopOutHandsOff::Reader DecisionOutput::Reader::getSHandsOffState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::NopOutHandsOff::Builder DecisionOutput::Builder::getSHandsOffState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::NopOutHandsOff::Pipeline DecisionOutput::Pipeline::getSHandsOffState() {
  return  ::senseAD::msg::planning::NopOutHandsOff::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DecisionOutput::Builder::setSHandsOffState( ::senseAD::msg::planning::NopOutHandsOff::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::NopOutHandsOff::Builder DecisionOutput::Builder::initSHandsOffState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DecisionOutput::Builder::adoptSHandsOffState(
    ::capnp::Orphan< ::senseAD::msg::planning::NopOutHandsOff>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::NopOutHandsOff> DecisionOutput::Builder::disownSHandsOffState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutHandsOff>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DecisionOutput::Reader::getBEyeOff() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool DecisionOutput::Builder::getBEyeOff() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setBEyeOff(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiNnpScenariosNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiNnpScenariosNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiNnpScenariosNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiNnprinoNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiNnprinoNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiNnprinoNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiVoiceModeNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiVoiceModeNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiVoiceModeNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiOnOffAudioPlayNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiOnOffAudioPlayNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiOnOffAudioPlayNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiAutoOnOffSetNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiAutoOnOffSetNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiAutoOnOffSetNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiSndStateNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiSndStateNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiSndStateNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiVoiceNotifFrequencyModeNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiVoiceNotifFrequencyModeNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiVoiceNotifFrequencyModeNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCancelAudioPlayNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCancelAudioPlayNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCancelAudioPlayNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiDrivingModeNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiDrivingModeNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiDrivingModeNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiAlcModeNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiAlcModeNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiAlcModeNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiOverrideStateNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiOverrideStateNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiOverrideStateNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiTrafficStateNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiTrafficStateNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiTrafficStateNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiSpeedAdaptConfirmNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiSpeedAdaptConfirmNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiSpeedAdaptConfirmNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiOsaStatusNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiOsaStatusNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiOsaStatusNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiPayModeConfirmNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiPayModeConfirmNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiPayModeConfirmNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiPayModeConfirmReqNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiPayModeConfirmReqNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiPayModeConfirmReqNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiLaneChangeAudioPlayNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiLaneChangeAudioPlayNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLaneChangeAudioPlayNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiLcSndRequestNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiLcSndRequestNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLcSndRequestNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiLaneChangeInforNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiLaneChangeInforNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLaneChangeInforNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiLaneChangeDirctionNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiLaneChangeDirctionNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLaneChangeDirctionNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiLaneChangePendingAlertNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiLaneChangePendingAlertNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLaneChangePendingAlertNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiOverTakeConfirmNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiOverTakeConfirmNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiOverTakeConfirmNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCruiseSpeedAddFeedbcakNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCruiseSpeedAddFeedbcakNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCruiseSpeedAddFeedbcakNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCruiseSpeedMinusFeedbackNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCruiseSpeedMinusFeedbackNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCruiseSpeedMinusFeedbackNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCruiseDistanceAddFeedbackNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCruiseDistanceAddFeedbackNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCruiseDistanceAddFeedbackNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCruiseDistanceMinusFeedbackNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCruiseDistanceMinusFeedbackNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCruiseDistanceMinusFeedbackNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DecisionOutput::Reader::getUiLongitudeCtrlSetSpeedKph() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DecisionOutput::Builder::getUiLongitudeCtrlSetSpeedKph() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiLongitudeCtrlSetSpeedKph( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getUiCurrentHeadwaySettingNu() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getUiCurrentHeadwaySettingNu() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiCurrentHeadwaySettingNu( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionOutput::Reader::hasVehState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionOutput::Builder::hasVehState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::NopOutVehStateRequest::Reader DecisionOutput::Reader::getVehState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::NopOutVehStateRequest::Builder DecisionOutput::Builder::getVehState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::NopOutVehStateRequest::Pipeline DecisionOutput::Pipeline::getVehState() {
  return  ::senseAD::msg::planning::NopOutVehStateRequest::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void DecisionOutput::Builder::setVehState( ::senseAD::msg::planning::NopOutVehStateRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::NopOutVehStateRequest::Builder DecisionOutput::Builder::initVehState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DecisionOutput::Builder::adoptVehState(
    ::capnp::Orphan< ::senseAD::msg::planning::NopOutVehStateRequest>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::NopOutVehStateRequest> DecisionOutput::Builder::disownVehState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::NopOutVehStateRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t DecisionOutput::Reader::getDist2rampReminder() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getDist2rampReminder() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setDist2rampReminder( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionOutput::Reader::getEnteringRamp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline bool DecisionOutput::Builder::getEnteringRamp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setEnteringRamp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getDist2rampExitReminder() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getDist2rampExitReminder() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setDist2rampExitReminder( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionOutput::Reader::getMergingMainRoad() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline bool DecisionOutput::Builder::getMergingMainRoad() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setMergingMainRoad(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getDist2routeEndReminder() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getDist2routeEndReminder() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setDist2routeEndReminder( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<54>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DecisionOutput::Reader::getTakeOverType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DecisionOutput::Builder::getTakeOverType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setTakeOverType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t DecisionOutput::Reader::getUiDispStateMachineNu() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}

inline  ::int8_t DecisionOutput::Builder::getUiDispStateMachineNu() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiDispStateMachineNu( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t DecisionOutput::Reader::getUiNNPSSMInfo() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t DecisionOutput::Builder::getUiNNPSSMInfo() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DecisionOutput::Builder::setUiNNPSSMInfo( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool XDebugMsgs::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool XDebugMsgs::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader XDebugMsgs::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder XDebugMsgs::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline XDebugMsgs::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void XDebugMsgs::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder XDebugMsgs::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void XDebugMsgs::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> XDebugMsgs::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool XDebugMsgs::Reader::hasJson() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool XDebugMsgs::Builder::hasJson() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader XDebugMsgs::Reader::getJson() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder XDebugMsgs::Builder::getJson() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void XDebugMsgs::Builder::setJson( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder XDebugMsgs::Builder::initJson(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void XDebugMsgs::Builder::adoptJson(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> XDebugMsgs::Builder::disownJson() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DriverIntentionInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DriverIntentionInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DriverIntentionInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DriverIntentionInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DriverIntentionInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DriverIntentionInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DriverIntentionInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DriverIntentionInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DriverIntentionInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double DriverIntentionInfo::Reader::getManualSetSpeed() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double DriverIntentionInfo::Builder::getManualSetSpeed() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DriverIntentionInfo::Builder::setManualSetSpeed(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DriverIntentionInfo::Reader::getFuctionStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool DriverIntentionInfo::Builder::getFuctionStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void DriverIntentionInfo::Builder::setFuctionStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t DriverIntentionInfo::Reader::getLaneChangeDirction() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t DriverIntentionInfo::Builder::getLaneChangeDirction() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DriverIntentionInfo::Builder::setLaneChangeDirction( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool DriverIntentionInfo::Reader::hasCipvInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DriverIntentionInfo::Builder::hasCipvInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader DriverIntentionInfo::Reader::getCipvInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DriverIntentionInfo::Builder::getCipvInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DriverIntentionInfo::Builder::setCipvInfo( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void DriverIntentionInfo::Builder::setCipvInfo(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DriverIntentionInfo::Builder::initCipvInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DriverIntentionInfo::Builder::adoptCipvInfo(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> DriverIntentionInfo::Builder::disownCipvInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningRequestSystemState::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningRequestSystemState::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningRequestSystemState::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningRequestSystemState::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningRequestSystemState::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningRequestSystemState::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningRequestSystemState::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningRequestSystemState::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningRequestSystemState::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Reader::getNopSystemStateEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Builder::getNopSystemStateEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningRequestSystemState::Builder::setNopSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Reader::getLfpSystemStateEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Builder::getLfpSystemStateEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningRequestSystemState::Builder::setLfpSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Reader::getAccSystemStateEnum() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState PlanningRequestSystemState::Builder::getAccSystemStateEnum() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningRequestSystemState::Builder::setAccSystemStateEnum( ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningRequestSystemState::NopSystemState>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::SystemState PlanningRequestSystemState::Reader::getSystemState() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::SystemState>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningRequestSystemState::SystemState PlanningRequestSystemState::Builder::getSystemState() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningRequestSystemState::SystemState>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningRequestSystemState::Builder::setSystemState( ::senseAD::msg::planning::PlanningRequestSystemState::SystemState value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningRequestSystemState::SystemState>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState MemoryDriveInfo::Reader::getMemoryDriveState() const {
  return _reader.getDataField< ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState MemoryDriveInfo::Builder::getMemoryDriveState() {
  return _builder.getDataField< ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MemoryDriveInfo::Builder::setMemoryDriveState( ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState value) {
  _builder.setDataField< ::senseAD::msg::planning::MemoryDriveInfo::MemoryDriveState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double MemoryDriveInfo::Reader::getTravelTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double MemoryDriveInfo::Builder::getTravelTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MemoryDriveInfo::Builder::setTravelTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double MemoryDriveInfo::Reader::getRemainingMileage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double MemoryDriveInfo::Builder::getRemainingMileage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MemoryDriveInfo::Builder::setRemainingMileage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double MemoryDriveInfo::Reader::getTotalMileage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double MemoryDriveInfo::Builder::getTotalMileage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MemoryDriveInfo::Builder::setTotalMileage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool MemoryDriveInfo::Reader::hasMemoryTrajectory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MemoryDriveInfo::Builder::hasMemoryTrajectory() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader MemoryDriveInfo::Reader::getMemoryTrajectory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder MemoryDriveInfo::Builder::getMemoryTrajectory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MemoryDriveInfo::Builder::setMemoryTrajectory( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder MemoryDriveInfo::Builder::initMemoryTrajectory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MemoryDriveInfo::Builder::adoptMemoryTrajectory(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> MemoryDriveInfo::Builder::disownMemoryTrajectory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::LaneChangeState::ChangeStatus LaneChangeState::Reader::getChangeStatus() const {
  return _reader.getDataField< ::senseAD::msg::planning::LaneChangeState::ChangeStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::LaneChangeState::ChangeStatus LaneChangeState::Builder::getChangeStatus() {
  return _builder.getDataField< ::senseAD::msg::planning::LaneChangeState::ChangeStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setChangeStatus( ::senseAD::msg::planning::LaneChangeState::ChangeStatus value) {
  _builder.setDataField< ::senseAD::msg::planning::LaneChangeState::ChangeStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LaneChangeState::Reader::hasTargetPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneChangeState::Builder::hasTargetPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader LaneChangeState::Reader::getTargetPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneChangeState::Builder::getTargetPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline LaneChangeState::Pipeline::getTargetPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LaneChangeState::Builder::setTargetPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder LaneChangeState::Builder::initTargetPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneChangeState::Builder::adoptTargetPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> LaneChangeState::Builder::disownTargetPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double LaneChangeState::Reader::getHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double LaneChangeState::Builder::getHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LaneChangeState::Reader::getGapFrontId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LaneChangeState::Builder::getGapFrontId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setGapFrontId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LaneChangeState::Reader::getGapRearId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LaneChangeState::Builder::getGapRearId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setGapRearId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LaneChangeState::Reader::getHmiChangingState() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LaneChangeState::Builder::getHmiChangingState() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiChangingState( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LaneChangeState::Reader::getHmiCrossingIntersectionWarning() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LaneChangeState::Builder::getHmiCrossingIntersectionWarning() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiCrossingIntersectionWarning( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LaneChangeState::Reader::getHmiEgoIntersectionAction() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LaneChangeState::Builder::getHmiEgoIntersectionAction() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiEgoIntersectionAction( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LaneChangeState::Reader::getHmiTurningDirection() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LaneChangeState::Builder::getHmiTurningDirection() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiTurningDirection( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LaneChangeState::Reader::getHmiLaneBiasFlag() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LaneChangeState::Builder::getHmiLaneBiasFlag() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiLaneBiasFlag( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LaneChangeState::Reader::getHmiLaneBiasObjectId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LaneChangeState::Builder::getHmiLaneBiasObjectId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LaneChangeState::Builder::setHmiLaneBiasObjectId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ErrorCode::Reader::getLosttopic() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ErrorCode::Builder::getLosttopic() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ErrorCode::Builder::setLosttopic( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ErrorCode::Reader::getTopictimeout() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ErrorCode::Builder::getTopictimeout() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ErrorCode::Builder::setTopictimeout( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::PlannerErr FailReason::Reader::getPlannerErr() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::PlannerErr>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::PlannerErr FailReason::Builder::getPlannerErr() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::PlannerErr>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setPlannerErr( ::senseAD::msg::planning::FailReason::PlannerErr value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::PlannerErr>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::PathPlannerFail FailReason::Reader::getPathPlannerFail() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::PathPlannerFail>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::PathPlannerFail FailReason::Builder::getPathPlannerFail() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::PathPlannerFail>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setPathPlannerFail( ::senseAD::msg::planning::FailReason::PathPlannerFail value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::PathPlannerFail>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::LatSolverFail FailReason::Reader::getLatSolverFail() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::LatSolverFail>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::LatSolverFail FailReason::Builder::getLatSolverFail() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::LatSolverFail>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setLatSolverFail( ::senseAD::msg::planning::FailReason::LatSolverFail value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::LatSolverFail>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::AbnomalOrigin FailReason::Reader::getAbnomalOrigin() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::AbnomalOrigin>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::AbnomalOrigin FailReason::Builder::getAbnomalOrigin() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::AbnomalOrigin>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setAbnomalOrigin( ::senseAD::msg::planning::FailReason::AbnomalOrigin value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::AbnomalOrigin>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::InvalidLongiSpeed FailReason::Reader::getInvalidLongiSpeed() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::InvalidLongiSpeed>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::InvalidLongiSpeed FailReason::Builder::getInvalidLongiSpeed() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::InvalidLongiSpeed>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setInvalidLongiSpeed( ::senseAD::msg::planning::FailReason::InvalidLongiSpeed value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::InvalidLongiSpeed>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::LongiSolverFail FailReason::Reader::getLongiSolverFail() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::LongiSolverFail>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::LongiSolverFail FailReason::Builder::getLongiSolverFail() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::LongiSolverFail>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setLongiSolverFail( ::senseAD::msg::planning::FailReason::LongiSolverFail value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::LongiSolverFail>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FailReason::Reader::getReflineBuildResult() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FailReason::Builder::getReflineBuildResult() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setReflineBuildResult( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::FailReason::HnopActiveFail FailReason::Reader::getHnopActiveFail() const {
  return _reader.getDataField< ::senseAD::msg::planning::FailReason::HnopActiveFail>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::FailReason::HnopActiveFail FailReason::Builder::getHnopActiveFail() {
  return _builder.getDataField< ::senseAD::msg::planning::FailReason::HnopActiveFail>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void FailReason::Builder::setHnopActiveFail( ::senseAD::msg::planning::FailReason::HnopActiveFail value) {
  _builder.setDataField< ::senseAD::msg::planning::FailReason::HnopActiveFail>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t KeyObj::Reader::getBorrowObjId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t KeyObj::Builder::getBorrowObjId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KeyObj::Builder::setBorrowObjId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t KeyObj::Reader::getBiasObjId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t KeyObj::Builder::getBiasObjId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void KeyObj::Builder::setBiasObjId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t KeyObj::Reader::getLcRiskObjId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t KeyObj::Builder::getLcRiskObjId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void KeyObj::Builder::setLcRiskObjId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t KeyObj::Reader::getCutinId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t KeyObj::Builder::getCutinId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void KeyObj::Builder::setCutinId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LcTargetLaneGapInfo::Reader::getTargetLaneFrontId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LcTargetLaneGapInfo::Builder::getTargetLaneFrontId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LcTargetLaneGapInfo::Builder::setTargetLaneFrontId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LcTargetLaneGapInfo::Reader::getTargetLaneRearId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LcTargetLaneGapInfo::Builder::getTargetLaneRearId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LcTargetLaneGapInfo::Builder::setTargetLaneRearId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t PipelineInfo::Reader::getLaneKeepPplStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t PipelineInfo::Builder::getLaneKeepPplStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PipelineInfo::Builder::setLaneKeepPplStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t PipelineInfo::Reader::getLeftLanechgPplStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t PipelineInfo::Builder::getLeftLanechgPplStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PipelineInfo::Builder::setLeftLanechgPplStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PipelineInfo::Reader::getLeftLaneChgPplSuccessCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PipelineInfo::Builder::getLeftLaneChgPplSuccessCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PipelineInfo::Builder::setLeftLaneChgPplSuccessCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t PipelineInfo::Reader::getRightLanechgPplStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int8_t PipelineInfo::Builder::getRightLanechgPplStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PipelineInfo::Builder::setRightLanechgPplStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PipelineInfo::Reader::getRightLaneChgPplSuccessCounter() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PipelineInfo::Builder::getRightLaneChgPplSuccessCounter() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PipelineInfo::Builder::setRightLaneChgPplSuccessCounter( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool EfficiencyLaneVhgInfo::Reader::getIsEgoSpdSuppressed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool EfficiencyLaneVhgInfo::Builder::getIsEgoSpdSuppressed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EfficiencyLaneVhgInfo::Builder::setIsEgoSpdSuppressed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool EfficiencyLaneVhgInfo::Reader::getIsNeighborFastOrFurther() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool EfficiencyLaneVhgInfo::Builder::getIsNeighborFastOrFurther() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EfficiencyLaneVhgInfo::Builder::setIsNeighborFastOrFurther(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool EfficiencyLaneVhgInfo::Reader::getIsNeighborRisk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool EfficiencyLaneVhgInfo::Builder::getIsNeighborRisk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EfficiencyLaneVhgInfo::Builder::setIsNeighborRisk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float EfficiencyLaneVhgInfo::Reader::getLaneChgEfficiencyScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float EfficiencyLaneVhgInfo::Builder::getLaneChgEfficiencyScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EfficiencyLaneVhgInfo::Builder::setLaneChgEfficiencyScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SpeedLimitInfo::Reader::getCurSpeedLimit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SpeedLimitInfo::Builder::getCurSpeedLimit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SpeedLimitInfo::Builder::setCurSpeedLimit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpeedLimitInfo::Reader::getCurLinkType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpeedLimitInfo::Builder::getCurLinkType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SpeedLimitInfo::Builder::setCurLinkType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SpeedLimitInfo::Reader::getNextSpeedLimit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SpeedLimitInfo::Builder::getNextSpeedLimit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SpeedLimitInfo::Builder::setNextSpeedLimit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpeedLimitInfo::Reader::getNextDiffSpeedLimitLinkType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpeedLimitInfo::Builder::getNextDiffSpeedLimitLinkType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SpeedLimitInfo::Builder::setNextDiffSpeedLimitLinkType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpeedLimitInfo::Reader::getDisToNextDiffSpdLimitLink() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpeedLimitInfo::Builder::getDisToNextDiffSpdLimitLink() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SpeedLimitInfo::Builder::setDisToNextDiffSpdLimitLink( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ObjElactoer::Reader::hasLeadersId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ObjElactoer::Builder::hasLeadersId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ObjElactoer::Reader::getLeadersId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::getLeadersId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ObjElactoer::Builder::setLeadersId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ObjElactoer::Builder::setLeadersId(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::initLeadersId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ObjElactoer::Builder::adoptLeadersId(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ObjElactoer::Builder::disownLeadersId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ObjElactoer::Reader::hasNeighboursId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ObjElactoer::Builder::hasNeighboursId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ObjElactoer::Reader::getNeighboursId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::getNeighboursId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ObjElactoer::Builder::setNeighboursId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ObjElactoer::Builder::setNeighboursId(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::initNeighboursId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ObjElactoer::Builder::adoptNeighboursId(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ObjElactoer::Builder::disownNeighboursId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ObjElactoer::Reader::hasOncomingId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ObjElactoer::Builder::hasOncomingId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ObjElactoer::Reader::getOncomingId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::getOncomingId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ObjElactoer::Builder::setOncomingId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ObjElactoer::Builder::setOncomingId(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::initOncomingId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ObjElactoer::Builder::adoptOncomingId(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ObjElactoer::Builder::disownOncomingId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ObjElactoer::Reader::hasCrossingId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ObjElactoer::Builder::hasCrossingId() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ObjElactoer::Reader::getCrossingId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::getCrossingId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ObjElactoer::Builder::setCrossingId( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ObjElactoer::Builder::setCrossingId(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjElactoer::Builder::initCrossingId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ObjElactoer::Builder::adoptCrossingId(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ObjElactoer::Builder::disownCrossingId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningState::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningState::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningState::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningState::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningState::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::PlanningState::VehicleState PlanningState::Reader::getVehicleState() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::VehicleState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::VehicleState PlanningState::Builder::getVehicleState() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::VehicleState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setVehicleState( ::senseAD::msg::planning::PlanningState::VehicleState value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::VehicleState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double PlanningState::Reader::getSelectedSpeed() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PlanningState::Builder::getSelectedSpeed() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSelectedSpeed(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PlanningState::Reader::getSelectedTimeHeadway() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlanningState::Builder::getSelectedTimeHeadway() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSelectedTimeHeadway( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::ILCChangeDirection PlanningState::Reader::getILCState() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::ILCChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::ILCChangeDirection PlanningState::Builder::getILCState() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::ILCChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setILCState( ::senseAD::msg::planning::PlanningState::ILCChangeDirection value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::ILCChangeDirection>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PlanningState::Reader::getCIPV() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlanningState::Builder::getCIPV() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setCIPV( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasKeyVRUs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasKeyVRUs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader PlanningState::Reader::getKeyVRUs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlanningState::Builder::getKeyVRUs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::setKeyVRUs( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PlanningState::Builder::setKeyVRUs(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlanningState::Builder::initKeyVRUs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlanningState::Builder::adoptKeyVRUs(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> PlanningState::Builder::disownKeyVRUs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double PlanningState::Reader::getSpeedLimit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double PlanningState::Builder::getSpeedLimit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSpeedLimit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasTrajectory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasTrajectory() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader PlanningState::Reader::getTrajectory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningState::Builder::getTrajectory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::setTrajectory( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningState::Builder::initTrajectory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PlanningState::Builder::adoptTrajectory(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> PlanningState::Builder::disownTrajectory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasMemoryDriveInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasMemoryDriveInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::MemoryDriveInfo::Reader PlanningState::Reader::getMemoryDriveInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::MemoryDriveInfo::Builder PlanningState::Builder::getMemoryDriveInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::MemoryDriveInfo::Pipeline PlanningState::Pipeline::getMemoryDriveInfo() {
  return  ::senseAD::msg::planning::MemoryDriveInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setMemoryDriveInfo( ::senseAD::msg::planning::MemoryDriveInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::MemoryDriveInfo::Builder PlanningState::Builder::initMemoryDriveInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptMemoryDriveInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::MemoryDriveInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::MemoryDriveInfo> PlanningState::Builder::disownMemoryDriveInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::MemoryDriveInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasLaneChangeState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasLaneChangeState() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::LaneChangeState::Reader PlanningState::Reader::getLaneChangeState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::LaneChangeState::Builder PlanningState::Builder::getLaneChangeState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::LaneChangeState::Pipeline PlanningState::Pipeline::getLaneChangeState() {
  return  ::senseAD::msg::planning::LaneChangeState::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setLaneChangeState( ::senseAD::msg::planning::LaneChangeState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::LaneChangeState::Builder PlanningState::Builder::initLaneChangeState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptLaneChangeState(
    ::capnp::Orphan< ::senseAD::msg::planning::LaneChangeState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::LaneChangeState> PlanningState::Builder::disownLaneChangeState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LaneChangeState>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::PlanningState::NopActiveEnum PlanningState::Reader::getNopActive() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::NopActiveEnum>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::NopActiveEnum PlanningState::Builder::getNopActive() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::NopActiveEnum>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setNopActive( ::senseAD::msg::planning::PlanningState::NopActiveEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::NopActiveEnum>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlanningState::Reader::getSocPlannerStateMachie() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlanningState::Builder::getSocPlannerStateMachie() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSocPlannerStateMachie( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::PilotUnavailableReason PlanningState::Reader::getSocPilotUnavailableReason() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::PilotUnavailableReason>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::PilotUnavailableReason PlanningState::Builder::getSocPilotUnavailableReason() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::PilotUnavailableReason>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSocPilotUnavailableReason( ::senseAD::msg::planning::PlanningState::PilotUnavailableReason value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::PilotUnavailableReason>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::TurnTypeEnum PlanningState::Reader::getTurnType() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::TurnTypeEnum>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::TurnTypeEnum PlanningState::Builder::getTurnType() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::TurnTypeEnum>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setTurnType( ::senseAD::msg::planning::PlanningState::TurnTypeEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::TurnTypeEnum>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasErrorType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasErrorType() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::ErrorCode::Reader PlanningState::Reader::getErrorType() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::ErrorCode::Builder PlanningState::Builder::getErrorType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::ErrorCode::Pipeline PlanningState::Pipeline::getErrorType() {
  return  ::senseAD::msg::planning::ErrorCode::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setErrorType( ::senseAD::msg::planning::ErrorCode::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::ErrorCode::Builder PlanningState::Builder::initErrorType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptErrorType(
    ::capnp::Orphan< ::senseAD::msg::planning::ErrorCode>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::ErrorCode> PlanningState::Builder::disownErrorType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ErrorCode>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasAbnormalType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasAbnormalType() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::FailReason::Reader PlanningState::Reader::getAbnormalType() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::FailReason::Builder PlanningState::Builder::getAbnormalType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::FailReason::Pipeline PlanningState::Pipeline::getAbnormalType() {
  return  ::senseAD::msg::planning::FailReason::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setAbnormalType( ::senseAD::msg::planning::FailReason::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::FailReason::Builder PlanningState::Builder::initAbnormalType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptAbnormalType(
    ::capnp::Orphan< ::senseAD::msg::planning::FailReason>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::FailReason> PlanningState::Builder::disownAbnormalType() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::FailReason>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::PlanningState::LcTypeEnum PlanningState::Reader::getLcType() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::LcTypeEnum>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::LcTypeEnum PlanningState::Builder::getLcType() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::LcTypeEnum>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setLcType( ::senseAD::msg::planning::PlanningState::LcTypeEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::LcTypeEnum>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::BiasTypeEnum PlanningState::Reader::getBiasType() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::BiasTypeEnum>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::BiasTypeEnum PlanningState::Builder::getBiasType() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::BiasTypeEnum>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setBiasType( ::senseAD::msg::planning::PlanningState::BiasTypeEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::BiasTypeEnum>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::BorrowTypeEnum PlanningState::Reader::getBorrowType() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::BorrowTypeEnum>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::BorrowTypeEnum PlanningState::Builder::getBorrowType() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::BorrowTypeEnum>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setBorrowType( ::senseAD::msg::planning::PlanningState::BorrowTypeEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::BorrowTypeEnum>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum PlanningState::Reader::getOriginUpdateReason() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum PlanningState::Builder::getOriginUpdateReason() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setOriginUpdateReason( ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::OriginUpdateReasonEnum>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum PlanningState::Reader::getLaneChgFailReason() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum PlanningState::Builder::getLaneChgFailReason() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setLaneChgFailReason( ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::LaneChgFailReasonEnum>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum PlanningState::Reader::getLaneChgRiskObj() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum PlanningState::Builder::getLaneChgRiskObj() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setLaneChgRiskObj( ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::LaneChgRiskObjEnum>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::getIsLaneChgDesiredSpeed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<400>() * ::capnp::ELEMENTS);
}

inline bool PlanningState::Builder::getIsLaneChgDesiredSpeed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<400>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setIsLaneChgDesiredSpeed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<400>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasReflineUsedLaneIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasReflineUsedLaneIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader PlanningState::Reader::getReflineUsedLaneIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlanningState::Builder::getReflineUsedLaneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::setReflineUsedLaneIds( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void PlanningState::Builder::setReflineUsedLaneIds(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlanningState::Builder::initReflineUsedLaneIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void PlanningState::Builder::adoptReflineUsedLaneIds(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> PlanningState::Builder::disownReflineUsedLaneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::getReflineModyReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<401>() * ::capnp::ELEMENTS);
}

inline bool PlanningState::Builder::getReflineModyReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<401>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setReflineModyReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<401>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasKeyObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasKeyObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::KeyObj::Reader PlanningState::Reader::getKeyObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::KeyObj::Builder PlanningState::Builder::getKeyObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::KeyObj::Pipeline PlanningState::Pipeline::getKeyObj() {
  return  ::senseAD::msg::planning::KeyObj::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setKeyObj( ::senseAD::msg::planning::KeyObj::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::KeyObj::Builder PlanningState::Builder::initKeyObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptKeyObj(
    ::capnp::Orphan< ::senseAD::msg::planning::KeyObj>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::KeyObj> PlanningState::Builder::disownKeyObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::KeyObj>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasLcTargetLaneGapInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasLcTargetLaneGapInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Reader PlanningState::Reader::getLcTargetLaneGapInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Builder PlanningState::Builder::getLcTargetLaneGapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Pipeline PlanningState::Pipeline::getLcTargetLaneGapInfo() {
  return  ::senseAD::msg::planning::LcTargetLaneGapInfo::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setLcTargetLaneGapInfo( ::senseAD::msg::planning::LcTargetLaneGapInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::LcTargetLaneGapInfo::Builder PlanningState::Builder::initLcTargetLaneGapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptLcTargetLaneGapInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::LcTargetLaneGapInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::LcTargetLaneGapInfo> PlanningState::Builder::disownLcTargetLaneGapInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::LcTargetLaneGapInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasPipelineInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasPipelineInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::PipelineInfo::Reader PlanningState::Reader::getPipelineInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::PipelineInfo::Builder PlanningState::Builder::getPipelineInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::PipelineInfo::Pipeline PlanningState::Pipeline::getPipelineInfo() {
  return  ::senseAD::msg::planning::PipelineInfo::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setPipelineInfo( ::senseAD::msg::planning::PipelineInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::PipelineInfo::Builder PlanningState::Builder::initPipelineInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptPipelineInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::PipelineInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::PipelineInfo> PlanningState::Builder::disownPipelineInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::PipelineInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasEfficiencyLaneVhgInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasEfficiencyLaneVhgInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Reader PlanningState::Reader::getEfficiencyLaneVhgInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Builder PlanningState::Builder::getEfficiencyLaneVhgInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Pipeline PlanningState::Pipeline::getEfficiencyLaneVhgInfo() {
  return  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setEfficiencyLaneVhgInfo( ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::EfficiencyLaneVhgInfo::Builder PlanningState::Builder::initEfficiencyLaneVhgInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptEfficiencyLaneVhgInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::EfficiencyLaneVhgInfo> PlanningState::Builder::disownEfficiencyLaneVhgInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::EfficiencyLaneVhgInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasSpeedLimitInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasSpeedLimitInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::SpeedLimitInfo::Reader PlanningState::Reader::getSpeedLimitInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::SpeedLimitInfo::Builder PlanningState::Builder::getSpeedLimitInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::SpeedLimitInfo::Pipeline PlanningState::Pipeline::getSpeedLimitInfo() {
  return  ::senseAD::msg::planning::SpeedLimitInfo::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setSpeedLimitInfo( ::senseAD::msg::planning::SpeedLimitInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::SpeedLimitInfo::Builder PlanningState::Builder::initSpeedLimitInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptSpeedLimitInfo(
    ::capnp::Orphan< ::senseAD::msg::planning::SpeedLimitInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::SpeedLimitInfo> PlanningState::Builder::disownSpeedLimitInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::SpeedLimitInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasObjElactoer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasObjElactoer() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::ObjElactoer::Reader PlanningState::Reader::getObjElactoer() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::ObjElactoer::Builder PlanningState::Builder::getObjElactoer() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::ObjElactoer::Pipeline PlanningState::Pipeline::getObjElactoer() {
  return  ::senseAD::msg::planning::ObjElactoer::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setObjElactoer( ::senseAD::msg::planning::ObjElactoer::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::ObjElactoer::Builder PlanningState::Builder::initObjElactoer() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptObjElactoer(
    ::capnp::Orphan< ::senseAD::msg::planning::ObjElactoer>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::ObjElactoer> PlanningState::Builder::disownObjElactoer() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::ObjElactoer>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasTrajPointArraySR() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasTrajPointArraySR() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader PlanningState::Reader::getTrajPointArraySR() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder PlanningState::Builder::getTrajPointArraySR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::setTrajPointArraySR( ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder PlanningState::Builder::initTrajPointArraySR(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void PlanningState::Builder::adoptTrajPointArraySR(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> PlanningState::Builder::disownTrajPointArraySR() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum PlanningState::Reader::getNearDestinationReminer() const {
  return _reader.getDataField< ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum PlanningState::Builder::getNearDestinationReminer() {
  return _builder.getDataField< ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setNearDestinationReminer( ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::PlanningState::NearDestinationReminderEnum>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningState::Reader::hasDrivingStyleLearningRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasDrivingStyleLearningRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Reader PlanningState::Reader::getDrivingStyleLearningRes() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Builder PlanningState::Builder::getDrivingStyleLearningRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Pipeline PlanningState::Pipeline::getDrivingStyleLearningRes() {
  return  ::senseAD::msg::planning::DrivingStyleLearningResponse::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setDrivingStyleLearningRes( ::senseAD::msg::planning::DrivingStyleLearningResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::Builder PlanningState::Builder::initDrivingStyleLearningRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptDrivingStyleLearningRes(
    ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningResponse>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningResponse> PlanningState::Builder::disownDrivingStyleLearningRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasDrivingStyleManageRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasDrivingStyleManageRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Reader PlanningState::Reader::getDrivingStyleManageRes() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Builder PlanningState::Builder::getDrivingStyleManageRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Pipeline PlanningState::Pipeline::getDrivingStyleManageRes() {
  return  ::senseAD::msg::planning::DrivingStyleManageResponse::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setDrivingStyleManageRes( ::senseAD::msg::planning::DrivingStyleManageResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::DrivingStyleManageResponse::Builder PlanningState::Builder::initDrivingStyleManageRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptDrivingStyleManageRes(
    ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageResponse>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageResponse> PlanningState::Builder::disownDrivingStyleManageRes() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool PlanningState::Reader::hasCutInPrevention() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningState::Builder::hasCutInPrevention() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::CutInPrevention::Reader PlanningState::Reader::getCutInPrevention() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::CutInPrevention::Builder PlanningState::Builder::getCutInPrevention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::CutInPrevention::Pipeline PlanningState::Pipeline::getCutInPrevention() {
  return  ::senseAD::msg::planning::CutInPrevention::Pipeline(_typeless.getPointerField(17));
}
#endif  // !CAPNP_LITE
inline void PlanningState::Builder::setCutInPrevention( ::senseAD::msg::planning::CutInPrevention::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::CutInPrevention::Builder PlanningState::Builder::initCutInPrevention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void PlanningState::Builder::adoptCutInPrevention(
    ::capnp::Orphan< ::senseAD::msg::planning::CutInPrevention>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::CutInPrevention> PlanningState::Builder::disownCutInPrevention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::CutInPrevention>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline  ::uint8_t CutInPrevention::Reader::getReductTimeGap() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CutInPrevention::Builder::getReductTimeGap() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CutInPrevention::Builder::setReductTimeGap( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CutInPrevention::Reader::getStopBlockage() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CutInPrevention::Builder::getStopBlockage() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CutInPrevention::Builder::setStopBlockage( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningVisData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningVisData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningVisData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningVisData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningVisData::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningVisData::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningVisData::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningVisData::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningVisData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlanningVisData::Reader::hasVisualData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningVisData::Builder::hasVisualData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PlanningVisData::Reader::getVisualData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PlanningVisData::Builder::getVisualData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningVisData::Builder::setVisualData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PlanningVisData::Builder::initVisualData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlanningVisData::Builder::adoptVisualData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PlanningVisData::Builder::disownVisualData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningStateManual::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStateManual::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningStateManual::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningStateManual::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningStateManual::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningStateManual::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningStateManual::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningStateManual::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningStateManual::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlanningStateManual::Reader::getAccelPdlOvrd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningStateManual::Builder::getAccelPdlOvrd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningStateManual::Builder::setAccelPdlOvrd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStateManual::Reader::getBrkPdlPrsd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningStateManual::Builder::getBrkPdlPrsd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningStateManual::Builder::setBrkPdlPrsd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStateManual::Reader::getStrWhlOvrd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PlanningStateManual::Builder::getStrWhlOvrd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningStateManual::Builder::setStrWhlOvrd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool NOPStatus::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NOPStatus::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader NOPStatus::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder NOPStatus::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline NOPStatus::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NOPStatus::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder NOPStatus::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NOPStatus::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> NOPStatus::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::NOPStatus::NOPStatusEnum NOPStatus::Reader::getNopStatus() const {
  return _reader.getDataField< ::senseAD::msg::planning::NOPStatus::NOPStatusEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::NOPStatus::NOPStatusEnum NOPStatus::Builder::getNopStatus() {
  return _builder.getDataField< ::senseAD::msg::planning::NOPStatus::NOPStatusEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NOPStatus::Builder::setNopStatus( ::senseAD::msg::planning::NOPStatus::NOPStatusEnum value) {
  _builder.setDataField< ::senseAD::msg::planning::NOPStatus::NOPStatusEnum>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Vehicleprocessing::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Vehicleprocessing::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Vehicleprocessing::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Vehicleprocessing::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Vehicleprocessing::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Vehicleprocessing::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Vehicleprocessing::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Vehicleprocessing::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Vehicleprocessing::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t Vehicleprocessing::Reader::getTimeStamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Vehicleprocessing::Builder::getTimeStamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setTimeStamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getVehicleSpd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getVehicleSpd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setVehicleSpd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getLongitudinalAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getLongitudinalAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLongitudinalAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getYawrate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getYawrate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setYawrate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getFrontWheelAng() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getFrontWheelAng() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setFrontWheelAng(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal Vehicleprocessing::Reader::getTurningLightSignal() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal Vehicleprocessing::Builder::getTurningLightSignal() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setTurningLightSignal( ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::TurningLightSignal>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool Vehicleprocessing::Reader::getLongiEngaged() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}

inline bool Vehicleprocessing::Builder::getLongiEngaged() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLongiEngaged(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<240>() * ::capnp::ELEMENTS, value);
}

inline bool Vehicleprocessing::Reader::getLateralEngaged() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<241>() * ::capnp::ELEMENTS);
}

inline bool Vehicleprocessing::Builder::getLateralEngaged() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<241>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLateralEngaged(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<241>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getSetSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getSetSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setSetSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap Vehicleprocessing::Reader::getSetTimeGap() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap Vehicleprocessing::Builder::getSetTimeGap() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setSetTimeGap( ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::SetTimeGap>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdFL() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdFL() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdFL(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdFR() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdFR() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdFR(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdRL() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdRL() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdRL(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdRR() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdRR() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdRR(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdLD() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdLD() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdLD(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdRD() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdRD() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdRD(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdLND() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdLND() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdLND(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getWheelSpdRND() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getWheelSpdRND() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelSpdRND(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Reader::getWheelRotDirLND() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Builder::getWheelRotDirLND() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelRotDirLND( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Reader::getWheelRotDirRND() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Builder::getWheelRotDirRND() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelRotDirRND( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Reader::getWheelRotDirLD() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Builder::getWheelRotDirLD() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelRotDirLD( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Reader::getWheelRotDirRD() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir Vehicleprocessing::Builder::getWheelRotDirRD() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setWheelRotDirRD( ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::WheelRotDir>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getSteerWheelAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getSteerWheelAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setSteerWheelAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getSteerWheelAngleRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getSteerWheelAngleRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setSteerWheelAngleRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Vehicleprocessing::Reader::getYawRateTimestamp() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Vehicleprocessing::Builder::getYawRateTimestamp() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setYawRateTimestamp( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool Vehicleprocessing::Reader::getAbsActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<242>() * ::capnp::ELEMENTS);
}

inline bool Vehicleprocessing::Builder::getAbsActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<242>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setAbsActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<242>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear Vehicleprocessing::Reader::getGearPos() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear Vehicleprocessing::Builder::getGearPos() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setGearPos( ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::TransEstdGear>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getAccIcon() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getAccIcon() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setAccIcon( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getLfpIcon() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getLfpIcon() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLfpIcon( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getNopIcon() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getNopIcon() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setNopIcon( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS, value);
}

inline float Vehicleprocessing::Reader::getAebDecelReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float Vehicleprocessing::Builder::getAebDecelReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setAebDecelReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getAutoBrkSysAtvMask() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getAutoBrkSysAtvMask() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setAutoBrkSysAtvMask( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getLgSfBrkMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getLgSfBrkMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setLgSfBrkMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert Vehicleprocessing::Reader::getEvphandsoffalert() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert Vehicleprocessing::Builder::getEvphandsoffalert() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setEvphandsoffalert( ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::EVPHandsOffAlert>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq Vehicleprocessing::Reader::getSpdLimWarnReq() const {
  return _reader.getDataField< ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq Vehicleprocessing::Builder::getSpdLimWarnReq() {
  return _builder.getDataField< ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setSpdLimWarnReq( ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq value) {
  _builder.setDataField< ::senseAD::msg::planning::Vehicleprocessing::SpdLimWarnReq>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Vehicleprocessing::Reader::getAccMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Vehicleprocessing::Builder::getAccMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS);
}
inline void Vehicleprocessing::Builder::setAccMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS, value);
}

inline bool MCUStateMachineInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MCUStateMachineInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader MCUStateMachineInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder MCUStateMachineInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline MCUStateMachineInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MCUStateMachineInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder MCUStateMachineInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MCUStateMachineInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> MCUStateMachineInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine MCUStateMachineInfo::Reader::getMcuStateMachene() const {
  return _reader.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine MCUStateMachineInfo::Builder::getMcuStateMachene() {
  return _builder.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuStateMachene( ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine value) {
  _builder.setDataField< ::senseAD::msg::planning::MCUStateMachineInfo::StateMachine>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::Override MCUStateMachineInfo::Reader::getMcuDrvOverride() const {
  return _reader.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::Override>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::Override MCUStateMachineInfo::Builder::getMcuDrvOverride() {
  return _builder.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::Override>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuDrvOverride( ::senseAD::msg::planning::MCUStateMachineInfo::Override value) {
  _builder.setDataField< ::senseAD::msg::planning::MCUStateMachineInfo::Override>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch MCUStateMachineInfo::Reader::getMcuPilotSwitch() const {
  return _reader.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch MCUStateMachineInfo::Builder::getMcuPilotSwitch() {
  return _builder.getDataField< ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuPilotSwitch( ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch value) {
  _builder.setDataField< ::senseAD::msg::planning::MCUStateMachineInfo::PilotSwitch>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool MCUStateMachineInfo::Reader::getMcuAccActvCdt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool MCUStateMachineInfo::Builder::getMcuAccActvCdt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuAccActvCdt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline bool MCUStateMachineInfo::Reader::getMcuLfpActvCdt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline bool MCUStateMachineInfo::Builder::getMcuLfpActvCdt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuLfpActvCdt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline bool MCUStateMachineInfo::Reader::getMcuNopActvCdt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline bool MCUStateMachineInfo::Builder::getMcuNopActvCdt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void MCUStateMachineInfo::Builder::setMcuNopActvCdt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand DrivingStyleLearningRequest::Reader::getCommand() const {
  return _reader.getDataField< ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand DrivingStyleLearningRequest::Builder::getCommand() {
  return _builder.getDataField< ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingStyleLearningRequest::Builder::setCommand( ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand value) {
  _builder.setDataField< ::senseAD::msg::planning::DrivingStyleLearningRequest::DSLearningCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingStyleLearningRequest::Reader::hasDrivingStyleName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingStyleLearningRequest::Builder::hasDrivingStyleName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DrivingStyleLearningRequest::Reader::getDrivingStyleName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DrivingStyleLearningRequest::Builder::getDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingStyleLearningRequest::Builder::setDrivingStyleName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DrivingStyleLearningRequest::Builder::initDrivingStyleName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DrivingStyleLearningRequest::Builder::adoptDrivingStyleName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DrivingStyleLearningRequest::Builder::disownDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus DrivingStyleLearningResponse::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus DrivingStyleLearningResponse::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingStyleLearningResponse::Builder::setStatus( ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus value) {
  _builder.setDataField< ::senseAD::msg::planning::DrivingStyleLearningResponse::DSLearningStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingStyleLearningResponse::Reader::hasDrivingStyleName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingStyleLearningResponse::Builder::hasDrivingStyleName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DrivingStyleLearningResponse::Reader::getDrivingStyleName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DrivingStyleLearningResponse::Builder::getDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingStyleLearningResponse::Builder::setDrivingStyleName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DrivingStyleLearningResponse::Builder::initDrivingStyleName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DrivingStyleLearningResponse::Builder::adoptDrivingStyleName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DrivingStyleLearningResponse::Builder::disownDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand DrivingStyleManageRequest::Reader::getCommand() const {
  return _reader.getDataField< ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand DrivingStyleManageRequest::Builder::getCommand() {
  return _builder.getDataField< ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingStyleManageRequest::Builder::setCommand( ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand value) {
  _builder.setDataField< ::senseAD::msg::planning::DrivingStyleManageRequest::DSManageCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingStyleManageRequest::Reader::hasDrivingStyleName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingStyleManageRequest::Builder::hasDrivingStyleName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DrivingStyleManageRequest::Reader::getDrivingStyleName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DrivingStyleManageRequest::Builder::getDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingStyleManageRequest::Builder::setDrivingStyleName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DrivingStyleManageRequest::Builder::initDrivingStyleName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DrivingStyleManageRequest::Builder::adoptDrivingStyleName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DrivingStyleManageRequest::Builder::disownDrivingStyleName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus DrivingStyleManageResponse::Reader::getStatus() const {
  return _reader.getDataField< ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus DrivingStyleManageResponse::Builder::getStatus() {
  return _builder.getDataField< ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DrivingStyleManageResponse::Builder::setStatus( ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus value) {
  _builder.setDataField< ::senseAD::msg::planning::DrivingStyleManageResponse::DSManageStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DrivingStyleManageResponse::Reader::hasDrivingStyleNames() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DrivingStyleManageResponse::Builder::hasDrivingStyleNames() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader DrivingStyleManageResponse::Reader::getDrivingStyleNames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder DrivingStyleManageResponse::Builder::getDrivingStyleNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DrivingStyleManageResponse::Builder::setDrivingStyleNames( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DrivingStyleManageResponse::Builder::setDrivingStyleNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder DrivingStyleManageResponse::Builder::initDrivingStyleNames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DrivingStyleManageResponse::Builder::adoptDrivingStyleNames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> DrivingStyleManageResponse::Builder::disownDrivingStyleNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SRControl::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SRControl::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader SRControl::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder SRControl::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline SRControl::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SRControl::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder SRControl::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SRControl::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> SRControl::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SRControl::Reader::hasDrivingStyleLearningReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SRControl::Builder::hasDrivingStyleLearningReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Reader SRControl::Reader::getDrivingStyleLearningReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Builder SRControl::Builder::getDrivingStyleLearningReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Pipeline SRControl::Pipeline::getDrivingStyleLearningReq() {
  return  ::senseAD::msg::planning::DrivingStyleLearningRequest::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SRControl::Builder::setDrivingStyleLearningReq( ::senseAD::msg::planning::DrivingStyleLearningRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::DrivingStyleLearningRequest::Builder SRControl::Builder::initDrivingStyleLearningReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SRControl::Builder::adoptDrivingStyleLearningReq(
    ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningRequest>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleLearningRequest> SRControl::Builder::disownDrivingStyleLearningReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleLearningRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SRControl::Reader::hasDrivingStyleManageReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SRControl::Builder::hasDrivingStyleManageReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Reader SRControl::Reader::getDrivingStyleManageReq() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Builder SRControl::Builder::getDrivingStyleManageReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Pipeline SRControl::Pipeline::getDrivingStyleManageReq() {
  return  ::senseAD::msg::planning::DrivingStyleManageRequest::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SRControl::Builder::setDrivingStyleManageReq( ::senseAD::msg::planning::DrivingStyleManageRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::planning::DrivingStyleManageRequest::Builder SRControl::Builder::initDrivingStyleManageReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SRControl::Builder::adoptDrivingStyleManageReq(
    ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageRequest>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::planning::DrivingStyleManageRequest> SRControl::Builder::disownDrivingStyleManageReq() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::planning::DrivingStyleManageRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::planning::SRControl::MultiModalCommand SRControl::Reader::getMultiModal() const {
  return _reader.getDataField< ::senseAD::msg::planning::SRControl::MultiModalCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::planning::SRControl::MultiModalCommand SRControl::Builder::getMultiModal() {
  return _builder.getDataField< ::senseAD::msg::planning::SRControl::MultiModalCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SRControl::Builder::setMultiModal( ::senseAD::msg::planning::SRControl::MultiModalCommand value) {
  _builder.setDataField< ::senseAD::msg::planning::SRControl::MultiModalCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

