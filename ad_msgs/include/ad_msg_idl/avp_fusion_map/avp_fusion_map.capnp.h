// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_fusion_map.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8f7feb5035d8cae4);
CAPNP_DECLARE_SCHEMA(d277b8b84e13de1f);
CAPNP_DECLARE_SCHEMA(85e4b2b20bd77b2a);
CAPNP_DECLARE_SCHEMA(f1548ed695f54901);
CAPNP_DECLARE_SCHEMA(fa7a07887f813597);
CAPNP_DECLARE_SCHEMA(855a644619389ed4);
CAPNP_DECLARE_SCHEMA(d17da1475eb69b48);
CAPNP_DECLARE_SCHEMA(eec08ad5f4935511);
CAPNP_DECLARE_SCHEMA(c6c86b9927c61f84);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_fusion_map {

struct Point2F {
  Point2F() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f7feb5035d8cae4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Point3F {
  Point3F() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d277b8b84e13de1f, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Pose2F {
  Pose2F() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85e4b2b20bd77b2a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BoundaryPoint {
  BoundaryPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1548ed695f54901, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LinkNode {
  LinkNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa7a07887f813597, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadBoundary {
  RoadBoundary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(855a644619389ed4, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlotBoundary {
  SlotBoundary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d17da1475eb69b48, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FusionSlotOut {
  FusionSlotOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eec08ad5f4935511, 5, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FusionSlotOutArray {
  FusionSlotOutArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6c86b9927c61f84, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Point2F::Reader {
public:
  typedef Point2F Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point2F::Builder {
public:
  typedef Point2F Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point2F::Pipeline {
public:
  typedef Point2F Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point3F::Reader {
public:
  typedef Point3F Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3F::Builder {
public:
  typedef Point3F Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3F::Pipeline {
public:
  typedef Point3F Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Pose2F::Reader {
public:
  typedef Pose2F Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::senseAD::msg::avp_fusion_map::Point2F::Reader getPosition() const;

  inline float getYaw() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pose2F::Builder {
public:
  typedef Pose2F Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::senseAD::msg::avp_fusion_map::Point2F::Builder getPosition();
  inline void setPosition( ::senseAD::msg::avp_fusion_map::Point2F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Point2F::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point2F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point2F> disownPosition();

  inline float getYaw();
  inline void setYaw(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pose2F::Pipeline {
public:
  typedef Pose2F Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_fusion_map::Point2F::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BoundaryPoint::Reader {
public:
  typedef BoundaryPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Reader getPosition() const;

  inline  ::int32_t getAge() const;

  inline  ::int32_t getConfidence() const;

  inline  ::uint8_t getSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BoundaryPoint::Builder {
public:
  typedef BoundaryPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder getPosition();
  inline void setPosition( ::senseAD::msg::avp_fusion_map::Point3F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F> disownPosition();

  inline  ::int32_t getAge();
  inline void setAge( ::int32_t value);

  inline  ::int32_t getConfidence();
  inline void setConfidence( ::int32_t value);

  inline  ::uint8_t getSource();
  inline void setSource( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BoundaryPoint::Pipeline {
public:
  typedef BoundaryPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LinkNode::Reader {
public:
  typedef LinkNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNode() const;
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Reader getNode() const;

  inline  ::int32_t getType() const;

  inline  ::int32_t getConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LinkNode::Builder {
public:
  typedef LinkNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNode();
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder getNode();
  inline void setNode( ::senseAD::msg::avp_fusion_map::Point3F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder initNode();
  inline void adoptNode(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F> disownNode();

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getConfidence();
  inline void setConfidence( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LinkNode::Pipeline {
public:
  typedef LinkNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline getNode();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadBoundary::Reader {
public:
  typedef RoadBoundary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasLeftBoundary() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader getLeftBoundary() const;

  inline bool hasRightBoundary() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader getRightBoundary() const;

  inline  ::uint64_t getLeftBoundaryPointNum() const;

  inline  ::uint64_t getRightBoundaryPointNum() const;

  inline bool hasNodeList() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Reader getNodeList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadBoundary::Builder {
public:
  typedef RoadBoundary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasLeftBoundary();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder getLeftBoundary();
  inline void setLeftBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder initLeftBoundary(unsigned int size);
  inline void adoptLeftBoundary(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> disownLeftBoundary();

  inline bool hasRightBoundary();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder getRightBoundary();
  inline void setRightBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder initRightBoundary(unsigned int size);
  inline void adoptRightBoundary(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> disownRightBoundary();

  inline  ::uint64_t getLeftBoundaryPointNum();
  inline void setLeftBoundaryPointNum( ::uint64_t value);

  inline  ::uint64_t getRightBoundaryPointNum();
  inline void setRightBoundaryPointNum( ::uint64_t value);

  inline bool hasNodeList();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Builder getNodeList();
  inline void setNodeList( ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Builder initNodeList(unsigned int size);
  inline void adoptNodeList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>> disownNodeList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadBoundary::Pipeline {
public:
  typedef RoadBoundary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlotBoundary::Reader {
public:
  typedef SlotBoundary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp() const;

  inline bool hasLeftBoundary() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader getLeftBoundary() const;

  inline bool hasRightBoundary() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader getRightBoundary() const;

  inline  ::uint64_t getLeftBoundaryPointNum() const;

  inline  ::uint64_t getRightBoundaryPointNum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlotBoundary::Builder {
public:
  typedef SlotBoundary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline bool hasLeftBoundary();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder getLeftBoundary();
  inline void setLeftBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder initLeftBoundary(unsigned int size);
  inline void adoptLeftBoundary(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> disownLeftBoundary();

  inline bool hasRightBoundary();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder getRightBoundary();
  inline void setRightBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder initRightBoundary(unsigned int size);
  inline void adoptRightBoundary(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> disownRightBoundary();

  inline  ::uint64_t getLeftBoundaryPointNum();
  inline void setLeftBoundaryPointNum( ::uint64_t value);

  inline  ::uint64_t getRightBoundaryPointNum();
  inline void setRightBoundaryPointNum( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlotBoundary::Pipeline {
public:
  typedef SlotBoundary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionSlotOut::Reader {
public:
  typedef FusionSlotOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCorners() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader getCorners() const;

  inline bool hasObjects() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader getObjects() const;

  inline bool hasPointOblique() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader getPointOblique() const;

  inline bool hasRefPoint() const;
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader getRefPoint() const;

  inline bool hasStartPose() const;
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader getStartPose() const;

  inline bool hasEndPose() const;
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader getEndPose() const;

  inline float getSpaceDepth() const;

  inline float getSpaceLength() const;

  inline float getLimiterDepth() const;

  inline bool hasRoadBound() const;
  inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Reader getRoadBound() const;

  inline bool hasSlotBound() const;
  inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Reader getSlotBound() const;

  inline  ::uint32_t getId() const;

  inline  ::uint32_t getApaId() const;

  inline  ::uint8_t getType() const;

  inline  ::uint8_t getState() const;

  inline  ::uint8_t getInvalidReason() const;

  inline  ::uint8_t getSource() const;

  inline  ::uint8_t getConfidence() const;

  inline  ::uint8_t getParkingDirectionAvailable() const;

  inline  ::uint8_t getParkingDirectionRecommend() const;

  inline  ::uint8_t getNeedReplanFlag() const;

  inline  ::int16_t getRegionID() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionSlotOut::Builder {
public:
  typedef FusionSlotOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCorners();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder getCorners();
  inline void setCorners( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder initCorners(unsigned int size);
  inline void adoptCorners(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> disownCorners();

  inline bool hasObjects();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder getObjects();
  inline void setObjects( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder initObjects(unsigned int size);
  inline void adoptObjects(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> disownObjects();

  inline bool hasPointOblique();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder getPointOblique();
  inline void setPointOblique( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder initPointOblique(unsigned int size);
  inline void adoptPointOblique(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> disownPointOblique();

  inline bool hasRefPoint();
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder getRefPoint();
  inline void setRefPoint( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder initRefPoint();
  inline void adoptRefPoint(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> disownRefPoint();

  inline bool hasStartPose();
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder getStartPose();
  inline void setStartPose( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder initStartPose();
  inline void adoptStartPose(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> disownStartPose();

  inline bool hasEndPose();
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder getEndPose();
  inline void setEndPose( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder initEndPose();
  inline void adoptEndPose(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> disownEndPose();

  inline float getSpaceDepth();
  inline void setSpaceDepth(float value);

  inline float getSpaceLength();
  inline void setSpaceLength(float value);

  inline float getLimiterDepth();
  inline void setLimiterDepth(float value);

  inline bool hasRoadBound();
  inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Builder getRoadBound();
  inline void setRoadBound( ::senseAD::msg::avp_fusion_map::RoadBoundary::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Builder initRoadBound();
  inline void adoptRoadBound(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::RoadBoundary>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::RoadBoundary> disownRoadBound();

  inline bool hasSlotBound();
  inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Builder getSlotBound();
  inline void setSlotBound( ::senseAD::msg::avp_fusion_map::SlotBoundary::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Builder initSlotBound();
  inline void adoptSlotBound(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::SlotBoundary>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::SlotBoundary> disownSlotBound();

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::uint32_t getApaId();
  inline void setApaId( ::uint32_t value);

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

  inline  ::uint8_t getState();
  inline void setState( ::uint8_t value);

  inline  ::uint8_t getInvalidReason();
  inline void setInvalidReason( ::uint8_t value);

  inline  ::uint8_t getSource();
  inline void setSource( ::uint8_t value);

  inline  ::uint8_t getConfidence();
  inline void setConfidence( ::uint8_t value);

  inline  ::uint8_t getParkingDirectionAvailable();
  inline void setParkingDirectionAvailable( ::uint8_t value);

  inline  ::uint8_t getParkingDirectionRecommend();
  inline void setParkingDirectionRecommend( ::uint8_t value);

  inline  ::uint8_t getNeedReplanFlag();
  inline void setNeedReplanFlag( ::uint8_t value);

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionSlotOut::Pipeline {
public:
  typedef FusionSlotOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline getRefPoint();
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline getStartPose();
  inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline getEndPose();
  inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Pipeline getRoadBound();
  inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Pipeline getSlotBound();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionSlotOutArray::Reader {
public:
  typedef FusionSlotOutArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasSlots() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader getSlots() const;

  inline bool hasTargetSlot() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader getTargetSlot() const;

  inline bool hasSlamSlots() const;
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader getSlamSlots() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionSlotOutArray::Builder {
public:
  typedef FusionSlotOutArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasSlots();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder getSlots();
  inline void setSlots( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder initSlots(unsigned int size);
  inline void adoptSlots(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> disownSlots();

  inline bool hasTargetSlot();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder getTargetSlot();
  inline void setTargetSlot( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder initTargetSlot(unsigned int size);
  inline void adoptTargetSlot(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> disownTargetSlot();

  inline bool hasSlamSlots();
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder getSlamSlots();
  inline void setSlamSlots( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder initSlamSlots(unsigned int size);
  inline void adoptSlamSlots(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> disownSlamSlots();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionSlotOutArray::Pipeline {
public:
  typedef FusionSlotOutArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float Point2F::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Point2F::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point2F::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Point2F::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Point2F::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point2F::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Point3F::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Point3F::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point3F::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Point3F::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Point3F::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point3F::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Point3F::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Point3F::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Point3F::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Pose2F::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Pose2F::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Point2F::Reader Pose2F::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Point2F::Builder Pose2F::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Point2F::Pipeline Pose2F::Pipeline::getPosition() {
  return  ::senseAD::msg::avp_fusion_map::Point2F::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Pose2F::Builder::setPosition( ::senseAD::msg::avp_fusion_map::Point2F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Point2F::Builder Pose2F::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Pose2F::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point2F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point2F> Pose2F::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point2F>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Pose2F::Reader::getYaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Pose2F::Builder::getYaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Pose2F::Builder::setYaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BoundaryPoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BoundaryPoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Reader BoundaryPoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder BoundaryPoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline BoundaryPoint::Pipeline::getPosition() {
  return  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BoundaryPoint::Builder::setPosition( ::senseAD::msg::avp_fusion_map::Point3F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder BoundaryPoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BoundaryPoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F> BoundaryPoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t BoundaryPoint::Reader::getAge() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BoundaryPoint::Builder::getAge() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BoundaryPoint::Builder::setAge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BoundaryPoint::Reader::getConfidence() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BoundaryPoint::Builder::getConfidence() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BoundaryPoint::Builder::setConfidence( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BoundaryPoint::Reader::getSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BoundaryPoint::Builder::getSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void BoundaryPoint::Builder::setSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool LinkNode::Reader::hasNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LinkNode::Builder::hasNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Reader LinkNode::Reader::getNode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder LinkNode::Builder::getNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline LinkNode::Pipeline::getNode() {
  return  ::senseAD::msg::avp_fusion_map::Point3F::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LinkNode::Builder::setNode( ::senseAD::msg::avp_fusion_map::Point3F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Point3F::Builder LinkNode::Builder::initNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LinkNode::Builder::adoptNode(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Point3F> LinkNode::Builder::disownNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Point3F>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LinkNode::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LinkNode::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LinkNode::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LinkNode::Reader::getConfidence() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LinkNode::Builder::getConfidence() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LinkNode::Builder::setConfidence( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RoadBoundary::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadBoundary::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadBoundary::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoadBoundary::Reader::hasLeftBoundary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadBoundary::Builder::hasLeftBoundary() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader RoadBoundary::Reader::getLeftBoundary() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::getLeftBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadBoundary::Builder::setLeftBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::initLeftBoundary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadBoundary::Builder::adoptLeftBoundary(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> RoadBoundary::Builder::disownLeftBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadBoundary::Reader::hasRightBoundary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadBoundary::Builder::hasRightBoundary() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader RoadBoundary::Reader::getRightBoundary() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::getRightBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadBoundary::Builder::setRightBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::initRightBoundary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadBoundary::Builder::adoptRightBoundary(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> RoadBoundary::Builder::disownRightBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadBoundary::Reader::getLeftBoundaryPointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadBoundary::Builder::getLeftBoundaryPointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoadBoundary::Builder::setLeftBoundaryPointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RoadBoundary::Reader::getRightBoundaryPointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadBoundary::Builder::getRightBoundaryPointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RoadBoundary::Builder::setRightBoundaryPointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RoadBoundary::Reader::hasNodeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadBoundary::Builder::hasNodeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Reader RoadBoundary::Reader::getNodeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::getNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadBoundary::Builder::setNodeList( ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>::Builder RoadBoundary::Builder::initNodeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RoadBoundary::Builder::adoptNodeList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>> RoadBoundary::Builder::disownNodeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::LinkNode,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t SlotBoundary::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlotBoundary::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlotBoundary::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SlotBoundary::Reader::hasLeftBoundary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlotBoundary::Builder::hasLeftBoundary() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader SlotBoundary::Reader::getLeftBoundary() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder SlotBoundary::Builder::getLeftBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlotBoundary::Builder::setLeftBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder SlotBoundary::Builder::initLeftBoundary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SlotBoundary::Builder::adoptLeftBoundary(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> SlotBoundary::Builder::disownLeftBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SlotBoundary::Reader::hasRightBoundary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SlotBoundary::Builder::hasRightBoundary() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader SlotBoundary::Reader::getRightBoundary() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder SlotBoundary::Builder::getRightBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SlotBoundary::Builder::setRightBoundary( ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>::Builder SlotBoundary::Builder::initRightBoundary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SlotBoundary::Builder::adoptRightBoundary(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>> SlotBoundary::Builder::disownRightBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::BoundaryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t SlotBoundary::Reader::getLeftBoundaryPointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlotBoundary::Builder::getLeftBoundaryPointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlotBoundary::Builder::setLeftBoundaryPointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SlotBoundary::Reader::getRightBoundaryPointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlotBoundary::Builder::getRightBoundaryPointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlotBoundary::Builder::setRightBoundaryPointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FusionSlotOut::Reader::hasCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader FusionSlotOut::Reader::getCorners() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::getCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::setCorners( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::initCorners(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOut::Builder::adoptCorners(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> FusionSlotOut::Builder::disownCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasObjects() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasObjects() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader FusionSlotOut::Reader::getObjects() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::getObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::setObjects( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::initObjects(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOut::Builder::adoptObjects(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> FusionSlotOut::Builder::disownObjects() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasPointOblique() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasPointOblique() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader FusionSlotOut::Reader::getPointOblique() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::getPointOblique() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::setPointOblique( ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>::Builder FusionSlotOut::Builder::initPointOblique(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOut::Builder::adoptPointOblique(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>> FusionSlotOut::Builder::disownPointOblique() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::Point2F,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasRefPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasRefPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader FusionSlotOut::Reader::getRefPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::getRefPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline FusionSlotOut::Pipeline::getRefPoint() {
  return  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOut::Builder::setRefPoint( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::initRefPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::adoptRefPoint(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> FusionSlotOut::Builder::disownRefPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasStartPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasStartPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader FusionSlotOut::Reader::getStartPose() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::getStartPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline FusionSlotOut::Pipeline::getStartPose() {
  return  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOut::Builder::setStartPose( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::initStartPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::adoptStartPose(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> FusionSlotOut::Builder::disownStartPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasEndPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasEndPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Reader FusionSlotOut::Reader::getEndPose() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::getEndPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline FusionSlotOut::Pipeline::getEndPose() {
  return  ::senseAD::msg::avp_fusion_map::Pose2F::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOut::Builder::setEndPose( ::senseAD::msg::avp_fusion_map::Pose2F::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::Pose2F::Builder FusionSlotOut::Builder::initEndPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::adoptEndPose(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::Pose2F> FusionSlotOut::Builder::disownEndPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::Pose2F>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline float FusionSlotOut::Reader::getSpaceDepth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float FusionSlotOut::Builder::getSpaceDepth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setSpaceDepth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float FusionSlotOut::Reader::getSpaceLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float FusionSlotOut::Builder::getSpaceLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setSpaceLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float FusionSlotOut::Reader::getLimiterDepth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float FusionSlotOut::Builder::getLimiterDepth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setLimiterDepth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FusionSlotOut::Reader::hasRoadBound() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasRoadBound() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Reader FusionSlotOut::Reader::getRoadBound() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Builder FusionSlotOut::Builder::getRoadBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Pipeline FusionSlotOut::Pipeline::getRoadBound() {
  return  ::senseAD::msg::avp_fusion_map::RoadBoundary::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOut::Builder::setRoadBound( ::senseAD::msg::avp_fusion_map::RoadBoundary::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::RoadBoundary::Builder FusionSlotOut::Builder::initRoadBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::adoptRoadBound(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::RoadBoundary>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::RoadBoundary> FusionSlotOut::Builder::disownRoadBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::RoadBoundary>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool FusionSlotOut::Reader::hasSlotBound() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOut::Builder::hasSlotBound() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Reader FusionSlotOut::Reader::getSlotBound() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Builder FusionSlotOut::Builder::getSlotBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Pipeline FusionSlotOut::Pipeline::getSlotBound() {
  return  ::senseAD::msg::avp_fusion_map::SlotBoundary::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOut::Builder::setSlotBound( ::senseAD::msg::avp_fusion_map::SlotBoundary::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::SlotBoundary::Builder FusionSlotOut::Builder::initSlotBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void FusionSlotOut::Builder::adoptSlotBound(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::SlotBoundary>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::SlotBoundary> FusionSlotOut::Builder::disownSlotBound() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::SlotBoundary>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint32_t FusionSlotOut::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FusionSlotOut::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FusionSlotOut::Reader::getApaId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t FusionSlotOut::Builder::getApaId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setApaId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getInvalidReason() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getInvalidReason() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setInvalidReason( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getParkingDirectionAvailable() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getParkingDirectionAvailable() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setParkingDirectionAvailable( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getParkingDirectionRecommend() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getParkingDirectionRecommend() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setParkingDirectionRecommend( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FusionSlotOut::Reader::getNeedReplanFlag() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FusionSlotOut::Builder::getNeedReplanFlag() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setNeedReplanFlag( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t FusionSlotOut::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int16_t FusionSlotOut::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float FusionSlotOut::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float FusionSlotOut::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void FusionSlotOut::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool FusionSlotOutArray::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOutArray::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader FusionSlotOutArray::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder FusionSlotOutArray::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline FusionSlotOutArray::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FusionSlotOutArray::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder FusionSlotOutArray::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FusionSlotOutArray::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> FusionSlotOutArray::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FusionSlotOutArray::Reader::hasSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOutArray::Builder::hasSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader FusionSlotOutArray::Reader::getSlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::getSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FusionSlotOutArray::Builder::setSlots( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::initSlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOutArray::Builder::adoptSlots(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> FusionSlotOutArray::Builder::disownSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FusionSlotOutArray::Reader::hasTargetSlot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOutArray::Builder::hasTargetSlot() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader FusionSlotOutArray::Reader::getTargetSlot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::getTargetSlot() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FusionSlotOutArray::Builder::setTargetSlot( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::initTargetSlot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOutArray::Builder::adoptTargetSlot(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> FusionSlotOutArray::Builder::disownTargetSlot() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FusionSlotOutArray::Reader::hasSlamSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FusionSlotOutArray::Builder::hasSlamSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader FusionSlotOutArray::Reader::getSlamSlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::getSlamSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FusionSlotOutArray::Builder::setSlamSlots( ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>::Builder FusionSlotOutArray::Builder::initSlamSlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FusionSlotOutArray::Builder::adoptSlamSlots(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>> FusionSlotOutArray::Builder::disownSlamSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_fusion_map::FusionSlotOut,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

