// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: taskmanager.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bd19a6e69bff1619);
CAPNP_DECLARE_SCHEMA(c0974e8e148df164);
enum class TaskType_c0974e8e148df164: uint16_t {
  START,
  STOP,
};
CAPNP_DECLARE_ENUM(TaskType, c0974e8e148df164);
CAPNP_DECLARE_SCHEMA(e3b1677d758b57c2);
CAPNP_DECLARE_SCHEMA(ed7968c7e73d0b10);
CAPNP_DECLARE_SCHEMA(944aef85ce1d67cd);
CAPNP_DECLARE_SCHEMA(e96dd320bef8dea0);
enum class Type_e96dd320bef8dea0: uint16_t {
  HARDWARE,
  SOFTWARE,
};
CAPNP_DECLARE_ENUM(Type, e96dd320bef8dea0);
CAPNP_DECLARE_SCHEMA(b094926dfe1bde4b);
enum class State_b094926dfe1bde4b: uint16_t {
  CHECKING,
  CHECK_FAILED,
  CHECK_SUCCESS,
};
CAPNP_DECLARE_ENUM(State, b094926dfe1bde4b);
CAPNP_DECLARE_SCHEMA(bd1391b9b4f50142);
CAPNP_DECLARE_SCHEMA(df1fa0586810b240);
enum class EventLevel_df1fa0586810b240: uint16_t {
  NORMAL,
  WARN,
  ERROR,
};
CAPNP_DECLARE_ENUM(EventLevel, df1fa0586810b240);
CAPNP_DECLARE_SCHEMA(b49f00d63358df64);
enum class AlarmType_b49f00d63358df64: uint16_t {
  AUDIO,
  LIGHT,
  IPAD,
};
CAPNP_DECLARE_ENUM(AlarmType, b49f00d63358df64);
CAPNP_DECLARE_SCHEMA(9ae8e650ef1ce26e);
enum class EventType_9ae8e650ef1ce26e: uint16_t {
  SYSTEM,
  LOCATION,
  PLANNING,
  CONTROL,
  SELF_CHECK,
  STATION,
  RECORD,
};
CAPNP_DECLARE_ENUM(EventType, 9ae8e650ef1ce26e);
CAPNP_DECLARE_SCHEMA(dbba8b8eb1084c95);
CAPNP_DECLARE_SCHEMA(e91ce66e5a633a0d);
enum class MissionStatus_e91ce66e5a633a0d: uint16_t {
  UNKNOWN,
  READY,
  WAITING_FOR_START_SIGNAL,
  WAITING_FOR_MISSION,
  STARTING,
  RUNNING,
  STOPPING,
};
CAPNP_DECLARE_ENUM(MissionStatus, e91ce66e5a633a0d);
CAPNP_DECLARE_SCHEMA(f578cca8bbe68513);
enum class StationState_f578cca8bbe68513: uint16_t {
  DRIVING,
  INBOUND,
  BERTH,
  OUTBOUND,
  ARRIVER_FINAL,
  PULLING_FAIL,
};
CAPNP_DECLARE_ENUM(StationState, f578cca8bbe68513);
CAPNP_DECLARE_SCHEMA(f79e7855d1174395);
enum class DataRecordState_f79e7855d1174395: uint16_t {
  STARTING_RECORD,
  RECORDING,
  STOP_RECORDING,
  NOT_RECORDED,
};
CAPNP_DECLARE_ENUM(DataRecordState, f79e7855d1174395);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace taskmanager {

struct TaskCommand {
  TaskCommand() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::TaskType_c0974e8e148df164 TaskType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd19a6e69bff1619, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DoorCommand {
  DoorCommand() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3b1677d758b57c2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MapCoordLLA {
  MapCoordLLA() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed7968c7e73d0b10, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SelfCheck {
  SelfCheck() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_e96dd320bef8dea0 Type;

  typedef ::capnp::schemas::State_b094926dfe1bde4b State;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(944aef85ce1d67cd, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TaskEvent {
  TaskEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EventLevel_df1fa0586810b240 EventLevel;

  typedef ::capnp::schemas::AlarmType_b49f00d63358df64 AlarmType;

  typedef ::capnp::schemas::EventType_9ae8e650ef1ce26e EventType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd1391b9b4f50142, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TaskStatus {
  TaskStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::MissionStatus_e91ce66e5a633a0d MissionStatus;

  typedef ::capnp::schemas::StationState_f578cca8bbe68513 StationState;

  typedef ::capnp::schemas::DataRecordState_f79e7855d1174395 DataRecordState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbba8b8eb1084c95, 2, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TaskCommand::Reader {
public:
  typedef TaskCommand Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::taskmanager::TaskCommand::TaskType getTaskType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TaskCommand::Builder {
public:
  typedef TaskCommand Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::taskmanager::TaskCommand::TaskType getTaskType();
  inline void setTaskType( ::senseAD::msg::taskmanager::TaskCommand::TaskType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TaskCommand::Pipeline {
public:
  typedef TaskCommand Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DoorCommand::Reader {
public:
  typedef DoorCommand Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getDoorOpen() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DoorCommand::Builder {
public:
  typedef DoorCommand Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getDoorOpen();
  inline void setDoorOpen(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DoorCommand::Pipeline {
public:
  typedef DoorCommand Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapCoordLLA::Reader {
public:
  typedef MapCoordLLA Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLongitude() const;

  inline double getLatitude() const;

  inline double getAltitude() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapCoordLLA::Builder {
public:
  typedef MapCoordLLA Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapCoordLLA::Pipeline {
public:
  typedef MapCoordLLA Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SelfCheck::Reader {
public:
  typedef SelfCheck Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::taskmanager::SelfCheck::Type getType() const;

  inline  ::senseAD::msg::taskmanager::SelfCheck::State getState() const;

  inline float getProgress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SelfCheck::Builder {
public:
  typedef SelfCheck Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::taskmanager::SelfCheck::Type getType();
  inline void setType( ::senseAD::msg::taskmanager::SelfCheck::Type value);

  inline  ::senseAD::msg::taskmanager::SelfCheck::State getState();
  inline void setState( ::senseAD::msg::taskmanager::SelfCheck::State value);

  inline float getProgress();
  inline void setProgress(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SelfCheck::Pipeline {
public:
  typedef SelfCheck Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TaskEvent::Reader {
public:
  typedef TaskEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::taskmanager::TaskEvent::EventLevel getEventLevel() const;

  inline  ::senseAD::msg::taskmanager::TaskEvent::AlarmType getAlarmType() const;

  inline  ::senseAD::msg::taskmanager::TaskEvent::EventType getEventType() const;

  inline bool hasDetails() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getDetails() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TaskEvent::Builder {
public:
  typedef TaskEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::taskmanager::TaskEvent::EventLevel getEventLevel();
  inline void setEventLevel( ::senseAD::msg::taskmanager::TaskEvent::EventLevel value);

  inline  ::senseAD::msg::taskmanager::TaskEvent::AlarmType getAlarmType();
  inline void setAlarmType( ::senseAD::msg::taskmanager::TaskEvent::AlarmType value);

  inline  ::senseAD::msg::taskmanager::TaskEvent::EventType getEventType();
  inline void setEventType( ::senseAD::msg::taskmanager::TaskEvent::EventType value);

  inline bool hasDetails();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getDetails();
  inline void setDetails( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setDetails(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initDetails(unsigned int size);
  inline void adoptDetails(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownDetails();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TaskEvent::Pipeline {
public:
  typedef TaskEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TaskStatus::Reader {
public:
  typedef TaskStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::senseAD::msg::taskmanager::TaskStatus::MissionStatus getMissionStatus() const;

  inline bool hasMissionName() const;
  inline  ::capnp::Text::Reader getMissionName() const;

  inline bool hasDepartureLla() const;
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader getDepartureLla() const;

  inline bool hasDestinationLla() const;
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader getDestinationLla() const;

  inline bool hasMidPointsLla() const;
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader getMidPointsLla() const;

  inline bool hasBlacklistPointsLla() const;
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader getBlacklistPointsLla() const;

  inline bool hasNavigationLineLla() const;
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader getNavigationLineLla() const;

  inline bool getOpenTheDoor() const;

  inline float getVehicleSpeed() const;

  inline bool hasVehiclePose() const;
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader getVehiclePose() const;

  inline bool getAutoDrive() const;

  inline bool getVehicleHealth() const;

  inline  ::senseAD::msg::taskmanager::TaskStatus::StationState getStationState() const;

  inline bool hasSelfCheck() const;
  inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Reader getSelfCheck() const;

  inline  ::senseAD::msg::taskmanager::TaskStatus::DataRecordState getDataRecordState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TaskStatus::Builder {
public:
  typedef TaskStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::senseAD::msg::taskmanager::TaskStatus::MissionStatus getMissionStatus();
  inline void setMissionStatus( ::senseAD::msg::taskmanager::TaskStatus::MissionStatus value);

  inline bool hasMissionName();
  inline  ::capnp::Text::Builder getMissionName();
  inline void setMissionName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMissionName(unsigned int size);
  inline void adoptMissionName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMissionName();

  inline bool hasDepartureLla();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder getDepartureLla();
  inline void setDepartureLla( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value);
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder initDepartureLla();
  inline void adoptDepartureLla(::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> disownDepartureLla();

  inline bool hasDestinationLla();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder getDestinationLla();
  inline void setDestinationLla( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value);
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder initDestinationLla();
  inline void adoptDestinationLla(::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> disownDestinationLla();

  inline bool hasMidPointsLla();
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder getMidPointsLla();
  inline void setMidPointsLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder initMidPointsLla(unsigned int size);
  inline void adoptMidPointsLla(::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> disownMidPointsLla();

  inline bool hasBlacklistPointsLla();
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder getBlacklistPointsLla();
  inline void setBlacklistPointsLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder initBlacklistPointsLla(unsigned int size);
  inline void adoptBlacklistPointsLla(::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> disownBlacklistPointsLla();

  inline bool hasNavigationLineLla();
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder getNavigationLineLla();
  inline void setNavigationLineLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder initNavigationLineLla(unsigned int size);
  inline void adoptNavigationLineLla(::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> disownNavigationLineLla();

  inline bool getOpenTheDoor();
  inline void setOpenTheDoor(bool value);

  inline float getVehicleSpeed();
  inline void setVehicleSpeed(float value);

  inline bool hasVehiclePose();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder getVehiclePose();
  inline void setVehiclePose( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value);
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder initVehiclePose();
  inline void adoptVehiclePose(::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> disownVehiclePose();

  inline bool getAutoDrive();
  inline void setAutoDrive(bool value);

  inline bool getVehicleHealth();
  inline void setVehicleHealth(bool value);

  inline  ::senseAD::msg::taskmanager::TaskStatus::StationState getStationState();
  inline void setStationState( ::senseAD::msg::taskmanager::TaskStatus::StationState value);

  inline bool hasSelfCheck();
  inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Builder getSelfCheck();
  inline void setSelfCheck( ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Builder initSelfCheck(unsigned int size);
  inline void adoptSelfCheck(::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>> disownSelfCheck();

  inline  ::senseAD::msg::taskmanager::TaskStatus::DataRecordState getDataRecordState();
  inline void setDataRecordState( ::senseAD::msg::taskmanager::TaskStatus::DataRecordState value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TaskStatus::Pipeline {
public:
  typedef TaskStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline getDepartureLla();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline getDestinationLla();
  inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline getVehiclePose();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TaskCommand::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TaskCommand::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TaskCommand::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskCommand::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TaskCommand::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TaskCommand::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskCommand::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TaskCommand::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TaskCommand::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::taskmanager::TaskCommand::TaskType TaskCommand::Reader::getTaskType() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskCommand::TaskType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskCommand::TaskType TaskCommand::Builder::getTaskType() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskCommand::TaskType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TaskCommand::Builder::setTaskType( ::senseAD::msg::taskmanager::TaskCommand::TaskType value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskCommand::TaskType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DoorCommand::Reader::getDoorOpen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DoorCommand::Builder::getDoorOpen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DoorCommand::Builder::setDoorOpen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double MapCoordLLA::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double MapCoordLLA::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapCoordLLA::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double MapCoordLLA::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double MapCoordLLA::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapCoordLLA::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double MapCoordLLA::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double MapCoordLLA::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MapCoordLLA::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::taskmanager::SelfCheck::Type SelfCheck::Reader::getType() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::SelfCheck::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::SelfCheck::Type SelfCheck::Builder::getType() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::SelfCheck::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SelfCheck::Builder::setType( ::senseAD::msg::taskmanager::SelfCheck::Type value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::SelfCheck::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::taskmanager::SelfCheck::State SelfCheck::Reader::getState() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::SelfCheck::State>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::SelfCheck::State SelfCheck::Builder::getState() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::SelfCheck::State>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SelfCheck::Builder::setState( ::senseAD::msg::taskmanager::SelfCheck::State value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::SelfCheck::State>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float SelfCheck::Reader::getProgress() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float SelfCheck::Builder::getProgress() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SelfCheck::Builder::setProgress(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TaskEvent::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TaskEvent::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TaskEvent::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskEvent::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TaskEvent::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TaskEvent::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskEvent::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TaskEvent::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TaskEvent::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::taskmanager::TaskEvent::EventLevel TaskEvent::Reader::getEventLevel() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskEvent::EventLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskEvent::EventLevel TaskEvent::Builder::getEventLevel() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskEvent::EventLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TaskEvent::Builder::setEventLevel( ::senseAD::msg::taskmanager::TaskEvent::EventLevel value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskEvent::EventLevel>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::taskmanager::TaskEvent::AlarmType TaskEvent::Reader::getAlarmType() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskEvent::AlarmType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskEvent::AlarmType TaskEvent::Builder::getAlarmType() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskEvent::AlarmType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TaskEvent::Builder::setAlarmType( ::senseAD::msg::taskmanager::TaskEvent::AlarmType value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskEvent::AlarmType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::taskmanager::TaskEvent::EventType TaskEvent::Reader::getEventType() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskEvent::EventType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskEvent::EventType TaskEvent::Builder::getEventType() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskEvent::EventType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TaskEvent::Builder::setEventType( ::senseAD::msg::taskmanager::TaskEvent::EventType value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskEvent::EventType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TaskEvent::Reader::hasDetails() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TaskEvent::Builder::hasDetails() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader TaskEvent::Reader::getDetails() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TaskEvent::Builder::getDetails() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TaskEvent::Builder::setDetails( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void TaskEvent::Builder::setDetails(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TaskEvent::Builder::initDetails(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TaskEvent::Builder::adoptDetails(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> TaskEvent::Builder::disownDetails() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TaskStatus::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskStatus::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TaskStatus::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TaskStatus::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TaskStatus::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TaskStatus::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::taskmanager::TaskStatus::MissionStatus TaskStatus::Reader::getMissionStatus() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskStatus::MissionStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskStatus::MissionStatus TaskStatus::Builder::getMissionStatus() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskStatus::MissionStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setMissionStatus( ::senseAD::msg::taskmanager::TaskStatus::MissionStatus value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskStatus::MissionStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TaskStatus::Reader::hasMissionName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasMissionName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TaskStatus::Reader::getMissionName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TaskStatus::Builder::getMissionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::setMissionName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TaskStatus::Builder::initMissionName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TaskStatus::Builder::adoptMissionName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TaskStatus::Builder::disownMissionName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasDepartureLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasDepartureLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader TaskStatus::Reader::getDepartureLla() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::getDepartureLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline TaskStatus::Pipeline::getDepartureLla() {
  return  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TaskStatus::Builder::setDepartureLla( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::initDepartureLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::adoptDepartureLla(
    ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> TaskStatus::Builder::disownDepartureLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasDestinationLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasDestinationLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader TaskStatus::Reader::getDestinationLla() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::getDestinationLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline TaskStatus::Pipeline::getDestinationLla() {
  return  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TaskStatus::Builder::setDestinationLla( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::initDestinationLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::adoptDestinationLla(
    ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> TaskStatus::Builder::disownDestinationLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasMidPointsLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasMidPointsLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader TaskStatus::Reader::getMidPointsLla() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::getMidPointsLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::setMidPointsLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::initMidPointsLla(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TaskStatus::Builder::adoptMidPointsLla(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> TaskStatus::Builder::disownMidPointsLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasBlacklistPointsLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasBlacklistPointsLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader TaskStatus::Reader::getBlacklistPointsLla() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::getBlacklistPointsLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::setBlacklistPointsLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::initBlacklistPointsLla(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void TaskStatus::Builder::adoptBlacklistPointsLla(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> TaskStatus::Builder::disownBlacklistPointsLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::hasNavigationLineLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasNavigationLineLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader TaskStatus::Reader::getNavigationLineLla() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::getNavigationLineLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::setNavigationLineLla( ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::initNavigationLineLla(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void TaskStatus::Builder::adoptNavigationLineLla(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>> TaskStatus::Builder::disownNavigationLineLla() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::MapCoordLLA,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::getOpenTheDoor() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool TaskStatus::Builder::getOpenTheDoor() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setOpenTheDoor(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float TaskStatus::Reader::getVehicleSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TaskStatus::Builder::getVehicleSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setVehicleSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TaskStatus::Reader::hasVehiclePose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasVehiclePose() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Reader TaskStatus::Reader::getVehiclePose() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::getVehiclePose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline TaskStatus::Pipeline::getVehiclePose() {
  return  ::senseAD::msg::taskmanager::MapCoordLLA::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void TaskStatus::Builder::setVehiclePose( ::senseAD::msg::taskmanager::MapCoordLLA::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::taskmanager::MapCoordLLA::Builder TaskStatus::Builder::initVehiclePose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::adoptVehiclePose(
    ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::taskmanager::MapCoordLLA> TaskStatus::Builder::disownVehiclePose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::taskmanager::MapCoordLLA>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool TaskStatus::Reader::getAutoDrive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool TaskStatus::Builder::getAutoDrive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setAutoDrive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool TaskStatus::Reader::getVehicleHealth() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool TaskStatus::Builder::getVehicleHealth() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setVehicleHealth(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::taskmanager::TaskStatus::StationState TaskStatus::Reader::getStationState() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskStatus::StationState>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskStatus::StationState TaskStatus::Builder::getStationState() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskStatus::StationState>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setStationState( ::senseAD::msg::taskmanager::TaskStatus::StationState value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskStatus::StationState>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TaskStatus::Reader::hasSelfCheck() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool TaskStatus::Builder::hasSelfCheck() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Reader TaskStatus::Reader::getSelfCheck() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::getSelfCheck() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void TaskStatus::Builder::setSelfCheck( ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>::Builder TaskStatus::Builder::initSelfCheck(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void TaskStatus::Builder::adoptSelfCheck(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>> TaskStatus::Builder::disownSelfCheck() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::taskmanager::SelfCheck,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::taskmanager::TaskStatus::DataRecordState TaskStatus::Reader::getDataRecordState() const {
  return _reader.getDataField< ::senseAD::msg::taskmanager::TaskStatus::DataRecordState>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::taskmanager::TaskStatus::DataRecordState TaskStatus::Builder::getDataRecordState() {
  return _builder.getDataField< ::senseAD::msg::taskmanager::TaskStatus::DataRecordState>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TaskStatus::Builder::setDataRecordState( ::senseAD::msg::taskmanager::TaskStatus::DataRecordState value) {
  _builder.setDataField< ::senseAD::msg::taskmanager::TaskStatus::DataRecordState>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

