// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: as_vse.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f0318a8cd6a8e114);
CAPNP_DECLARE_SCHEMA(f8246a9148c95a14);
CAPNP_DECLARE_SCHEMA(e65bd90d4f7e2e94);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace tap {

struct AsVseHeader {
  AsVseHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0318a8cd6a8e114, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsVseSeries {
  AsVseSeries() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8246a9148c95a14, 0, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsVseOut {
  AsVseOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e65bd90d4f7e2e94, 22, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AsVseHeader::Reader {
public:
  typedef AsVseHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getVseVersionMajor() const;

  inline  ::uint8_t getVseVersionMinor() const;

  inline  ::uint8_t getU16VseReserve01() const;

  inline  ::uint32_t getStartTimestampMs() const;

  inline  ::uint32_t getStartTimestampUsHigh() const;

  inline  ::uint32_t getStartTimestampUsLow() const;

  inline  ::uint32_t getEndTimestampMs() const;

  inline  ::uint32_t getEndTimestampUsHigh() const;

  inline  ::uint32_t getEndTimestampUsLow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsVseHeader::Builder {
public:
  typedef AsVseHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getVseVersionMajor();
  inline void setVseVersionMajor( ::uint8_t value);

  inline  ::uint8_t getVseVersionMinor();
  inline void setVseVersionMinor( ::uint8_t value);

  inline  ::uint8_t getU16VseReserve01();
  inline void setU16VseReserve01( ::uint8_t value);

  inline  ::uint32_t getStartTimestampMs();
  inline void setStartTimestampMs( ::uint32_t value);

  inline  ::uint32_t getStartTimestampUsHigh();
  inline void setStartTimestampUsHigh( ::uint32_t value);

  inline  ::uint32_t getStartTimestampUsLow();
  inline void setStartTimestampUsLow( ::uint32_t value);

  inline  ::uint32_t getEndTimestampMs();
  inline void setEndTimestampMs( ::uint32_t value);

  inline  ::uint32_t getEndTimestampUsHigh();
  inline void setEndTimestampUsHigh( ::uint32_t value);

  inline  ::uint32_t getEndTimestampUsLow();
  inline void setEndTimestampUsLow( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsVseHeader::Pipeline {
public:
  typedef AsVseHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsVseSeries::Reader {
public:
  typedef AsVseSeries Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTimestampMs() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTimestampMs() const;

  inline bool hasYawrateRps() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getYawrateRps() const;

  inline bool hasSpeedMps() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSpeedMps() const;

  inline bool hasSlipRad() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSlipRad() const;

  inline bool hasRearPositionLongM() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRearPositionLongM() const;

  inline bool hasRearPositionLatM() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRearPositionLatM() const;

  inline bool hasHeadingRad() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getHeadingRad() const;

  inline bool hasPitchRad() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPitchRad() const;

  inline bool hasRollRad() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRollRad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsVseSeries::Builder {
public:
  typedef AsVseSeries Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTimestampMs();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTimestampMs();
  inline void setTimestampMs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimestampMs(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTimestampMs(unsigned int size);
  inline void adoptTimestampMs(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTimestampMs();

  inline bool hasYawrateRps();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getYawrateRps();
  inline void setYawrateRps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setYawrateRps(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initYawrateRps(unsigned int size);
  inline void adoptYawrateRps(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownYawrateRps();

  inline bool hasSpeedMps();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSpeedMps();
  inline void setSpeedMps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpeedMps(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSpeedMps(unsigned int size);
  inline void adoptSpeedMps(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSpeedMps();

  inline bool hasSlipRad();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSlipRad();
  inline void setSlipRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSlipRad(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSlipRad(unsigned int size);
  inline void adoptSlipRad(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSlipRad();

  inline bool hasRearPositionLongM();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRearPositionLongM();
  inline void setRearPositionLongM( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRearPositionLongM(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRearPositionLongM(unsigned int size);
  inline void adoptRearPositionLongM(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRearPositionLongM();

  inline bool hasRearPositionLatM();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRearPositionLatM();
  inline void setRearPositionLatM( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRearPositionLatM(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRearPositionLatM(unsigned int size);
  inline void adoptRearPositionLatM(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRearPositionLatM();

  inline bool hasHeadingRad();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getHeadingRad();
  inline void setHeadingRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setHeadingRad(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initHeadingRad(unsigned int size);
  inline void adoptHeadingRad(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownHeadingRad();

  inline bool hasPitchRad();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPitchRad();
  inline void setPitchRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPitchRad(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPitchRad(unsigned int size);
  inline void adoptPitchRad(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPitchRad();

  inline bool hasRollRad();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRollRad();
  inline void setRollRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRollRad(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRollRad(unsigned int size);
  inline void adoptRollRad(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRollRad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsVseSeries::Pipeline {
public:
  typedef AsVseSeries Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsVseOut::Reader {
public:
  typedef AsVseOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVseHeader() const;
  inline  ::senseAD::msg::tap::AsVseHeader::Reader getVseHeader() const;

  inline bool hasStateSeries() const;
  inline  ::senseAD::msg::tap::AsVseSeries::Reader getStateSeries() const;

  inline float getHostLength() const;

  inline float getHostWidth() const;

  inline float getHostDistToFront() const;

  inline float getSpeed() const;

  inline float getDisplaySpeed() const;

  inline float getYawRate() const;

  inline float getYawRateUnfilteredRps() const;

  inline float getLongAccel() const;

  inline float getLatAccel() const;

  inline float getHostPitchRad() const;

  inline float getHostRollRad() const;

  inline float getVcsSideslip() const;

  inline float getVcsLongVel() const;

  inline float getVcsLatVel() const;

  inline float getSensorSideslip() const;

  inline float getSensorLongVel() const;

  inline float getSensorLatVel() const;

  inline float getRearCurvature() const;

  inline float getRearCurvaturerate() const;

  inline float getRearCurvatureRadius() const;

  inline float getRearSideslip() const;

  inline float getSteerWheelAngle() const;

  inline float getSteerWheelAngleRate() const;

  inline float getSlopeLongRad() const;

  inline float getSlopeLatRad() const;

  inline float getGasPedalPos() const;

  inline float getBrakePedalPos() const;

  inline float getBrakePressure() const;

  inline float getGasPedalPosRate() const;

  inline float getBrakePedalPosRate() const;

  inline float getBrakePressureRate() const;

  inline  ::uint8_t getHazardLampSt() const;

  inline  ::uint8_t getFrontFogLampSt() const;

  inline  ::uint8_t getBackFogLampSt() const;

  inline  ::uint8_t getLeftLightFaultSt() const;

  inline  ::uint8_t getRightLightFaultSt() const;

  inline  ::uint8_t getEpbApplied() const;

  inline  ::uint8_t getHighBeamSt() const;

  inline  ::uint8_t getVdcActiveSt() const;

  inline  ::uint8_t getTcsActiveSt() const;

  inline  ::uint8_t getHdcActiveSt() const;

  inline  ::uint8_t getEscOffSt() const;

  inline  ::uint8_t getFlDoorSt() const;

  inline  ::uint8_t getFrDoorSt() const;

  inline  ::uint8_t getRlDoorSt() const;

  inline  ::uint8_t getRrDoorSt() const;

  inline  ::uint8_t getTurnLightSwitchPos() const;

  inline  ::uint8_t getLeftLightSt() const;

  inline  ::uint8_t getRightLightSt() const;

  inline  ::uint8_t getEngHoodUnLockWarn() const;

  inline  ::uint8_t getTrunkSt() const;

  inline  ::uint8_t getFrontWiperWorkSt() const;

  inline  ::uint8_t getFReverseStatus() const;

  inline  ::uint8_t getDriverBeltSwitchSt() const;

  inline  ::uint8_t getActualGear() const;

  inline  ::uint8_t getBrakePedalType() const;

  inline  ::uint8_t getFcwWarnDist() const;

  inline  ::uint8_t getLongSafeSwitch() const;

  inline  ::uint8_t getBsdSwitch() const;

  inline  ::uint8_t getDowSwitch() const;

  inline  ::uint8_t getFctbSwitch() const;

  inline  ::uint8_t getRctbSwitch() const;

  inline  ::uint8_t getRcwSwitch() const;

  inline  ::uint8_t getBrakePedalApld() const;

  inline  ::uint8_t getAbsActive() const;

  inline  ::uint8_t getAebActive() const;

  inline  ::uint8_t getPowerMode() const;

  inline  ::uint8_t getLongCtrlBrakeActive() const;

  inline  ::uint8_t getStraightDriving() const;

  inline  ::uint8_t getHighDynamic() const;

  inline  ::uint16_t getHostState() const;

  inline  ::uint32_t getEspBrakeAvailableSt() const;

  inline  ::uint32_t getFunctionDidConfig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsVseOut::Builder {
public:
  typedef AsVseOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVseHeader();
  inline  ::senseAD::msg::tap::AsVseHeader::Builder getVseHeader();
  inline void setVseHeader( ::senseAD::msg::tap::AsVseHeader::Reader value);
  inline  ::senseAD::msg::tap::AsVseHeader::Builder initVseHeader();
  inline void adoptVseHeader(::capnp::Orphan< ::senseAD::msg::tap::AsVseHeader>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseHeader> disownVseHeader();

  inline bool hasStateSeries();
  inline  ::senseAD::msg::tap::AsVseSeries::Builder getStateSeries();
  inline void setStateSeries( ::senseAD::msg::tap::AsVseSeries::Reader value);
  inline  ::senseAD::msg::tap::AsVseSeries::Builder initStateSeries();
  inline void adoptStateSeries(::capnp::Orphan< ::senseAD::msg::tap::AsVseSeries>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseSeries> disownStateSeries();

  inline float getHostLength();
  inline void setHostLength(float value);

  inline float getHostWidth();
  inline void setHostWidth(float value);

  inline float getHostDistToFront();
  inline void setHostDistToFront(float value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getDisplaySpeed();
  inline void setDisplaySpeed(float value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getYawRateUnfilteredRps();
  inline void setYawRateUnfilteredRps(float value);

  inline float getLongAccel();
  inline void setLongAccel(float value);

  inline float getLatAccel();
  inline void setLatAccel(float value);

  inline float getHostPitchRad();
  inline void setHostPitchRad(float value);

  inline float getHostRollRad();
  inline void setHostRollRad(float value);

  inline float getVcsSideslip();
  inline void setVcsSideslip(float value);

  inline float getVcsLongVel();
  inline void setVcsLongVel(float value);

  inline float getVcsLatVel();
  inline void setVcsLatVel(float value);

  inline float getSensorSideslip();
  inline void setSensorSideslip(float value);

  inline float getSensorLongVel();
  inline void setSensorLongVel(float value);

  inline float getSensorLatVel();
  inline void setSensorLatVel(float value);

  inline float getRearCurvature();
  inline void setRearCurvature(float value);

  inline float getRearCurvaturerate();
  inline void setRearCurvaturerate(float value);

  inline float getRearCurvatureRadius();
  inline void setRearCurvatureRadius(float value);

  inline float getRearSideslip();
  inline void setRearSideslip(float value);

  inline float getSteerWheelAngle();
  inline void setSteerWheelAngle(float value);

  inline float getSteerWheelAngleRate();
  inline void setSteerWheelAngleRate(float value);

  inline float getSlopeLongRad();
  inline void setSlopeLongRad(float value);

  inline float getSlopeLatRad();
  inline void setSlopeLatRad(float value);

  inline float getGasPedalPos();
  inline void setGasPedalPos(float value);

  inline float getBrakePedalPos();
  inline void setBrakePedalPos(float value);

  inline float getBrakePressure();
  inline void setBrakePressure(float value);

  inline float getGasPedalPosRate();
  inline void setGasPedalPosRate(float value);

  inline float getBrakePedalPosRate();
  inline void setBrakePedalPosRate(float value);

  inline float getBrakePressureRate();
  inline void setBrakePressureRate(float value);

  inline  ::uint8_t getHazardLampSt();
  inline void setHazardLampSt( ::uint8_t value);

  inline  ::uint8_t getFrontFogLampSt();
  inline void setFrontFogLampSt( ::uint8_t value);

  inline  ::uint8_t getBackFogLampSt();
  inline void setBackFogLampSt( ::uint8_t value);

  inline  ::uint8_t getLeftLightFaultSt();
  inline void setLeftLightFaultSt( ::uint8_t value);

  inline  ::uint8_t getRightLightFaultSt();
  inline void setRightLightFaultSt( ::uint8_t value);

  inline  ::uint8_t getEpbApplied();
  inline void setEpbApplied( ::uint8_t value);

  inline  ::uint8_t getHighBeamSt();
  inline void setHighBeamSt( ::uint8_t value);

  inline  ::uint8_t getVdcActiveSt();
  inline void setVdcActiveSt( ::uint8_t value);

  inline  ::uint8_t getTcsActiveSt();
  inline void setTcsActiveSt( ::uint8_t value);

  inline  ::uint8_t getHdcActiveSt();
  inline void setHdcActiveSt( ::uint8_t value);

  inline  ::uint8_t getEscOffSt();
  inline void setEscOffSt( ::uint8_t value);

  inline  ::uint8_t getFlDoorSt();
  inline void setFlDoorSt( ::uint8_t value);

  inline  ::uint8_t getFrDoorSt();
  inline void setFrDoorSt( ::uint8_t value);

  inline  ::uint8_t getRlDoorSt();
  inline void setRlDoorSt( ::uint8_t value);

  inline  ::uint8_t getRrDoorSt();
  inline void setRrDoorSt( ::uint8_t value);

  inline  ::uint8_t getTurnLightSwitchPos();
  inline void setTurnLightSwitchPos( ::uint8_t value);

  inline  ::uint8_t getLeftLightSt();
  inline void setLeftLightSt( ::uint8_t value);

  inline  ::uint8_t getRightLightSt();
  inline void setRightLightSt( ::uint8_t value);

  inline  ::uint8_t getEngHoodUnLockWarn();
  inline void setEngHoodUnLockWarn( ::uint8_t value);

  inline  ::uint8_t getTrunkSt();
  inline void setTrunkSt( ::uint8_t value);

  inline  ::uint8_t getFrontWiperWorkSt();
  inline void setFrontWiperWorkSt( ::uint8_t value);

  inline  ::uint8_t getFReverseStatus();
  inline void setFReverseStatus( ::uint8_t value);

  inline  ::uint8_t getDriverBeltSwitchSt();
  inline void setDriverBeltSwitchSt( ::uint8_t value);

  inline  ::uint8_t getActualGear();
  inline void setActualGear( ::uint8_t value);

  inline  ::uint8_t getBrakePedalType();
  inline void setBrakePedalType( ::uint8_t value);

  inline  ::uint8_t getFcwWarnDist();
  inline void setFcwWarnDist( ::uint8_t value);

  inline  ::uint8_t getLongSafeSwitch();
  inline void setLongSafeSwitch( ::uint8_t value);

  inline  ::uint8_t getBsdSwitch();
  inline void setBsdSwitch( ::uint8_t value);

  inline  ::uint8_t getDowSwitch();
  inline void setDowSwitch( ::uint8_t value);

  inline  ::uint8_t getFctbSwitch();
  inline void setFctbSwitch( ::uint8_t value);

  inline  ::uint8_t getRctbSwitch();
  inline void setRctbSwitch( ::uint8_t value);

  inline  ::uint8_t getRcwSwitch();
  inline void setRcwSwitch( ::uint8_t value);

  inline  ::uint8_t getBrakePedalApld();
  inline void setBrakePedalApld( ::uint8_t value);

  inline  ::uint8_t getAbsActive();
  inline void setAbsActive( ::uint8_t value);

  inline  ::uint8_t getAebActive();
  inline void setAebActive( ::uint8_t value);

  inline  ::uint8_t getPowerMode();
  inline void setPowerMode( ::uint8_t value);

  inline  ::uint8_t getLongCtrlBrakeActive();
  inline void setLongCtrlBrakeActive( ::uint8_t value);

  inline  ::uint8_t getStraightDriving();
  inline void setStraightDriving( ::uint8_t value);

  inline  ::uint8_t getHighDynamic();
  inline void setHighDynamic( ::uint8_t value);

  inline  ::uint16_t getHostState();
  inline void setHostState( ::uint16_t value);

  inline  ::uint32_t getEspBrakeAvailableSt();
  inline void setEspBrakeAvailableSt( ::uint32_t value);

  inline  ::uint32_t getFunctionDidConfig();
  inline void setFunctionDidConfig( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsVseOut::Pipeline {
public:
  typedef AsVseOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsVseHeader::Pipeline getVseHeader();
  inline  ::senseAD::msg::tap::AsVseSeries::Pipeline getStateSeries();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t AsVseHeader::Reader::getVseVersionMajor() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseHeader::Builder::getVseVersionMajor() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setVseVersionMajor( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseHeader::Reader::getVseVersionMinor() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseHeader::Builder::getVseVersionMinor() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setVseVersionMinor( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseHeader::Reader::getU16VseReserve01() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseHeader::Builder::getU16VseReserve01() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setU16VseReserve01( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getStartTimestampMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getStartTimestampMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setStartTimestampMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getStartTimestampUsHigh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getStartTimestampUsHigh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setStartTimestampUsHigh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getStartTimestampUsLow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getStartTimestampUsLow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setStartTimestampUsLow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getEndTimestampMs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getEndTimestampMs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setEndTimestampMs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getEndTimestampUsHigh() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getEndTimestampUsHigh() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setEndTimestampUsHigh( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseHeader::Reader::getEndTimestampUsLow() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseHeader::Builder::getEndTimestampUsLow() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsVseHeader::Builder::setEndTimestampUsLow( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool AsVseSeries::Reader::hasTimestampMs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasTimestampMs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getTimestampMs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getTimestampMs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setTimestampMs( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setTimestampMs(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initTimestampMs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptTimestampMs(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownTimestampMs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasYawrateRps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasYawrateRps() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getYawrateRps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getYawrateRps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setYawrateRps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setYawrateRps(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initYawrateRps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptYawrateRps(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownYawrateRps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasSpeedMps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasSpeedMps() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getSpeedMps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getSpeedMps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setSpeedMps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setSpeedMps(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initSpeedMps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptSpeedMps(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownSpeedMps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasSlipRad() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasSlipRad() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getSlipRad() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getSlipRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setSlipRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setSlipRad(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initSlipRad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptSlipRad(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownSlipRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasRearPositionLongM() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasRearPositionLongM() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getRearPositionLongM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getRearPositionLongM() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setRearPositionLongM( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setRearPositionLongM(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initRearPositionLongM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptRearPositionLongM(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownRearPositionLongM() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasRearPositionLatM() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasRearPositionLatM() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getRearPositionLatM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getRearPositionLatM() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setRearPositionLatM( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setRearPositionLatM(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initRearPositionLatM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptRearPositionLatM(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownRearPositionLatM() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasHeadingRad() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasHeadingRad() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getHeadingRad() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getHeadingRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setHeadingRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setHeadingRad(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initHeadingRad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptHeadingRad(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownHeadingRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasPitchRad() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasPitchRad() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getPitchRad() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getPitchRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setPitchRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setPitchRad(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initPitchRad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptPitchRad(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownPitchRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool AsVseSeries::Reader::hasRollRad() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseSeries::Builder::hasRollRad() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader AsVseSeries::Reader::getRollRad() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::getRollRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void AsVseSeries::Builder::setRollRad( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void AsVseSeries::Builder::setRollRad(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder AsVseSeries::Builder::initRollRad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void AsVseSeries::Builder::adoptRollRad(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> AsVseSeries::Builder::disownRollRad() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool AsVseOut::Reader::hasVseHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseOut::Builder::hasVseHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsVseHeader::Reader AsVseOut::Reader::getVseHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsVseHeader::Builder AsVseOut::Builder::getVseHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsVseHeader::Pipeline AsVseOut::Pipeline::getVseHeader() {
  return  ::senseAD::msg::tap::AsVseHeader::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsVseOut::Builder::setVseHeader( ::senseAD::msg::tap::AsVseHeader::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsVseHeader::Builder AsVseOut::Builder::initVseHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsVseOut::Builder::adoptVseHeader(
    ::capnp::Orphan< ::senseAD::msg::tap::AsVseHeader>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseHeader> AsVseOut::Builder::disownVseHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseHeader>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsVseOut::Reader::hasStateSeries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsVseOut::Builder::hasStateSeries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsVseSeries::Reader AsVseOut::Reader::getStateSeries() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsVseSeries::Builder AsVseOut::Builder::getStateSeries() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsVseSeries::Pipeline AsVseOut::Pipeline::getStateSeries() {
  return  ::senseAD::msg::tap::AsVseSeries::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsVseOut::Builder::setStateSeries( ::senseAD::msg::tap::AsVseSeries::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsVseSeries::Builder AsVseOut::Builder::initStateSeries() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsVseOut::Builder::adoptStateSeries(
    ::capnp::Orphan< ::senseAD::msg::tap::AsVseSeries>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseSeries> AsVseOut::Builder::disownStateSeries() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseSeries>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float AsVseOut::Reader::getHostLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getHostLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getHostWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getHostWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getHostDistToFront() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getHostDistToFront() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostDistToFront(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getDisplaySpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getDisplaySpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setDisplaySpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getYawRateUnfilteredRps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getYawRateUnfilteredRps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setYawRateUnfilteredRps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getHostPitchRad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getHostPitchRad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostPitchRad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getHostRollRad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getHostRollRad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostRollRad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getVcsSideslip() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getVcsSideslip() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setVcsSideslip(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getVcsLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getVcsLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setVcsLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getVcsLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getVcsLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setVcsLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSensorSideslip() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSensorSideslip() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSensorSideslip(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSensorLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSensorLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSensorLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSensorLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSensorLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSensorLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getRearCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getRearCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRearCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getRearCurvaturerate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getRearCurvaturerate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRearCurvaturerate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getRearCurvatureRadius() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getRearCurvatureRadius() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRearCurvatureRadius(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getRearSideslip() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getRearSideslip() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRearSideslip(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSteerWheelAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSteerWheelAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSteerWheelAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSteerWheelAngleRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSteerWheelAngleRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSteerWheelAngleRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSlopeLongRad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSlopeLongRad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSlopeLongRad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getSlopeLatRad() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getSlopeLatRad() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setSlopeLatRad(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getGasPedalPos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getGasPedalPos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setGasPedalPos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getBrakePedalPos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getBrakePedalPos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePedalPos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getBrakePressure() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getBrakePressure() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePressure(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getGasPedalPosRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getGasPedalPosRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setGasPedalPosRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getBrakePedalPosRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getBrakePedalPosRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePedalPosRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float AsVseOut::Reader::getBrakePressureRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float AsVseOut::Builder::getBrakePressureRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePressureRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getHazardLampSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getHazardLampSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHazardLampSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<124>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFrontFogLampSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFrontFogLampSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFrontFogLampSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getBackFogLampSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getBackFogLampSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBackFogLampSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getLeftLightFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getLeftLightFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLeftLightFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRightLightFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRightLightFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRightLightFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getEpbApplied() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getEpbApplied() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setEpbApplied( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getHighBeamSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getHighBeamSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHighBeamSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<130>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getVdcActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getVdcActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setVdcActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<131>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getTcsActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getTcsActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setTcsActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<132>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getHdcActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getHdcActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHdcActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<133>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getEscOffSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getEscOffSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setEscOffSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<134>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFlDoorSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFlDoorSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFlDoorSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<135>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFrDoorSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFrDoorSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFrDoorSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<136>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRlDoorSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRlDoorSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRlDoorSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<137>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRrDoorSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRrDoorSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRrDoorSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<138>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getTurnLightSwitchPos() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<139>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getTurnLightSwitchPos() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<139>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setTurnLightSwitchPos( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<139>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getLeftLightSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<140>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getLeftLightSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<140>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLeftLightSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<140>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRightLightSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<141>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRightLightSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<141>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRightLightSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<141>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getEngHoodUnLockWarn() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<142>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getEngHoodUnLockWarn() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<142>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setEngHoodUnLockWarn( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<142>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getTrunkSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<143>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getTrunkSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<143>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setTrunkSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<143>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFrontWiperWorkSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFrontWiperWorkSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFrontWiperWorkSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFReverseStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFReverseStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFReverseStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getDriverBeltSwitchSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getDriverBeltSwitchSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setDriverBeltSwitchSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getActualGear() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getActualGear() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setActualGear( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getBrakePedalType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getBrakePedalType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePedalType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFcwWarnDist() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFcwWarnDist() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFcwWarnDist( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getLongSafeSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getLongSafeSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLongSafeSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getBsdSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getBsdSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBsdSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getDowSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getDowSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setDowSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getFctbSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getFctbSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFctbSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRctbSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRctbSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRctbSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getRcwSwitch() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getRcwSwitch() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setRcwSwitch( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getBrakePedalApld() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getBrakePedalApld() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setBrakePedalApld( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getAbsActive() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getAbsActive() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setAbsActive( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getAebActive() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getAebActive() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setAebActive( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getPowerMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<159>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getPowerMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<159>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setPowerMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<159>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getLongCtrlBrakeActive() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getLongCtrlBrakeActive() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setLongCtrlBrakeActive( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<160>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getStraightDriving() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getStraightDriving() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setStraightDriving( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<161>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsVseOut::Reader::getHighDynamic() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsVseOut::Builder::getHighDynamic() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHighDynamic( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<162>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AsVseOut::Reader::getHostState() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AsVseOut::Builder::getHostState() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setHostState( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseOut::Reader::getEspBrakeAvailableSt() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseOut::Builder::getEspBrakeAvailableSt() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setEspBrakeAvailableSt( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsVseOut::Reader::getFunctionDidConfig() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsVseOut::Builder::getFunctionDidConfig() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void AsVseOut::Builder::setFunctionDidConfig( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

