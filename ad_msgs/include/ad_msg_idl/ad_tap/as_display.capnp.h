// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: as_display.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_tap/as_common.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a5ae1657cf148b9e);
enum class TargetObjColor_a5ae1657cf148b9e: uint16_t {
  NONE,
  NONE2,
  NONE3,
  YELLOW,
  RED,
};
CAPNP_DECLARE_ENUM(TargetObjColor, a5ae1657cf148b9e);
CAPNP_DECLARE_SCHEMA(8ffbf38d22f72e44);
enum class FcwStatus_8ffbf38d22f72e44: uint16_t {
  OFF,
  ON,
  FAILURE,
};
CAPNP_DECLARE_ENUM(FcwStatus, 8ffbf38d22f72e44);
CAPNP_DECLARE_SCHEMA(a4364f7574fb3085);
enum class AebStatus_a4364f7574fb3085: uint16_t {
  OFF,
  ON,
  FAILURE,
  INHIBITED,
};
CAPNP_DECLARE_ENUM(AebStatus, a4364f7574fb3085);
CAPNP_DECLARE_SCHEMA(ccbcbbdfec71f8a1);
enum class FcwWarnDist_ccbcbbdfec71f8a1: uint16_t {
  NORMAL,
  NEAR,
  FAR,
};
CAPNP_DECLARE_ENUM(FcwWarnDist, ccbcbbdfec71f8a1);
CAPNP_DECLARE_SCHEMA(e81eab0399232766);
enum class FcwActiveStatus_e81eab0399232766: uint16_t {
  NO_REQUEST,
  LEVEL1,
  LEVEL2,
  LEVEL3,
};
CAPNP_DECLARE_ENUM(FcwActiveStatus, e81eab0399232766);
CAPNP_DECLARE_SCHEMA(c6d8d7010990ce70);
enum class AebActiveStatus_c6d8d7010990ce70: uint16_t {
  NO_ACTIVE,
  PRE_FILL,
  ACTIVE,
};
CAPNP_DECLARE_ENUM(AebActiveStatus, c6d8d7010990ce70);
CAPNP_DECLARE_SCHEMA(d4981f2c15afce01);
enum class FcwAebTextInfo_d4981f2c15afce01: uint16_t {
  DEFAULT_TEXT,
  FCW_IS_ACTIVE,
  FCW_IS_SWITCHED_ON,
  UNABLE_TO_SWITCH_ON_FCW,
  FCW_IS_SWITCHED_OFF,
  FCW_IS_IN_ERROR_MODE,
  AEB_IS_ACTIVE,
  AEB_IS_SWITCHED_ON,
  UNABLE_TO_SWITCH_ON_AEB,
  AEB_IS_SWITCHED_OFF,
  AEB_IS_IN_ERROR_MODE,
};
CAPNP_DECLARE_ENUM(FcwAebTextInfo, d4981f2c15afce01);
CAPNP_DECLARE_SCHEMA(ec38fe798650d8ad);
enum class DrivingSoundWarn_ec38fe798650d8ad: uint16_t {
  DEFAULT_WARNING,
  TIP_WARNING,
  ACTIVE_WARNING,
  FAILED_WARNING,
  SAFETY_WARNING,
  WARNING_SOUND,
};
CAPNP_DECLARE_ENUM(DrivingSoundWarn, ec38fe798650d8ad);
CAPNP_DECLARE_SCHEMA(d725d0af7160673e);
enum class CtaWorkingStatus_d725d0af7160673e: uint16_t {
  DEFAULT,
  OFF,
  ONLY_WARING,
  WARING_BRAKE,
};
CAPNP_DECLARE_ENUM(CtaWorkingStatus, d725d0af7160673e);
CAPNP_DECLARE_SCHEMA(cbcb669678bd64e7);
CAPNP_DECLARE_SCHEMA(b73c5ba71bb7a00b);
CAPNP_DECLARE_SCHEMA(d21caf186d9efa54);
CAPNP_DECLARE_SCHEMA(fa9d1ad53f9c3893);
CAPNP_DECLARE_SCHEMA(f005c6b779458599);
CAPNP_DECLARE_SCHEMA(d69da9d4415fdf08);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace tap {

typedef ::capnp::schemas::TargetObjColor_a5ae1657cf148b9e TargetObjColor;

typedef ::capnp::schemas::FcwStatus_8ffbf38d22f72e44 FcwStatus;

typedef ::capnp::schemas::AebStatus_a4364f7574fb3085 AebStatus;

typedef ::capnp::schemas::FcwWarnDist_ccbcbbdfec71f8a1 FcwWarnDist;

typedef ::capnp::schemas::FcwActiveStatus_e81eab0399232766 FcwActiveStatus;

typedef ::capnp::schemas::AebActiveStatus_c6d8d7010990ce70 AebActiveStatus;

typedef ::capnp::schemas::FcwAebTextInfo_d4981f2c15afce01 FcwAebTextInfo;

typedef ::capnp::schemas::DrivingSoundWarn_ec38fe798650d8ad DrivingSoundWarn;

typedef ::capnp::schemas::CtaWorkingStatus_d725d0af7160673e CtaWorkingStatus;

struct AsDiaplayLgSafe {
  AsDiaplayLgSafe() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbcb669678bd64e7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDiaplayCta {
  AsDiaplayCta() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b73c5ba71bb7a00b, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDiaplayBsd {
  AsDiaplayBsd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d21caf186d9efa54, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDiaplayRcw {
  AsDiaplayRcw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa9d1ad53f9c3893, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDiaplayDow {
  AsDiaplayDow() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f005c6b779458599, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDisplay {
  AsDisplay() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d69da9d4415fdf08, 8, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AsDiaplayLgSafe::Reader {
public:
  typedef AsDiaplayLgSafe Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetLgsf() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetLgsf() const;

  inline  ::senseAD::msg::tap::TargetObjColor getTargetColor() const;

  inline  ::senseAD::msg::tap::FcwStatus getFcwSts() const;

  inline  ::senseAD::msg::tap::AebStatus getAebSts() const;

  inline  ::senseAD::msg::tap::FcwWarnDist getFcwWarnDist() const;

  inline  ::senseAD::msg::tap::FcwActiveStatus getFcwActiveSts() const;

  inline  ::senseAD::msg::tap::AebActiveStatus getAebActiveSts() const;

  inline  ::senseAD::msg::tap::FcwAebTextInfo getFcwAebTextInfo() const;

  inline  ::senseAD::msg::tap::DrivingSoundWarn getDrivingSoundWarn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDiaplayLgSafe::Builder {
public:
  typedef AsDiaplayLgSafe Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetLgsf();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetLgsf();
  inline void setTargetLgsf( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetLgsf();
  inline void adoptTargetLgsf(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetLgsf();

  inline  ::senseAD::msg::tap::TargetObjColor getTargetColor();
  inline void setTargetColor( ::senseAD::msg::tap::TargetObjColor value);

  inline  ::senseAD::msg::tap::FcwStatus getFcwSts();
  inline void setFcwSts( ::senseAD::msg::tap::FcwStatus value);

  inline  ::senseAD::msg::tap::AebStatus getAebSts();
  inline void setAebSts( ::senseAD::msg::tap::AebStatus value);

  inline  ::senseAD::msg::tap::FcwWarnDist getFcwWarnDist();
  inline void setFcwWarnDist( ::senseAD::msg::tap::FcwWarnDist value);

  inline  ::senseAD::msg::tap::FcwActiveStatus getFcwActiveSts();
  inline void setFcwActiveSts( ::senseAD::msg::tap::FcwActiveStatus value);

  inline  ::senseAD::msg::tap::AebActiveStatus getAebActiveSts();
  inline void setAebActiveSts( ::senseAD::msg::tap::AebActiveStatus value);

  inline  ::senseAD::msg::tap::FcwAebTextInfo getFcwAebTextInfo();
  inline void setFcwAebTextInfo( ::senseAD::msg::tap::FcwAebTextInfo value);

  inline  ::senseAD::msg::tap::DrivingSoundWarn getDrivingSoundWarn();
  inline void setDrivingSoundWarn( ::senseAD::msg::tap::DrivingSoundWarn value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDiaplayLgSafe::Pipeline {
public:
  typedef AsDiaplayLgSafe Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetLgsf();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDiaplayCta::Reader {
public:
  typedef AsDiaplayCta Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetRcta() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetRcta() const;

  inline bool hasTargetFcta() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetFcta() const;

  inline  ::senseAD::msg::tap::OnOffStatus getRctaSound() const;

  inline  ::senseAD::msg::tap::OnOffStatus getRctaLeftWarn() const;

  inline  ::senseAD::msg::tap::OnOffStatus getRctaRightWarn() const;

  inline  ::senseAD::msg::tap::OnOffStatus getFctaSound() const;

  inline  ::senseAD::msg::tap::OnOffStatus getFctaLeftWarn() const;

  inline  ::senseAD::msg::tap::OnOffStatus getFctaRightWarn() const;

  inline  ::senseAD::msg::tap::CtaWorkingStatus getRctaWorkingStatus() const;

  inline  ::senseAD::msg::tap::CtaWorkingStatus getFctaWorkingStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDiaplayCta::Builder {
public:
  typedef AsDiaplayCta Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetRcta();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetRcta();
  inline void setTargetRcta( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetRcta();
  inline void adoptTargetRcta(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetRcta();

  inline bool hasTargetFcta();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetFcta();
  inline void setTargetFcta( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetFcta();
  inline void adoptTargetFcta(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetFcta();

  inline  ::senseAD::msg::tap::OnOffStatus getRctaSound();
  inline void setRctaSound( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getRctaLeftWarn();
  inline void setRctaLeftWarn( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getRctaRightWarn();
  inline void setRctaRightWarn( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getFctaSound();
  inline void setFctaSound( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getFctaLeftWarn();
  inline void setFctaLeftWarn( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getFctaRightWarn();
  inline void setFctaRightWarn( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::CtaWorkingStatus getRctaWorkingStatus();
  inline void setRctaWorkingStatus( ::senseAD::msg::tap::CtaWorkingStatus value);

  inline  ::senseAD::msg::tap::CtaWorkingStatus getFctaWorkingStatus();
  inline void setFctaWorkingStatus( ::senseAD::msg::tap::CtaWorkingStatus value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDiaplayCta::Pipeline {
public:
  typedef AsDiaplayCta Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetRcta();
  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetFcta();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDiaplayBsd::Reader {
public:
  typedef AsDiaplayBsd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetBsd() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetBsd() const;

  inline bool hasTargetLca() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetLca() const;

  inline  ::uint32_t getSwitchReq() const;

  inline  ::uint32_t getBsdWarnLeft() const;

  inline  ::uint32_t getBsdWarnRight() const;

  inline  ::senseAD::msg::tap::OnOffStatus getBscSound() const;

  inline  ::uint32_t getLcaWarnLeft() const;

  inline  ::uint32_t getLcaWarnRight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDiaplayBsd::Builder {
public:
  typedef AsDiaplayBsd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetBsd();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetBsd();
  inline void setTargetBsd( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetBsd();
  inline void adoptTargetBsd(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetBsd();

  inline bool hasTargetLca();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetLca();
  inline void setTargetLca( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetLca();
  inline void adoptTargetLca(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetLca();

  inline  ::uint32_t getSwitchReq();
  inline void setSwitchReq( ::uint32_t value);

  inline  ::uint32_t getBsdWarnLeft();
  inline void setBsdWarnLeft( ::uint32_t value);

  inline  ::uint32_t getBsdWarnRight();
  inline void setBsdWarnRight( ::uint32_t value);

  inline  ::senseAD::msg::tap::OnOffStatus getBscSound();
  inline void setBscSound( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::uint32_t getLcaWarnLeft();
  inline void setLcaWarnLeft( ::uint32_t value);

  inline  ::uint32_t getLcaWarnRight();
  inline void setLcaWarnRight( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDiaplayBsd::Pipeline {
public:
  typedef AsDiaplayBsd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetBsd();
  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetLca();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDiaplayRcw::Reader {
public:
  typedef AsDiaplayRcw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetRcw() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetRcw() const;

  inline  ::uint32_t getRcwSwitchReq() const;

  inline  ::uint32_t getRcwWorkingStatus() const;

  inline  ::senseAD::msg::tap::OnOffStatus getRcwCollisionWarn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDiaplayRcw::Builder {
public:
  typedef AsDiaplayRcw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetRcw();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetRcw();
  inline void setTargetRcw( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetRcw();
  inline void adoptTargetRcw(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetRcw();

  inline  ::uint32_t getRcwSwitchReq();
  inline void setRcwSwitchReq( ::uint32_t value);

  inline  ::uint32_t getRcwWorkingStatus();
  inline void setRcwWorkingStatus( ::uint32_t value);

  inline  ::senseAD::msg::tap::OnOffStatus getRcwCollisionWarn();
  inline void setRcwCollisionWarn( ::senseAD::msg::tap::OnOffStatus value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDiaplayRcw::Pipeline {
public:
  typedef AsDiaplayRcw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetRcw();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDiaplayDow::Reader {
public:
  typedef AsDiaplayDow Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetDow() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getTargetDow() const;

  inline  ::uint32_t getDowSwitchReq() const;

  inline  ::uint32_t getDowLeftWarn() const;

  inline  ::uint32_t getDowRightWarn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDiaplayDow::Builder {
public:
  typedef AsDiaplayDow Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetDow();
  inline  ::senseAD::msg::tap::AsTarget::Builder getTargetDow();
  inline void setTargetDow( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initTargetDow();
  inline void adoptTargetDow(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownTargetDow();

  inline  ::uint32_t getDowSwitchReq();
  inline void setDowSwitchReq( ::uint32_t value);

  inline  ::uint32_t getDowLeftWarn();
  inline void setDowLeftWarn( ::uint32_t value);

  inline  ::uint32_t getDowRightWarn();
  inline void setDowRightWarn( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDiaplayDow::Pipeline {
public:
  typedef AsDiaplayDow Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getTargetDow();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDisplay::Reader {
public:
  typedef AsDisplay Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasLgsf() const;
  inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Reader getLgsf() const;

  inline bool hasCta() const;
  inline  ::senseAD::msg::tap::AsDiaplayCta::Reader getCta() const;

  inline bool hasBsd() const;
  inline  ::senseAD::msg::tap::AsDiaplayBsd::Reader getBsd() const;

  inline bool hasRcw() const;
  inline  ::senseAD::msg::tap::AsDiaplayRcw::Reader getRcw() const;

  inline bool hasDow() const;
  inline  ::senseAD::msg::tap::AsDiaplayDow::Reader getDow() const;

  inline  ::uint32_t getResv1() const;

  inline  ::uint32_t getResv2() const;

  inline  ::uint32_t getResv3() const;

  inline  ::uint32_t getResv4() const;

  inline  ::uint32_t getResv5() const;

  inline  ::uint32_t getResv6() const;

  inline float getResv7() const;

  inline float getResv8() const;

  inline float getResv9() const;

  inline float getResv10() const;

  inline float getResv11() const;

  inline float getResv12() const;

  inline float getResv13() const;

  inline float getResv14() const;

  inline float getResv15() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDisplay::Builder {
public:
  typedef AsDisplay Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasLgsf();
  inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Builder getLgsf();
  inline void setLgsf( ::senseAD::msg::tap::AsDiaplayLgSafe::Reader value);
  inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Builder initLgsf();
  inline void adoptLgsf(::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayLgSafe>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayLgSafe> disownLgsf();

  inline bool hasCta();
  inline  ::senseAD::msg::tap::AsDiaplayCta::Builder getCta();
  inline void setCta( ::senseAD::msg::tap::AsDiaplayCta::Reader value);
  inline  ::senseAD::msg::tap::AsDiaplayCta::Builder initCta();
  inline void adoptCta(::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayCta>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayCta> disownCta();

  inline bool hasBsd();
  inline  ::senseAD::msg::tap::AsDiaplayBsd::Builder getBsd();
  inline void setBsd( ::senseAD::msg::tap::AsDiaplayBsd::Reader value);
  inline  ::senseAD::msg::tap::AsDiaplayBsd::Builder initBsd();
  inline void adoptBsd(::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayBsd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayBsd> disownBsd();

  inline bool hasRcw();
  inline  ::senseAD::msg::tap::AsDiaplayRcw::Builder getRcw();
  inline void setRcw( ::senseAD::msg::tap::AsDiaplayRcw::Reader value);
  inline  ::senseAD::msg::tap::AsDiaplayRcw::Builder initRcw();
  inline void adoptRcw(::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayRcw>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayRcw> disownRcw();

  inline bool hasDow();
  inline  ::senseAD::msg::tap::AsDiaplayDow::Builder getDow();
  inline void setDow( ::senseAD::msg::tap::AsDiaplayDow::Reader value);
  inline  ::senseAD::msg::tap::AsDiaplayDow::Builder initDow();
  inline void adoptDow(::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayDow>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayDow> disownDow();

  inline  ::uint32_t getResv1();
  inline void setResv1( ::uint32_t value);

  inline  ::uint32_t getResv2();
  inline void setResv2( ::uint32_t value);

  inline  ::uint32_t getResv3();
  inline void setResv3( ::uint32_t value);

  inline  ::uint32_t getResv4();
  inline void setResv4( ::uint32_t value);

  inline  ::uint32_t getResv5();
  inline void setResv5( ::uint32_t value);

  inline  ::uint32_t getResv6();
  inline void setResv6( ::uint32_t value);

  inline float getResv7();
  inline void setResv7(float value);

  inline float getResv8();
  inline void setResv8(float value);

  inline float getResv9();
  inline void setResv9(float value);

  inline float getResv10();
  inline void setResv10(float value);

  inline float getResv11();
  inline void setResv11(float value);

  inline float getResv12();
  inline void setResv12(float value);

  inline float getResv13();
  inline void setResv13(float value);

  inline float getResv14();
  inline void setResv14(float value);

  inline float getResv15();
  inline void setResv15(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDisplay::Pipeline {
public:
  typedef AsDisplay Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Pipeline getLgsf();
  inline  ::senseAD::msg::tap::AsDiaplayCta::Pipeline getCta();
  inline  ::senseAD::msg::tap::AsDiaplayBsd::Pipeline getBsd();
  inline  ::senseAD::msg::tap::AsDiaplayRcw::Pipeline getRcw();
  inline  ::senseAD::msg::tap::AsDiaplayDow::Pipeline getDow();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AsDiaplayLgSafe::Reader::hasTargetLgsf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayLgSafe::Builder::hasTargetLgsf() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayLgSafe::Reader::getTargetLgsf() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayLgSafe::Builder::getTargetLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayLgSafe::Pipeline::getTargetLgsf() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayLgSafe::Builder::setTargetLgsf( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayLgSafe::Builder::initTargetLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDiaplayLgSafe::Builder::adoptTargetLgsf(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayLgSafe::Builder::disownTargetLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::tap::TargetObjColor AsDiaplayLgSafe::Reader::getTargetColor() const {
  return _reader.getDataField< ::senseAD::msg::tap::TargetObjColor>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::TargetObjColor AsDiaplayLgSafe::Builder::getTargetColor() {
  return _builder.getDataField< ::senseAD::msg::tap::TargetObjColor>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setTargetColor( ::senseAD::msg::tap::TargetObjColor value) {
  _builder.setDataField< ::senseAD::msg::tap::TargetObjColor>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwStatus AsDiaplayLgSafe::Reader::getFcwSts() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwStatus AsDiaplayLgSafe::Builder::getFcwSts() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setFcwSts( ::senseAD::msg::tap::FcwStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::AebStatus AsDiaplayLgSafe::Reader::getAebSts() const {
  return _reader.getDataField< ::senseAD::msg::tap::AebStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::AebStatus AsDiaplayLgSafe::Builder::getAebSts() {
  return _builder.getDataField< ::senseAD::msg::tap::AebStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setAebSts( ::senseAD::msg::tap::AebStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::AebStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwWarnDist AsDiaplayLgSafe::Reader::getFcwWarnDist() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwWarnDist>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwWarnDist AsDiaplayLgSafe::Builder::getFcwWarnDist() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwWarnDist>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setFcwWarnDist( ::senseAD::msg::tap::FcwWarnDist value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwWarnDist>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwActiveStatus AsDiaplayLgSafe::Reader::getFcwActiveSts() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwActiveStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwActiveStatus AsDiaplayLgSafe::Builder::getFcwActiveSts() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwActiveStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setFcwActiveSts( ::senseAD::msg::tap::FcwActiveStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwActiveStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::AebActiveStatus AsDiaplayLgSafe::Reader::getAebActiveSts() const {
  return _reader.getDataField< ::senseAD::msg::tap::AebActiveStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::AebActiveStatus AsDiaplayLgSafe::Builder::getAebActiveSts() {
  return _builder.getDataField< ::senseAD::msg::tap::AebActiveStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setAebActiveSts( ::senseAD::msg::tap::AebActiveStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::AebActiveStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwAebTextInfo AsDiaplayLgSafe::Reader::getFcwAebTextInfo() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwAebTextInfo>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwAebTextInfo AsDiaplayLgSafe::Builder::getFcwAebTextInfo() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwAebTextInfo>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setFcwAebTextInfo( ::senseAD::msg::tap::FcwAebTextInfo value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwAebTextInfo>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::DrivingSoundWarn AsDiaplayLgSafe::Reader::getDrivingSoundWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::DrivingSoundWarn>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::DrivingSoundWarn AsDiaplayLgSafe::Builder::getDrivingSoundWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::DrivingSoundWarn>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayLgSafe::Builder::setDrivingSoundWarn( ::senseAD::msg::tap::DrivingSoundWarn value) {
  _builder.setDataField< ::senseAD::msg::tap::DrivingSoundWarn>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AsDiaplayCta::Reader::hasTargetRcta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayCta::Builder::hasTargetRcta() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayCta::Reader::getTargetRcta() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayCta::Builder::getTargetRcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayCta::Pipeline::getTargetRcta() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayCta::Builder::setTargetRcta( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayCta::Builder::initTargetRcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDiaplayCta::Builder::adoptTargetRcta(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayCta::Builder::disownTargetRcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsDiaplayCta::Reader::hasTargetFcta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayCta::Builder::hasTargetFcta() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayCta::Reader::getTargetFcta() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayCta::Builder::getTargetFcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayCta::Pipeline::getTargetFcta() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayCta::Builder::setTargetFcta( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayCta::Builder::initTargetFcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsDiaplayCta::Builder::adoptTargetFcta(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayCta::Builder::disownTargetFcta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getRctaSound() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getRctaSound() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setRctaSound( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getRctaLeftWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getRctaLeftWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setRctaLeftWarn( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getRctaRightWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getRctaRightWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setRctaRightWarn( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getFctaSound() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getFctaSound() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setFctaSound( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getFctaLeftWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getFctaLeftWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setFctaLeftWarn( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Reader::getFctaRightWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayCta::Builder::getFctaRightWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setFctaRightWarn( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::CtaWorkingStatus AsDiaplayCta::Reader::getRctaWorkingStatus() const {
  return _reader.getDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::CtaWorkingStatus AsDiaplayCta::Builder::getRctaWorkingStatus() {
  return _builder.getDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setRctaWorkingStatus( ::senseAD::msg::tap::CtaWorkingStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::CtaWorkingStatus AsDiaplayCta::Reader::getFctaWorkingStatus() const {
  return _reader.getDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::CtaWorkingStatus AsDiaplayCta::Builder::getFctaWorkingStatus() {
  return _builder.getDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayCta::Builder::setFctaWorkingStatus( ::senseAD::msg::tap::CtaWorkingStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::CtaWorkingStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AsDiaplayBsd::Reader::hasTargetBsd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayBsd::Builder::hasTargetBsd() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayBsd::Reader::getTargetBsd() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayBsd::Builder::getTargetBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayBsd::Pipeline::getTargetBsd() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayBsd::Builder::setTargetBsd( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayBsd::Builder::initTargetBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDiaplayBsd::Builder::adoptTargetBsd(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayBsd::Builder::disownTargetBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsDiaplayBsd::Reader::hasTargetLca() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayBsd::Builder::hasTargetLca() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayBsd::Reader::getTargetLca() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayBsd::Builder::getTargetLca() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayBsd::Pipeline::getTargetLca() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayBsd::Builder::setTargetLca( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayBsd::Builder::initTargetLca() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsDiaplayBsd::Builder::adoptTargetLca(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayBsd::Builder::disownTargetLca() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsDiaplayBsd::Reader::getSwitchReq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayBsd::Builder::getSwitchReq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setSwitchReq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayBsd::Reader::getBsdWarnLeft() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayBsd::Builder::getBsdWarnLeft() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setBsdWarnLeft( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayBsd::Reader::getBsdWarnRight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayBsd::Builder::getBsdWarnRight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setBsdWarnRight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayBsd::Reader::getBscSound() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayBsd::Builder::getBscSound() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setBscSound( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayBsd::Reader::getLcaWarnLeft() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayBsd::Builder::getLcaWarnLeft() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setLcaWarnLeft( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayBsd::Reader::getLcaWarnRight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayBsd::Builder::getLcaWarnRight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayBsd::Builder::setLcaWarnRight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AsDiaplayRcw::Reader::hasTargetRcw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayRcw::Builder::hasTargetRcw() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayRcw::Reader::getTargetRcw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayRcw::Builder::getTargetRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayRcw::Pipeline::getTargetRcw() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayRcw::Builder::setTargetRcw( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayRcw::Builder::initTargetRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDiaplayRcw::Builder::adoptTargetRcw(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayRcw::Builder::disownTargetRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsDiaplayRcw::Reader::getRcwSwitchReq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayRcw::Builder::getRcwSwitchReq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayRcw::Builder::setRcwSwitchReq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayRcw::Reader::getRcwWorkingStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayRcw::Builder::getRcwWorkingStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayRcw::Builder::setRcwWorkingStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayRcw::Reader::getRcwCollisionWarn() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsDiaplayRcw::Builder::getRcwCollisionWarn() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayRcw::Builder::setRcwCollisionWarn( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AsDiaplayDow::Reader::hasTargetDow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDiaplayDow::Builder::hasTargetDow() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsDiaplayDow::Reader::getTargetDow() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayDow::Builder::getTargetDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsDiaplayDow::Pipeline::getTargetDow() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDiaplayDow::Builder::setTargetDow( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsDiaplayDow::Builder::initTargetDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDiaplayDow::Builder::adoptTargetDow(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsDiaplayDow::Builder::disownTargetDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsDiaplayDow::Reader::getDowSwitchReq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayDow::Builder::getDowSwitchReq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayDow::Builder::setDowSwitchReq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayDow::Reader::getDowLeftWarn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayDow::Builder::getDowLeftWarn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayDow::Builder::setDowLeftWarn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDiaplayDow::Reader::getDowRightWarn() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDiaplayDow::Builder::getDowRightWarn() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsDiaplayDow::Builder::setDowRightWarn( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AsDisplay::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AsDisplay::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsDisplay::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AsDisplay::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsDisplay::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AsDisplay::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsDisplay::Reader::hasLgsf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasLgsf() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Reader AsDisplay::Reader::getLgsf() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Builder AsDisplay::Builder::getLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Pipeline AsDisplay::Pipeline::getLgsf() {
  return  ::senseAD::msg::tap::AsDiaplayLgSafe::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setLgsf( ::senseAD::msg::tap::AsDiaplayLgSafe::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDiaplayLgSafe::Builder AsDisplay::Builder::initLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptLgsf(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayLgSafe>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayLgSafe> AsDisplay::Builder::disownLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayLgSafe>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsDisplay::Reader::hasCta() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasCta() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDiaplayCta::Reader AsDisplay::Reader::getCta() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDiaplayCta::Builder AsDisplay::Builder::getCta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDiaplayCta::Pipeline AsDisplay::Pipeline::getCta() {
  return  ::senseAD::msg::tap::AsDiaplayCta::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setCta( ::senseAD::msg::tap::AsDiaplayCta::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDiaplayCta::Builder AsDisplay::Builder::initCta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptCta(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayCta>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayCta> AsDisplay::Builder::disownCta() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayCta>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsDisplay::Reader::hasBsd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasBsd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDiaplayBsd::Reader AsDisplay::Reader::getBsd() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDiaplayBsd::Builder AsDisplay::Builder::getBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDiaplayBsd::Pipeline AsDisplay::Pipeline::getBsd() {
  return  ::senseAD::msg::tap::AsDiaplayBsd::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setBsd( ::senseAD::msg::tap::AsDiaplayBsd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDiaplayBsd::Builder AsDisplay::Builder::initBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptBsd(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayBsd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayBsd> AsDisplay::Builder::disownBsd() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayBsd>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AsDisplay::Reader::hasRcw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasRcw() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDiaplayRcw::Reader AsDisplay::Reader::getRcw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDiaplayRcw::Builder AsDisplay::Builder::getRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDiaplayRcw::Pipeline AsDisplay::Pipeline::getRcw() {
  return  ::senseAD::msg::tap::AsDiaplayRcw::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setRcw( ::senseAD::msg::tap::AsDiaplayRcw::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDiaplayRcw::Builder AsDisplay::Builder::initRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptRcw(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayRcw>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayRcw> AsDisplay::Builder::disownRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayRcw>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AsDisplay::Reader::hasDow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool AsDisplay::Builder::hasDow() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDiaplayDow::Reader AsDisplay::Reader::getDow() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDiaplayDow::Builder AsDisplay::Builder::getDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDiaplayDow::Pipeline AsDisplay::Pipeline::getDow() {
  return  ::senseAD::msg::tap::AsDiaplayDow::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void AsDisplay::Builder::setDow( ::senseAD::msg::tap::AsDiaplayDow::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDiaplayDow::Builder AsDisplay::Builder::initDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void AsDisplay::Builder::adoptDow(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayDow>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDiaplayDow> AsDisplay::Builder::disownDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDiaplayDow>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsDisplay::Reader::getResv1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDisplay::Reader::getResv2() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv2() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv2( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDisplay::Reader::getResv3() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv3() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv3( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDisplay::Reader::getResv4() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv4() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv4( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDisplay::Reader::getResv5() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv5() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv5( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDisplay::Reader::getResv6() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDisplay::Builder::getResv6() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv6( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv7() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv7() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv7(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv8() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv8() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv8(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv9() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv9() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv9(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv10() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv10() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv10(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv11() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv11() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv11(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv12() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv12() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv12(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv13() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv13() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv13(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv14() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv14() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv14(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float AsDisplay::Reader::getResv15() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float AsDisplay::Builder::getResv15() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AsDisplay::Builder::setResv15(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

