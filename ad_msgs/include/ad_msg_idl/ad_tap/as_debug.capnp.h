// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: as_debug.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_tap/as_control.capnp.h>
#include <ad_msg_idl/ad_tap/as_coreout.capnp.h>
#include <ad_msg_idl/ad_tap/as_vse.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a76a6b83fd02317f);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace tap {

struct ActiveSafetyDebug {
  ActiveSafetyDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a76a6b83fd02317f, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActiveSafetyDebug::Reader {
public:
  typedef ActiveSafetyDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasVse() const;
  inline  ::senseAD::msg::tap::AsVseOut::Reader getVse() const;

  inline bool hasCoreOut() const;
  inline  ::senseAD::msg::tap::AsCoreOut::Reader getCoreOut() const;

  inline bool hasCtrl() const;
  inline  ::senseAD::msg::tap::AsControl::Reader getCtrl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActiveSafetyDebug::Builder {
public:
  typedef ActiveSafetyDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasVse();
  inline  ::senseAD::msg::tap::AsVseOut::Builder getVse();
  inline void setVse( ::senseAD::msg::tap::AsVseOut::Reader value);
  inline  ::senseAD::msg::tap::AsVseOut::Builder initVse();
  inline void adoptVse(::capnp::Orphan< ::senseAD::msg::tap::AsVseOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseOut> disownVse();

  inline bool hasCoreOut();
  inline  ::senseAD::msg::tap::AsCoreOut::Builder getCoreOut();
  inline void setCoreOut( ::senseAD::msg::tap::AsCoreOut::Reader value);
  inline  ::senseAD::msg::tap::AsCoreOut::Builder initCoreOut();
  inline void adoptCoreOut(::capnp::Orphan< ::senseAD::msg::tap::AsCoreOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsCoreOut> disownCoreOut();

  inline bool hasCtrl();
  inline  ::senseAD::msg::tap::AsControl::Builder getCtrl();
  inline void setCtrl( ::senseAD::msg::tap::AsControl::Reader value);
  inline  ::senseAD::msg::tap::AsControl::Builder initCtrl();
  inline void adoptCtrl(::capnp::Orphan< ::senseAD::msg::tap::AsControl>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsControl> disownCtrl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActiveSafetyDebug::Pipeline {
public:
  typedef ActiveSafetyDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::tap::AsVseOut::Pipeline getVse();
  inline  ::senseAD::msg::tap::AsCoreOut::Pipeline getCoreOut();
  inline  ::senseAD::msg::tap::AsControl::Pipeline getCtrl();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActiveSafetyDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ActiveSafetyDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ActiveSafetyDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ActiveSafetyDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ActiveSafetyDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ActiveSafetyDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ActiveSafetyDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ActiveSafetyDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ActiveSafetyDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ActiveSafetyDebug::Reader::hasVse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ActiveSafetyDebug::Builder::hasVse() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsVseOut::Reader ActiveSafetyDebug::Reader::getVse() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsVseOut::Builder ActiveSafetyDebug::Builder::getVse() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsVseOut::Pipeline ActiveSafetyDebug::Pipeline::getVse() {
  return  ::senseAD::msg::tap::AsVseOut::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActiveSafetyDebug::Builder::setVse( ::senseAD::msg::tap::AsVseOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsVseOut::Builder ActiveSafetyDebug::Builder::initVse() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ActiveSafetyDebug::Builder::adoptVse(
    ::capnp::Orphan< ::senseAD::msg::tap::AsVseOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsVseOut> ActiveSafetyDebug::Builder::disownVse() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsVseOut>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ActiveSafetyDebug::Reader::hasCoreOut() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ActiveSafetyDebug::Builder::hasCoreOut() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsCoreOut::Reader ActiveSafetyDebug::Reader::getCoreOut() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsCoreOut::Builder ActiveSafetyDebug::Builder::getCoreOut() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsCoreOut::Pipeline ActiveSafetyDebug::Pipeline::getCoreOut() {
  return  ::senseAD::msg::tap::AsCoreOut::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ActiveSafetyDebug::Builder::setCoreOut( ::senseAD::msg::tap::AsCoreOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsCoreOut::Builder ActiveSafetyDebug::Builder::initCoreOut() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ActiveSafetyDebug::Builder::adoptCoreOut(
    ::capnp::Orphan< ::senseAD::msg::tap::AsCoreOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsCoreOut> ActiveSafetyDebug::Builder::disownCoreOut() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCoreOut>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ActiveSafetyDebug::Reader::hasCtrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ActiveSafetyDebug::Builder::hasCtrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsControl::Reader ActiveSafetyDebug::Reader::getCtrl() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsControl::Builder ActiveSafetyDebug::Builder::getCtrl() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsControl::Pipeline ActiveSafetyDebug::Pipeline::getCtrl() {
  return  ::senseAD::msg::tap::AsControl::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ActiveSafetyDebug::Builder::setCtrl( ::senseAD::msg::tap::AsControl::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsControl::Builder ActiveSafetyDebug::Builder::initCtrl() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ActiveSafetyDebug::Builder::adoptCtrl(
    ::capnp::Orphan< ::senseAD::msg::tap::AsControl>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsControl> ActiveSafetyDebug::Builder::disownCtrl() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsControl>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

