// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: as_command.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_tap/as_common.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c68dab6588e38448);
enum class AebStatusCmd_c68dab6588e38448: uint16_t {
  OFF,
  ON,
  FAILURE,
  NOT_ACTIVE,
  ACTIVE,
  PRE_FILL,
};
CAPNP_DECLARE_ENUM(AebStatusCmd, c68dab6588e38448);
CAPNP_DECLARE_SCHEMA(f600d8de9d98e59c);
enum class FcwStatusCmd_f600d8de9d98e59c: uint16_t {
  NO_REQUEST,
  LEVEL1,
  LEVEL2,
  LEVEL3,
};
CAPNP_DECLARE_ENUM(FcwStatusCmd, f600d8de9d98e59c);
CAPNP_DECLARE_SCHEMA(ae7e6c1de7ac6a1d);
enum class FcwMode_ae7e6c1de7ac6a1d: uint16_t {
  OFF,
  ON,
  ACTIVE,
  FAILURE,
};
CAPNP_DECLARE_ENUM(FcwMode, ae7e6c1de7ac6a1d);
CAPNP_DECLARE_SCHEMA(faf4bf2a95cf9918);
CAPNP_DECLARE_SCHEMA(b4a13fe6780f7d3c);
enum class CtbCollisionDir_b4a13fe6780f7d3c: uint16_t {
  NO_COLLSION,
  LEFT,
  RIGHT,
  LEFT_RIGHT,
};
CAPNP_DECLARE_ENUM(CtbCollisionDir, b4a13fe6780f7d3c);
CAPNP_DECLARE_SCHEMA(c0814e2d74f34c97);
CAPNP_DECLARE_SCHEMA(ac3b5ff0e3c03123);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace tap {

typedef ::capnp::schemas::AebStatusCmd_c68dab6588e38448 AebStatusCmd;

typedef ::capnp::schemas::FcwStatusCmd_f600d8de9d98e59c FcwStatusCmd;

typedef ::capnp::schemas::FcwMode_ae7e6c1de7ac6a1d FcwMode;

struct AsCmdLgSafe {
  AsCmdLgSafe() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(faf4bf2a95cf9918, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::CtbCollisionDir_b4a13fe6780f7d3c CtbCollisionDir;

struct AsCmdCtb {
  AsCmdCtb() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0814e2d74f34c97, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsCommand {
  AsCommand() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac3b5ff0e3c03123, 8, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AsCmdLgSafe::Reader {
public:
  typedef AsCmdLgSafe Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLgsfTarget() const;
  inline  ::senseAD::msg::tap::AsTarget::Reader getLgsfTarget() const;

  inline float getAebTarDec() const;

  inline  ::uint32_t getHoldType() const;

  inline  ::senseAD::msg::tap::OnOffStatus getAebReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getAwbReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getPreFillReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getAbaReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getBeltReq() const;

  inline  ::senseAD::msg::tap::AebStatusCmd getAebStatus() const;

  inline  ::senseAD::msg::tap::FcwStatusCmd getFcwStatus() const;

  inline  ::senseAD::msg::tap::FcwMode getFcwMode() const;

  inline  ::uint8_t getAbaLevel() const;

  inline  ::uint8_t getAwbLevel() const;

  inline  ::uint8_t getAebReqValid() const;

  inline  ::uint8_t getShadowMode() const;

  inline  ::uint32_t getResv1() const;

  inline float getResv2() const;

  inline float getResv3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCmdLgSafe::Builder {
public:
  typedef AsCmdLgSafe Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLgsfTarget();
  inline  ::senseAD::msg::tap::AsTarget::Builder getLgsfTarget();
  inline void setLgsfTarget( ::senseAD::msg::tap::AsTarget::Reader value);
  inline  ::senseAD::msg::tap::AsTarget::Builder initLgsfTarget();
  inline void adoptLgsfTarget(::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> disownLgsfTarget();

  inline float getAebTarDec();
  inline void setAebTarDec(float value);

  inline  ::uint32_t getHoldType();
  inline void setHoldType( ::uint32_t value);

  inline  ::senseAD::msg::tap::OnOffStatus getAebReq();
  inline void setAebReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getAwbReq();
  inline void setAwbReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getPreFillReq();
  inline void setPreFillReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getAbaReq();
  inline void setAbaReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getBeltReq();
  inline void setBeltReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::AebStatusCmd getAebStatus();
  inline void setAebStatus( ::senseAD::msg::tap::AebStatusCmd value);

  inline  ::senseAD::msg::tap::FcwStatusCmd getFcwStatus();
  inline void setFcwStatus( ::senseAD::msg::tap::FcwStatusCmd value);

  inline  ::senseAD::msg::tap::FcwMode getFcwMode();
  inline void setFcwMode( ::senseAD::msg::tap::FcwMode value);

  inline  ::uint8_t getAbaLevel();
  inline void setAbaLevel( ::uint8_t value);

  inline  ::uint8_t getAwbLevel();
  inline void setAwbLevel( ::uint8_t value);

  inline  ::uint8_t getAebReqValid();
  inline void setAebReqValid( ::uint8_t value);

  inline  ::uint8_t getShadowMode();
  inline void setShadowMode( ::uint8_t value);

  inline  ::uint32_t getResv1();
  inline void setResv1( ::uint32_t value);

  inline float getResv2();
  inline void setResv2(float value);

  inline float getResv3();
  inline void setResv3(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCmdLgSafe::Pipeline {
public:
  typedef AsCmdLgSafe Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsTarget::Pipeline getLgsfTarget();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsCmdCtb::Reader {
public:
  typedef AsCmdCtb Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::tap::OnOffStatus getRctbReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getRctbValid() const;

  inline  ::senseAD::msg::tap::OnOffStatus getFctbReq() const;

  inline  ::senseAD::msg::tap::OnOffStatus getFctbValid() const;

  inline float getRctbDecReq() const;

  inline float getFctbDecReq() const;

  inline  ::senseAD::msg::tap::CtbCollisionDir getRctbCollisionDir() const;

  inline  ::senseAD::msg::tap::CtbCollisionDir getFctbCollisionDir() const;

  inline  ::uint32_t getShadowMode() const;

  inline  ::uint32_t getResv1() const;

  inline float getResv2() const;

  inline float getResv3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCmdCtb::Builder {
public:
  typedef AsCmdCtb Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::tap::OnOffStatus getRctbReq();
  inline void setRctbReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getRctbValid();
  inline void setRctbValid( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getFctbReq();
  inline void setFctbReq( ::senseAD::msg::tap::OnOffStatus value);

  inline  ::senseAD::msg::tap::OnOffStatus getFctbValid();
  inline void setFctbValid( ::senseAD::msg::tap::OnOffStatus value);

  inline float getRctbDecReq();
  inline void setRctbDecReq(float value);

  inline float getFctbDecReq();
  inline void setFctbDecReq(float value);

  inline  ::senseAD::msg::tap::CtbCollisionDir getRctbCollisionDir();
  inline void setRctbCollisionDir( ::senseAD::msg::tap::CtbCollisionDir value);

  inline  ::senseAD::msg::tap::CtbCollisionDir getFctbCollisionDir();
  inline void setFctbCollisionDir( ::senseAD::msg::tap::CtbCollisionDir value);

  inline  ::uint32_t getShadowMode();
  inline void setShadowMode( ::uint32_t value);

  inline  ::uint32_t getResv1();
  inline void setResv1( ::uint32_t value);

  inline float getResv2();
  inline void setResv2(float value);

  inline float getResv3();
  inline void setResv3(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCmdCtb::Pipeline {
public:
  typedef AsCmdCtb Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsCommand::Reader {
public:
  typedef AsCommand Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasLgsf() const;
  inline  ::senseAD::msg::tap::AsCmdLgSafe::Reader getLgsf() const;

  inline bool hasCtb() const;
  inline  ::senseAD::msg::tap::AsCmdCtb::Reader getCtb() const;

  inline  ::uint32_t getShadowMode() const;

  inline  ::uint32_t getResv1() const;

  inline  ::uint32_t getResv2() const;

  inline  ::uint32_t getResv3() const;

  inline  ::uint32_t getResv4() const;

  inline  ::uint32_t getResv5() const;

  inline  ::uint32_t getResv6() const;

  inline float getResv7() const;

  inline float getResv8() const;

  inline float getResv9() const;

  inline float getResv10() const;

  inline float getResv11() const;

  inline float getResv12() const;

  inline float getResv13() const;

  inline float getResv14() const;

  inline float getResv15() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCommand::Builder {
public:
  typedef AsCommand Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasLgsf();
  inline  ::senseAD::msg::tap::AsCmdLgSafe::Builder getLgsf();
  inline void setLgsf( ::senseAD::msg::tap::AsCmdLgSafe::Reader value);
  inline  ::senseAD::msg::tap::AsCmdLgSafe::Builder initLgsf();
  inline void adoptLgsf(::capnp::Orphan< ::senseAD::msg::tap::AsCmdLgSafe>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsCmdLgSafe> disownLgsf();

  inline bool hasCtb();
  inline  ::senseAD::msg::tap::AsCmdCtb::Builder getCtb();
  inline void setCtb( ::senseAD::msg::tap::AsCmdCtb::Reader value);
  inline  ::senseAD::msg::tap::AsCmdCtb::Builder initCtb();
  inline void adoptCtb(::capnp::Orphan< ::senseAD::msg::tap::AsCmdCtb>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsCmdCtb> disownCtb();

  inline  ::uint32_t getShadowMode();
  inline void setShadowMode( ::uint32_t value);

  inline  ::uint32_t getResv1();
  inline void setResv1( ::uint32_t value);

  inline  ::uint32_t getResv2();
  inline void setResv2( ::uint32_t value);

  inline  ::uint32_t getResv3();
  inline void setResv3( ::uint32_t value);

  inline  ::uint32_t getResv4();
  inline void setResv4( ::uint32_t value);

  inline  ::uint32_t getResv5();
  inline void setResv5( ::uint32_t value);

  inline  ::uint32_t getResv6();
  inline void setResv6( ::uint32_t value);

  inline float getResv7();
  inline void setResv7(float value);

  inline float getResv8();
  inline void setResv8(float value);

  inline float getResv9();
  inline void setResv9(float value);

  inline float getResv10();
  inline void setResv10(float value);

  inline float getResv11();
  inline void setResv11(float value);

  inline float getResv12();
  inline void setResv12(float value);

  inline float getResv13();
  inline void setResv13(float value);

  inline float getResv14();
  inline void setResv14(float value);

  inline float getResv15();
  inline void setResv15(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCommand::Pipeline {
public:
  typedef AsCommand Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::tap::AsCmdLgSafe::Pipeline getLgsf();
  inline  ::senseAD::msg::tap::AsCmdCtb::Pipeline getCtb();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AsCmdLgSafe::Reader::hasLgsfTarget() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsCmdLgSafe::Builder::hasLgsfTarget() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTarget::Reader AsCmdLgSafe::Reader::getLgsfTarget() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsCmdLgSafe::Builder::getLgsfTarget() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTarget::Pipeline AsCmdLgSafe::Pipeline::getLgsfTarget() {
  return  ::senseAD::msg::tap::AsTarget::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsCmdLgSafe::Builder::setLgsfTarget( ::senseAD::msg::tap::AsTarget::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTarget::Builder AsCmdLgSafe::Builder::initLgsfTarget() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsCmdLgSafe::Builder::adoptLgsfTarget(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTarget>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTarget> AsCmdLgSafe::Builder::disownLgsfTarget() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTarget>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float AsCmdLgSafe::Reader::getAebTarDec() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AsCmdLgSafe::Builder::getAebTarDec() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAebTarDec(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCmdLgSafe::Reader::getHoldType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCmdLgSafe::Builder::getHoldType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setHoldType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Reader::getAebReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Builder::getAebReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAebReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Reader::getAwbReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Builder::getAwbReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAwbReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Reader::getPreFillReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Builder::getPreFillReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setPreFillReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Reader::getAbaReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Builder::getAbaReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAbaReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Reader::getBeltReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdLgSafe::Builder::getBeltReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setBeltReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::AebStatusCmd AsCmdLgSafe::Reader::getAebStatus() const {
  return _reader.getDataField< ::senseAD::msg::tap::AebStatusCmd>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::AebStatusCmd AsCmdLgSafe::Builder::getAebStatus() {
  return _builder.getDataField< ::senseAD::msg::tap::AebStatusCmd>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAebStatus( ::senseAD::msg::tap::AebStatusCmd value) {
  _builder.setDataField< ::senseAD::msg::tap::AebStatusCmd>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwStatusCmd AsCmdLgSafe::Reader::getFcwStatus() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwStatusCmd>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwStatusCmd AsCmdLgSafe::Builder::getFcwStatus() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwStatusCmd>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setFcwStatus( ::senseAD::msg::tap::FcwStatusCmd value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwStatusCmd>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::FcwMode AsCmdLgSafe::Reader::getFcwMode() const {
  return _reader.getDataField< ::senseAD::msg::tap::FcwMode>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::FcwMode AsCmdLgSafe::Builder::getFcwMode() {
  return _builder.getDataField< ::senseAD::msg::tap::FcwMode>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setFcwMode( ::senseAD::msg::tap::FcwMode value) {
  _builder.setDataField< ::senseAD::msg::tap::FcwMode>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCmdLgSafe::Reader::getAbaLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCmdLgSafe::Builder::getAbaLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAbaLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCmdLgSafe::Reader::getAwbLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCmdLgSafe::Builder::getAwbLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAwbLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCmdLgSafe::Reader::getAebReqValid() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCmdLgSafe::Builder::getAebReqValid() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setAebReqValid( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCmdLgSafe::Reader::getShadowMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCmdLgSafe::Builder::getShadowMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setShadowMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCmdLgSafe::Reader::getResv1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCmdLgSafe::Builder::getResv1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setResv1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdLgSafe::Reader::getResv2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsCmdLgSafe::Builder::getResv2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setResv2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdLgSafe::Reader::getResv3() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsCmdLgSafe::Builder::getResv3() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsCmdLgSafe::Builder::setResv3(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Reader::getRctbReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Builder::getRctbReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setRctbReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Reader::getRctbValid() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Builder::getRctbValid() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setRctbValid( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Reader::getFctbReq() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Builder::getFctbReq() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setFctbReq( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Reader::getFctbValid() const {
  return _reader.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::OnOffStatus AsCmdCtb::Builder::getFctbValid() {
  return _builder.getDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setFctbValid( ::senseAD::msg::tap::OnOffStatus value) {
  _builder.setDataField< ::senseAD::msg::tap::OnOffStatus>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdCtb::Reader::getRctbDecReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AsCmdCtb::Builder::getRctbDecReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setRctbDecReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdCtb::Reader::getFctbDecReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AsCmdCtb::Builder::getFctbDecReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setFctbDecReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::CtbCollisionDir AsCmdCtb::Reader::getRctbCollisionDir() const {
  return _reader.getDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::CtbCollisionDir AsCmdCtb::Builder::getRctbCollisionDir() {
  return _builder.getDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setRctbCollisionDir( ::senseAD::msg::tap::CtbCollisionDir value) {
  _builder.setDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::tap::CtbCollisionDir AsCmdCtb::Reader::getFctbCollisionDir() const {
  return _reader.getDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::tap::CtbCollisionDir AsCmdCtb::Builder::getFctbCollisionDir() {
  return _builder.getDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setFctbCollisionDir( ::senseAD::msg::tap::CtbCollisionDir value) {
  _builder.setDataField< ::senseAD::msg::tap::CtbCollisionDir>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCmdCtb::Reader::getShadowMode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCmdCtb::Builder::getShadowMode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setShadowMode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCmdCtb::Reader::getResv1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCmdCtb::Builder::getResv1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setResv1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdCtb::Reader::getResv2() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsCmdCtb::Builder::getResv2() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setResv2(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsCmdCtb::Reader::getResv3() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsCmdCtb::Builder::getResv3() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsCmdCtb::Builder::setResv3(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool AsCommand::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsCommand::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AsCommand::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsCommand::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AsCommand::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsCommand::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsCommand::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsCommand::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AsCommand::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsCommand::Reader::hasLgsf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsCommand::Builder::hasLgsf() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsCmdLgSafe::Reader AsCommand::Reader::getLgsf() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsCmdLgSafe::Builder AsCommand::Builder::getLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsCmdLgSafe::Pipeline AsCommand::Pipeline::getLgsf() {
  return  ::senseAD::msg::tap::AsCmdLgSafe::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsCommand::Builder::setLgsf( ::senseAD::msg::tap::AsCmdLgSafe::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsCmdLgSafe::Builder AsCommand::Builder::initLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsCommand::Builder::adoptLgsf(
    ::capnp::Orphan< ::senseAD::msg::tap::AsCmdLgSafe>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsCmdLgSafe> AsCommand::Builder::disownLgsf() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdLgSafe>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsCommand::Reader::hasCtb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsCommand::Builder::hasCtb() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsCmdCtb::Reader AsCommand::Reader::getCtb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsCmdCtb::Builder AsCommand::Builder::getCtb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsCmdCtb::Pipeline AsCommand::Pipeline::getCtb() {
  return  ::senseAD::msg::tap::AsCmdCtb::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsCommand::Builder::setCtb( ::senseAD::msg::tap::AsCmdCtb::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsCmdCtb::Builder AsCommand::Builder::initCtb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsCommand::Builder::adoptCtb(
    ::capnp::Orphan< ::senseAD::msg::tap::AsCmdCtb>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsCmdCtb> AsCommand::Builder::disownCtb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCmdCtb>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsCommand::Reader::getShadowMode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getShadowMode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setShadowMode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv2() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv2() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv2( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv3() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv3() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv3( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv4() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv4() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv4( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv5() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv5() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv5( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCommand::Reader::getResv6() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCommand::Builder::getResv6() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv6( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv7() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv7() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv7(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv8() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv8() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv8(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv9() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv9() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv9(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv10() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv10() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv10(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv11() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv11() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv11(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv12() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv12() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv12(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv13() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv13() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv13(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv14() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv14() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv14(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float AsCommand::Reader::getResv15() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float AsCommand::Builder::getResv15() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void AsCommand::Builder::setResv15(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

