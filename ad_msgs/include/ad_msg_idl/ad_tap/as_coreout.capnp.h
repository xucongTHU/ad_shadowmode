// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: as_coreout.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b95464f959a8a029);
CAPNP_DECLARE_SCHEMA(89c350cbae219845);
CAPNP_DECLARE_SCHEMA(ec85fa592a3b5d68);
CAPNP_DECLARE_SCHEMA(dcbfda4ef8d63d0b);
CAPNP_DECLARE_SCHEMA(b040fe979940a3da);
CAPNP_DECLARE_SCHEMA(e04b4809daf8ef5e);
CAPNP_DECLARE_SCHEMA(a7c1dfb6db446603);
CAPNP_DECLARE_SCHEMA(9be6a3ebedaaaa12);
CAPNP_DECLARE_SCHEMA(c483423fed50b489);
CAPNP_DECLARE_SCHEMA(a58d590af786f961);
CAPNP_DECLARE_SCHEMA(e4b56d201b29ee6f);
CAPNP_DECLARE_SCHEMA(baf3c5f8d801c21f);
CAPNP_DECLARE_SCHEMA(d2e2064e7ae293a2);
CAPNP_DECLARE_SCHEMA(80ecf7d5dfbd622b);
CAPNP_DECLARE_SCHEMA(f54a47893cfca3b6);
CAPNP_DECLARE_SCHEMA(d2c38e289ec282b4);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace tap {

struct AsLongSafeObject {
  AsLongSafeObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b95464f959a8a029, 20, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsScenarioInfo {
  AsScenarioInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89c350cbae219845, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsTimeInfo {
  AsTimeInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec85fa592a3b5d68, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsLongSafeOut {
  AsLongSafeOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcbfda4ef8d63d0b, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsOnComingObject {
  AsOnComingObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b040fe979940a3da, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsOnComingOut {
  AsOnComingOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e04b4809daf8ef5e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsOverTakingObject {
  AsOverTakingObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7c1dfb6db446603, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsOverTakingOut {
  AsOverTakingOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9be6a3ebedaaaa12, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsSfObjInfo {
  AsSfObjInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c483423fed50b489, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsDowOut {
  AsDowOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a58d590af786f961, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsLcdaOut {
  AsLcdaOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4b56d201b29ee6f, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsCtsOut {
  AsCtsOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(baf3c5f8d801c21f, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsRcwOut {
  AsRcwOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2e2064e7ae293a2, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsSideFeatureOut {
  AsSideFeatureOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80ecf7d5dfbd622b, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsCoreOut {
  AsCoreOut() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f54a47893cfca3b6, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AsCoreOutMsg {
  AsCoreOutMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2c38e289ec282b4, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AsLongSafeObject::Reader {
public:
  typedef AsLongSafeObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getIndex() const;

  inline  ::uint8_t getStatus() const;

  inline  ::uint16_t getAge() const;

  inline  ::int32_t getVisTrkid() const;

  inline  ::int32_t getFusTrkid() const;

  inline  ::int32_t getObjectClass() const;

  inline  ::int32_t getDetectionSensor() const;

  inline float getLongPosn() const;

  inline float getLatPosn() const;

  inline float getHeading() const;

  inline float getSpeed() const;

  inline float getLatVel() const;

  inline float getLongVel() const;

  inline float getLatAccel() const;

  inline float getLongAccel() const;

  inline float getTtc() const;

  inline float getXolc() const;

  inline float getLatEst() const;

  inline float getAccelLatReq() const;

  inline float getAccelLgtReq() const;

  inline float getLength() const;

  inline float getWidth() const;

  inline float getPredLongAccel() const;

  inline float getPredLatAccel() const;

  inline float getPredAccel() const;

  inline float getPredCvt() const;

  inline float getOffsLgtPred() const;

  inline float getOffsLatPred() const;

  inline float getOffsLatManoeuvre() const;

  inline float getOffsLatInPathPrimaryTarget() const;

  inline float getOffsLatInPathCloseEdge() const;

  inline float getOffsLatInPathFarEdge() const;

  inline float getOffsLatIntersection() const;

  inline float getOffsLatMultiTarget() const;

  inline float getAbsHeading() const;

  inline float getLengthSideLgt() const;

  inline float getLengthSideLat() const;

  inline float getSinRotation() const;

  inline float getCosRotation() const;

  inline  ::uint8_t getInpathCurrent() const;

  inline  ::uint8_t getInpathPredict() const;

  inline  ::uint8_t getMatchConf() const;

  inline  ::uint8_t getMotionType() const;

  inline  ::uint8_t getStationary() const;

  inline  ::uint8_t getMovingOncoming() const;

  inline  ::uint8_t getParaVehPred() const;

  inline  ::uint8_t getObsIsVehicle() const;

  inline  ::uint8_t getObsIsMotorVeh() const;

  inline  ::uint8_t getCurvedMotion() const;

  inline  ::uint8_t getSideClosest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsLongSafeObject::Builder {
public:
  typedef AsLongSafeObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getIndex();
  inline void setIndex( ::uint8_t value);

  inline  ::uint8_t getStatus();
  inline void setStatus( ::uint8_t value);

  inline  ::uint16_t getAge();
  inline void setAge( ::uint16_t value);

  inline  ::int32_t getVisTrkid();
  inline void setVisTrkid( ::int32_t value);

  inline  ::int32_t getFusTrkid();
  inline void setFusTrkid( ::int32_t value);

  inline  ::int32_t getObjectClass();
  inline void setObjectClass( ::int32_t value);

  inline  ::int32_t getDetectionSensor();
  inline void setDetectionSensor( ::int32_t value);

  inline float getLongPosn();
  inline void setLongPosn(float value);

  inline float getLatPosn();
  inline void setLatPosn(float value);

  inline float getHeading();
  inline void setHeading(float value);

  inline float getSpeed();
  inline void setSpeed(float value);

  inline float getLatVel();
  inline void setLatVel(float value);

  inline float getLongVel();
  inline void setLongVel(float value);

  inline float getLatAccel();
  inline void setLatAccel(float value);

  inline float getLongAccel();
  inline void setLongAccel(float value);

  inline float getTtc();
  inline void setTtc(float value);

  inline float getXolc();
  inline void setXolc(float value);

  inline float getLatEst();
  inline void setLatEst(float value);

  inline float getAccelLatReq();
  inline void setAccelLatReq(float value);

  inline float getAccelLgtReq();
  inline void setAccelLgtReq(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getPredLongAccel();
  inline void setPredLongAccel(float value);

  inline float getPredLatAccel();
  inline void setPredLatAccel(float value);

  inline float getPredAccel();
  inline void setPredAccel(float value);

  inline float getPredCvt();
  inline void setPredCvt(float value);

  inline float getOffsLgtPred();
  inline void setOffsLgtPred(float value);

  inline float getOffsLatPred();
  inline void setOffsLatPred(float value);

  inline float getOffsLatManoeuvre();
  inline void setOffsLatManoeuvre(float value);

  inline float getOffsLatInPathPrimaryTarget();
  inline void setOffsLatInPathPrimaryTarget(float value);

  inline float getOffsLatInPathCloseEdge();
  inline void setOffsLatInPathCloseEdge(float value);

  inline float getOffsLatInPathFarEdge();
  inline void setOffsLatInPathFarEdge(float value);

  inline float getOffsLatIntersection();
  inline void setOffsLatIntersection(float value);

  inline float getOffsLatMultiTarget();
  inline void setOffsLatMultiTarget(float value);

  inline float getAbsHeading();
  inline void setAbsHeading(float value);

  inline float getLengthSideLgt();
  inline void setLengthSideLgt(float value);

  inline float getLengthSideLat();
  inline void setLengthSideLat(float value);

  inline float getSinRotation();
  inline void setSinRotation(float value);

  inline float getCosRotation();
  inline void setCosRotation(float value);

  inline  ::uint8_t getInpathCurrent();
  inline void setInpathCurrent( ::uint8_t value);

  inline  ::uint8_t getInpathPredict();
  inline void setInpathPredict( ::uint8_t value);

  inline  ::uint8_t getMatchConf();
  inline void setMatchConf( ::uint8_t value);

  inline  ::uint8_t getMotionType();
  inline void setMotionType( ::uint8_t value);

  inline  ::uint8_t getStationary();
  inline void setStationary( ::uint8_t value);

  inline  ::uint8_t getMovingOncoming();
  inline void setMovingOncoming( ::uint8_t value);

  inline  ::uint8_t getParaVehPred();
  inline void setParaVehPred( ::uint8_t value);

  inline  ::uint8_t getObsIsVehicle();
  inline void setObsIsVehicle( ::uint8_t value);

  inline  ::uint8_t getObsIsMotorVeh();
  inline void setObsIsMotorVeh( ::uint8_t value);

  inline  ::uint8_t getCurvedMotion();
  inline void setCurvedMotion( ::uint8_t value);

  inline  ::uint8_t getSideClosest();
  inline void setSideClosest( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsLongSafeObject::Pipeline {
public:
  typedef AsLongSafeObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsScenarioInfo::Reader {
public:
  typedef AsScenarioInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getObjEvaluator() const;

  inline  ::uint32_t getResv1() const;

  inline  ::uint32_t getResv2() const;

  inline  ::uint32_t getResv3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsScenarioInfo::Builder {
public:
  typedef AsScenarioInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getObjEvaluator();
  inline void setObjEvaluator( ::uint32_t value);

  inline  ::uint32_t getResv1();
  inline void setResv1( ::uint32_t value);

  inline  ::uint32_t getResv2();
  inline void setResv2( ::uint32_t value);

  inline  ::uint32_t getResv3();
  inline void setResv3( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsScenarioInfo::Pipeline {
public:
  typedef AsScenarioInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsTimeInfo::Reader {
public:
  typedef AsTimeInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCurTime() const;

  inline  ::uint64_t getFusTime() const;

  inline  ::uint64_t getRoadgeometryTime() const;

  inline  ::uint64_t getVehicleTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsTimeInfo::Builder {
public:
  typedef AsTimeInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCurTime();
  inline void setCurTime( ::uint64_t value);

  inline  ::uint64_t getFusTime();
  inline void setFusTime( ::uint64_t value);

  inline  ::uint64_t getRoadgeometryTime();
  inline void setRoadgeometryTime( ::uint64_t value);

  inline  ::uint64_t getVehicleTime();
  inline void setVehicleTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsTimeInfo::Pipeline {
public:
  typedef AsTimeInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsLongSafeOut::Reader {
public:
  typedef AsLongSafeOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLongsafeAeb() const;
  inline  ::senseAD::msg::tap::AsLongSafeObject::Reader getLongsafeAeb() const;

  inline bool hasLongsafeFcw() const;
  inline  ::senseAD::msg::tap::AsLongSafeObject::Reader getLongsafeFcw() const;

  inline bool hasLongsafeScenario() const;
  inline  ::senseAD::msg::tap::AsScenarioInfo::Reader getLongsafeScenario() const;

  inline  ::uint8_t getLongsafeRollCnt() const;

  inline  ::uint8_t getLongsafeMajorVersion() const;

  inline  ::uint8_t getLongsafeMinorVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsLongSafeOut::Builder {
public:
  typedef AsLongSafeOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLongsafeAeb();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder getLongsafeAeb();
  inline void setLongsafeAeb( ::senseAD::msg::tap::AsLongSafeObject::Reader value);
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder initLongsafeAeb();
  inline void adoptLongsafeAeb(::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> disownLongsafeAeb();

  inline bool hasLongsafeFcw();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder getLongsafeFcw();
  inline void setLongsafeFcw( ::senseAD::msg::tap::AsLongSafeObject::Reader value);
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder initLongsafeFcw();
  inline void adoptLongsafeFcw(::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> disownLongsafeFcw();

  inline bool hasLongsafeScenario();
  inline  ::senseAD::msg::tap::AsScenarioInfo::Builder getLongsafeScenario();
  inline void setLongsafeScenario( ::senseAD::msg::tap::AsScenarioInfo::Reader value);
  inline  ::senseAD::msg::tap::AsScenarioInfo::Builder initLongsafeScenario();
  inline void adoptLongsafeScenario(::capnp::Orphan< ::senseAD::msg::tap::AsScenarioInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsScenarioInfo> disownLongsafeScenario();

  inline  ::uint8_t getLongsafeRollCnt();
  inline void setLongsafeRollCnt( ::uint8_t value);

  inline  ::uint8_t getLongsafeMajorVersion();
  inline void setLongsafeMajorVersion( ::uint8_t value);

  inline  ::uint8_t getLongsafeMinorVersion();
  inline void setLongsafeMinorVersion( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsLongSafeOut::Pipeline {
public:
  typedef AsLongSafeOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline getLongsafeAeb();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline getLongsafeFcw();
  inline  ::senseAD::msg::tap::AsScenarioInfo::Pipeline getLongsafeScenario();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsOnComingObject::Reader {
public:
  typedef AsOnComingObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVcsLongPosn() const;

  inline float getVcsLongVel() const;

  inline float getVcsLongAccel() const;

  inline float getVcsLatPosn() const;

  inline float getVcsLatVel() const;

  inline float getVcsLatAccel() const;

  inline float getWidth() const;

  inline float getLength() const;

  inline float getVcsRmDis() const;

  inline float getCurvHeading() const;

  inline  ::uint8_t getObjectClass() const;

  inline  ::uint8_t getFusionSource() const;

  inline  ::uint8_t getTrackStatus() const;

  inline  ::uint8_t getMovement() const;

  inline  ::uint8_t getCmbbPrimaryConfidence() const;

  inline  ::uint8_t getFcwConfidence() const;

  inline  ::uint8_t getMaturity() const;

  inline  ::uint8_t getVisTrkID() const;

  inline  ::uint8_t getFOncoming() const;

  inline  ::uint8_t getTrackId() const;

  inline  ::uint8_t getOncomConfidence() const;

  inline  ::uint8_t getCollisionProb() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsOnComingObject::Builder {
public:
  typedef AsOnComingObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVcsLongPosn();
  inline void setVcsLongPosn(float value);

  inline float getVcsLongVel();
  inline void setVcsLongVel(float value);

  inline float getVcsLongAccel();
  inline void setVcsLongAccel(float value);

  inline float getVcsLatPosn();
  inline void setVcsLatPosn(float value);

  inline float getVcsLatVel();
  inline void setVcsLatVel(float value);

  inline float getVcsLatAccel();
  inline void setVcsLatAccel(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getVcsRmDis();
  inline void setVcsRmDis(float value);

  inline float getCurvHeading();
  inline void setCurvHeading(float value);

  inline  ::uint8_t getObjectClass();
  inline void setObjectClass( ::uint8_t value);

  inline  ::uint8_t getFusionSource();
  inline void setFusionSource( ::uint8_t value);

  inline  ::uint8_t getTrackStatus();
  inline void setTrackStatus( ::uint8_t value);

  inline  ::uint8_t getMovement();
  inline void setMovement( ::uint8_t value);

  inline  ::uint8_t getCmbbPrimaryConfidence();
  inline void setCmbbPrimaryConfidence( ::uint8_t value);

  inline  ::uint8_t getFcwConfidence();
  inline void setFcwConfidence( ::uint8_t value);

  inline  ::uint8_t getMaturity();
  inline void setMaturity( ::uint8_t value);

  inline  ::uint8_t getVisTrkID();
  inline void setVisTrkID( ::uint8_t value);

  inline  ::uint8_t getFOncoming();
  inline void setFOncoming( ::uint8_t value);

  inline  ::uint8_t getTrackId();
  inline void setTrackId( ::uint8_t value);

  inline  ::uint8_t getOncomConfidence();
  inline void setOncomConfidence( ::uint8_t value);

  inline  ::uint8_t getCollisionProb();
  inline void setCollisionProb( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsOnComingObject::Pipeline {
public:
  typedef AsOnComingObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsOnComingOut::Reader {
public:
  typedef AsOnComingOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOncomTarget1() const;
  inline  ::senseAD::msg::tap::AsOnComingObject::Reader getOncomTarget1() const;

  inline bool hasOncomTarget2() const;
  inline  ::senseAD::msg::tap::AsOnComingObject::Reader getOncomTarget2() const;

  inline bool hasOncomTarget3() const;
  inline  ::senseAD::msg::tap::AsOnComingObject::Reader getOncomTarget3() const;

  inline  ::uint8_t getAsOncomingRollcnt() const;

  inline  ::uint8_t getOncomingMajorVersion() const;

  inline  ::uint8_t getOncomingMinorVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsOnComingOut::Builder {
public:
  typedef AsOnComingOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOncomTarget1();
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder getOncomTarget1();
  inline void setOncomTarget1( ::senseAD::msg::tap::AsOnComingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder initOncomTarget1();
  inline void adoptOncomTarget1(::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> disownOncomTarget1();

  inline bool hasOncomTarget2();
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder getOncomTarget2();
  inline void setOncomTarget2( ::senseAD::msg::tap::AsOnComingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder initOncomTarget2();
  inline void adoptOncomTarget2(::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> disownOncomTarget2();

  inline bool hasOncomTarget3();
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder getOncomTarget3();
  inline void setOncomTarget3( ::senseAD::msg::tap::AsOnComingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOnComingObject::Builder initOncomTarget3();
  inline void adoptOncomTarget3(::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> disownOncomTarget3();

  inline  ::uint8_t getAsOncomingRollcnt();
  inline void setAsOncomingRollcnt( ::uint8_t value);

  inline  ::uint8_t getOncomingMajorVersion();
  inline void setOncomingMajorVersion( ::uint8_t value);

  inline  ::uint8_t getOncomingMinorVersion();
  inline void setOncomingMinorVersion( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsOnComingOut::Pipeline {
public:
  typedef AsOnComingOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline getOncomTarget1();
  inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline getOncomTarget2();
  inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline getOncomTarget3();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsOverTakingObject::Reader {
public:
  typedef AsOverTakingObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVcsLongPosn() const;

  inline float getVcsLongVel() const;

  inline float getVcsLongAccel() const;

  inline float getVcsLatPosn() const;

  inline float getVcsLatVel() const;

  inline float getVcsLatAccel() const;

  inline float getWidth() const;

  inline float getLength() const;

  inline float getVcsHeading() const;

  inline float getConfidence() const;

  inline  ::uint8_t getObjectClass() const;

  inline  ::uint8_t getFusionSource() const;

  inline  ::uint8_t getTrackStatus() const;

  inline  ::uint8_t getVisTrkID() const;

  inline  ::uint8_t getTrackId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsOverTakingObject::Builder {
public:
  typedef AsOverTakingObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVcsLongPosn();
  inline void setVcsLongPosn(float value);

  inline float getVcsLongVel();
  inline void setVcsLongVel(float value);

  inline float getVcsLongAccel();
  inline void setVcsLongAccel(float value);

  inline float getVcsLatPosn();
  inline void setVcsLatPosn(float value);

  inline float getVcsLatVel();
  inline void setVcsLatVel(float value);

  inline float getVcsLatAccel();
  inline void setVcsLatAccel(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getVcsHeading();
  inline void setVcsHeading(float value);

  inline float getConfidence();
  inline void setConfidence(float value);

  inline  ::uint8_t getObjectClass();
  inline void setObjectClass( ::uint8_t value);

  inline  ::uint8_t getFusionSource();
  inline void setFusionSource( ::uint8_t value);

  inline  ::uint8_t getTrackStatus();
  inline void setTrackStatus( ::uint8_t value);

  inline  ::uint8_t getVisTrkID();
  inline void setVisTrkID( ::uint8_t value);

  inline  ::uint8_t getTrackId();
  inline void setTrackId( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsOverTakingObject::Pipeline {
public:
  typedef AsOverTakingObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsOverTakingOut::Reader {
public:
  typedef AsOverTakingOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOvertakeTargetRearLeft() const;
  inline  ::senseAD::msg::tap::AsOverTakingObject::Reader getOvertakeTargetRearLeft() const;

  inline bool hasOvertakeTargetRearRight() const;
  inline  ::senseAD::msg::tap::AsOverTakingObject::Reader getOvertakeTargetRearRight() const;

  inline bool hasOvertakeTargetFrontLeft() const;
  inline  ::senseAD::msg::tap::AsOverTakingObject::Reader getOvertakeTargetFrontLeft() const;

  inline bool hasOvertakeTargetFrontRight() const;
  inline  ::senseAD::msg::tap::AsOverTakingObject::Reader getOvertakeTargetFrontRight() const;

  inline  ::uint8_t getAsOvertakingRollcnt() const;

  inline  ::uint8_t getOvertakingMajorVersion() const;

  inline  ::uint8_t getOvertakingMinorVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsOverTakingOut::Builder {
public:
  typedef AsOverTakingOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOvertakeTargetRearLeft();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder getOvertakeTargetRearLeft();
  inline void setOvertakeTargetRearLeft( ::senseAD::msg::tap::AsOverTakingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder initOvertakeTargetRearLeft();
  inline void adoptOvertakeTargetRearLeft(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> disownOvertakeTargetRearLeft();

  inline bool hasOvertakeTargetRearRight();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder getOvertakeTargetRearRight();
  inline void setOvertakeTargetRearRight( ::senseAD::msg::tap::AsOverTakingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder initOvertakeTargetRearRight();
  inline void adoptOvertakeTargetRearRight(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> disownOvertakeTargetRearRight();

  inline bool hasOvertakeTargetFrontLeft();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder getOvertakeTargetFrontLeft();
  inline void setOvertakeTargetFrontLeft( ::senseAD::msg::tap::AsOverTakingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder initOvertakeTargetFrontLeft();
  inline void adoptOvertakeTargetFrontLeft(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> disownOvertakeTargetFrontLeft();

  inline bool hasOvertakeTargetFrontRight();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder getOvertakeTargetFrontRight();
  inline void setOvertakeTargetFrontRight( ::senseAD::msg::tap::AsOverTakingObject::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingObject::Builder initOvertakeTargetFrontRight();
  inline void adoptOvertakeTargetFrontRight(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> disownOvertakeTargetFrontRight();

  inline  ::uint8_t getAsOvertakingRollcnt();
  inline void setAsOvertakingRollcnt( ::uint8_t value);

  inline  ::uint8_t getOvertakingMajorVersion();
  inline void setOvertakingMajorVersion( ::uint8_t value);

  inline  ::uint8_t getOvertakingMinorVersion();
  inline void setOvertakingMinorVersion( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsOverTakingOut::Pipeline {
public:
  typedef AsOverTakingOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline getOvertakeTargetRearLeft();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline getOvertakeTargetRearRight();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline getOvertakeTargetFrontLeft();
  inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline getOvertakeTargetFrontRight();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsSfObjInfo::Reader {
public:
  typedef AsSfObjInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCrashPointXl() const;

  inline float getCrashProb() const;

  inline float getObjTTC() const;

  inline  ::int32_t getObjID() const;

  inline float getObjHeading() const;

  inline float getObjLongPos() const;

  inline float getObjLatPos() const;

  inline float getObjLongVel() const;

  inline float getObjLatVel() const;

  inline float getObjLongAccel() const;

  inline float getObjLatAceel() const;

  inline float getObjAlertCnt() const;

  inline float getObjAlertCntThresh() const;

  inline float getObjInZone() const;

  inline float getObjAlertLevel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsSfObjInfo::Builder {
public:
  typedef AsSfObjInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCrashPointXl();
  inline void setCrashPointXl(float value);

  inline float getCrashProb();
  inline void setCrashProb(float value);

  inline float getObjTTC();
  inline void setObjTTC(float value);

  inline  ::int32_t getObjID();
  inline void setObjID( ::int32_t value);

  inline float getObjHeading();
  inline void setObjHeading(float value);

  inline float getObjLongPos();
  inline void setObjLongPos(float value);

  inline float getObjLatPos();
  inline void setObjLatPos(float value);

  inline float getObjLongVel();
  inline void setObjLongVel(float value);

  inline float getObjLatVel();
  inline void setObjLatVel(float value);

  inline float getObjLongAccel();
  inline void setObjLongAccel(float value);

  inline float getObjLatAceel();
  inline void setObjLatAceel(float value);

  inline float getObjAlertCnt();
  inline void setObjAlertCnt(float value);

  inline float getObjAlertCntThresh();
  inline void setObjAlertCntThresh(float value);

  inline float getObjInZone();
  inline void setObjInZone(float value);

  inline float getObjAlertLevel();
  inline void setObjAlertLevel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsSfObjInfo::Pipeline {
public:
  typedef AsSfObjInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsDowOut::Reader {
public:
  typedef AsDowOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getLeftAlert() const;

  inline  ::uint32_t getRightAlert() const;

  inline bool hasLeftObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getLeftObj() const;

  inline bool hasRightObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getRightObj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsDowOut::Builder {
public:
  typedef AsDowOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getLeftAlert();
  inline void setLeftAlert( ::uint32_t value);

  inline  ::uint32_t getRightAlert();
  inline void setRightAlert( ::uint32_t value);

  inline bool hasLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getLeftObj();
  inline void setLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initLeftObj();
  inline void adoptLeftObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownLeftObj();

  inline bool hasRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getRightObj();
  inline void setRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initRightObj();
  inline void adoptRightObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownRightObj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsDowOut::Pipeline {
public:
  typedef AsDowOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getRightObj();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsLcdaOut::Reader {
public:
  typedef AsLcdaOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBsdLeftAlert() const;

  inline  ::uint32_t getBsdRightAlert() const;

  inline  ::uint32_t getCvwLeftAlert() const;

  inline  ::uint32_t getCvwRightAlert() const;

  inline bool hasBsdLeftObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getBsdLeftObj() const;

  inline bool hasBsdRightObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getBsdRightObj() const;

  inline bool hasCvwLeftObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getCvwLeftObj() const;

  inline bool hasCvwRightObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getCvwRightObj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsLcdaOut::Builder {
public:
  typedef AsLcdaOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBsdLeftAlert();
  inline void setBsdLeftAlert( ::uint32_t value);

  inline  ::uint32_t getBsdRightAlert();
  inline void setBsdRightAlert( ::uint32_t value);

  inline  ::uint32_t getCvwLeftAlert();
  inline void setCvwLeftAlert( ::uint32_t value);

  inline  ::uint32_t getCvwRightAlert();
  inline void setCvwRightAlert( ::uint32_t value);

  inline bool hasBsdLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getBsdLeftObj();
  inline void setBsdLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initBsdLeftObj();
  inline void adoptBsdLeftObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownBsdLeftObj();

  inline bool hasBsdRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getBsdRightObj();
  inline void setBsdRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initBsdRightObj();
  inline void adoptBsdRightObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownBsdRightObj();

  inline bool hasCvwLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getCvwLeftObj();
  inline void setCvwLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initCvwLeftObj();
  inline void adoptCvwLeftObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownCvwLeftObj();

  inline bool hasCvwRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getCvwRightObj();
  inline void setCvwRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initCvwRightObj();
  inline void adoptCvwRightObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownCvwRightObj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsLcdaOut::Pipeline {
public:
  typedef AsLcdaOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getBsdLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getBsdRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getCvwLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getCvwRightObj();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsCtsOut::Reader {
public:
  typedef AsCtsOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFctaLeftAlert() const;

  inline  ::uint32_t getFctaRightAlert() const;

  inline  ::uint32_t getRctaLeftAlert() const;

  inline  ::uint32_t getRctaRightAlert() const;

  inline bool hasFctaLeftObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getFctaLeftObj() const;

  inline bool hasFctaRightObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getFctaRightObj() const;

  inline bool hasRctaLeftObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getRctaLeftObj() const;

  inline bool hasRctaRightObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getRctaRightObj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCtsOut::Builder {
public:
  typedef AsCtsOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFctaLeftAlert();
  inline void setFctaLeftAlert( ::uint32_t value);

  inline  ::uint32_t getFctaRightAlert();
  inline void setFctaRightAlert( ::uint32_t value);

  inline  ::uint32_t getRctaLeftAlert();
  inline void setRctaLeftAlert( ::uint32_t value);

  inline  ::uint32_t getRctaRightAlert();
  inline void setRctaRightAlert( ::uint32_t value);

  inline bool hasFctaLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getFctaLeftObj();
  inline void setFctaLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initFctaLeftObj();
  inline void adoptFctaLeftObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownFctaLeftObj();

  inline bool hasFctaRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getFctaRightObj();
  inline void setFctaRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initFctaRightObj();
  inline void adoptFctaRightObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownFctaRightObj();

  inline bool hasRctaLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getRctaLeftObj();
  inline void setRctaLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initRctaLeftObj();
  inline void adoptRctaLeftObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownRctaLeftObj();

  inline bool hasRctaRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getRctaRightObj();
  inline void setRctaRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initRctaRightObj();
  inline void adoptRctaRightObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownRctaRightObj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCtsOut::Pipeline {
public:
  typedef AsCtsOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getFctaLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getFctaRightObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getRctaLeftObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getRctaRightObj();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsRcwOut::Reader {
public:
  typedef AsRcwOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRcwAlert() const;

  inline bool hasObj() const;
  inline  ::senseAD::msg::tap::AsSfObjInfo::Reader getObj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsRcwOut::Builder {
public:
  typedef AsRcwOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRcwAlert();
  inline void setRcwAlert( ::uint32_t value);

  inline bool hasObj();
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder getObj();
  inline void setObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value);
  inline  ::senseAD::msg::tap::AsSfObjInfo::Builder initObj();
  inline void adoptObj(::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> disownObj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsRcwOut::Pipeline {
public:
  typedef AsRcwOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline getObj();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsSideFeatureOut::Reader {
public:
  typedef AsSideFeatureOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSfRollingCnt() const;

  inline bool hasDow() const;
  inline  ::senseAD::msg::tap::AsDowOut::Reader getDow() const;

  inline bool hasLcda() const;
  inline  ::senseAD::msg::tap::AsLcdaOut::Reader getLcda() const;

  inline bool hasCts() const;
  inline  ::senseAD::msg::tap::AsCtsOut::Reader getCts() const;

  inline bool hasRcw() const;
  inline  ::senseAD::msg::tap::AsRcwOut::Reader getRcw() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsSideFeatureOut::Builder {
public:
  typedef AsSideFeatureOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSfRollingCnt();
  inline void setSfRollingCnt( ::uint8_t value);

  inline bool hasDow();
  inline  ::senseAD::msg::tap::AsDowOut::Builder getDow();
  inline void setDow( ::senseAD::msg::tap::AsDowOut::Reader value);
  inline  ::senseAD::msg::tap::AsDowOut::Builder initDow();
  inline void adoptDow(::capnp::Orphan< ::senseAD::msg::tap::AsDowOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsDowOut> disownDow();

  inline bool hasLcda();
  inline  ::senseAD::msg::tap::AsLcdaOut::Builder getLcda();
  inline void setLcda( ::senseAD::msg::tap::AsLcdaOut::Reader value);
  inline  ::senseAD::msg::tap::AsLcdaOut::Builder initLcda();
  inline void adoptLcda(::capnp::Orphan< ::senseAD::msg::tap::AsLcdaOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLcdaOut> disownLcda();

  inline bool hasCts();
  inline  ::senseAD::msg::tap::AsCtsOut::Builder getCts();
  inline void setCts( ::senseAD::msg::tap::AsCtsOut::Reader value);
  inline  ::senseAD::msg::tap::AsCtsOut::Builder initCts();
  inline void adoptCts(::capnp::Orphan< ::senseAD::msg::tap::AsCtsOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsCtsOut> disownCts();

  inline bool hasRcw();
  inline  ::senseAD::msg::tap::AsRcwOut::Builder getRcw();
  inline void setRcw( ::senseAD::msg::tap::AsRcwOut::Reader value);
  inline  ::senseAD::msg::tap::AsRcwOut::Builder initRcw();
  inline void adoptRcw(::capnp::Orphan< ::senseAD::msg::tap::AsRcwOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsRcwOut> disownRcw();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsSideFeatureOut::Pipeline {
public:
  typedef AsSideFeatureOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsDowOut::Pipeline getDow();
  inline  ::senseAD::msg::tap::AsLcdaOut::Pipeline getLcda();
  inline  ::senseAD::msg::tap::AsCtsOut::Pipeline getCts();
  inline  ::senseAD::msg::tap::AsRcwOut::Pipeline getRcw();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsCoreOut::Reader {
public:
  typedef AsCoreOut Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLongsafe() const;
  inline  ::senseAD::msg::tap::AsLongSafeOut::Reader getLongsafe() const;

  inline bool hasSideFeature() const;
  inline  ::senseAD::msg::tap::AsSideFeatureOut::Reader getSideFeature() const;

  inline bool hasOnComing() const;
  inline  ::senseAD::msg::tap::AsOnComingOut::Reader getOnComing() const;

  inline bool hasOverTaking() const;
  inline  ::senseAD::msg::tap::AsOverTakingOut::Reader getOverTaking() const;

  inline bool hasTime() const;
  inline  ::senseAD::msg::tap::AsTimeInfo::Reader getTime() const;

  inline  ::uint8_t getActivesafetyRollingcnt() const;

  inline  ::uint8_t getMajorVersion() const;

  inline  ::uint8_t getMiddleVersion() const;

  inline  ::uint8_t getMinorVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCoreOut::Builder {
public:
  typedef AsCoreOut Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLongsafe();
  inline  ::senseAD::msg::tap::AsLongSafeOut::Builder getLongsafe();
  inline void setLongsafe( ::senseAD::msg::tap::AsLongSafeOut::Reader value);
  inline  ::senseAD::msg::tap::AsLongSafeOut::Builder initLongsafe();
  inline void adoptLongsafe(::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeOut> disownLongsafe();

  inline bool hasSideFeature();
  inline  ::senseAD::msg::tap::AsSideFeatureOut::Builder getSideFeature();
  inline void setSideFeature( ::senseAD::msg::tap::AsSideFeatureOut::Reader value);
  inline  ::senseAD::msg::tap::AsSideFeatureOut::Builder initSideFeature();
  inline void adoptSideFeature(::capnp::Orphan< ::senseAD::msg::tap::AsSideFeatureOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsSideFeatureOut> disownSideFeature();

  inline bool hasOnComing();
  inline  ::senseAD::msg::tap::AsOnComingOut::Builder getOnComing();
  inline void setOnComing( ::senseAD::msg::tap::AsOnComingOut::Reader value);
  inline  ::senseAD::msg::tap::AsOnComingOut::Builder initOnComing();
  inline void adoptOnComing(::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut> disownOnComing();

  inline bool hasOverTaking();
  inline  ::senseAD::msg::tap::AsOverTakingOut::Builder getOverTaking();
  inline void setOverTaking( ::senseAD::msg::tap::AsOverTakingOut::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingOut::Builder initOverTaking();
  inline void adoptOverTaking(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut> disownOverTaking();

  inline bool hasTime();
  inline  ::senseAD::msg::tap::AsTimeInfo::Builder getTime();
  inline void setTime( ::senseAD::msg::tap::AsTimeInfo::Reader value);
  inline  ::senseAD::msg::tap::AsTimeInfo::Builder initTime();
  inline void adoptTime(::capnp::Orphan< ::senseAD::msg::tap::AsTimeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsTimeInfo> disownTime();

  inline  ::uint8_t getActivesafetyRollingcnt();
  inline void setActivesafetyRollingcnt( ::uint8_t value);

  inline  ::uint8_t getMajorVersion();
  inline void setMajorVersion( ::uint8_t value);

  inline  ::uint8_t getMiddleVersion();
  inline void setMiddleVersion( ::uint8_t value);

  inline  ::uint8_t getMinorVersion();
  inline void setMinorVersion( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCoreOut::Pipeline {
public:
  typedef AsCoreOut Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::tap::AsLongSafeOut::Pipeline getLongsafe();
  inline  ::senseAD::msg::tap::AsSideFeatureOut::Pipeline getSideFeature();
  inline  ::senseAD::msg::tap::AsOnComingOut::Pipeline getOnComing();
  inline  ::senseAD::msg::tap::AsOverTakingOut::Pipeline getOverTaking();
  inline  ::senseAD::msg::tap::AsTimeInfo::Pipeline getTime();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AsCoreOutMsg::Reader {
public:
  typedef AsCoreOutMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasLongsafeAeb() const;
  inline  ::senseAD::msg::tap::AsLongSafeObject::Reader getLongsafeAeb() const;

  inline bool hasLongsafeFcw() const;
  inline  ::senseAD::msg::tap::AsLongSafeObject::Reader getLongsafeFcw() const;

  inline bool hasOnComing() const;
  inline  ::senseAD::msg::tap::AsOnComingOut::Reader getOnComing() const;

  inline bool hasOverTaking() const;
  inline  ::senseAD::msg::tap::AsOverTakingOut::Reader getOverTaking() const;

  inline  ::uint8_t getActivesafetyRollingcnt() const;

  inline  ::uint8_t getMajorVersion() const;

  inline  ::uint8_t getMiddleVersion() const;

  inline  ::uint8_t getMinorVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AsCoreOutMsg::Builder {
public:
  typedef AsCoreOutMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasLongsafeAeb();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder getLongsafeAeb();
  inline void setLongsafeAeb( ::senseAD::msg::tap::AsLongSafeObject::Reader value);
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder initLongsafeAeb();
  inline void adoptLongsafeAeb(::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> disownLongsafeAeb();

  inline bool hasLongsafeFcw();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder getLongsafeFcw();
  inline void setLongsafeFcw( ::senseAD::msg::tap::AsLongSafeObject::Reader value);
  inline  ::senseAD::msg::tap::AsLongSafeObject::Builder initLongsafeFcw();
  inline void adoptLongsafeFcw(::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> disownLongsafeFcw();

  inline bool hasOnComing();
  inline  ::senseAD::msg::tap::AsOnComingOut::Builder getOnComing();
  inline void setOnComing( ::senseAD::msg::tap::AsOnComingOut::Reader value);
  inline  ::senseAD::msg::tap::AsOnComingOut::Builder initOnComing();
  inline void adoptOnComing(::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut> disownOnComing();

  inline bool hasOverTaking();
  inline  ::senseAD::msg::tap::AsOverTakingOut::Builder getOverTaking();
  inline void setOverTaking( ::senseAD::msg::tap::AsOverTakingOut::Reader value);
  inline  ::senseAD::msg::tap::AsOverTakingOut::Builder initOverTaking();
  inline void adoptOverTaking(::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut> disownOverTaking();

  inline  ::uint8_t getActivesafetyRollingcnt();
  inline void setActivesafetyRollingcnt( ::uint8_t value);

  inline  ::uint8_t getMajorVersion();
  inline void setMajorVersion( ::uint8_t value);

  inline  ::uint8_t getMiddleVersion();
  inline void setMiddleVersion( ::uint8_t value);

  inline  ::uint8_t getMinorVersion();
  inline void setMinorVersion( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AsCoreOutMsg::Pipeline {
public:
  typedef AsCoreOutMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline getLongsafeAeb();
  inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline getLongsafeFcw();
  inline  ::senseAD::msg::tap::AsOnComingOut::Pipeline getOnComing();
  inline  ::senseAD::msg::tap::AsOverTakingOut::Pipeline getOverTaking();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t AsLongSafeObject::Reader::getIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AsLongSafeObject::Reader::getAge() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AsLongSafeObject::Builder::getAge() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setAge( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AsLongSafeObject::Reader::getVisTrkid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AsLongSafeObject::Builder::getVisTrkid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setVisTrkid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AsLongSafeObject::Reader::getFusTrkid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AsLongSafeObject::Builder::getFusTrkid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setFusTrkid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AsLongSafeObject::Reader::getObjectClass() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AsLongSafeObject::Builder::getObjectClass() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setObjectClass( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AsLongSafeObject::Reader::getDetectionSensor() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AsLongSafeObject::Builder::getDetectionSensor() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setDetectionSensor( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLongPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLongPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLongPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLatPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLatPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLatPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getTtc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getTtc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setTtc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getXolc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getXolc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setXolc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLatEst() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLatEst() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLatEst(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getAccelLatReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getAccelLatReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setAccelLatReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getAccelLgtReq() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getAccelLgtReq() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setAccelLgtReq(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getPredLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getPredLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setPredLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getPredLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getPredLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setPredLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getPredAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getPredAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setPredAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getPredCvt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getPredCvt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setPredCvt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLgtPred() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLgtPred() {
  return _builder.getDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLgtPred(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatPred() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatPred() {
  return _builder.getDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatPred(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatManoeuvre() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatManoeuvre() {
  return _builder.getDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatManoeuvre(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatInPathPrimaryTarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatInPathPrimaryTarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatInPathPrimaryTarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatInPathCloseEdge() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatInPathCloseEdge() {
  return _builder.getDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatInPathCloseEdge(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatInPathFarEdge() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatInPathFarEdge() {
  return _builder.getDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatInPathFarEdge(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatIntersection() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatIntersection() {
  return _builder.getDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatIntersection(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getOffsLatMultiTarget() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getOffsLatMultiTarget() {
  return _builder.getDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setOffsLatMultiTarget(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getAbsHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getAbsHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setAbsHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLengthSideLgt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLengthSideLgt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLengthSideLgt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getLengthSideLat() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getLengthSideLat() {
  return _builder.getDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setLengthSideLat(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getSinRotation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getSinRotation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setSinRotation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline float AsLongSafeObject::Reader::getCosRotation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline float AsLongSafeObject::Builder::getCosRotation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setCosRotation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getInpathCurrent() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getInpathCurrent() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setInpathCurrent( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getInpathPredict() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getInpathPredict() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setInpathPredict( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getMatchConf() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getMatchConf() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setMatchConf( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getMotionType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getMotionType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setMotionType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getStationary() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getStationary() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setStationary( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getMovingOncoming() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getMovingOncoming() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setMovingOncoming( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getParaVehPred() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getParaVehPred() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setParaVehPred( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getObsIsVehicle() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getObsIsVehicle() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setObsIsVehicle( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getObsIsMotorVeh() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getObsIsMotorVeh() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setObsIsMotorVeh( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getCurvedMotion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getCurvedMotion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setCurvedMotion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeObject::Reader::getSideClosest() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeObject::Builder::getSideClosest() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeObject::Builder::setSideClosest( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<158>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsScenarioInfo::Reader::getObjEvaluator() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsScenarioInfo::Builder::getObjEvaluator() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsScenarioInfo::Builder::setObjEvaluator( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsScenarioInfo::Reader::getResv1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsScenarioInfo::Builder::getResv1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsScenarioInfo::Builder::setResv1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsScenarioInfo::Reader::getResv2() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsScenarioInfo::Builder::getResv2() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsScenarioInfo::Builder::setResv2( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsScenarioInfo::Reader::getResv3() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsScenarioInfo::Builder::getResv3() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsScenarioInfo::Builder::setResv3( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AsTimeInfo::Reader::getCurTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AsTimeInfo::Builder::getCurTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsTimeInfo::Builder::setCurTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AsTimeInfo::Reader::getFusTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AsTimeInfo::Builder::getFusTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsTimeInfo::Builder::setFusTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AsTimeInfo::Reader::getRoadgeometryTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AsTimeInfo::Builder::getRoadgeometryTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsTimeInfo::Builder::setRoadgeometryTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AsTimeInfo::Reader::getVehicleTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AsTimeInfo::Builder::getVehicleTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsTimeInfo::Builder::setVehicleTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AsLongSafeOut::Reader::hasLongsafeAeb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsLongSafeOut::Builder::hasLongsafeAeb() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Reader AsLongSafeOut::Reader::getLongsafeAeb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsLongSafeOut::Builder::getLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline AsLongSafeOut::Pipeline::getLongsafeAeb() {
  return  ::senseAD::msg::tap::AsLongSafeObject::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsLongSafeOut::Builder::setLongsafeAeb( ::senseAD::msg::tap::AsLongSafeObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsLongSafeOut::Builder::initLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsLongSafeOut::Builder::adoptLongsafeAeb(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> AsLongSafeOut::Builder::disownLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsLongSafeOut::Reader::hasLongsafeFcw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsLongSafeOut::Builder::hasLongsafeFcw() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Reader AsLongSafeOut::Reader::getLongsafeFcw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsLongSafeOut::Builder::getLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline AsLongSafeOut::Pipeline::getLongsafeFcw() {
  return  ::senseAD::msg::tap::AsLongSafeObject::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsLongSafeOut::Builder::setLongsafeFcw( ::senseAD::msg::tap::AsLongSafeObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsLongSafeOut::Builder::initLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsLongSafeOut::Builder::adoptLongsafeFcw(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> AsLongSafeOut::Builder::disownLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsLongSafeOut::Reader::hasLongsafeScenario() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsLongSafeOut::Builder::hasLongsafeScenario() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsScenarioInfo::Reader AsLongSafeOut::Reader::getLongsafeScenario() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsScenarioInfo::Builder AsLongSafeOut::Builder::getLongsafeScenario() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsScenarioInfo::Pipeline AsLongSafeOut::Pipeline::getLongsafeScenario() {
  return  ::senseAD::msg::tap::AsScenarioInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsLongSafeOut::Builder::setLongsafeScenario( ::senseAD::msg::tap::AsScenarioInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsScenarioInfo::Builder AsLongSafeOut::Builder::initLongsafeScenario() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsLongSafeOut::Builder::adoptLongsafeScenario(
    ::capnp::Orphan< ::senseAD::msg::tap::AsScenarioInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsScenarioInfo> AsLongSafeOut::Builder::disownLongsafeScenario() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsScenarioInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsLongSafeOut::Reader::getLongsafeRollCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeOut::Builder::getLongsafeRollCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeOut::Builder::setLongsafeRollCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeOut::Reader::getLongsafeMajorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeOut::Builder::getLongsafeMajorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeOut::Builder::setLongsafeMajorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsLongSafeOut::Reader::getLongsafeMinorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsLongSafeOut::Builder::getLongsafeMinorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsLongSafeOut::Builder::setLongsafeMinorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLongPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLongPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLongPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLatPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLatPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLatPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getVcsRmDis() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getVcsRmDis() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVcsRmDis(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsOnComingObject::Reader::getCurvHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsOnComingObject::Builder::getCurvHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setCurvHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getObjectClass() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getObjectClass() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setObjectClass( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getFusionSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getFusionSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setFusionSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getTrackStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getTrackStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setTrackStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getMovement() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getMovement() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setMovement( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getCmbbPrimaryConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getCmbbPrimaryConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setCmbbPrimaryConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getFcwConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getFcwConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setFcwConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getMaturity() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getMaturity() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setMaturity( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getVisTrkID() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getVisTrkID() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setVisTrkID( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getFOncoming() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getFOncoming() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setFOncoming( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getTrackId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getTrackId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setTrackId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getOncomConfidence() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getOncomConfidence() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setOncomConfidence( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingObject::Reader::getCollisionProb() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingObject::Builder::getCollisionProb() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void AsOnComingObject::Builder::setCollisionProb( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline bool AsOnComingOut::Reader::hasOncomTarget1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsOnComingOut::Builder::hasOncomTarget1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOnComingObject::Reader AsOnComingOut::Reader::getOncomTarget1() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::getOncomTarget1() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline AsOnComingOut::Pipeline::getOncomTarget1() {
  return  ::senseAD::msg::tap::AsOnComingObject::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsOnComingOut::Builder::setOncomTarget1( ::senseAD::msg::tap::AsOnComingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::initOncomTarget1() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsOnComingOut::Builder::adoptOncomTarget1(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> AsOnComingOut::Builder::disownOncomTarget1() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsOnComingOut::Reader::hasOncomTarget2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsOnComingOut::Builder::hasOncomTarget2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOnComingObject::Reader AsOnComingOut::Reader::getOncomTarget2() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::getOncomTarget2() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline AsOnComingOut::Pipeline::getOncomTarget2() {
  return  ::senseAD::msg::tap::AsOnComingObject::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsOnComingOut::Builder::setOncomTarget2( ::senseAD::msg::tap::AsOnComingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::initOncomTarget2() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsOnComingOut::Builder::adoptOncomTarget2(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> AsOnComingOut::Builder::disownOncomTarget2() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsOnComingOut::Reader::hasOncomTarget3() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsOnComingOut::Builder::hasOncomTarget3() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOnComingObject::Reader AsOnComingOut::Reader::getOncomTarget3() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::getOncomTarget3() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOnComingObject::Pipeline AsOnComingOut::Pipeline::getOncomTarget3() {
  return  ::senseAD::msg::tap::AsOnComingObject::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsOnComingOut::Builder::setOncomTarget3( ::senseAD::msg::tap::AsOnComingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOnComingObject::Builder AsOnComingOut::Builder::initOncomTarget3() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsOnComingOut::Builder::adoptOncomTarget3(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingObject> AsOnComingOut::Builder::disownOncomTarget3() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsOnComingOut::Reader::getAsOncomingRollcnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingOut::Builder::getAsOncomingRollcnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsOnComingOut::Builder::setAsOncomingRollcnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingOut::Reader::getOncomingMajorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingOut::Builder::getOncomingMajorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsOnComingOut::Builder::setOncomingMajorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOnComingOut::Reader::getOncomingMinorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOnComingOut::Builder::getOncomingMinorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsOnComingOut::Builder::setOncomingMinorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLongPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLongPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLongPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLatPosn() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLatPosn() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLatPosn(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsLatAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsLatAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsLatAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getVcsHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getVcsHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVcsHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsOverTakingObject::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsOverTakingObject::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingObject::Reader::getObjectClass() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingObject::Builder::getObjectClass() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setObjectClass( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingObject::Reader::getFusionSource() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingObject::Builder::getFusionSource() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setFusionSource( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<41>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingObject::Reader::getTrackStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingObject::Builder::getTrackStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setTrackStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingObject::Reader::getVisTrkID() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingObject::Builder::getVisTrkID() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setVisTrkID( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingObject::Reader::getTrackId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingObject::Builder::getTrackId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingObject::Builder::setTrackId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline bool AsOverTakingOut::Reader::hasOvertakeTargetRearLeft() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsOverTakingOut::Builder::hasOvertakeTargetRearLeft() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Reader AsOverTakingOut::Reader::getOvertakeTargetRearLeft() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::getOvertakeTargetRearLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline AsOverTakingOut::Pipeline::getOvertakeTargetRearLeft() {
  return  ::senseAD::msg::tap::AsOverTakingObject::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsOverTakingOut::Builder::setOvertakeTargetRearLeft( ::senseAD::msg::tap::AsOverTakingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::initOvertakeTargetRearLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsOverTakingOut::Builder::adoptOvertakeTargetRearLeft(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> AsOverTakingOut::Builder::disownOvertakeTargetRearLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsOverTakingOut::Reader::hasOvertakeTargetRearRight() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsOverTakingOut::Builder::hasOvertakeTargetRearRight() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Reader AsOverTakingOut::Reader::getOvertakeTargetRearRight() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::getOvertakeTargetRearRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline AsOverTakingOut::Pipeline::getOvertakeTargetRearRight() {
  return  ::senseAD::msg::tap::AsOverTakingObject::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsOverTakingOut::Builder::setOvertakeTargetRearRight( ::senseAD::msg::tap::AsOverTakingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::initOvertakeTargetRearRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsOverTakingOut::Builder::adoptOvertakeTargetRearRight(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> AsOverTakingOut::Builder::disownOvertakeTargetRearRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsOverTakingOut::Reader::hasOvertakeTargetFrontLeft() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsOverTakingOut::Builder::hasOvertakeTargetFrontLeft() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Reader AsOverTakingOut::Reader::getOvertakeTargetFrontLeft() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::getOvertakeTargetFrontLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline AsOverTakingOut::Pipeline::getOvertakeTargetFrontLeft() {
  return  ::senseAD::msg::tap::AsOverTakingObject::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsOverTakingOut::Builder::setOvertakeTargetFrontLeft( ::senseAD::msg::tap::AsOverTakingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::initOvertakeTargetFrontLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsOverTakingOut::Builder::adoptOvertakeTargetFrontLeft(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> AsOverTakingOut::Builder::disownOvertakeTargetFrontLeft() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsOverTakingOut::Reader::hasOvertakeTargetFrontRight() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsOverTakingOut::Builder::hasOvertakeTargetFrontRight() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Reader AsOverTakingOut::Reader::getOvertakeTargetFrontRight() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::getOvertakeTargetFrontRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingObject::Pipeline AsOverTakingOut::Pipeline::getOvertakeTargetFrontRight() {
  return  ::senseAD::msg::tap::AsOverTakingObject::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsOverTakingOut::Builder::setOvertakeTargetFrontRight( ::senseAD::msg::tap::AsOverTakingObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingObject::Builder AsOverTakingOut::Builder::initOvertakeTargetFrontRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsOverTakingOut::Builder::adoptOvertakeTargetFrontRight(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingObject> AsOverTakingOut::Builder::disownOvertakeTargetFrontRight() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingObject>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsOverTakingOut::Reader::getAsOvertakingRollcnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingOut::Builder::getAsOvertakingRollcnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingOut::Builder::setAsOvertakingRollcnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingOut::Reader::getOvertakingMajorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingOut::Builder::getOvertakingMajorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingOut::Builder::setOvertakingMajorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsOverTakingOut::Reader::getOvertakingMinorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsOverTakingOut::Builder::getOvertakingMinorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsOverTakingOut::Builder::setOvertakingMinorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getCrashPointXl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getCrashPointXl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setCrashPointXl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getCrashProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getCrashProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setCrashProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjTTC() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjTTC() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjTTC(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AsSfObjInfo::Reader::getObjID() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AsSfObjInfo::Builder::getObjID() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjID( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLongPos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLongPos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLongPos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLatPos() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLatPos() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLatPos(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLongVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLongVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLongVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLatVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLatVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLatVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLongAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLongAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLongAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjLatAceel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjLatAceel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjLatAceel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjAlertCnt() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjAlertCnt() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjAlertCnt(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjAlertCntThresh() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjAlertCntThresh() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjAlertCntThresh(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjInZone() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjInZone() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjInZone(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float AsSfObjInfo::Reader::getObjAlertLevel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float AsSfObjInfo::Builder::getObjAlertLevel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AsSfObjInfo::Builder::setObjAlertLevel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDowOut::Reader::getLeftAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDowOut::Builder::getLeftAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsDowOut::Builder::setLeftAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsDowOut::Reader::getRightAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsDowOut::Builder::getRightAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsDowOut::Builder::setRightAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AsDowOut::Reader::hasLeftObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsDowOut::Builder::hasLeftObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsDowOut::Reader::getLeftObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsDowOut::Builder::getLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsDowOut::Pipeline::getLeftObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsDowOut::Builder::setLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsDowOut::Builder::initLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsDowOut::Builder::adoptLeftObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsDowOut::Builder::disownLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsDowOut::Reader::hasRightObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsDowOut::Builder::hasRightObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsDowOut::Reader::getRightObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsDowOut::Builder::getRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsDowOut::Pipeline::getRightObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsDowOut::Builder::setRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsDowOut::Builder::initRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsDowOut::Builder::adoptRightObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsDowOut::Builder::disownRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsLcdaOut::Reader::getBsdLeftAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsLcdaOut::Builder::getBsdLeftAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsLcdaOut::Builder::setBsdLeftAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsLcdaOut::Reader::getBsdRightAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsLcdaOut::Builder::getBsdRightAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsLcdaOut::Builder::setBsdRightAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsLcdaOut::Reader::getCvwLeftAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsLcdaOut::Builder::getCvwLeftAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsLcdaOut::Builder::setCvwLeftAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsLcdaOut::Reader::getCvwRightAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsLcdaOut::Builder::getCvwRightAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsLcdaOut::Builder::setCvwRightAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AsLcdaOut::Reader::hasBsdLeftObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsLcdaOut::Builder::hasBsdLeftObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsLcdaOut::Reader::getBsdLeftObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::getBsdLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsLcdaOut::Pipeline::getBsdLeftObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsLcdaOut::Builder::setBsdLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::initBsdLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsLcdaOut::Builder::adoptBsdLeftObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsLcdaOut::Builder::disownBsdLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsLcdaOut::Reader::hasBsdRightObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsLcdaOut::Builder::hasBsdRightObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsLcdaOut::Reader::getBsdRightObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::getBsdRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsLcdaOut::Pipeline::getBsdRightObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsLcdaOut::Builder::setBsdRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::initBsdRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsLcdaOut::Builder::adoptBsdRightObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsLcdaOut::Builder::disownBsdRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsLcdaOut::Reader::hasCvwLeftObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsLcdaOut::Builder::hasCvwLeftObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsLcdaOut::Reader::getCvwLeftObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::getCvwLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsLcdaOut::Pipeline::getCvwLeftObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsLcdaOut::Builder::setCvwLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::initCvwLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsLcdaOut::Builder::adoptCvwLeftObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsLcdaOut::Builder::disownCvwLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsLcdaOut::Reader::hasCvwRightObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsLcdaOut::Builder::hasCvwRightObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsLcdaOut::Reader::getCvwRightObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::getCvwRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsLcdaOut::Pipeline::getCvwRightObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsLcdaOut::Builder::setCvwRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsLcdaOut::Builder::initCvwRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsLcdaOut::Builder::adoptCvwRightObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsLcdaOut::Builder::disownCvwRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsCtsOut::Reader::getFctaLeftAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCtsOut::Builder::getFctaLeftAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCtsOut::Builder::setFctaLeftAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCtsOut::Reader::getFctaRightAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCtsOut::Builder::getFctaRightAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCtsOut::Builder::setFctaRightAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCtsOut::Reader::getRctaLeftAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCtsOut::Builder::getRctaLeftAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCtsOut::Builder::setRctaLeftAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AsCtsOut::Reader::getRctaRightAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsCtsOut::Builder::getRctaRightAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCtsOut::Builder::setRctaRightAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AsCtsOut::Reader::hasFctaLeftObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsCtsOut::Builder::hasFctaLeftObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsCtsOut::Reader::getFctaLeftObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::getFctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsCtsOut::Pipeline::getFctaLeftObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsCtsOut::Builder::setFctaLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::initFctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsCtsOut::Builder::adoptFctaLeftObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsCtsOut::Builder::disownFctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsCtsOut::Reader::hasFctaRightObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsCtsOut::Builder::hasFctaRightObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsCtsOut::Reader::getFctaRightObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::getFctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsCtsOut::Pipeline::getFctaRightObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsCtsOut::Builder::setFctaRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::initFctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsCtsOut::Builder::adoptFctaRightObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsCtsOut::Builder::disownFctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsCtsOut::Reader::hasRctaLeftObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsCtsOut::Builder::hasRctaLeftObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsCtsOut::Reader::getRctaLeftObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::getRctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsCtsOut::Pipeline::getRctaLeftObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsCtsOut::Builder::setRctaLeftObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::initRctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsCtsOut::Builder::adoptRctaLeftObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsCtsOut::Builder::disownRctaLeftObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsCtsOut::Reader::hasRctaRightObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsCtsOut::Builder::hasRctaRightObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsCtsOut::Reader::getRctaRightObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::getRctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsCtsOut::Pipeline::getRctaRightObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsCtsOut::Builder::setRctaRightObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsCtsOut::Builder::initRctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsCtsOut::Builder::adoptRctaRightObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsCtsOut::Builder::disownRctaRightObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t AsRcwOut::Reader::getRcwAlert() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AsRcwOut::Builder::getRcwAlert() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsRcwOut::Builder::setRcwAlert( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AsRcwOut::Reader::hasObj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsRcwOut::Builder::hasObj() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Reader AsRcwOut::Reader::getObj() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsRcwOut::Builder::getObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSfObjInfo::Pipeline AsRcwOut::Pipeline::getObj() {
  return  ::senseAD::msg::tap::AsSfObjInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsRcwOut::Builder::setObj( ::senseAD::msg::tap::AsSfObjInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSfObjInfo::Builder AsRcwOut::Builder::initObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsRcwOut::Builder::adoptObj(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSfObjInfo> AsRcwOut::Builder::disownObj() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSfObjInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsSideFeatureOut::Reader::getSfRollingCnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsSideFeatureOut::Builder::getSfRollingCnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsSideFeatureOut::Builder::setSfRollingCnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AsSideFeatureOut::Reader::hasDow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsSideFeatureOut::Builder::hasDow() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsDowOut::Reader AsSideFeatureOut::Reader::getDow() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsDowOut::Builder AsSideFeatureOut::Builder::getDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsDowOut::Pipeline AsSideFeatureOut::Pipeline::getDow() {
  return  ::senseAD::msg::tap::AsDowOut::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsSideFeatureOut::Builder::setDow( ::senseAD::msg::tap::AsDowOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsDowOut::Builder AsSideFeatureOut::Builder::initDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsSideFeatureOut::Builder::adoptDow(
    ::capnp::Orphan< ::senseAD::msg::tap::AsDowOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsDowOut> AsSideFeatureOut::Builder::disownDow() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsDowOut>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsSideFeatureOut::Reader::hasLcda() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsSideFeatureOut::Builder::hasLcda() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLcdaOut::Reader AsSideFeatureOut::Reader::getLcda() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLcdaOut::Builder AsSideFeatureOut::Builder::getLcda() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLcdaOut::Pipeline AsSideFeatureOut::Pipeline::getLcda() {
  return  ::senseAD::msg::tap::AsLcdaOut::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsSideFeatureOut::Builder::setLcda( ::senseAD::msg::tap::AsLcdaOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLcdaOut::Builder AsSideFeatureOut::Builder::initLcda() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsSideFeatureOut::Builder::adoptLcda(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLcdaOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLcdaOut> AsSideFeatureOut::Builder::disownLcda() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLcdaOut>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsSideFeatureOut::Reader::hasCts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsSideFeatureOut::Builder::hasCts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsCtsOut::Reader AsSideFeatureOut::Reader::getCts() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsCtsOut::Builder AsSideFeatureOut::Builder::getCts() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsCtsOut::Pipeline AsSideFeatureOut::Pipeline::getCts() {
  return  ::senseAD::msg::tap::AsCtsOut::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsSideFeatureOut::Builder::setCts( ::senseAD::msg::tap::AsCtsOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsCtsOut::Builder AsSideFeatureOut::Builder::initCts() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsSideFeatureOut::Builder::adoptCts(
    ::capnp::Orphan< ::senseAD::msg::tap::AsCtsOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsCtsOut> AsSideFeatureOut::Builder::disownCts() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsCtsOut>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsSideFeatureOut::Reader::hasRcw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsSideFeatureOut::Builder::hasRcw() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsRcwOut::Reader AsSideFeatureOut::Reader::getRcw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsRcwOut::Builder AsSideFeatureOut::Builder::getRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsRcwOut::Pipeline AsSideFeatureOut::Pipeline::getRcw() {
  return  ::senseAD::msg::tap::AsRcwOut::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsSideFeatureOut::Builder::setRcw( ::senseAD::msg::tap::AsRcwOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsRcwOut::Builder AsSideFeatureOut::Builder::initRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsSideFeatureOut::Builder::adoptRcw(
    ::capnp::Orphan< ::senseAD::msg::tap::AsRcwOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsRcwOut> AsSideFeatureOut::Builder::disownRcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsRcwOut>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AsCoreOut::Reader::hasLongsafe() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOut::Builder::hasLongsafe() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLongSafeOut::Reader AsCoreOut::Reader::getLongsafe() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLongSafeOut::Builder AsCoreOut::Builder::getLongsafe() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLongSafeOut::Pipeline AsCoreOut::Pipeline::getLongsafe() {
  return  ::senseAD::msg::tap::AsLongSafeOut::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsCoreOut::Builder::setLongsafe( ::senseAD::msg::tap::AsLongSafeOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLongSafeOut::Builder AsCoreOut::Builder::initLongsafe() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsCoreOut::Builder::adoptLongsafe(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeOut> AsCoreOut::Builder::disownLongsafe() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeOut>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsCoreOut::Reader::hasSideFeature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOut::Builder::hasSideFeature() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsSideFeatureOut::Reader AsCoreOut::Reader::getSideFeature() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsSideFeatureOut::Builder AsCoreOut::Builder::getSideFeature() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsSideFeatureOut::Pipeline AsCoreOut::Pipeline::getSideFeature() {
  return  ::senseAD::msg::tap::AsSideFeatureOut::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsCoreOut::Builder::setSideFeature( ::senseAD::msg::tap::AsSideFeatureOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsSideFeatureOut::Builder AsCoreOut::Builder::initSideFeature() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsCoreOut::Builder::adoptSideFeature(
    ::capnp::Orphan< ::senseAD::msg::tap::AsSideFeatureOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsSideFeatureOut> AsCoreOut::Builder::disownSideFeature() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsSideFeatureOut>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsCoreOut::Reader::hasOnComing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOut::Builder::hasOnComing() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOnComingOut::Reader AsCoreOut::Reader::getOnComing() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOnComingOut::Builder AsCoreOut::Builder::getOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOnComingOut::Pipeline AsCoreOut::Pipeline::getOnComing() {
  return  ::senseAD::msg::tap::AsOnComingOut::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsCoreOut::Builder::setOnComing( ::senseAD::msg::tap::AsOnComingOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOnComingOut::Builder AsCoreOut::Builder::initOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsCoreOut::Builder::adoptOnComing(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut> AsCoreOut::Builder::disownOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsCoreOut::Reader::hasOverTaking() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOut::Builder::hasOverTaking() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Reader AsCoreOut::Reader::getOverTaking() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Builder AsCoreOut::Builder::getOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingOut::Pipeline AsCoreOut::Pipeline::getOverTaking() {
  return  ::senseAD::msg::tap::AsOverTakingOut::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsCoreOut::Builder::setOverTaking( ::senseAD::msg::tap::AsOverTakingOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Builder AsCoreOut::Builder::initOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsCoreOut::Builder::adoptOverTaking(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut> AsCoreOut::Builder::disownOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AsCoreOut::Reader::hasTime() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOut::Builder::hasTime() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsTimeInfo::Reader AsCoreOut::Reader::getTime() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsTimeInfo::Builder AsCoreOut::Builder::getTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsTimeInfo::Pipeline AsCoreOut::Pipeline::getTime() {
  return  ::senseAD::msg::tap::AsTimeInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AsCoreOut::Builder::setTime( ::senseAD::msg::tap::AsTimeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsTimeInfo::Builder AsCoreOut::Builder::initTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AsCoreOut::Builder::adoptTime(
    ::capnp::Orphan< ::senseAD::msg::tap::AsTimeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsTimeInfo> AsCoreOut::Builder::disownTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsTimeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsCoreOut::Reader::getActivesafetyRollingcnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOut::Builder::getActivesafetyRollingcnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCoreOut::Builder::setActivesafetyRollingcnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOut::Reader::getMajorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOut::Builder::getMajorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCoreOut::Builder::setMajorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOut::Reader::getMiddleVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOut::Builder::getMiddleVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCoreOut::Builder::setMiddleVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOut::Reader::getMinorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOut::Builder::getMinorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCoreOut::Builder::setMinorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AsCoreOutMsg::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOutMsg::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AsCoreOutMsg::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsCoreOutMsg::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AsCoreOutMsg::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AsCoreOutMsg::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AsCoreOutMsg::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AsCoreOutMsg::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AsCoreOutMsg::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AsCoreOutMsg::Reader::hasLongsafeAeb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOutMsg::Builder::hasLongsafeAeb() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Reader AsCoreOutMsg::Reader::getLongsafeAeb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsCoreOutMsg::Builder::getLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline AsCoreOutMsg::Pipeline::getLongsafeAeb() {
  return  ::senseAD::msg::tap::AsLongSafeObject::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AsCoreOutMsg::Builder::setLongsafeAeb( ::senseAD::msg::tap::AsLongSafeObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsCoreOutMsg::Builder::initLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AsCoreOutMsg::Builder::adoptLongsafeAeb(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> AsCoreOutMsg::Builder::disownLongsafeAeb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AsCoreOutMsg::Reader::hasLongsafeFcw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOutMsg::Builder::hasLongsafeFcw() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Reader AsCoreOutMsg::Reader::getLongsafeFcw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsCoreOutMsg::Builder::getLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsLongSafeObject::Pipeline AsCoreOutMsg::Pipeline::getLongsafeFcw() {
  return  ::senseAD::msg::tap::AsLongSafeObject::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AsCoreOutMsg::Builder::setLongsafeFcw( ::senseAD::msg::tap::AsLongSafeObject::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsLongSafeObject::Builder AsCoreOutMsg::Builder::initLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AsCoreOutMsg::Builder::adoptLongsafeFcw(
    ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsLongSafeObject> AsCoreOutMsg::Builder::disownLongsafeFcw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsLongSafeObject>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AsCoreOutMsg::Reader::hasOnComing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOutMsg::Builder::hasOnComing() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOnComingOut::Reader AsCoreOutMsg::Reader::getOnComing() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOnComingOut::Builder AsCoreOutMsg::Builder::getOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOnComingOut::Pipeline AsCoreOutMsg::Pipeline::getOnComing() {
  return  ::senseAD::msg::tap::AsOnComingOut::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AsCoreOutMsg::Builder::setOnComing( ::senseAD::msg::tap::AsOnComingOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOnComingOut::Builder AsCoreOutMsg::Builder::initOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AsCoreOutMsg::Builder::adoptOnComing(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOnComingOut> AsCoreOutMsg::Builder::disownOnComing() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOnComingOut>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AsCoreOutMsg::Reader::hasOverTaking() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AsCoreOutMsg::Builder::hasOverTaking() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Reader AsCoreOutMsg::Reader::getOverTaking() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Builder AsCoreOutMsg::Builder::getOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::tap::AsOverTakingOut::Pipeline AsCoreOutMsg::Pipeline::getOverTaking() {
  return  ::senseAD::msg::tap::AsOverTakingOut::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AsCoreOutMsg::Builder::setOverTaking( ::senseAD::msg::tap::AsOverTakingOut::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::tap::AsOverTakingOut::Builder AsCoreOutMsg::Builder::initOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AsCoreOutMsg::Builder::adoptOverTaking(
    ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::tap::AsOverTakingOut> AsCoreOutMsg::Builder::disownOverTaking() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::tap::AsOverTakingOut>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint8_t AsCoreOutMsg::Reader::getActivesafetyRollingcnt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOutMsg::Builder::getActivesafetyRollingcnt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AsCoreOutMsg::Builder::setActivesafetyRollingcnt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOutMsg::Reader::getMajorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOutMsg::Builder::getMajorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AsCoreOutMsg::Builder::setMajorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOutMsg::Reader::getMiddleVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOutMsg::Builder::getMiddleVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AsCoreOutMsg::Builder::setMiddleVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AsCoreOutMsg::Reader::getMinorVersion() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AsCoreOutMsg::Builder::getMinorVersion() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AsCoreOutMsg::Builder::setMinorVersion( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

