// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: act_acan.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(957687863510f05b);
CAPNP_DECLARE_SCHEMA(c92e1b89350f99f7);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace act_acan {

struct Bcs2A {
  Bcs2A() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(957687863510f05b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActAcan {
  ActAcan() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c92e1b89350f99f7, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Bcs2A::Reader {
public:
  typedef Bcs2A Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getBcsAbsActiveSt() const;

  inline  ::uint8_t getBcsAbsFaultSt() const;

  inline  ::uint8_t getBcsEbdActiveSt() const;

  inline  ::uint8_t getBcsEbdFaultSt() const;

  inline  ::uint8_t getBcsEngTorqDecActiveStFa() const;

  inline  ::uint8_t getBcsEngTorqIncActiveSt() const;

  inline  ::uint8_t getBcsTcsActiveSt() const;

  inline  ::uint8_t getBcsTcsFaultSt() const;

  inline  ::uint8_t getBcsVdcActiveSt() const;

  inline  ::uint8_t getBcsVdcFaultSt() const;

  inline float getBcsVehSpd() const;

  inline  ::uint8_t getBcsVehSpdVd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bcs2A::Builder {
public:
  typedef Bcs2A Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getBcsAbsActiveSt();
  inline void setBcsAbsActiveSt( ::uint8_t value);

  inline  ::uint8_t getBcsAbsFaultSt();
  inline void setBcsAbsFaultSt( ::uint8_t value);

  inline  ::uint8_t getBcsEbdActiveSt();
  inline void setBcsEbdActiveSt( ::uint8_t value);

  inline  ::uint8_t getBcsEbdFaultSt();
  inline void setBcsEbdFaultSt( ::uint8_t value);

  inline  ::uint8_t getBcsEngTorqDecActiveStFa();
  inline void setBcsEngTorqDecActiveStFa( ::uint8_t value);

  inline  ::uint8_t getBcsEngTorqIncActiveSt();
  inline void setBcsEngTorqIncActiveSt( ::uint8_t value);

  inline  ::uint8_t getBcsTcsActiveSt();
  inline void setBcsTcsActiveSt( ::uint8_t value);

  inline  ::uint8_t getBcsTcsFaultSt();
  inline void setBcsTcsFaultSt( ::uint8_t value);

  inline  ::uint8_t getBcsVdcActiveSt();
  inline void setBcsVdcActiveSt( ::uint8_t value);

  inline  ::uint8_t getBcsVdcFaultSt();
  inline void setBcsVdcFaultSt( ::uint8_t value);

  inline float getBcsVehSpd();
  inline void setBcsVehSpd(float value);

  inline  ::uint8_t getBcsVehSpdVd();
  inline void setBcsVehSpdVd( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bcs2A::Pipeline {
public:
  typedef Bcs2A Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActAcan::Reader {
public:
  typedef ActAcan Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasBcs2A() const;
  inline  ::senseAD::msg::act_acan::Bcs2A::Reader getBcs2A() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActAcan::Builder {
public:
  typedef ActAcan Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasBcs2A();
  inline  ::senseAD::msg::act_acan::Bcs2A::Builder getBcs2A();
  inline void setBcs2A( ::senseAD::msg::act_acan::Bcs2A::Reader value);
  inline  ::senseAD::msg::act_acan::Bcs2A::Builder initBcs2A();
  inline void adoptBcs2A(::capnp::Orphan< ::senseAD::msg::act_acan::Bcs2A>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::act_acan::Bcs2A> disownBcs2A();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActAcan::Pipeline {
public:
  typedef ActAcan Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::act_acan::Bcs2A::Pipeline getBcs2A();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t Bcs2A::Reader::getBcsAbsActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsAbsActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsAbsActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsAbsFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsAbsFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsAbsFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsEbdActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsEbdActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsEbdActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsEbdFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsEbdFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsEbdFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsEngTorqDecActiveStFa() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsEngTorqDecActiveStFa() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsEngTorqDecActiveStFa( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsEngTorqIncActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsEngTorqIncActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsEngTorqIncActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsTcsActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsTcsActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsTcsActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsTcsFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsTcsFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsTcsFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsVdcActiveSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsVdcActiveSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsVdcActiveSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsVdcFaultSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsVdcFaultSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsVdcFaultSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Bcs2A::Reader::getBcsVehSpd() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Bcs2A::Builder::getBcsVehSpd() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsVehSpd(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Bcs2A::Reader::getBcsVehSpdVd() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Bcs2A::Builder::getBcsVehSpdVd() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Bcs2A::Builder::setBcsVehSpdVd( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ActAcan::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ActAcan::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ActAcan::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ActAcan::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ActAcan::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ActAcan::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ActAcan::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ActAcan::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ActAcan::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ActAcan::Reader::hasBcs2A() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ActAcan::Builder::hasBcs2A() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::act_acan::Bcs2A::Reader ActAcan::Reader::getBcs2A() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::act_acan::Bcs2A::Builder ActAcan::Builder::getBcs2A() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::act_acan::Bcs2A::Pipeline ActAcan::Pipeline::getBcs2A() {
  return  ::senseAD::msg::act_acan::Bcs2A::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ActAcan::Builder::setBcs2A( ::senseAD::msg::act_acan::Bcs2A::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::act_acan::Bcs2A::Builder ActAcan::Builder::initBcs2A() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ActAcan::Builder::adoptBcs2A(
    ::capnp::Orphan< ::senseAD::msg::act_acan::Bcs2A>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::act_acan::Bcs2A> ActAcan::Builder::disownBcs2A() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::act_acan::Bcs2A>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

