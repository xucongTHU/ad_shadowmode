// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: perception.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b18d9b49d4d547ed);
CAPNP_DECLARE_SCHEMA(a209d49947637e1d);
CAPNP_DECLARE_SCHEMA(e21768cee20ed820);
CAPNP_DECLARE_SCHEMA(fc95b61d1e2d8d4a);
CAPNP_DECLARE_SCHEMA(ad2f35545b1283ab);
CAPNP_DECLARE_SCHEMA(c97c580a8a81b416);
CAPNP_DECLARE_SCHEMA(d1a3194d5c60bd16);
CAPNP_DECLARE_SCHEMA(d4bfa1fcbf243df6);
CAPNP_DECLARE_SCHEMA(9b433827b123c5fa);
CAPNP_DECLARE_SCHEMA(c455865847ffd306);
CAPNP_DECLARE_SCHEMA(f3d45f6259ab8ee9);
CAPNP_DECLARE_SCHEMA(d3072dca8f0b73b2);
CAPNP_DECLARE_SCHEMA(8c837f1d88f3cf14);
CAPNP_DECLARE_SCHEMA(e4f47314776b1f0a);
CAPNP_DECLARE_SCHEMA(d3541af71e6eab75);
CAPNP_DECLARE_SCHEMA(bbaea22972b2f89f);
CAPNP_DECLARE_SCHEMA(e55a4eac908db489);
CAPNP_DECLARE_SCHEMA(ec4a124671c63e48);
CAPNP_DECLARE_SCHEMA(c0c7a61e9678b624);
CAPNP_DECLARE_SCHEMA(c2e5982d7d7c7fec);
CAPNP_DECLARE_SCHEMA(90a542efea19d379);
CAPNP_DECLARE_SCHEMA(a4226bbfdc607113);
CAPNP_DECLARE_SCHEMA(f2143a53361cbc14);
CAPNP_DECLARE_SCHEMA(96a960ff21d5c460);
CAPNP_DECLARE_SCHEMA(80d0a86aabe9e20a);
CAPNP_DECLARE_SCHEMA(8717df4d1644d8e8);
CAPNP_DECLARE_SCHEMA(a82aa8b88eefe6ea);
CAPNP_DECLARE_SCHEMA(adbe82077d7289ff);
CAPNP_DECLARE_SCHEMA(bd3bac8ccf5674e3);
CAPNP_DECLARE_SCHEMA(f2db40d42e8d94c2);
CAPNP_DECLARE_SCHEMA(f91751079d70bb7b);
CAPNP_DECLARE_SCHEMA(abb698b63529dccc);
CAPNP_DECLARE_SCHEMA(b4bfac17c8252ccc);
CAPNP_DECLARE_SCHEMA(81b820bf4f39d525);
CAPNP_DECLARE_SCHEMA(f662f641281c8905);
CAPNP_DECLARE_SCHEMA(979d380c21873e74);
CAPNP_DECLARE_SCHEMA(8883b9c83673105c);
CAPNP_DECLARE_SCHEMA(8114f95557706ecf);
CAPNP_DECLARE_SCHEMA(971c38fc2a239e4e);
CAPNP_DECLARE_SCHEMA(f53d12f154fbefa4);
CAPNP_DECLARE_SCHEMA(fa96f376e812f2c0);
CAPNP_DECLARE_SCHEMA(e654c01db840ca01);
CAPNP_DECLARE_SCHEMA(cd2c8f4accda6a6e);
CAPNP_DECLARE_SCHEMA(d5844e886356ee2e);
CAPNP_DECLARE_SCHEMA(d363e09a5a89ea7e);
CAPNP_DECLARE_SCHEMA(95ce3a2694666f7b);
CAPNP_DECLARE_SCHEMA(fcdc962586f8588b);
CAPNP_DECLARE_SCHEMA(d685e86b3a25e490);
CAPNP_DECLARE_SCHEMA(ae2b764787e2f345);
CAPNP_DECLARE_SCHEMA(ef381c9e1347f5b6);
CAPNP_DECLARE_SCHEMA(bcdbda21859fa35d);
CAPNP_DECLARE_SCHEMA(f54ef441ca329757);
CAPNP_DECLARE_SCHEMA(f39ab511e2f65c63);
CAPNP_DECLARE_SCHEMA(a9d76809414760fe);
CAPNP_DECLARE_SCHEMA(dac3bdb1dbbdba0f);
CAPNP_DECLARE_SCHEMA(e06205e97abb83db);
CAPNP_DECLARE_SCHEMA(c1f982294d27ec21);
CAPNP_DECLARE_SCHEMA(c14f43ba10ddbebd);
CAPNP_DECLARE_SCHEMA(b6f49dd18da84e66);
CAPNP_DECLARE_SCHEMA(8ee12db4eff5aee2);
CAPNP_DECLARE_SCHEMA(a1eb890160607a00);
CAPNP_DECLARE_SCHEMA(8654b007a8cf3317);
CAPNP_DECLARE_SCHEMA(b53f4ce32b85dcc0);
CAPNP_DECLARE_SCHEMA(b5fd132ed2c1d548);
CAPNP_DECLARE_SCHEMA(f4375375ce71d004);
CAPNP_DECLARE_SCHEMA(f5084d4a480ad978);
CAPNP_DECLARE_SCHEMA(bc4340a4a40536e0);
CAPNP_DECLARE_SCHEMA(cee41e50c6b3b759);
CAPNP_DECLARE_SCHEMA(b01e65530fde3344);
enum class DerivedType_b01e65530fde3344: uint16_t {
  CAMERA_NON_VEHICLE,
  CAMERA_PEDESTRIAN,
  CAMERA_VEHICLE,
  CAMERA_STATIC_OBSTACLE,
  LIDAR_OBJECT,
  RADAR_OBJECT,
  FUSION_OBJECT,
  CAMERA_TRAFFICLIGHT,
  CAMERA_TRAFFICSIGN,
};
CAPNP_DECLARE_ENUM(DerivedType, b01e65530fde3344);
CAPNP_DECLARE_SCHEMA(9288ea5dc8497238);
CAPNP_DECLARE_SCHEMA(fcf550c596609ce0);
CAPNP_DECLARE_SCHEMA(f3175a023723abbd);
CAPNP_DECLARE_SCHEMA(e7cb9db6dccfcb32);
CAPNP_DECLARE_SCHEMA(936f5be2948a487e);
CAPNP_DECLARE_SCHEMA(effc243225205669);
CAPNP_DECLARE_SCHEMA(f7a2565e86b4dd3f);
CAPNP_DECLARE_SCHEMA(fc249f2644dad848);
CAPNP_DECLARE_SCHEMA(cd7d355eaee264a9);
CAPNP_DECLARE_SCHEMA(b145b0ed0beb6f6d);
CAPNP_DECLARE_SCHEMA(9115f9549b104d92);
CAPNP_DECLARE_SCHEMA(fd57244ac6aa45a4);
CAPNP_DECLARE_SCHEMA(971917cf3ed46f8e);
CAPNP_DECLARE_SCHEMA(85e96f91a16097a0);
CAPNP_DECLARE_SCHEMA(e6264c5cc462bf47);
CAPNP_DECLARE_SCHEMA(dc8110eba2592a93);
CAPNP_DECLARE_SCHEMA(8eef26c3ac186b87);
CAPNP_DECLARE_SCHEMA(94d05ba5ff1b35c3);
CAPNP_DECLARE_SCHEMA(ace422806870f03c);
CAPNP_DECLARE_SCHEMA(f4fdf0fee7dd0f8b);
CAPNP_DECLARE_SCHEMA(b3e896ec59efff81);
CAPNP_DECLARE_SCHEMA(c3db3e0a21da5452);
CAPNP_DECLARE_SCHEMA(d6696ffd24502301);
CAPNP_DECLARE_SCHEMA(e6659f08d7c825b2);
CAPNP_DECLARE_SCHEMA(a1a4d56134c9d089);
CAPNP_DECLARE_SCHEMA(c8422f0631469cbc);
CAPNP_DECLARE_SCHEMA(c68e7e7cfb6d0206);
CAPNP_DECLARE_SCHEMA(f8a8e898f65292e5);
CAPNP_DECLARE_SCHEMA(fd6414fa5432b64a);
CAPNP_DECLARE_SCHEMA(adbf651e4ef9f2f6);
CAPNP_DECLARE_SCHEMA(f8c0c94c64a1b56f);
CAPNP_DECLARE_SCHEMA(95c09ec71b401e51);
CAPNP_DECLARE_SCHEMA(b2175fec37f93fb4);
CAPNP_DECLARE_SCHEMA(a418598d10a4aced);
CAPNP_DECLARE_SCHEMA(e60d885cb58c6d30);
CAPNP_DECLARE_SCHEMA(bd96c2111fba5132);
CAPNP_DECLARE_SCHEMA(8aa0f828931668e8);
CAPNP_DECLARE_SCHEMA(92b0ce86dcee1d0d);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace perception {

struct CameraDebugInfo {
  CameraDebugInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b18d9b49d4d547ed, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Crosswalk {
  Crosswalk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a209d49947637e1d, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadMarker {
  RoadMarker() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e21768cee20ed820, 6, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SpeedBump {
  SpeedBump() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc95b61d1e2d8d4a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Polygon2D {
  Polygon2D() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad2f35545b1283ab, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BirdViewCorners {
  BirdViewCorners() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c97c580a8a81b416, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MatchedSensorObjectInfo {
  MatchedSensorObjectInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1a3194d5c60bd16, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlobFrame {
  BlobFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4bfa1fcbf243df6, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficSignObject {
  TrafficSignObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b433827b123c5fa, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopLine {
  StopLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c455865847ffd306, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadAreaFrame {
  RoadAreaFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3d45f6259ab8ee9, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraBlockageInfo {
  CameraBlockageInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3072dca8f0b73b2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FailsafeFrame {
  FailsafeFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c837f1d88f3cf14, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLightObject {
  TrafficLightObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4f47314776b1f0a, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Vector3d {
  Vector3d() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3541af71e6eab75, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MotionInfo {
  MotionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbaea22972b2f89f, 3, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadArea {
  RoadArea() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e55a4eac908db489, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Point2f {
  Point2f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec4a124671c63e48, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Point3d {
  Point3d() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0c7a61e9678b624, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GeneralMergeInfo {
  GeneralMergeInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2e5982d7d7c7fec, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadSemanticsFrame {
  RoadSemanticsFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90a542efea19d379, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadSemantics {
  RoadSemantics() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4226bbfdc607113, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMRegion {
  LMRegion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2143a53361cbc14, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BoardPoleObject {
  BoardPoleObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96a960ff21d5c460, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObjectFrame {
  ObjectFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80d0a86aabe9e20a, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Gop {
  Gop() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8717df4d1644d8e8, 6, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GopFrame {
  GopFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a82aa8b88eefe6ea, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ShadowModeFrame {
  ShadowModeFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adbe82077d7289ff, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Tag {
  Tag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd3bac8ccf5674e3, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BaseCameraAttribute {
  BaseCameraAttribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2db40d42e8d94c2, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DirectionInfo {
  DirectionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f91751079d70bb7b, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AutomobileLightStatus {
  AutomobileLightStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(abb698b63529dccc, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMLaneLine {
  LMLaneLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4bfac17c8252ccc, 3, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Vectorf {
  Vectorf() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81b820bf4f39d525, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Boundary {
  Boundary() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f662f641281c8905, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TurnType {
  TurnType() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint16_t TURNTYPE_FREE = 65535u;
  static constexpr  ::uint16_t TURNTYPE_TURN_LEFT = 1u;
  static constexpr  ::uint16_t TURNTYPE_TURN_RIGHT = 2u;
  static constexpr  ::uint16_t TURNTYPE_LEFT_AROUND = 4u;
  static constexpr  ::uint16_t TURNTYPE_RIGHT_AROUND = 8u;
  static constexpr  ::uint16_t TURNTYPE_STRAIGHT = 16u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(979d380c21873e74, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bbox2DMotionInfo {
  Bbox2DMotionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd2c8f4accda6a6e, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModelOutputFeature {
  ModelOutputFeature() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5844e886356ee2e, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EnvODDFrame {
  EnvODDFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d363e09a5a89ea7e, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NonAutomobileVehicleLightStatus {
  NonAutomobileVehicleLightStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95ce3a2694666f7b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Point3f {
  Point3f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcdc962586f8588b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMSpeedLimitSign {
  LMSpeedLimitSign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d685e86b3a25e490, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Polygon3D {
  Polygon3D() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ae2b764787e2f345, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LidarDangerousZone {
  LidarDangerousZone() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef381c9e1347f5b6, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadMarkerObject {
  RoadMarkerObject() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcdbda21859fa35d, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneLine {
  LaneLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f54ef441ca329757, 9, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SizeInfo {
  SizeInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f39ab511e2f65c63, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Matrix3f {
  Matrix3f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9d76809414760fe, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Vector4i {
  Vector4i() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dac3bdb1dbbdba0f, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlotLimiter {
  SlotLimiter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e06205e97abb83db, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlotParkingLock {
  SlotParkingLock() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1f982294d27ec21, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingSlot {
  ParkingSlot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c14f43ba10ddbebd, 3, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingSlotsFrame {
  ParkingSlotsFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6f49dd18da84e66, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadGeometry {
  RoadGeometry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ee12db4eff5aee2, 0, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LidarDangerousZoneFrame {
  LidarDangerousZoneFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1eb890160607a00, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLight {
  TrafficLight() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8654b007a8cf3317, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadStruct {
  RoadStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b53f4ce32b85dcc0, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bbox2D {
  Bbox2D() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5fd132ed2c1d548, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Internal2DBBox {
  Internal2DBBox() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4375375ce71d004, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SceneInfo {
  SceneInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5084d4a480ad978, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AutomobileDoorStatus {
  AutomobileDoorStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc4340a4a40536e0, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Object {
  Object() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DerivedType_b01e65530fde3344 DerivedType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cee41e50c6b3b759, 16, 25)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FSLinePt {
  FSLinePt() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9288ea5dc8497238, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FSLineResult {
  FSLineResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcf550c596609ce0, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FSLineFrame {
  FSLineFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3175a023723abbd, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Freespace {
  Freespace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7cb9db6dccfcb32, 3, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PedestrianIntention {
  PedestrianIntention() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(936f5be2948a487e, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DepthDetPoint {
  DepthDetPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(effc243225205669, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TLImage2DInfo {
  TLImage2DInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7a2565e86b4dd3f, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLightSignFrame {
  TrafficLightSignFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc249f2644dad848, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Blob {
  Blob() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd7d355eaee264a9, 11, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadFrame {
  RoadFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b145b0ed0beb6f6d, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficSignal {
  TrafficSignal() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t SIGNAL_NONE = 0u;
  static constexpr  ::uint8_t SIGNAL_GREEN = 2u;
  static constexpr  ::uint8_t SIGNAL_YELLOW = 4u;
  static constexpr  ::uint8_t SIGNAL_RED = 8u;
  static constexpr  ::uint8_t SIGNAL_GREEN_FLASH = 16u;
  static constexpr  ::uint8_t SIGNAL_YELLOW_FLASH = 32u;
  static constexpr  ::uint8_t SIGNAL_BLACK = 64u;
  static constexpr  ::uint8_t SIGNAL_GREEN_NUMBER = 128u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9115f9549b104d92, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObjectLaneAssignments {
  ObjectLaneAssignments() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4fdf0fee7dd0f8b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoadGeometryFrame {
  RoadGeometryFrame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b3e896ec59efff81, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VecPoint2f {
  VecPoint2f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3db3e0a21da5452, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Vector3f {
  Vector3f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6696ffd24502301, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLightGroup {
  TrafficLightGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6659f08d7c825b2, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMLaneTurnTypeSign {
  LMLaneTurnTypeSign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1a4d56134c9d089, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficSign {
  TrafficSign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8422f0631469cbc, 6, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PolygonBox {
  PolygonBox() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c68e7e7cfb6d0206, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMLaneSpeedLimitSign {
  LMLaneSpeedLimitSign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8a8e898f65292e5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMLanePoint2f {
  LMLanePoint2f() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd6414fa5432b64a, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraBBox2DInfo {
  CameraBBox2DInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adbf651e4ef9f2f6, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LMPerceptionRoad {
  LMPerceptionRoad() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8c0c94c64a1b56f, 2, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UniADPlanningDebug {
  UniADPlanningDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95c09ec71b401e51, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HolisticPath {
  HolisticPath() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b2175fec37f93fb4, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CenterLine {
  CenterLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a418598d10a4aced, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PartitionInfo {
  PartitionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e60d885cb58c6d30, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OccGrid {
  OccGrid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd96c2111fba5132, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OccupancyData {
  OccupancyData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8aa0f828931668e8, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OccupancyInfo {
  OccupancyInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92b0ce86dcee1d0d, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CameraDebugInfo::Reader {
public:
  typedef CameraDebugInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getDepthType() const;

  inline bool hasOpticalFlowPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getOpticalFlowPoints() const;

  inline bool hasOpticalFlowDxy() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getOpticalFlowDxy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraDebugInfo::Builder {
public:
  typedef CameraDebugInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getDepthType();
  inline void setDepthType( ::int16_t value);

  inline bool hasOpticalFlowPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getOpticalFlowPoints();
  inline void setOpticalFlowPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initOpticalFlowPoints(unsigned int size);
  inline void adoptOpticalFlowPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownOpticalFlowPoints();

  inline bool hasOpticalFlowDxy();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getOpticalFlowDxy();
  inline void setOpticalFlowDxy( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initOpticalFlowDxy(unsigned int size);
  inline void adoptOpticalFlowDxy(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownOpticalFlowDxy();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraDebugInfo::Pipeline {
public:
  typedef CameraDebugInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Crosswalk::Reader {
public:
  typedef Crosswalk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasLaneId() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLaneId() const;

  inline bool hasConfidence() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Reader getConfidence() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline  ::uint16_t getWidth() const;

  inline  ::uint16_t getHeight() const;

  inline bool hasBitMap() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getBitMap() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Crosswalk::Builder {
public:
  typedef Crosswalk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasLaneId();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLaneId();
  inline void setLaneId( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneId(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLaneId(unsigned int size);
  inline void adoptLaneId(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLaneId();

  inline bool hasConfidence();
  inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Builder getConfidence();
  inline void setConfidence( ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Builder initConfidence(unsigned int size);
  inline void adoptConfidence(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>> disownConfidence();

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline  ::uint16_t getWidth();
  inline void setWidth( ::uint16_t value);

  inline  ::uint16_t getHeight();
  inline void setHeight( ::uint16_t value);

  inline bool hasBitMap();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getBitMap();
  inline void setBitMap( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBitMap(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initBitMap(unsigned int size);
  inline void adoptBitMap(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownBitMap();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Crosswalk::Pipeline {
public:
  typedef Crosswalk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadMarker::Reader {
public:
  typedef RoadMarker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasConfidence() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getConfidence() const;

  inline  ::uint32_t getType() const;

  inline  ::uint64_t getImagePointNum() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline  ::uint64_t getWorldPointNum() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline  ::uint64_t getConfNum() const;

  inline  ::uint8_t getKeyPointTypesNum() const;

  inline bool hasKeyPointTypes() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getKeyPointTypes() const;

  inline float getHeading() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadMarker::Builder {
public:
  typedef RoadMarker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasConfidence();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getConfidence();
  inline void setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConfidence(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initConfidence(unsigned int size);
  inline void adoptConfidence(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownConfidence();

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline  ::uint64_t getImagePointNum();
  inline void setImagePointNum( ::uint64_t value);

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline  ::uint64_t getWorldPointNum();
  inline void setWorldPointNum( ::uint64_t value);

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline  ::uint64_t getConfNum();
  inline void setConfNum( ::uint64_t value);

  inline  ::uint8_t getKeyPointTypesNum();
  inline void setKeyPointTypesNum( ::uint8_t value);

  inline bool hasKeyPointTypes();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getKeyPointTypes();
  inline void setKeyPointTypes( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setKeyPointTypes(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initKeyPointTypes(unsigned int size);
  inline void adoptKeyPointTypes(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownKeyPointTypes();

  inline float getHeading();
  inline void setHeading(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadMarker::Pipeline {
public:
  typedef RoadMarker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SpeedBump::Reader {
public:
  typedef SpeedBump Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline bool hasConfidence() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getConfidence() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SpeedBump::Builder {
public:
  typedef SpeedBump Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline bool hasConfidence();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getConfidence();
  inline void setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConfidence(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initConfidence(unsigned int size);
  inline void adoptConfidence(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownConfidence();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SpeedBump::Pipeline {
public:
  typedef SpeedBump Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Polygon2D::Reader {
public:
  typedef Polygon2D Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasP2d() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getP2d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Polygon2D::Builder {
public:
  typedef Polygon2D Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasP2d();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getP2d();
  inline void setP2d( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initP2d(unsigned int size);
  inline void adoptP2d(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownP2d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Polygon2D::Pipeline {
public:
  typedef Polygon2D Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BirdViewCorners::Reader {
public:
  typedef BirdViewCorners Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline bool hasBvCorners() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader getBvCorners() const;

  inline bool hasCornerConf() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getCornerConf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BirdViewCorners::Builder {
public:
  typedef BirdViewCorners Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline bool hasBvCorners();
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder getBvCorners();
  inline void setBvCorners( ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder initBvCorners(unsigned int size);
  inline void adoptBvCorners(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>> disownBvCorners();

  inline bool hasCornerConf();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getCornerConf();
  inline void setCornerConf( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCornerConf(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initCornerConf(unsigned int size);
  inline void adoptCornerConf(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownCornerConf();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BirdViewCorners::Pipeline {
public:
  typedef BirdViewCorners Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MatchedSensorObjectInfo::Reader {
public:
  typedef MatchedSensorObjectInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::uint64_t getObjectId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MatchedSensorObjectInfo::Builder {
public:
  typedef MatchedSensorObjectInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::uint64_t getObjectId();
  inline void setObjectId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MatchedSensorObjectInfo::Pipeline {
public:
  typedef MatchedSensorObjectInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlobFrame::Reader {
public:
  typedef BlobFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline  ::int16_t getBlobNum() const;

  inline bool hasBlobObjectList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader getBlobObjectList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlobFrame::Builder {
public:
  typedef BlobFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::int16_t getBlobNum();
  inline void setBlobNum( ::int16_t value);

  inline bool hasBlobObjectList();
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder getBlobObjectList();
  inline void setBlobObjectList( ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder initBlobObjectList(unsigned int size);
  inline void adoptBlobObjectList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>> disownBlobObjectList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlobFrame::Pipeline {
public:
  typedef BlobFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficSignObject::Reader {
public:
  typedef TrafficSignObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline  ::int32_t getTrackId() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficSignObject::Builder {
public:
  typedef TrafficSignObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownCameraBboxInfo();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficSignObject::Pipeline {
public:
  typedef TrafficSignObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopLine::Reader {
public:
  typedef StopLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline bool hasConfidence() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getConfidence() const;

  inline  ::int32_t getId() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopLine::Builder {
public:
  typedef StopLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline bool hasConfidence();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getConfidence();
  inline void setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConfidence(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initConfidence(unsigned int size);
  inline void adoptConfidence(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownConfidence();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopLine::Pipeline {
public:
  typedef StopLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadAreaFrame::Reader {
public:
  typedef RoadAreaFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int64_t getFrameTimestampNs() const;

  inline bool hasCameraName() const;
  inline  ::capnp::Text::Reader getCameraName() const;

  inline bool hasRoadArea() const;
  inline  ::senseAD::msg::perception::RoadArea::Reader getRoadArea() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadAreaFrame::Builder {
public:
  typedef RoadAreaFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::int64_t value);

  inline bool hasCameraName();
  inline  ::capnp::Text::Builder getCameraName();
  inline void setCameraName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCameraName(unsigned int size);
  inline void adoptCameraName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCameraName();

  inline bool hasRoadArea();
  inline  ::senseAD::msg::perception::RoadArea::Builder getRoadArea();
  inline void setRoadArea( ::senseAD::msg::perception::RoadArea::Reader value);
  inline  ::senseAD::msg::perception::RoadArea::Builder initRoadArea();
  inline void adoptRoadArea(::capnp::Orphan< ::senseAD::msg::perception::RoadArea>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::RoadArea> disownRoadArea();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadAreaFrame::Pipeline {
public:
  typedef RoadAreaFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::RoadArea::Pipeline getRoadArea();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraBlockageInfo::Reader {
public:
  typedef CameraBlockageInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getBlockageType() const;

  inline  ::uint8_t getGlareStatus() const;

  inline  ::int16_t getSensorId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraBlockageInfo::Builder {
public:
  typedef CameraBlockageInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getBlockageType();
  inline void setBlockageType( ::uint8_t value);

  inline  ::uint8_t getGlareStatus();
  inline void setGlareStatus( ::uint8_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraBlockageInfo::Pipeline {
public:
  typedef CameraBlockageInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FailsafeFrame::Reader {
public:
  typedef FailsafeFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasBlockageInfo() const;
  inline  ::senseAD::msg::perception::CameraBlockageInfo::Reader getBlockageInfo() const;

  inline bool hasBlockageInfoList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Reader getBlockageInfoList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FailsafeFrame::Builder {
public:
  typedef FailsafeFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasBlockageInfo();
  inline  ::senseAD::msg::perception::CameraBlockageInfo::Builder getBlockageInfo();
  inline void setBlockageInfo( ::senseAD::msg::perception::CameraBlockageInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBlockageInfo::Builder initBlockageInfo();
  inline void adoptBlockageInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBlockageInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBlockageInfo> disownBlockageInfo();

  inline bool hasBlockageInfoList();
  inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Builder getBlockageInfoList();
  inline void setBlockageInfoList( ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Builder initBlockageInfoList(unsigned int size);
  inline void adoptBlockageInfoList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>> disownBlockageInfoList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FailsafeFrame::Pipeline {
public:
  typedef FailsafeFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::CameraBlockageInfo::Pipeline getBlockageInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLightObject::Reader {
public:
  typedef TrafficLightObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel() const;

  inline  ::uint16_t getStatusLabel() const;

  inline  ::uint16_t getColorLabel() const;

  inline  ::uint16_t getTypeLabel() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline  ::int32_t getTrackId() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

  inline  ::int16_t getTlNum() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

  inline  ::int16_t getFocus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLightObject::Builder {
public:
  typedef TrafficLightObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline  ::uint16_t getStatusLabel();
  inline void setStatusLabel( ::uint16_t value);

  inline  ::uint16_t getColorLabel();
  inline void setColorLabel( ::uint16_t value);

  inline  ::uint16_t getTypeLabel();
  inline void setTypeLabel( ::uint16_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownCameraBboxInfo();

  inline  ::int16_t getTlNum();
  inline void setTlNum( ::int16_t value);

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

  inline  ::int16_t getFocus();
  inline void setFocus( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLightObject::Pipeline {
public:
  typedef TrafficLightObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vector3d::Reader {
public:
  typedef Vector3d Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vector3d::Builder {
public:
  typedef Vector3d Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vector3d::Pipeline {
public:
  typedef Vector3d Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MotionInfo::Reader {
public:
  typedef MotionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline  ::int16_t getMotionStatus() const;

  inline bool hasCenter() const;
  inline  ::senseAD::msg::perception::Vector3d::Reader getCenter() const;

  inline bool hasCenterUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getCenterUncertainty() const;

  inline bool hasVelocity() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getVelocity() const;

  inline bool hasVelocityUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getVelocityUncertainty() const;

  inline bool hasAcceleration() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getAcceleration() const;

  inline bool hasAccelerationUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getAccelerationUncertainty() const;

  inline bool hasJerk() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getJerk() const;

  inline bool hasJerkUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getJerkUncertainty() const;

  inline float getVelocityHeading() const;

  inline float getVelocityHeadingUncertainty() const;

  inline float getVelocityHeadingRate() const;

  inline float getVelocityHeadingRateUncertainty() const;

  inline bool hasRelativeVelocity() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getRelativeVelocity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MotionInfo::Builder {
public:
  typedef MotionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline  ::int16_t getMotionStatus();
  inline void setMotionStatus( ::int16_t value);

  inline bool hasCenter();
  inline  ::senseAD::msg::perception::Vector3d::Builder getCenter();
  inline void setCenter( ::senseAD::msg::perception::Vector3d::Reader value);
  inline  ::senseAD::msg::perception::Vector3d::Builder initCenter();
  inline void adoptCenter(::capnp::Orphan< ::senseAD::msg::perception::Vector3d>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3d> disownCenter();

  inline bool hasCenterUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getCenterUncertainty();
  inline void setCenterUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initCenterUncertainty();
  inline void adoptCenterUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownCenterUncertainty();

  inline bool hasVelocity();
  inline  ::senseAD::msg::perception::Vector3f::Builder getVelocity();
  inline void setVelocity( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initVelocity();
  inline void adoptVelocity(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownVelocity();

  inline bool hasVelocityUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getVelocityUncertainty();
  inline void setVelocityUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initVelocityUncertainty();
  inline void adoptVelocityUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownVelocityUncertainty();

  inline bool hasAcceleration();
  inline  ::senseAD::msg::perception::Vector3f::Builder getAcceleration();
  inline void setAcceleration( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownAcceleration();

  inline bool hasAccelerationUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getAccelerationUncertainty();
  inline void setAccelerationUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initAccelerationUncertainty();
  inline void adoptAccelerationUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownAccelerationUncertainty();

  inline bool hasJerk();
  inline  ::senseAD::msg::perception::Vector3f::Builder getJerk();
  inline void setJerk( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initJerk();
  inline void adoptJerk(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownJerk();

  inline bool hasJerkUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getJerkUncertainty();
  inline void setJerkUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initJerkUncertainty();
  inline void adoptJerkUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownJerkUncertainty();

  inline float getVelocityHeading();
  inline void setVelocityHeading(float value);

  inline float getVelocityHeadingUncertainty();
  inline void setVelocityHeadingUncertainty(float value);

  inline float getVelocityHeadingRate();
  inline void setVelocityHeadingRate(float value);

  inline float getVelocityHeadingRateUncertainty();
  inline void setVelocityHeadingRateUncertainty(float value);

  inline bool hasRelativeVelocity();
  inline  ::senseAD::msg::perception::Vector3f::Builder getRelativeVelocity();
  inline void setRelativeVelocity( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initRelativeVelocity();
  inline void adoptRelativeVelocity(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownRelativeVelocity();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MotionInfo::Pipeline {
public:
  typedef MotionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Vector3d::Pipeline getCenter();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getCenterUncertainty();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getVelocity();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getVelocityUncertainty();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getAcceleration();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getAccelerationUncertainty();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getJerk();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getJerkUncertainty();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getRelativeVelocity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadArea::Reader {
public:
  typedef RoadArea Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasImage() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getImage() const;

  inline  ::uint16_t getWidth() const;

  inline  ::uint16_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadArea::Builder {
public:
  typedef RoadArea Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasImage();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getImage();
  inline void setImage( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setImage(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownImage();

  inline  ::uint16_t getWidth();
  inline void setWidth( ::uint16_t value);

  inline  ::uint16_t getHeight();
  inline void setHeight( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadArea::Pipeline {
public:
  typedef RoadArea Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point2f::Reader {
public:
  typedef Point2f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point2f::Builder {
public:
  typedef Point2f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point2f::Pipeline {
public:
  typedef Point2f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point3d::Reader {
public:
  typedef Point3d Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3d::Builder {
public:
  typedef Point3d Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3d::Pipeline {
public:
  typedef Point3d Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GeneralMergeInfo::Reader {
public:
  typedef GeneralMergeInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline  ::int16_t getMergeState() const;

  inline  ::uint64_t getMergeId() const;

  inline  ::uint64_t getSplitId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GeneralMergeInfo::Builder {
public:
  typedef GeneralMergeInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline  ::int16_t getMergeState();
  inline void setMergeState( ::int16_t value);

  inline  ::uint64_t getMergeId();
  inline void setMergeId( ::uint64_t value);

  inline  ::uint64_t getSplitId();
  inline void setSplitId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GeneralMergeInfo::Pipeline {
public:
  typedef GeneralMergeInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadSemanticsFrame::Reader {
public:
  typedef RoadSemanticsFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasRoadSemantics() const;
  inline  ::senseAD::msg::perception::RoadSemantics::Reader getRoadSemantics() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadSemanticsFrame::Builder {
public:
  typedef RoadSemanticsFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasRoadSemantics();
  inline  ::senseAD::msg::perception::RoadSemantics::Builder getRoadSemantics();
  inline void setRoadSemantics( ::senseAD::msg::perception::RoadSemantics::Reader value);
  inline  ::senseAD::msg::perception::RoadSemantics::Builder initRoadSemantics();
  inline void adoptRoadSemantics(::capnp::Orphan< ::senseAD::msg::perception::RoadSemantics>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::RoadSemantics> disownRoadSemantics();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadSemanticsFrame::Pipeline {
public:
  typedef RoadSemanticsFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::RoadSemantics::Pipeline getRoadSemantics();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadSemantics::Reader {
public:
  typedef RoadSemantics Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLightResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader getTrafficLightResults() const;

  inline bool hasTrafficSignResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader getTrafficSignResults() const;

  inline bool hasRoadMarkerResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Reader getRoadMarkerResults() const;

  inline bool hasBoardPoleResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Reader getBoardPoleResults() const;

  inline bool hasStaticObstacleResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader getStaticObstacleResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadSemantics::Builder {
public:
  typedef RoadSemantics Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLightResults();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder getTrafficLightResults();
  inline void setTrafficLightResults( ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder initTrafficLightResults(unsigned int size);
  inline void adoptTrafficLightResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>> disownTrafficLightResults();

  inline bool hasTrafficSignResults();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder getTrafficSignResults();
  inline void setTrafficSignResults( ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder initTrafficSignResults(unsigned int size);
  inline void adoptTrafficSignResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>> disownTrafficSignResults();

  inline bool hasRoadMarkerResults();
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Builder getRoadMarkerResults();
  inline void setRoadMarkerResults( ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Builder initRoadMarkerResults(unsigned int size);
  inline void adoptRoadMarkerResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>> disownRoadMarkerResults();

  inline bool hasBoardPoleResults();
  inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Builder getBoardPoleResults();
  inline void setBoardPoleResults( ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Builder initBoardPoleResults(unsigned int size);
  inline void adoptBoardPoleResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>> disownBoardPoleResults();

  inline bool hasStaticObstacleResults();
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder getStaticObstacleResults();
  inline void setStaticObstacleResults( ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder initStaticObstacleResults(unsigned int size);
  inline void adoptStaticObstacleResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>> disownStaticObstacleResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadSemantics::Pipeline {
public:
  typedef RoadSemantics Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMRegion::Reader {
public:
  typedef LMRegion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getRegionType() const;

  inline float getRegionTypeConfidence() const;

  inline  ::int16_t getTrackId() const;

  inline bool hasRegionBoundary() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getRegionBoundary() const;

  inline bool hasJunctionPoint() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getJunctionPoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMRegion::Builder {
public:
  typedef LMRegion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getRegionType();
  inline void setRegionType( ::uint8_t value);

  inline float getRegionTypeConfidence();
  inline void setRegionTypeConfidence(float value);

  inline  ::int16_t getTrackId();
  inline void setTrackId( ::int16_t value);

  inline bool hasRegionBoundary();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getRegionBoundary();
  inline void setRegionBoundary( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initRegionBoundary(unsigned int size);
  inline void adoptRegionBoundary(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownRegionBoundary();

  inline bool hasJunctionPoint();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getJunctionPoint();
  inline void setJunctionPoint( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initJunctionPoint(unsigned int size);
  inline void adoptJunctionPoint(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownJunctionPoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMRegion::Pipeline {
public:
  typedef LMRegion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BoardPoleObject::Reader {
public:
  typedef BoardPoleObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel() const;

  inline  ::int32_t getTrackId() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline bool hasBbox2dInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getBbox2dInfo() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BoardPoleObject::Builder {
public:
  typedef BoardPoleObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline bool hasBbox2dInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getBbox2dInfo();
  inline void setBbox2dInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initBbox2dInfo();
  inline void adoptBbox2dInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownBbox2dInfo();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BoardPoleObject::Pipeline {
public:
  typedef BoardPoleObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getBbox2dInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObjectFrame::Reader {
public:
  typedef ObjectFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasPerceptionObjectList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader getPerceptionObjectList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjectFrame::Builder {
public:
  typedef ObjectFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasPerceptionObjectList();
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder getPerceptionObjectList();
  inline void setPerceptionObjectList( ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder initPerceptionObjectList(unsigned int size);
  inline void adoptPerceptionObjectList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>> disownPerceptionObjectList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjectFrame::Pipeline {
public:
  typedef ObjectFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Gop::Reader {
public:
  typedef Gop Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::int16_t getLabel() const;

  inline float getExistenceConfidence() const;

  inline  ::int16_t getSubtype() const;

  inline  ::int32_t getTrackId() const;

  inline  ::uint64_t getCurrentPredictionTimestampNs() const;

  inline bool hasSizeInfo() const;
  inline  ::senseAD::msg::perception::SizeInfo::Reader getSizeInfo() const;

  inline bool hasPolygonBox() const;
  inline  ::senseAD::msg::perception::PolygonBox::Reader getPolygonBox() const;

  inline bool hasDirectionInfo() const;
  inline  ::senseAD::msg::perception::DirectionInfo::Reader getDirectionInfo() const;

  inline bool hasMotionInfo() const;
  inline  ::senseAD::msg::perception::MotionInfo::Reader getMotionInfo() const;

  inline  ::int16_t getMotionStatus() const;

  inline float getMotionUnknownScore() const;

  inline float getMotionStaticScore() const;

  inline float getMotionStoppedScore() const;

  inline float getMotionMovingScore() const;

  inline float getMotionCrossingScore() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

  inline bool hasBboxMotionInfo() const;
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Reader getBboxMotionInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Gop::Builder {
public:
  typedef Gop Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline  ::int16_t getSubtype();
  inline void setSubtype( ::int16_t value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline  ::uint64_t getCurrentPredictionTimestampNs();
  inline void setCurrentPredictionTimestampNs( ::uint64_t value);

  inline bool hasSizeInfo();
  inline  ::senseAD::msg::perception::SizeInfo::Builder getSizeInfo();
  inline void setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value);
  inline  ::senseAD::msg::perception::SizeInfo::Builder initSizeInfo();
  inline void adoptSizeInfo(::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> disownSizeInfo();

  inline bool hasPolygonBox();
  inline  ::senseAD::msg::perception::PolygonBox::Builder getPolygonBox();
  inline void setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value);
  inline  ::senseAD::msg::perception::PolygonBox::Builder initPolygonBox();
  inline void adoptPolygonBox(::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> disownPolygonBox();

  inline bool hasDirectionInfo();
  inline  ::senseAD::msg::perception::DirectionInfo::Builder getDirectionInfo();
  inline void setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value);
  inline  ::senseAD::msg::perception::DirectionInfo::Builder initDirectionInfo();
  inline void adoptDirectionInfo(::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> disownDirectionInfo();

  inline bool hasMotionInfo();
  inline  ::senseAD::msg::perception::MotionInfo::Builder getMotionInfo();
  inline void setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value);
  inline  ::senseAD::msg::perception::MotionInfo::Builder initMotionInfo();
  inline void adoptMotionInfo(::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> disownMotionInfo();

  inline  ::int16_t getMotionStatus();
  inline void setMotionStatus( ::int16_t value);

  inline float getMotionUnknownScore();
  inline void setMotionUnknownScore(float value);

  inline float getMotionStaticScore();
  inline void setMotionStaticScore(float value);

  inline float getMotionStoppedScore();
  inline void setMotionStoppedScore(float value);

  inline float getMotionMovingScore();
  inline void setMotionMovingScore(float value);

  inline float getMotionCrossingScore();
  inline void setMotionCrossingScore(float value);

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownCameraBboxInfo();

  inline bool hasBboxMotionInfo();
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder getBboxMotionInfo();
  inline void setBboxMotionInfo( ::senseAD::msg::perception::Bbox2DMotionInfo::Reader value);
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder initBboxMotionInfo();
  inline void adoptBboxMotionInfo(::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo> disownBboxMotionInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Gop::Pipeline {
public:
  typedef Gop Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::SizeInfo::Pipeline getSizeInfo();
  inline  ::senseAD::msg::perception::PolygonBox::Pipeline getPolygonBox();
  inline  ::senseAD::msg::perception::DirectionInfo::Pipeline getDirectionInfo();
  inline  ::senseAD::msg::perception::MotionInfo::Pipeline getMotionInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline getBboxMotionInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GopFrame::Reader {
public:
  typedef GopFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasPerceptionGopList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Reader getPerceptionGopList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GopFrame::Builder {
public:
  typedef GopFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasPerceptionGopList();
  inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Builder getPerceptionGopList();
  inline void setPerceptionGopList( ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Builder initPerceptionGopList(unsigned int size);
  inline void adoptPerceptionGopList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>> disownPerceptionGopList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GopFrame::Pipeline {
public:
  typedef GopFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ShadowModeFrame::Reader {
public:
  typedef ShadowModeFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasPerceptionTagList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Reader getPerceptionTagList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ShadowModeFrame::Builder {
public:
  typedef ShadowModeFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasPerceptionTagList();
  inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Builder getPerceptionTagList();
  inline void setPerceptionTagList( ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Builder initPerceptionTagList(unsigned int size);
  inline void adoptPerceptionTagList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>> disownPerceptionTagList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ShadowModeFrame::Pipeline {
public:
  typedef ShadowModeFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tag::Reader {
public:
  typedef Tag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::int32_t getTrackId() const;

  inline  ::int16_t getLabel() const;

  inline bool hasMatchTimestampNsList() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getMatchTimestampNsList() const;

  inline bool hasShadowModeTypeList() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getShadowModeTypeList() const;

  inline bool hasTagNameList() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getTagNameList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tag::Builder {
public:
  typedef Tag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline bool hasMatchTimestampNsList();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getMatchTimestampNsList();
  inline void setMatchTimestampNsList( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMatchTimestampNsList(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initMatchTimestampNsList(unsigned int size);
  inline void adoptMatchTimestampNsList(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownMatchTimestampNsList();

  inline bool hasShadowModeTypeList();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getShadowModeTypeList();
  inline void setShadowModeTypeList( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setShadowModeTypeList(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initShadowModeTypeList(unsigned int size);
  inline void adoptShadowModeTypeList(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownShadowModeTypeList();

  inline bool hasTagNameList();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getTagNameList();
  inline void setTagNameList( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTagNameList(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initTagNameList(unsigned int size);
  inline void adoptTagNameList(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownTagNameList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tag::Pipeline {
public:
  typedef Tag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BaseCameraAttribute::Reader {
public:
  typedef BaseCameraAttribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsLandmarkValid() const;

  inline bool hasLandmark() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getLandmark() const;

  inline bool hasLandmarkScores() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLandmarkScores() const;

  inline bool getIsDirectionValid() const;

  inline bool hasViewportDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getViewportDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BaseCameraAttribute::Builder {
public:
  typedef BaseCameraAttribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsLandmarkValid();
  inline void setIsLandmarkValid(bool value);

  inline bool hasLandmark();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getLandmark();
  inline void setLandmark( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initLandmark(unsigned int size);
  inline void adoptLandmark(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownLandmark();

  inline bool hasLandmarkScores();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLandmarkScores();
  inline void setLandmarkScores( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLandmarkScores(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLandmarkScores(unsigned int size);
  inline void adoptLandmarkScores(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLandmarkScores();

  inline bool getIsDirectionValid();
  inline void setIsDirectionValid(bool value);

  inline bool hasViewportDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getViewportDirection();
  inline void setViewportDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initViewportDirection();
  inline void adoptViewportDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownViewportDirection();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BaseCameraAttribute::Pipeline {
public:
  typedef BaseCameraAttribute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getViewportDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DirectionInfo::Reader {
public:
  typedef DirectionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline bool hasDirectionYpr() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getDirectionYpr() const;

  inline bool hasDirectionYprUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getDirectionYprUncertainty() const;

  inline float getYaw() const;

  inline float getYawUncertainty() const;

  inline float getYawRate() const;

  inline float getYawRateUncertainty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DirectionInfo::Builder {
public:
  typedef DirectionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline bool hasDirectionYpr();
  inline  ::senseAD::msg::perception::Vector3f::Builder getDirectionYpr();
  inline void setDirectionYpr( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initDirectionYpr();
  inline void adoptDirectionYpr(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownDirectionYpr();

  inline bool hasDirectionYprUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getDirectionYprUncertainty();
  inline void setDirectionYprUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initDirectionYprUncertainty();
  inline void adoptDirectionYprUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownDirectionYprUncertainty();

  inline float getYaw();
  inline void setYaw(float value);

  inline float getYawUncertainty();
  inline void setYawUncertainty(float value);

  inline float getYawRate();
  inline void setYawRate(float value);

  inline float getYawRateUncertainty();
  inline void setYawRateUncertainty(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DirectionInfo::Pipeline {
public:
  typedef DirectionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Vector3f::Pipeline getDirectionYpr();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getDirectionYprUncertainty();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AutomobileLightStatus::Reader {
public:
  typedef AutomobileLightStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLeftTurn() const;

  inline  ::int16_t getRightTurn() const;

  inline  ::int16_t getHazard() const;

  inline  ::int16_t getBrake() const;

  inline float getLeftTurnConfidence() const;

  inline float getRightTurnConfidence() const;

  inline float getHazardConfidence() const;

  inline float getBrakeConfidence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AutomobileLightStatus::Builder {
public:
  typedef AutomobileLightStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLeftTurn();
  inline void setLeftTurn( ::int16_t value);

  inline  ::int16_t getRightTurn();
  inline void setRightTurn( ::int16_t value);

  inline  ::int16_t getHazard();
  inline void setHazard( ::int16_t value);

  inline  ::int16_t getBrake();
  inline void setBrake( ::int16_t value);

  inline float getLeftTurnConfidence();
  inline void setLeftTurnConfidence(float value);

  inline float getRightTurnConfidence();
  inline void setRightTurnConfidence(float value);

  inline float getHazardConfidence();
  inline void setHazardConfidence(float value);

  inline float getBrakeConfidence();
  inline void setBrakeConfidence(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AutomobileLightStatus::Pipeline {
public:
  typedef AutomobileLightStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMLaneLine::Reader {
public:
  typedef LMLaneLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getClosestSegmentLaneLineType() const;

  inline  ::uint8_t getClosestSegmentLaneLineColor() const;

  inline float getClosestSegmentLaneLineColorConfidence() const;

  inline  ::uint8_t getPolyFitOrder() const;

  inline bool hasPolyFitCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPolyFitCoefficients() const;

  inline bool hasStartPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getStartPoint() const;

  inline bool hasEndPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getEndPoint() const;

  inline bool hasJunctionPoint() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader getJunctionPoint() const;

  inline float getLaneLineWidthMeter() const;

  inline  ::int16_t getTrackId() const;

  inline float getLaneConfidence() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline bool hasWorldPointsReproj() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPointsReproj() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMLaneLine::Builder {
public:
  typedef LMLaneLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getClosestSegmentLaneLineType();
  inline void setClosestSegmentLaneLineType( ::uint8_t value);

  inline  ::uint8_t getClosestSegmentLaneLineColor();
  inline void setClosestSegmentLaneLineColor( ::uint8_t value);

  inline float getClosestSegmentLaneLineColorConfidence();
  inline void setClosestSegmentLaneLineColorConfidence(float value);

  inline  ::uint8_t getPolyFitOrder();
  inline void setPolyFitOrder( ::uint8_t value);

  inline bool hasPolyFitCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPolyFitCoefficients();
  inline void setPolyFitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPolyFitCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPolyFitCoefficients(unsigned int size);
  inline void adoptPolyFitCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPolyFitCoefficients();

  inline bool hasStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getStartPoint();
  inline void setStartPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initStartPoint();
  inline void adoptStartPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownStartPoint();

  inline bool hasEndPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getEndPoint();
  inline void setEndPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initEndPoint();
  inline void adoptEndPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownEndPoint();

  inline bool hasJunctionPoint();
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder getJunctionPoint();
  inline void setJunctionPoint( ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder initJunctionPoint(unsigned int size);
  inline void adoptJunctionPoint(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>> disownJunctionPoint();

  inline float getLaneLineWidthMeter();
  inline void setLaneLineWidthMeter(float value);

  inline  ::int16_t getTrackId();
  inline void setTrackId( ::int16_t value);

  inline float getLaneConfidence();
  inline void setLaneConfidence(float value);

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline bool hasWorldPointsReproj();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPointsReproj();
  inline void setWorldPointsReproj( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPointsReproj(unsigned int size);
  inline void adoptWorldPointsReproj(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPointsReproj();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMLaneLine::Pipeline {
public:
  typedef LMLaneLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getEndPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vectorf::Reader {
public:
  typedef Vectorf Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVector() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vectorf::Builder {
public:
  typedef Vectorf Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVector();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getVector();
  inline void setVector( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVector(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initVector(unsigned int size);
  inline void adoptVector(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vectorf::Pipeline {
public:
  typedef Vectorf Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Boundary::Reader {
public:
  typedef Boundary Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline float getDirectionX() const;

  inline float getDirectionY() const;

  inline float getConfidence() const;

  inline bool getIsLine() const;

  inline  ::int32_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Boundary::Builder {
public:
  typedef Boundary Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline float getDirectionX();
  inline void setDirectionX(float value);

  inline float getDirectionY();
  inline void setDirectionY(float value);

  inline float getConfidence();
  inline void setConfidence(float value);

  inline bool getIsLine();
  inline void setIsLine(bool value);

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Boundary::Pipeline {
public:
  typedef Boundary Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TurnType::Reader {
public:
  typedef TurnType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TurnType::Builder {
public:
  typedef TurnType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TurnType::Pipeline {
public:
  typedef TurnType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bbox2DMotionInfo::Reader {
public:
  typedef Bbox2DMotionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getWidthVelocity() const;

  inline float getHeightVelocity() const;

  inline float getWidthHeightRatioVelocity() const;

  inline float getBottomCenterXVelocity() const;

  inline float getBottomCenterYVelocity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bbox2DMotionInfo::Builder {
public:
  typedef Bbox2DMotionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getWidthVelocity();
  inline void setWidthVelocity(float value);

  inline float getHeightVelocity();
  inline void setHeightVelocity(float value);

  inline float getWidthHeightRatioVelocity();
  inline void setWidthHeightRatioVelocity(float value);

  inline float getBottomCenterXVelocity();
  inline void setBottomCenterXVelocity(float value);

  inline float getBottomCenterYVelocity();
  inline void setBottomCenterYVelocity(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bbox2DMotionInfo::Pipeline {
public:
  typedef Bbox2DMotionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModelOutputFeature::Reader {
public:
  typedef ModelOutputFeature Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModelOutputFeature::Builder {
public:
  typedef ModelOutputFeature Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getValue();
  inline void setValue( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValue(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModelOutputFeature::Pipeline {
public:
  typedef ModelOutputFeature Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EnvODDFrame::Reader {
public:
  typedef EnvODDFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSceneInfo() const;
  inline  ::senseAD::msg::perception::SceneInfo::Reader getSceneInfo() const;

  inline  ::int8_t getCityLightsInfo() const;

  inline  ::int16_t getBlobNum() const;

  inline bool hasBlobObjectList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader getBlobObjectList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EnvODDFrame::Builder {
public:
  typedef EnvODDFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSceneInfo();
  inline  ::senseAD::msg::perception::SceneInfo::Builder getSceneInfo();
  inline void setSceneInfo( ::senseAD::msg::perception::SceneInfo::Reader value);
  inline  ::senseAD::msg::perception::SceneInfo::Builder initSceneInfo();
  inline void adoptSceneInfo(::capnp::Orphan< ::senseAD::msg::perception::SceneInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SceneInfo> disownSceneInfo();

  inline  ::int8_t getCityLightsInfo();
  inline void setCityLightsInfo( ::int8_t value);

  inline  ::int16_t getBlobNum();
  inline void setBlobNum( ::int16_t value);

  inline bool hasBlobObjectList();
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder getBlobObjectList();
  inline void setBlobObjectList( ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder initBlobObjectList(unsigned int size);
  inline void adoptBlobObjectList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>> disownBlobObjectList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EnvODDFrame::Pipeline {
public:
  typedef EnvODDFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::SceneInfo::Pipeline getSceneInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NonAutomobileVehicleLightStatus::Reader {
public:
  typedef NonAutomobileVehicleLightStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLeftTurn() const;

  inline  ::int16_t getRightTurn() const;

  inline  ::int16_t getBrake() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NonAutomobileVehicleLightStatus::Builder {
public:
  typedef NonAutomobileVehicleLightStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLeftTurn();
  inline void setLeftTurn( ::int16_t value);

  inline  ::int16_t getRightTurn();
  inline void setRightTurn( ::int16_t value);

  inline  ::int16_t getBrake();
  inline void setBrake( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NonAutomobileVehicleLightStatus::Pipeline {
public:
  typedef NonAutomobileVehicleLightStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point3f::Reader {
public:
  typedef Point3f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3f::Builder {
public:
  typedef Point3f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3f::Pipeline {
public:
  typedef Point3f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMSpeedLimitSign::Reader {
public:
  typedef LMSpeedLimitSign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLimitedSpeed() const;

  inline  ::int16_t getTrackId() const;

  inline bool hasBbox2d() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getBbox2d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMSpeedLimitSign::Builder {
public:
  typedef LMSpeedLimitSign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLimitedSpeed();
  inline void setLimitedSpeed(float value);

  inline  ::int16_t getTrackId();
  inline void setTrackId( ::int16_t value);

  inline bool hasBbox2d();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getBbox2d();
  inline void setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initBbox2d();
  inline void adoptBbox2d(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownBbox2d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMSpeedLimitSign::Pipeline {
public:
  typedef LMSpeedLimitSign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getBbox2d();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Polygon3D::Reader {
public:
  typedef Polygon3D Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasP3d() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader getP3d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Polygon3D::Builder {
public:
  typedef Polygon3D Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasP3d();
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder getP3d();
  inline void setP3d( ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder initP3d(unsigned int size);
  inline void adoptP3d(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>> disownP3d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Polygon3D::Pipeline {
public:
  typedef Polygon3D Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LidarDangerousZone::Reader {
public:
  typedef LidarDangerousZone Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPolygon() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getPolygon() const;

  inline  ::int16_t getDangerousLevel() const;

  inline  ::uint64_t getDzoneId() const;

  inline bool hasPreDzoneIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getPreDzoneIds() const;

  inline bool hasOccluderIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getOccluderIds() const;

  inline bool hasShadowIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getShadowIds() const;

  inline float getHeight() const;

  inline  ::int16_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LidarDangerousZone::Builder {
public:
  typedef LidarDangerousZone Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPolygon();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getPolygon();
  inline void setPolygon( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initPolygon(unsigned int size);
  inline void adoptPolygon(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownPolygon();

  inline  ::int16_t getDangerousLevel();
  inline void setDangerousLevel( ::int16_t value);

  inline  ::uint64_t getDzoneId();
  inline void setDzoneId( ::uint64_t value);

  inline bool hasPreDzoneIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getPreDzoneIds();
  inline void setPreDzoneIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPreDzoneIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initPreDzoneIds(unsigned int size);
  inline void adoptPreDzoneIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownPreDzoneIds();

  inline bool hasOccluderIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getOccluderIds();
  inline void setOccluderIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOccluderIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initOccluderIds(unsigned int size);
  inline void adoptOccluderIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownOccluderIds();

  inline bool hasShadowIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getShadowIds();
  inline void setShadowIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setShadowIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initShadowIds(unsigned int size);
  inline void adoptShadowIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownShadowIds();

  inline float getHeight();
  inline void setHeight(float value);

  inline  ::int16_t getType();
  inline void setType( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LidarDangerousZone::Pipeline {
public:
  typedef LidarDangerousZone Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadMarkerObject::Reader {
public:
  typedef RoadMarkerObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel() const;

  inline  ::int32_t getTrackId() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline bool hasBbox2dInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getBbox2dInfo() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadMarkerObject::Builder {
public:
  typedef RoadMarkerObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline bool hasBbox2dInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getBbox2dInfo();
  inline void setBbox2dInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initBbox2dInfo();
  inline void adoptBbox2dInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownBbox2dInfo();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadMarkerObject::Pipeline {
public:
  typedef RoadMarkerObject Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getBbox2dInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneLine::Reader {
public:
  typedef LaneLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getId() const;

  inline  ::int32_t getTrackId() const;

  inline  ::int32_t getTrackAge() const;

  inline float getDistanceToLeftBumper() const;

  inline float getDistanceToRightBumper() const;

  inline float getLanelineWidth() const;

  inline  ::uint8_t getColorId() const;

  inline  ::uint8_t getLanelineTypeId() const;

  inline  ::uint8_t getEdgeTypeId() const;

  inline float getLaneConfidence() const;

  inline float getColorConfidence() const;

  inline float getLanelineTypeConfidence() const;

  inline float getEdgeTypeConfidence() const;

  inline float getLanelineWidthConfidence() const;

  inline bool hasStartPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getStartPoint() const;

  inline bool hasEndPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getEndPoint() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPointsReproj() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPointsReproj() const;

  inline  ::int16_t getFittingDegree() const;

  inline bool hasPolyfitCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPolyfitCoefficients() const;

  inline bool hasJunctionPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader getJunctionPoints() const;

  inline bool getIsLineJunctionValid() const;

  inline  ::int16_t getLaneCategory() const;

  inline  ::uint8_t getLineTypeId() const;

  inline float getLineTypeConfidence() const;

  inline  ::int16_t getFittingType() const;

  inline float getLanelineWidthLeft() const;

  inline float getLanelineWidthRight() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneLine::Builder {
public:
  typedef LaneLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getId();
  inline void setId( ::int16_t value);

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline  ::int32_t getTrackAge();
  inline void setTrackAge( ::int32_t value);

  inline float getDistanceToLeftBumper();
  inline void setDistanceToLeftBumper(float value);

  inline float getDistanceToRightBumper();
  inline void setDistanceToRightBumper(float value);

  inline float getLanelineWidth();
  inline void setLanelineWidth(float value);

  inline  ::uint8_t getColorId();
  inline void setColorId( ::uint8_t value);

  inline  ::uint8_t getLanelineTypeId();
  inline void setLanelineTypeId( ::uint8_t value);

  inline  ::uint8_t getEdgeTypeId();
  inline void setEdgeTypeId( ::uint8_t value);

  inline float getLaneConfidence();
  inline void setLaneConfidence(float value);

  inline float getColorConfidence();
  inline void setColorConfidence(float value);

  inline float getLanelineTypeConfidence();
  inline void setLanelineTypeConfidence(float value);

  inline float getEdgeTypeConfidence();
  inline void setEdgeTypeConfidence(float value);

  inline float getLanelineWidthConfidence();
  inline void setLanelineWidthConfidence(float value);

  inline bool hasStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getStartPoint();
  inline void setStartPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initStartPoint();
  inline void adoptStartPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownStartPoint();

  inline bool hasEndPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getEndPoint();
  inline void setEndPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initEndPoint();
  inline void adoptEndPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownEndPoint();

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPointsReproj();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPointsReproj();
  inline void setWorldPointsReproj( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPointsReproj(unsigned int size);
  inline void adoptWorldPointsReproj(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPointsReproj();

  inline  ::int16_t getFittingDegree();
  inline void setFittingDegree( ::int16_t value);

  inline bool hasPolyfitCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPolyfitCoefficients();
  inline void setPolyfitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPolyfitCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPolyfitCoefficients(unsigned int size);
  inline void adoptPolyfitCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPolyfitCoefficients();

  inline bool hasJunctionPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder getJunctionPoints();
  inline void setJunctionPoints( ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder initJunctionPoints(unsigned int size);
  inline void adoptJunctionPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>> disownJunctionPoints();

  inline bool getIsLineJunctionValid();
  inline void setIsLineJunctionValid(bool value);

  inline  ::int16_t getLaneCategory();
  inline void setLaneCategory( ::int16_t value);

  inline  ::uint8_t getLineTypeId();
  inline void setLineTypeId( ::uint8_t value);

  inline float getLineTypeConfidence();
  inline void setLineTypeConfidence(float value);

  inline  ::int16_t getFittingType();
  inline void setFittingType( ::int16_t value);

  inline float getLanelineWidthLeft();
  inline void setLanelineWidthLeft(float value);

  inline float getLanelineWidthRight();
  inline void setLanelineWidthRight(float value);

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneLine::Pipeline {
public:
  typedef LaneLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getEndPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SizeInfo::Reader {
public:
  typedef SizeInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline bool hasSize() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getSize() const;

  inline bool hasSizeUncertainty() const;
  inline  ::senseAD::msg::perception::Matrix3f::Reader getSizeUncertainty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SizeInfo::Builder {
public:
  typedef SizeInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline bool hasSize();
  inline  ::senseAD::msg::perception::Vector3f::Builder getSize();
  inline void setSize( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initSize();
  inline void adoptSize(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownSize();

  inline bool hasSizeUncertainty();
  inline  ::senseAD::msg::perception::Matrix3f::Builder getSizeUncertainty();
  inline void setSizeUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value);
  inline  ::senseAD::msg::perception::Matrix3f::Builder initSizeUncertainty();
  inline void adoptSizeUncertainty(::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> disownSizeUncertainty();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SizeInfo::Pipeline {
public:
  typedef SizeInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Vector3f::Pipeline getSize();
  inline  ::senseAD::msg::perception::Matrix3f::Pipeline getSizeUncertainty();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Matrix3f::Reader {
public:
  typedef Matrix3f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasX() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getX() const;

  inline bool hasY() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getY() const;

  inline bool hasZ() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Matrix3f::Builder {
public:
  typedef Matrix3f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasX();
  inline  ::senseAD::msg::perception::Vector3f::Builder getX();
  inline void setX( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initX();
  inline void adoptX(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownX();

  inline bool hasY();
  inline  ::senseAD::msg::perception::Vector3f::Builder getY();
  inline void setY( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initY();
  inline void adoptY(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownY();

  inline bool hasZ();
  inline  ::senseAD::msg::perception::Vector3f::Builder getZ();
  inline void setZ( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initZ();
  inline void adoptZ(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownZ();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Matrix3f::Pipeline {
public:
  typedef Matrix3f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Vector3f::Pipeline getX();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getY();
  inline  ::senseAD::msg::perception::Vector3f::Pipeline getZ();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vector4i::Reader {
public:
  typedef Vector4i Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getX() const;

  inline  ::int32_t getY() const;

  inline  ::int32_t getZ() const;

  inline  ::int32_t getW() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vector4i::Builder {
public:
  typedef Vector4i Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getX();
  inline void setX( ::int32_t value);

  inline  ::int32_t getY();
  inline void setY( ::int32_t value);

  inline  ::int32_t getZ();
  inline void setZ( ::int32_t value);

  inline  ::int32_t getW();
  inline void setW( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vector4i::Pipeline {
public:
  typedef Vector4i Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlotLimiter::Reader {
public:
  typedef SlotLimiter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLimiterPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getLimiterPoints() const;

  inline float getConfidence() const;

  inline  ::uint32_t getLimiterStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlotLimiter::Builder {
public:
  typedef SlotLimiter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLimiterPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getLimiterPoints();
  inline void setLimiterPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initLimiterPoints(unsigned int size);
  inline void adoptLimiterPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownLimiterPoints();

  inline float getConfidence();
  inline void setConfidence(float value);

  inline  ::uint32_t getLimiterStatus();
  inline void setLimiterStatus( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlotLimiter::Pipeline {
public:
  typedef SlotLimiter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlotParkingLock::Reader {
public:
  typedef SlotParkingLock Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParkingLockPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getParkingLockPoint() const;

  inline float getConfidence() const;

  inline  ::uint32_t getParkingLockStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlotParkingLock::Builder {
public:
  typedef SlotParkingLock Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParkingLockPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getParkingLockPoint();
  inline void setParkingLockPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initParkingLockPoint();
  inline void adoptParkingLockPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownParkingLockPoint();

  inline float getConfidence();
  inline void setConfidence(float value);

  inline  ::uint32_t getParkingLockStatus();
  inline void setParkingLockStatus( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlotParkingLock::Pipeline {
public:
  typedef SlotParkingLock Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getParkingLockPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingSlot::Reader {
public:
  typedef ParkingSlot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline float getConfidence() const;

  inline float getWidth() const;

  inline float getLength() const;

  inline bool hasCenter() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getCenter() const;

  inline bool hasWideDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getWideDirection() const;

  inline bool hasLongDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getLongDirection() const;

  inline bool getIsOccupied() const;

  inline  ::uint32_t getType() const;

  inline bool hasSlotPoints() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getSlotPoints() const;

  inline bool hasSlotLimiter() const;
  inline  ::senseAD::msg::perception::SlotLimiter::Reader getSlotLimiter() const;

  inline bool hasSlotParkingLock() const;
  inline  ::senseAD::msg::perception::SlotParkingLock::Reader getSlotParkingLock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingSlot::Builder {
public:
  typedef ParkingSlot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline float getConfidence();
  inline void setConfidence(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getLength();
  inline void setLength(float value);

  inline bool hasCenter();
  inline  ::senseAD::msg::perception::Point2f::Builder getCenter();
  inline void setCenter( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initCenter();
  inline void adoptCenter(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownCenter();

  inline bool hasWideDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getWideDirection();
  inline void setWideDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initWideDirection();
  inline void adoptWideDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownWideDirection();

  inline bool hasLongDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getLongDirection();
  inline void setLongDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initLongDirection();
  inline void adoptLongDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownLongDirection();

  inline bool getIsOccupied();
  inline void setIsOccupied(bool value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline bool hasSlotPoints();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getSlotPoints();
  inline void setSlotPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initSlotPoints(unsigned int size);
  inline void adoptSlotPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownSlotPoints();

  inline bool hasSlotLimiter();
  inline  ::senseAD::msg::perception::SlotLimiter::Builder getSlotLimiter();
  inline void setSlotLimiter( ::senseAD::msg::perception::SlotLimiter::Reader value);
  inline  ::senseAD::msg::perception::SlotLimiter::Builder initSlotLimiter();
  inline void adoptSlotLimiter(::capnp::Orphan< ::senseAD::msg::perception::SlotLimiter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SlotLimiter> disownSlotLimiter();

  inline bool hasSlotParkingLock();
  inline  ::senseAD::msg::perception::SlotParkingLock::Builder getSlotParkingLock();
  inline void setSlotParkingLock( ::senseAD::msg::perception::SlotParkingLock::Reader value);
  inline  ::senseAD::msg::perception::SlotParkingLock::Builder initSlotParkingLock();
  inline void adoptSlotParkingLock(::capnp::Orphan< ::senseAD::msg::perception::SlotParkingLock>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SlotParkingLock> disownSlotParkingLock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingSlot::Pipeline {
public:
  typedef ParkingSlot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getCenter();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getWideDirection();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getLongDirection();
  inline  ::senseAD::msg::perception::SlotLimiter::Pipeline getSlotLimiter();
  inline  ::senseAD::msg::perception::SlotParkingLock::Pipeline getSlotParkingLock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingSlotsFrame::Reader {
public:
  typedef ParkingSlotsFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasSlots() const;
  inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader getSlots() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingSlotsFrame::Builder {
public:
  typedef ParkingSlotsFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasSlots();
  inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder getSlots();
  inline void setSlots( ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder initSlots(unsigned int size);
  inline void adoptSlots(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>> disownSlots();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingSlotsFrame::Pipeline {
public:
  typedef ParkingSlotsFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadGeometry::Reader {
public:
  typedef RoadGeometry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLanelineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader getLanelineResults() const;

  inline bool hasStoplineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader getStoplineResults() const;

  inline bool hasFreespaceResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader getFreespaceResults() const;

  inline bool hasCrosswalkResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Reader getCrosswalkResults() const;

  inline bool hasSpeedBumpResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Reader getSpeedBumpResults() const;

  inline bool hasHolisticPathResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Reader getHolisticPathResults() const;

  inline bool hasCenterlineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Reader getCenterlineResults() const;

  inline bool hasRoadMarkerResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Reader getRoadMarkerResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadGeometry::Builder {
public:
  typedef RoadGeometry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLanelineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder getLanelineResults();
  inline void setLanelineResults( ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder initLanelineResults(unsigned int size);
  inline void adoptLanelineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>> disownLanelineResults();

  inline bool hasStoplineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder getStoplineResults();
  inline void setStoplineResults( ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder initStoplineResults(unsigned int size);
  inline void adoptStoplineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>> disownStoplineResults();

  inline bool hasFreespaceResults();
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder getFreespaceResults();
  inline void setFreespaceResults( ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder initFreespaceResults(unsigned int size);
  inline void adoptFreespaceResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>> disownFreespaceResults();

  inline bool hasCrosswalkResults();
  inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Builder getCrosswalkResults();
  inline void setCrosswalkResults( ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Builder initCrosswalkResults(unsigned int size);
  inline void adoptCrosswalkResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>> disownCrosswalkResults();

  inline bool hasSpeedBumpResults();
  inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Builder getSpeedBumpResults();
  inline void setSpeedBumpResults( ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Builder initSpeedBumpResults(unsigned int size);
  inline void adoptSpeedBumpResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>> disownSpeedBumpResults();

  inline bool hasHolisticPathResults();
  inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Builder getHolisticPathResults();
  inline void setHolisticPathResults( ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Builder initHolisticPathResults(unsigned int size);
  inline void adoptHolisticPathResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>> disownHolisticPathResults();

  inline bool hasCenterlineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Builder getCenterlineResults();
  inline void setCenterlineResults( ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Builder initCenterlineResults(unsigned int size);
  inline void adoptCenterlineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>> disownCenterlineResults();

  inline bool hasRoadMarkerResults();
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Builder getRoadMarkerResults();
  inline void setRoadMarkerResults( ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Builder initRoadMarkerResults(unsigned int size);
  inline void adoptRoadMarkerResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>> disownRoadMarkerResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadGeometry::Pipeline {
public:
  typedef RoadGeometry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LidarDangerousZoneFrame::Reader {
public:
  typedef LidarDangerousZoneFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline double getHeight() const;

  inline  ::int16_t getType() const;

  inline bool hasDzones() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Reader getDzones() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LidarDangerousZoneFrame::Builder {
public:
  typedef LidarDangerousZoneFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline double getHeight();
  inline void setHeight(double value);

  inline  ::int16_t getType();
  inline void setType( ::int16_t value);

  inline bool hasDzones();
  inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Builder getDzones();
  inline void setDzones( ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Builder initDzones(unsigned int size);
  inline void adoptDzones(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>> disownDzones();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LidarDangerousZoneFrame::Pipeline {
public:
  typedef LidarDangerousZoneFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLight::Reader {
public:
  typedef TrafficLight Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasGroupId() const;
  inline  ::capnp::Text::Reader getGroupId() const;

  inline  ::uint16_t getColorLabel() const;

  inline  ::uint16_t getTurnType() const;

  inline float getDuringTime() const;

  inline bool hasImage2dInfo() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Reader getImage2dInfo() const;

  inline bool hasWorldGeometry() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Reader getWorldGeometry() const;

  inline bool hasLocalGeometry() const;
  inline  ::senseAD::msg::perception::Vector3f::Reader getLocalGeometry() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLight::Builder {
public:
  typedef TrafficLight Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasGroupId();
  inline  ::capnp::Text::Builder getGroupId();
  inline void setGroupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGroupId(unsigned int size);
  inline void adoptGroupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGroupId();

  inline  ::uint16_t getColorLabel();
  inline void setColorLabel( ::uint16_t value);

  inline  ::uint16_t getTurnType();
  inline void setTurnType( ::uint16_t value);

  inline float getDuringTime();
  inline void setDuringTime(float value);

  inline bool hasImage2dInfo();
  inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Builder getImage2dInfo();
  inline void setImage2dInfo( ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Builder initImage2dInfo(unsigned int size);
  inline void adoptImage2dInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>> disownImage2dInfo();

  inline bool hasWorldGeometry();
  inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Builder getWorldGeometry();
  inline void setWorldGeometry( ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Builder initWorldGeometry(unsigned int size);
  inline void adoptWorldGeometry(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>> disownWorldGeometry();

  inline bool hasLocalGeometry();
  inline  ::senseAD::msg::perception::Vector3f::Builder getLocalGeometry();
  inline void setLocalGeometry( ::senseAD::msg::perception::Vector3f::Reader value);
  inline  ::senseAD::msg::perception::Vector3f::Builder initLocalGeometry();
  inline void adoptLocalGeometry(::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> disownLocalGeometry();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLight::Pipeline {
public:
  typedef TrafficLight Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Vector3f::Pipeline getLocalGeometry();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadStruct::Reader {
public:
  typedef RoadStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLanelineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader getLanelineResults() const;

  inline bool hasStoplineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader getStoplineResults() const;

  inline bool hasBoundaryResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Reader getBoundaryResults() const;

  inline bool hasFreespaceResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader getFreespaceResults() const;

  inline bool hasTrafficLightResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader getTrafficLightResults() const;

  inline bool hasTrafficSignResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader getTrafficSignResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadStruct::Builder {
public:
  typedef RoadStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLanelineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder getLanelineResults();
  inline void setLanelineResults( ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder initLanelineResults(unsigned int size);
  inline void adoptLanelineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>> disownLanelineResults();

  inline bool hasStoplineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder getStoplineResults();
  inline void setStoplineResults( ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder initStoplineResults(unsigned int size);
  inline void adoptStoplineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>> disownStoplineResults();

  inline bool hasBoundaryResults();
  inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Builder getBoundaryResults();
  inline void setBoundaryResults( ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Builder initBoundaryResults(unsigned int size);
  inline void adoptBoundaryResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>> disownBoundaryResults();

  inline bool hasFreespaceResults();
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder getFreespaceResults();
  inline void setFreespaceResults( ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder initFreespaceResults(unsigned int size);
  inline void adoptFreespaceResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>> disownFreespaceResults();

  inline bool hasTrafficLightResults();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder getTrafficLightResults();
  inline void setTrafficLightResults( ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder initTrafficLightResults(unsigned int size);
  inline void adoptTrafficLightResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>> disownTrafficLightResults();

  inline bool hasTrafficSignResults();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder getTrafficSignResults();
  inline void setTrafficSignResults( ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder initTrafficSignResults(unsigned int size);
  inline void adoptTrafficSignResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>> disownTrafficSignResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadStruct::Pipeline {
public:
  typedef RoadStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bbox2D::Reader {
public:
  typedef Bbox2D Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitialized() const;

  inline float getTopLeftX() const;

  inline float getTopLeftY() const;

  inline float getBottomRightX() const;

  inline float getBottomRightY() const;

  inline float getConfidence() const;

  inline bool getIsLeftSideTruncated() const;

  inline bool getIsRightSideTruncated() const;

  inline bool getIsTopSideTruncated() const;

  inline bool getIsBottomSideTruncated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bbox2D::Builder {
public:
  typedef Bbox2D Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitialized();
  inline void setInitialized(bool value);

  inline float getTopLeftX();
  inline void setTopLeftX(float value);

  inline float getTopLeftY();
  inline void setTopLeftY(float value);

  inline float getBottomRightX();
  inline void setBottomRightX(float value);

  inline float getBottomRightY();
  inline void setBottomRightY(float value);

  inline float getConfidence();
  inline void setConfidence(float value);

  inline bool getIsLeftSideTruncated();
  inline void setIsLeftSideTruncated(bool value);

  inline bool getIsRightSideTruncated();
  inline void setIsRightSideTruncated(bool value);

  inline bool getIsTopSideTruncated();
  inline void setIsTopSideTruncated(bool value);

  inline bool getIsBottomSideTruncated();
  inline void setIsBottomSideTruncated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bbox2D::Pipeline {
public:
  typedef Bbox2D Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Internal2DBBox::Reader {
public:
  typedef Internal2DBBox Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline float getTopLeftX() const;

  inline float getTopLeftY() const;

  inline float getBottomRightX() const;

  inline float getBottomRightY() const;

  inline bool getIsLeftSideTruncated() const;

  inline bool getIsRightSideTruncated() const;

  inline bool getIsTopSideTruncated() const;

  inline bool getIsBottomSideTruncated() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Internal2DBBox::Builder {
public:
  typedef Internal2DBBox Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline float getTopLeftX();
  inline void setTopLeftX(float value);

  inline float getTopLeftY();
  inline void setTopLeftY(float value);

  inline float getBottomRightX();
  inline void setBottomRightX(float value);

  inline float getBottomRightY();
  inline void setBottomRightY(float value);

  inline bool getIsLeftSideTruncated();
  inline void setIsLeftSideTruncated(bool value);

  inline bool getIsRightSideTruncated();
  inline void setIsRightSideTruncated(bool value);

  inline bool getIsTopSideTruncated();
  inline void setIsTopSideTruncated(bool value);

  inline bool getIsBottomSideTruncated();
  inline void setIsBottomSideTruncated(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Internal2DBBox::Pipeline {
public:
  typedef Internal2DBBox Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SceneInfo::Reader {
public:
  typedef SceneInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSceneBrightnessInfo() const;

  inline  ::uint8_t getSceneWeatherInfo() const;

  inline  ::uint8_t getSceneEnvironmentInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SceneInfo::Builder {
public:
  typedef SceneInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getSceneBrightnessInfo();
  inline void setSceneBrightnessInfo( ::uint8_t value);

  inline  ::uint8_t getSceneWeatherInfo();
  inline void setSceneWeatherInfo( ::uint8_t value);

  inline  ::uint8_t getSceneEnvironmentInfo();
  inline void setSceneEnvironmentInfo( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SceneInfo::Pipeline {
public:
  typedef SceneInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AutomobileDoorStatus::Reader {
public:
  typedef AutomobileDoorStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getBboxValidity() const;

  inline  ::int8_t getLeftDoorStatus() const;

  inline  ::int8_t getRightDoorStatus() const;

  inline  ::int8_t getRearDoorStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AutomobileDoorStatus::Builder {
public:
  typedef AutomobileDoorStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getBboxValidity();
  inline void setBboxValidity( ::int8_t value);

  inline  ::int8_t getLeftDoorStatus();
  inline void setLeftDoorStatus( ::int8_t value);

  inline  ::int8_t getRightDoorStatus();
  inline void setRightDoorStatus( ::int8_t value);

  inline  ::int8_t getRearDoorStatus();
  inline void setRearDoorStatus( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AutomobileDoorStatus::Pipeline {
public:
  typedef AutomobileDoorStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Object::Reader {
public:
  typedef Object Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::int16_t getLabel() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline float getGeneralObjectProbilibty() const;

  inline  ::int16_t getSubtype() const;

  inline bool hasSubTypeProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSubTypeProbs() const;

  inline  ::int32_t getTrackId() const;

  inline float getTrackAgeTimeSecond() const;

  inline  ::uint64_t getLastMeasureUpdateTimestampNs() const;

  inline  ::uint64_t getCurrentPredictionTimestampNs() const;

  inline bool hasSizeInfo() const;
  inline  ::senseAD::msg::perception::SizeInfo::Reader getSizeInfo() const;

  inline bool hasPolygonBox() const;
  inline  ::senseAD::msg::perception::PolygonBox::Reader getPolygonBox() const;

  inline bool hasDirectionInfo() const;
  inline  ::senseAD::msg::perception::DirectionInfo::Reader getDirectionInfo() const;

  inline bool hasBvCorners() const;
  inline  ::senseAD::msg::perception::BirdViewCorners::Reader getBvCorners() const;

  inline bool hasMotionInfo() const;
  inline  ::senseAD::msg::perception::MotionInfo::Reader getMotionInfo() const;

  inline  ::int16_t getMotionStatus() const;

  inline float getMotionUnknownScore() const;

  inline float getMotionStaticScore() const;

  inline float getMotionStoppedScore() const;

  inline float getMotionMovingScore() const;

  inline float getMotionCrossingScore() const;

  inline  ::int16_t getMaintenanceStatus() const;

  inline  ::int16_t getOcclusionStatus() const;

  inline  ::int16_t getSensorSource() const;

  inline bool hasGeneralMergeInfo() const;
  inline  ::senseAD::msg::perception::GeneralMergeInfo::Reader getGeneralMergeInfo() const;

  inline bool hasFeature() const;
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader getFeature() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

  inline bool hasBboxMotionInfo() const;
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Reader getBboxMotionInfo() const;

  inline  ::senseAD::msg::perception::Object::DerivedType getDerivedtype() const;

  inline bool hasAttribute() const;
  inline  ::senseAD::msg::perception::BaseCameraAttribute::Reader getAttribute() const;

  inline bool hasAutomobileLightStatus() const;
  inline  ::senseAD::msg::perception::AutomobileLightStatus::Reader getAutomobileLightStatus() const;

  inline bool getIsRightEdgeDetected() const;

  inline bool hasRightEdgeLine() const;
  inline  ::senseAD::msg::perception::Vector4i::Reader getRightEdgeLine() const;

  inline bool hasNonAutomobileVehicleLightStatus() const;
  inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Reader getNonAutomobileVehicleLightStatus() const;

  inline bool getIsWithPed() const;

  inline  ::int8_t getUmbrella() const;

  inline  ::int8_t getCall() const;

  inline  ::int8_t getPhone() const;

  inline  ::int8_t getWave() const;

  inline  ::int8_t getStanding() const;

  inline bool hasUpperBodyDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getUpperBodyDirection() const;

  inline bool hasLowerBodyDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getLowerBodyDirection() const;

  inline bool hasFaceDirection() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getFaceDirection() const;

  inline bool hasIntention() const;
  inline  ::senseAD::msg::perception::PedestrianIntention::Reader getIntention() const;

  inline bool getIsOnBike() const;

  inline bool hasDepthPoint() const;
  inline  ::senseAD::msg::perception::DepthDetPoint::Reader getDepthPoint() const;

  inline bool hasOdRdInfo() const;
  inline  ::senseAD::msg::perception::ObjectLaneAssignments::Reader getOdRdInfo() const;

  inline bool hasDebugInfo() const;
  inline  ::senseAD::msg::perception::CameraDebugInfo::Reader getDebugInfo() const;

  inline  ::uint64_t getPointCloudTimestampNs() const;

  inline double getTrackRange() const;

  inline double getTrackRangeRate() const;

  inline double getTrackRangeAccelRate() const;

  inline double getTrackLatRate() const;

  inline bool hasMatchedSensorObjectInfo() const;
  inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Reader getMatchedSensorObjectInfo() const;

  inline  ::uint16_t getColorLabel() const;

  inline bool hasAutomobileDoorStatus() const;
  inline  ::senseAD::msg::perception::AutomobileDoorStatus::Reader getAutomobileDoorStatus() const;

  inline bool hasHistInfo() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfo() const;

  inline  ::uint8_t getTrackStatus() const;

  inline bool hasSensorIdBox() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Reader getSensorIdBox() const;

  inline  ::int8_t getMotionState() const;

  inline  ::int8_t getCarDoorState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Object::Builder {
public:
  typedef Object Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline float getGeneralObjectProbilibty();
  inline void setGeneralObjectProbilibty(float value);

  inline  ::int16_t getSubtype();
  inline void setSubtype( ::int16_t value);

  inline bool hasSubTypeProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSubTypeProbs();
  inline void setSubTypeProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSubTypeProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSubTypeProbs(unsigned int size);
  inline void adoptSubTypeProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSubTypeProbs();

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getTrackAgeTimeSecond();
  inline void setTrackAgeTimeSecond(float value);

  inline  ::uint64_t getLastMeasureUpdateTimestampNs();
  inline void setLastMeasureUpdateTimestampNs( ::uint64_t value);

  inline  ::uint64_t getCurrentPredictionTimestampNs();
  inline void setCurrentPredictionTimestampNs( ::uint64_t value);

  inline bool hasSizeInfo();
  inline  ::senseAD::msg::perception::SizeInfo::Builder getSizeInfo();
  inline void setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value);
  inline  ::senseAD::msg::perception::SizeInfo::Builder initSizeInfo();
  inline void adoptSizeInfo(::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> disownSizeInfo();

  inline bool hasPolygonBox();
  inline  ::senseAD::msg::perception::PolygonBox::Builder getPolygonBox();
  inline void setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value);
  inline  ::senseAD::msg::perception::PolygonBox::Builder initPolygonBox();
  inline void adoptPolygonBox(::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> disownPolygonBox();

  inline bool hasDirectionInfo();
  inline  ::senseAD::msg::perception::DirectionInfo::Builder getDirectionInfo();
  inline void setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value);
  inline  ::senseAD::msg::perception::DirectionInfo::Builder initDirectionInfo();
  inline void adoptDirectionInfo(::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> disownDirectionInfo();

  inline bool hasBvCorners();
  inline  ::senseAD::msg::perception::BirdViewCorners::Builder getBvCorners();
  inline void setBvCorners( ::senseAD::msg::perception::BirdViewCorners::Reader value);
  inline  ::senseAD::msg::perception::BirdViewCorners::Builder initBvCorners();
  inline void adoptBvCorners(::capnp::Orphan< ::senseAD::msg::perception::BirdViewCorners>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::BirdViewCorners> disownBvCorners();

  inline bool hasMotionInfo();
  inline  ::senseAD::msg::perception::MotionInfo::Builder getMotionInfo();
  inline void setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value);
  inline  ::senseAD::msg::perception::MotionInfo::Builder initMotionInfo();
  inline void adoptMotionInfo(::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> disownMotionInfo();

  inline  ::int16_t getMotionStatus();
  inline void setMotionStatus( ::int16_t value);

  inline float getMotionUnknownScore();
  inline void setMotionUnknownScore(float value);

  inline float getMotionStaticScore();
  inline void setMotionStaticScore(float value);

  inline float getMotionStoppedScore();
  inline void setMotionStoppedScore(float value);

  inline float getMotionMovingScore();
  inline void setMotionMovingScore(float value);

  inline float getMotionCrossingScore();
  inline void setMotionCrossingScore(float value);

  inline  ::int16_t getMaintenanceStatus();
  inline void setMaintenanceStatus( ::int16_t value);

  inline  ::int16_t getOcclusionStatus();
  inline void setOcclusionStatus( ::int16_t value);

  inline  ::int16_t getSensorSource();
  inline void setSensorSource( ::int16_t value);

  inline bool hasGeneralMergeInfo();
  inline  ::senseAD::msg::perception::GeneralMergeInfo::Builder getGeneralMergeInfo();
  inline void setGeneralMergeInfo( ::senseAD::msg::perception::GeneralMergeInfo::Reader value);
  inline  ::senseAD::msg::perception::GeneralMergeInfo::Builder initGeneralMergeInfo();
  inline void adoptGeneralMergeInfo(::capnp::Orphan< ::senseAD::msg::perception::GeneralMergeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::GeneralMergeInfo> disownGeneralMergeInfo();

  inline bool hasFeature();
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder getFeature();
  inline void setFeature( ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder initFeature(unsigned int size);
  inline void adoptFeature(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> disownFeature();

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownCameraBboxInfo();

  inline bool hasBboxMotionInfo();
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder getBboxMotionInfo();
  inline void setBboxMotionInfo( ::senseAD::msg::perception::Bbox2DMotionInfo::Reader value);
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder initBboxMotionInfo();
  inline void adoptBboxMotionInfo(::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo> disownBboxMotionInfo();

  inline  ::senseAD::msg::perception::Object::DerivedType getDerivedtype();
  inline void setDerivedtype( ::senseAD::msg::perception::Object::DerivedType value);

  inline bool hasAttribute();
  inline  ::senseAD::msg::perception::BaseCameraAttribute::Builder getAttribute();
  inline void setAttribute( ::senseAD::msg::perception::BaseCameraAttribute::Reader value);
  inline  ::senseAD::msg::perception::BaseCameraAttribute::Builder initAttribute();
  inline void adoptAttribute(::capnp::Orphan< ::senseAD::msg::perception::BaseCameraAttribute>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::BaseCameraAttribute> disownAttribute();

  inline bool hasAutomobileLightStatus();
  inline  ::senseAD::msg::perception::AutomobileLightStatus::Builder getAutomobileLightStatus();
  inline void setAutomobileLightStatus( ::senseAD::msg::perception::AutomobileLightStatus::Reader value);
  inline  ::senseAD::msg::perception::AutomobileLightStatus::Builder initAutomobileLightStatus();
  inline void adoptAutomobileLightStatus(::capnp::Orphan< ::senseAD::msg::perception::AutomobileLightStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::AutomobileLightStatus> disownAutomobileLightStatus();

  inline bool getIsRightEdgeDetected();
  inline void setIsRightEdgeDetected(bool value);

  inline bool hasRightEdgeLine();
  inline  ::senseAD::msg::perception::Vector4i::Builder getRightEdgeLine();
  inline void setRightEdgeLine( ::senseAD::msg::perception::Vector4i::Reader value);
  inline  ::senseAD::msg::perception::Vector4i::Builder initRightEdgeLine();
  inline void adoptRightEdgeLine(::capnp::Orphan< ::senseAD::msg::perception::Vector4i>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Vector4i> disownRightEdgeLine();

  inline bool hasNonAutomobileVehicleLightStatus();
  inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Builder getNonAutomobileVehicleLightStatus();
  inline void setNonAutomobileVehicleLightStatus( ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Reader value);
  inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Builder initNonAutomobileVehicleLightStatus();
  inline void adoptNonAutomobileVehicleLightStatus(::capnp::Orphan< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus> disownNonAutomobileVehicleLightStatus();

  inline bool getIsWithPed();
  inline void setIsWithPed(bool value);

  inline  ::int8_t getUmbrella();
  inline void setUmbrella( ::int8_t value);

  inline  ::int8_t getCall();
  inline void setCall( ::int8_t value);

  inline  ::int8_t getPhone();
  inline void setPhone( ::int8_t value);

  inline  ::int8_t getWave();
  inline void setWave( ::int8_t value);

  inline  ::int8_t getStanding();
  inline void setStanding( ::int8_t value);

  inline bool hasUpperBodyDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getUpperBodyDirection();
  inline void setUpperBodyDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initUpperBodyDirection();
  inline void adoptUpperBodyDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownUpperBodyDirection();

  inline bool hasLowerBodyDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getLowerBodyDirection();
  inline void setLowerBodyDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initLowerBodyDirection();
  inline void adoptLowerBodyDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownLowerBodyDirection();

  inline bool hasFaceDirection();
  inline  ::senseAD::msg::perception::Point2f::Builder getFaceDirection();
  inline void setFaceDirection( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initFaceDirection();
  inline void adoptFaceDirection(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownFaceDirection();

  inline bool hasIntention();
  inline  ::senseAD::msg::perception::PedestrianIntention::Builder getIntention();
  inline void setIntention( ::senseAD::msg::perception::PedestrianIntention::Reader value);
  inline  ::senseAD::msg::perception::PedestrianIntention::Builder initIntention();
  inline void adoptIntention(::capnp::Orphan< ::senseAD::msg::perception::PedestrianIntention>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PedestrianIntention> disownIntention();

  inline bool getIsOnBike();
  inline void setIsOnBike(bool value);

  inline bool hasDepthPoint();
  inline  ::senseAD::msg::perception::DepthDetPoint::Builder getDepthPoint();
  inline void setDepthPoint( ::senseAD::msg::perception::DepthDetPoint::Reader value);
  inline  ::senseAD::msg::perception::DepthDetPoint::Builder initDepthPoint();
  inline void adoptDepthPoint(::capnp::Orphan< ::senseAD::msg::perception::DepthDetPoint>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::DepthDetPoint> disownDepthPoint();

  inline bool hasOdRdInfo();
  inline  ::senseAD::msg::perception::ObjectLaneAssignments::Builder getOdRdInfo();
  inline void setOdRdInfo( ::senseAD::msg::perception::ObjectLaneAssignments::Reader value);
  inline  ::senseAD::msg::perception::ObjectLaneAssignments::Builder initOdRdInfo();
  inline void adoptOdRdInfo(::capnp::Orphan< ::senseAD::msg::perception::ObjectLaneAssignments>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::ObjectLaneAssignments> disownOdRdInfo();

  inline bool hasDebugInfo();
  inline  ::senseAD::msg::perception::CameraDebugInfo::Builder getDebugInfo();
  inline void setDebugInfo( ::senseAD::msg::perception::CameraDebugInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraDebugInfo::Builder initDebugInfo();
  inline void adoptDebugInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraDebugInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraDebugInfo> disownDebugInfo();

  inline  ::uint64_t getPointCloudTimestampNs();
  inline void setPointCloudTimestampNs( ::uint64_t value);

  inline double getTrackRange();
  inline void setTrackRange(double value);

  inline double getTrackRangeRate();
  inline void setTrackRangeRate(double value);

  inline double getTrackRangeAccelRate();
  inline void setTrackRangeAccelRate(double value);

  inline double getTrackLatRate();
  inline void setTrackLatRate(double value);

  inline bool hasMatchedSensorObjectInfo();
  inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Builder getMatchedSensorObjectInfo();
  inline void setMatchedSensorObjectInfo( ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Builder initMatchedSensorObjectInfo(unsigned int size);
  inline void adoptMatchedSensorObjectInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>> disownMatchedSensorObjectInfo();

  inline  ::uint16_t getColorLabel();
  inline void setColorLabel( ::uint16_t value);

  inline bool hasAutomobileDoorStatus();
  inline  ::senseAD::msg::perception::AutomobileDoorStatus::Builder getAutomobileDoorStatus();
  inline void setAutomobileDoorStatus( ::senseAD::msg::perception::AutomobileDoorStatus::Reader value);
  inline  ::senseAD::msg::perception::AutomobileDoorStatus::Builder initAutomobileDoorStatus();
  inline void adoptAutomobileDoorStatus(::capnp::Orphan< ::senseAD::msg::perception::AutomobileDoorStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::AutomobileDoorStatus> disownAutomobileDoorStatus();

  inline bool hasHistInfo();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfo();
  inline void setHistInfo( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfo(unsigned int size);
  inline void adoptHistInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfo();

  inline  ::uint8_t getTrackStatus();
  inline void setTrackStatus( ::uint8_t value);

  inline bool hasSensorIdBox();
  inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Builder getSensorIdBox();
  inline void setSensorIdBox( ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Builder initSensorIdBox(unsigned int size);
  inline void adoptSensorIdBox(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>> disownSensorIdBox();

  inline  ::int8_t getMotionState();
  inline void setMotionState( ::int8_t value);

  inline  ::int8_t getCarDoorState();
  inline void setCarDoorState( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Object::Pipeline {
public:
  typedef Object Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::SizeInfo::Pipeline getSizeInfo();
  inline  ::senseAD::msg::perception::PolygonBox::Pipeline getPolygonBox();
  inline  ::senseAD::msg::perception::DirectionInfo::Pipeline getDirectionInfo();
  inline  ::senseAD::msg::perception::BirdViewCorners::Pipeline getBvCorners();
  inline  ::senseAD::msg::perception::MotionInfo::Pipeline getMotionInfo();
  inline  ::senseAD::msg::perception::GeneralMergeInfo::Pipeline getGeneralMergeInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
  inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline getBboxMotionInfo();
  inline  ::senseAD::msg::perception::BaseCameraAttribute::Pipeline getAttribute();
  inline  ::senseAD::msg::perception::AutomobileLightStatus::Pipeline getAutomobileLightStatus();
  inline  ::senseAD::msg::perception::Vector4i::Pipeline getRightEdgeLine();
  inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Pipeline getNonAutomobileVehicleLightStatus();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getUpperBodyDirection();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getLowerBodyDirection();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getFaceDirection();
  inline  ::senseAD::msg::perception::PedestrianIntention::Pipeline getIntention();
  inline  ::senseAD::msg::perception::DepthDetPoint::Pipeline getDepthPoint();
  inline  ::senseAD::msg::perception::ObjectLaneAssignments::Pipeline getOdRdInfo();
  inline  ::senseAD::msg::perception::CameraDebugInfo::Pipeline getDebugInfo();
  inline  ::senseAD::msg::perception::AutomobileDoorStatus::Pipeline getAutomobileDoorStatus();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FSLinePt::Reader {
public:
  typedef FSLinePt Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getV() const;

  inline  ::uint8_t getLabel() const;

  inline bool getIsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FSLinePt::Builder {
public:
  typedef FSLinePt Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getV();
  inline void setV( ::int16_t value);

  inline  ::uint8_t getLabel();
  inline void setLabel( ::uint8_t value);

  inline bool getIsValid();
  inline void setIsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FSLinePt::Pipeline {
public:
  typedef FSLinePt Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FSLineResult::Reader {
public:
  typedef FSLineResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFsLinePts() const;
  inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Reader getFsLinePts() const;

  inline  ::uint64_t getTimestampNs() const;

  inline bool getIsValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FSLineResult::Builder {
public:
  typedef FSLineResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFsLinePts();
  inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Builder getFsLinePts();
  inline void setFsLinePts( ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Builder initFsLinePts(unsigned int size);
  inline void adoptFsLinePts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>> disownFsLinePts();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool getIsValid();
  inline void setIsValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FSLineResult::Pipeline {
public:
  typedef FSLineResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FSLineFrame::Reader {
public:
  typedef FSLineFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasFisheyeFsLineResults() const;
  inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Reader getFisheyeFsLineResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FSLineFrame::Builder {
public:
  typedef FSLineFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasFisheyeFsLineResults();
  inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Builder getFisheyeFsLineResults();
  inline void setFisheyeFsLineResults( ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Builder initFisheyeFsLineResults(unsigned int size);
  inline void adoptFisheyeFsLineResults(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>> disownFisheyeFsLineResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FSLineFrame::Pipeline {
public:
  typedef FSLineFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Freespace::Reader {
public:
  typedef Freespace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline bool hasWorldPoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getWorldPoints() const;

  inline bool hasCameraOpticalCenter() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getCameraOpticalCenter() const;

  inline bool hasAngleResults() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getAngleResults() const;

  inline bool hasRangeResults() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRangeResults() const;

  inline bool hasConfidence() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getConfidence() const;

  inline  ::int32_t getCol() const;

  inline  ::int32_t getRow() const;

  inline float getResolution() const;

  inline bool hasOccupancyGrid() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getOccupancyGrid() const;

  inline  ::uint16_t getWidth() const;

  inline  ::uint16_t getHeight() const;

  inline bool hasBitMap() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getBitMap() const;

  inline bool hasHistInfoVector() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader getHistInfoVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Freespace::Builder {
public:
  typedef Freespace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline bool hasWorldPoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getWorldPoints();
  inline void setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initWorldPoints(unsigned int size);
  inline void adoptWorldPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownWorldPoints();

  inline bool hasCameraOpticalCenter();
  inline  ::senseAD::msg::perception::Point2f::Builder getCameraOpticalCenter();
  inline void setCameraOpticalCenter( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initCameraOpticalCenter();
  inline void adoptCameraOpticalCenter(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownCameraOpticalCenter();

  inline bool hasAngleResults();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getAngleResults();
  inline void setAngleResults( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAngleResults(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initAngleResults(unsigned int size);
  inline void adoptAngleResults(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownAngleResults();

  inline bool hasRangeResults();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRangeResults();
  inline void setRangeResults( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRangeResults(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRangeResults(unsigned int size);
  inline void adoptRangeResults(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRangeResults();

  inline bool hasConfidence();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getConfidence();
  inline void setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setConfidence(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initConfidence(unsigned int size);
  inline void adoptConfidence(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownConfidence();

  inline  ::int32_t getCol();
  inline void setCol( ::int32_t value);

  inline  ::int32_t getRow();
  inline void setRow( ::int32_t value);

  inline float getResolution();
  inline void setResolution(float value);

  inline bool hasOccupancyGrid();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getOccupancyGrid();
  inline void setOccupancyGrid( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOccupancyGrid(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initOccupancyGrid(unsigned int size);
  inline void adoptOccupancyGrid(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownOccupancyGrid();

  inline  ::uint16_t getWidth();
  inline void setWidth( ::uint16_t value);

  inline  ::uint16_t getHeight();
  inline void setHeight( ::uint16_t value);

  inline bool hasBitMap();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getBitMap();
  inline void setBitMap( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBitMap(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initBitMap(unsigned int size);
  inline void adoptBitMap(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownBitMap();

  inline bool hasHistInfoVector();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder getHistInfoVector();
  inline void setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder initHistInfoVector(unsigned int size);
  inline void adoptHistInfoVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> disownHistInfoVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Freespace::Pipeline {
public:
  typedef Freespace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getCameraOpticalCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PedestrianIntention::Reader {
public:
  typedef PedestrianIntention Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getCrossing() const;

  inline  ::int16_t getAttentionToEgoCar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PedestrianIntention::Builder {
public:
  typedef PedestrianIntention Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getCrossing();
  inline void setCrossing( ::int16_t value);

  inline  ::int16_t getAttentionToEgoCar();
  inline void setAttentionToEgoCar( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PedestrianIntention::Pipeline {
public:
  typedef PedestrianIntention Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DepthDetPoint::Reader {
public:
  typedef DepthDetPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getNearestPointX() const;

  inline float getDepthPointX() const;

  inline float getDepthPointY() const;

  inline bool hasLandmarkFrontPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getLandmarkFrontPoint() const;

  inline bool hasLandmarkRearPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getLandmarkRearPoint() const;

  inline  ::int32_t getOrientation() const;

  inline  ::int16_t getLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DepthDetPoint::Builder {
public:
  typedef DepthDetPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getNearestPointX();
  inline void setNearestPointX(float value);

  inline float getDepthPointX();
  inline void setDepthPointX(float value);

  inline float getDepthPointY();
  inline void setDepthPointY(float value);

  inline bool hasLandmarkFrontPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getLandmarkFrontPoint();
  inline void setLandmarkFrontPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initLandmarkFrontPoint();
  inline void adoptLandmarkFrontPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownLandmarkFrontPoint();

  inline bool hasLandmarkRearPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getLandmarkRearPoint();
  inline void setLandmarkRearPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initLandmarkRearPoint();
  inline void adoptLandmarkRearPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownLandmarkRearPoint();

  inline  ::int32_t getOrientation();
  inline void setOrientation( ::int32_t value);

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DepthDetPoint::Pipeline {
public:
  typedef DepthDetPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getLandmarkFrontPoint();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getLandmarkRearPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TLImage2DInfo::Reader {
public:
  typedef TLImage2DInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCameraName() const;
  inline  ::capnp::Text::Reader getCameraName() const;

  inline bool hasDetectedBbox() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getDetectedBbox() const;

  inline bool getIsProjectionValid() const;

  inline bool hasProjectedCenterPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getProjectedCenterPoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TLImage2DInfo::Builder {
public:
  typedef TLImage2DInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCameraName();
  inline  ::capnp::Text::Builder getCameraName();
  inline void setCameraName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCameraName(unsigned int size);
  inline void adoptCameraName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCameraName();

  inline bool hasDetectedBbox();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getDetectedBbox();
  inline void setDetectedBbox( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initDetectedBbox();
  inline void adoptDetectedBbox(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownDetectedBbox();

  inline bool getIsProjectionValid();
  inline void setIsProjectionValid(bool value);

  inline bool hasProjectedCenterPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getProjectedCenterPoint();
  inline void setProjectedCenterPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initProjectedCenterPoint();
  inline void adoptProjectedCenterPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownProjectedCenterPoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TLImage2DInfo::Pipeline {
public:
  typedef TLImage2DInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getDetectedBbox();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getProjectedCenterPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLightSignFrame::Reader {
public:
  typedef TrafficLightSignFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasTrafficSign() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Reader getTrafficSign() const;

  inline bool hasTrafficLightGroupList() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Reader getTrafficLightGroupList() const;

  inline bool hasCameraNameList() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCameraNameList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLightSignFrame::Builder {
public:
  typedef TrafficLightSignFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::int64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasTrafficSign();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Builder getTrafficSign();
  inline void setTrafficSign( ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Builder initTrafficSign(unsigned int size);
  inline void adoptTrafficSign(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>> disownTrafficSign();

  inline bool hasTrafficLightGroupList();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Builder getTrafficLightGroupList();
  inline void setTrafficLightGroupList( ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Builder initTrafficLightGroupList(unsigned int size);
  inline void adoptTrafficLightGroupList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>> disownTrafficLightGroupList();

  inline bool hasCameraNameList();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCameraNameList();
  inline void setCameraNameList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCameraNameList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCameraNameList(unsigned int size);
  inline void adoptCameraNameList(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCameraNameList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLightSignFrame::Pipeline {
public:
  typedef TrafficLightSignFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Blob::Reader {
public:
  typedef Blob Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObjectTrackId() const;

  inline  ::uint64_t getObejctPairedId() const;

  inline  ::uint16_t getObjectCyclesTraced() const;

  inline bool hasDetBbox2d() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getDetBbox2d() const;

  inline float getPosX() const;

  inline float getPosY() const;

  inline float getPosZ() const;

  inline float getDistance() const;

  inline float getLeftAngle() const;

  inline float getRightAngle() const;

  inline float getTopAngle() const;

  inline float getBottomAngle() const;

  inline float getClassConfidence() const;

  inline  ::uint8_t getBlobType() const;

  inline  ::uint8_t getBlobStatus() const;

  inline  ::uint8_t getOncomingVehicleProbability() const;

  inline  ::uint8_t getPreceedingVehicleProbability() const;

  inline  ::uint64_t getObjectId() const;

  inline  ::uint64_t getObjectIdPaired() const;

  inline  ::uint16_t getIntensity() const;

  inline float getLuminousFlux() const;

  inline  ::int16_t getObjectType() const;

  inline  ::uint8_t getProbabilityVehicleOncoming() const;

  inline  ::uint8_t getProbabilityVehiclePreceeding() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Blob::Builder {
public:
  typedef Blob Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getObjectTrackId();
  inline void setObjectTrackId( ::uint64_t value);

  inline  ::uint64_t getObejctPairedId();
  inline void setObejctPairedId( ::uint64_t value);

  inline  ::uint16_t getObjectCyclesTraced();
  inline void setObjectCyclesTraced( ::uint16_t value);

  inline bool hasDetBbox2d();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getDetBbox2d();
  inline void setDetBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initDetBbox2d();
  inline void adoptDetBbox2d(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownDetBbox2d();

  inline float getPosX();
  inline void setPosX(float value);

  inline float getPosY();
  inline void setPosY(float value);

  inline float getPosZ();
  inline void setPosZ(float value);

  inline float getDistance();
  inline void setDistance(float value);

  inline float getLeftAngle();
  inline void setLeftAngle(float value);

  inline float getRightAngle();
  inline void setRightAngle(float value);

  inline float getTopAngle();
  inline void setTopAngle(float value);

  inline float getBottomAngle();
  inline void setBottomAngle(float value);

  inline float getClassConfidence();
  inline void setClassConfidence(float value);

  inline  ::uint8_t getBlobType();
  inline void setBlobType( ::uint8_t value);

  inline  ::uint8_t getBlobStatus();
  inline void setBlobStatus( ::uint8_t value);

  inline  ::uint8_t getOncomingVehicleProbability();
  inline void setOncomingVehicleProbability( ::uint8_t value);

  inline  ::uint8_t getPreceedingVehicleProbability();
  inline void setPreceedingVehicleProbability( ::uint8_t value);

  inline  ::uint64_t getObjectId();
  inline void setObjectId( ::uint64_t value);

  inline  ::uint64_t getObjectIdPaired();
  inline void setObjectIdPaired( ::uint64_t value);

  inline  ::uint16_t getIntensity();
  inline void setIntensity( ::uint16_t value);

  inline float getLuminousFlux();
  inline void setLuminousFlux(float value);

  inline  ::int16_t getObjectType();
  inline void setObjectType( ::int16_t value);

  inline  ::uint8_t getProbabilityVehicleOncoming();
  inline void setProbabilityVehicleOncoming( ::uint8_t value);

  inline  ::uint8_t getProbabilityVehiclePreceeding();
  inline void setProbabilityVehiclePreceeding( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Blob::Pipeline {
public:
  typedef Blob Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getDetBbox2d();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadFrame::Reader {
public:
  typedef RoadFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasRoadStruct() const;
  inline  ::senseAD::msg::perception::RoadStruct::Reader getRoadStruct() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadFrame::Builder {
public:
  typedef RoadFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::int64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasRoadStruct();
  inline  ::senseAD::msg::perception::RoadStruct::Builder getRoadStruct();
  inline void setRoadStruct( ::senseAD::msg::perception::RoadStruct::Reader value);
  inline  ::senseAD::msg::perception::RoadStruct::Builder initRoadStruct();
  inline void adoptRoadStruct(::capnp::Orphan< ::senseAD::msg::perception::RoadStruct>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::RoadStruct> disownRoadStruct();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadFrame::Pipeline {
public:
  typedef RoadFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::RoadStruct::Pipeline getRoadStruct();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficSignal::Reader {
public:
  typedef TrafficSignal Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficSignal::Builder {
public:
  typedef TrafficSignal Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficSignal::Pipeline {
public:
  typedef TrafficSignal Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObjectLaneAssignments::Reader {
public:
  typedef ObjectLaneAssignments Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLaneAssignments() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getLaneAssignments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObjectLaneAssignments::Builder {
public:
  typedef ObjectLaneAssignments Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLaneAssignments();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getLaneAssignments();
  inline void setLaneAssignments( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneAssignments(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initLaneAssignments(unsigned int size);
  inline void adoptLaneAssignments(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownLaneAssignments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObjectLaneAssignments::Pipeline {
public:
  typedef ObjectLaneAssignments Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoadGeometryFrame::Reader {
public:
  typedef RoadGeometryFrame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasRoadGeometry() const;
  inline  ::senseAD::msg::perception::RoadGeometry::Reader getRoadGeometry() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoadGeometryFrame::Builder {
public:
  typedef RoadGeometryFrame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasRoadGeometry();
  inline  ::senseAD::msg::perception::RoadGeometry::Builder getRoadGeometry();
  inline void setRoadGeometry( ::senseAD::msg::perception::RoadGeometry::Reader value);
  inline  ::senseAD::msg::perception::RoadGeometry::Builder initRoadGeometry();
  inline void adoptRoadGeometry(::capnp::Orphan< ::senseAD::msg::perception::RoadGeometry>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::RoadGeometry> disownRoadGeometry();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoadGeometryFrame::Pipeline {
public:
  typedef RoadGeometryFrame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::RoadGeometry::Pipeline getRoadGeometry();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VecPoint2f::Reader {
public:
  typedef VecPoint2f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasVector() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getVector() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VecPoint2f::Builder {
public:
  typedef VecPoint2f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVector();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getVector();
  inline void setVector( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initVector(unsigned int size);
  inline void adoptVector(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownVector();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VecPoint2f::Pipeline {
public:
  typedef VecPoint2f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vector3f::Reader {
public:
  typedef Vector3f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vector3f::Builder {
public:
  typedef Vector3f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vector3f::Pipeline {
public:
  typedef Vector3f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLightGroup::Reader {
public:
  typedef TrafficLightGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLights() const;
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Reader getTrafficLights() const;

  inline bool hasGroupId() const;
  inline  ::capnp::Text::Reader getGroupId() const;

  inline  ::uint8_t getColorLabel() const;

  inline  ::uint16_t getTurnType() const;

  inline float getDuringTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLightGroup::Builder {
public:
  typedef TrafficLightGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLights();
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Builder getTrafficLights();
  inline void setTrafficLights( ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Builder initTrafficLights(unsigned int size);
  inline void adoptTrafficLights(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>> disownTrafficLights();

  inline bool hasGroupId();
  inline  ::capnp::Text::Builder getGroupId();
  inline void setGroupId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGroupId(unsigned int size);
  inline void adoptGroupId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGroupId();

  inline  ::uint8_t getColorLabel();
  inline void setColorLabel( ::uint8_t value);

  inline  ::uint16_t getTurnType();
  inline void setTurnType( ::uint16_t value);

  inline float getDuringTime();
  inline void setDuringTime(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLightGroup::Pipeline {
public:
  typedef TrafficLightGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMLaneTurnTypeSign::Reader {
public:
  typedef LMLaneTurnTypeSign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTurnType() const;

  inline  ::int16_t getTrackId() const;

  inline bool hasBbox2d() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getBbox2d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMLaneTurnTypeSign::Builder {
public:
  typedef LMLaneTurnTypeSign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTurnType();
  inline void setTurnType( ::uint16_t value);

  inline  ::int16_t getTrackId();
  inline void setTrackId( ::int16_t value);

  inline bool hasBbox2d();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getBbox2d();
  inline void setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initBbox2d();
  inline void adoptBbox2d(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownBbox2d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMLaneTurnTypeSign::Pipeline {
public:
  typedef LMLaneTurnTypeSign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getBbox2d();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficSign::Reader {
public:
  typedef TrafficSign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::int16_t getLabel() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline  ::int16_t getSubType() const;

  inline bool hasSubTypeProbs() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSubTypeProbs() const;

  inline  ::int32_t getTrackId() const;

  inline float getTrackAgeTimeSecond() const;

  inline  ::uint64_t getLastMeasureUpdateTimestampNs() const;

  inline  ::uint64_t getCurrentPredictionTimestampNs() const;

  inline bool hasSizeInfo() const;
  inline  ::senseAD::msg::perception::SizeInfo::Reader getSizeInfo() const;

  inline bool hasPolygonBox() const;
  inline  ::senseAD::msg::perception::PolygonBox::Reader getPolygonBox() const;

  inline bool hasDirectionInfo() const;
  inline  ::senseAD::msg::perception::DirectionInfo::Reader getDirectionInfo() const;

  inline bool hasMotionInfo() const;
  inline  ::senseAD::msg::perception::MotionInfo::Reader getMotionInfo() const;

  inline  ::int16_t getMotionStatus() const;

  inline float getMotionStaticScore() const;

  inline  ::int16_t getMaintenanceStatus() const;

  inline  ::int16_t getOcclusionStatus() const;

  inline bool hasFeature() const;
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader getFeature() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficSign::Builder {
public:
  typedef TrafficSign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::int16_t getLabel();
  inline void setLabel( ::int16_t value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline  ::int16_t getSubType();
  inline void setSubType( ::int16_t value);

  inline bool hasSubTypeProbs();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSubTypeProbs();
  inline void setSubTypeProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSubTypeProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSubTypeProbs(unsigned int size);
  inline void adoptSubTypeProbs(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSubTypeProbs();

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getTrackAgeTimeSecond();
  inline void setTrackAgeTimeSecond(float value);

  inline  ::uint64_t getLastMeasureUpdateTimestampNs();
  inline void setLastMeasureUpdateTimestampNs( ::uint64_t value);

  inline  ::uint64_t getCurrentPredictionTimestampNs();
  inline void setCurrentPredictionTimestampNs( ::uint64_t value);

  inline bool hasSizeInfo();
  inline  ::senseAD::msg::perception::SizeInfo::Builder getSizeInfo();
  inline void setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value);
  inline  ::senseAD::msg::perception::SizeInfo::Builder initSizeInfo();
  inline void adoptSizeInfo(::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> disownSizeInfo();

  inline bool hasPolygonBox();
  inline  ::senseAD::msg::perception::PolygonBox::Builder getPolygonBox();
  inline void setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value);
  inline  ::senseAD::msg::perception::PolygonBox::Builder initPolygonBox();
  inline void adoptPolygonBox(::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> disownPolygonBox();

  inline bool hasDirectionInfo();
  inline  ::senseAD::msg::perception::DirectionInfo::Builder getDirectionInfo();
  inline void setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value);
  inline  ::senseAD::msg::perception::DirectionInfo::Builder initDirectionInfo();
  inline void adoptDirectionInfo(::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> disownDirectionInfo();

  inline bool hasMotionInfo();
  inline  ::senseAD::msg::perception::MotionInfo::Builder getMotionInfo();
  inline void setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value);
  inline  ::senseAD::msg::perception::MotionInfo::Builder initMotionInfo();
  inline void adoptMotionInfo(::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> disownMotionInfo();

  inline  ::int16_t getMotionStatus();
  inline void setMotionStatus( ::int16_t value);

  inline float getMotionStaticScore();
  inline void setMotionStaticScore(float value);

  inline  ::int16_t getMaintenanceStatus();
  inline void setMaintenanceStatus( ::int16_t value);

  inline  ::int16_t getOcclusionStatus();
  inline void setOcclusionStatus( ::int16_t value);

  inline bool hasFeature();
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder getFeature();
  inline void setFeature( ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder initFeature(unsigned int size);
  inline void adoptFeature(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> disownFeature();

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> disownCameraBboxInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficSign::Pipeline {
public:
  typedef TrafficSign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::SizeInfo::Pipeline getSizeInfo();
  inline  ::senseAD::msg::perception::PolygonBox::Pipeline getPolygonBox();
  inline  ::senseAD::msg::perception::DirectionInfo::Pipeline getDirectionInfo();
  inline  ::senseAD::msg::perception::MotionInfo::Pipeline getMotionInfo();
  inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PolygonBox::Reader {
public:
  typedef PolygonBox Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline bool hasPolygonContour() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getPolygonContour() const;

  inline float getHeightLowerSurface() const;

  inline float getHeightUpperSurface() const;

  inline bool hasPolygonContour3d() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Reader getPolygonContour3d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PolygonBox::Builder {
public:
  typedef PolygonBox Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline bool hasPolygonContour();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getPolygonContour();
  inline void setPolygonContour( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initPolygonContour(unsigned int size);
  inline void adoptPolygonContour(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownPolygonContour();

  inline float getHeightLowerSurface();
  inline void setHeightLowerSurface(float value);

  inline float getHeightUpperSurface();
  inline void setHeightUpperSurface(float value);

  inline bool hasPolygonContour3d();
  inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Builder getPolygonContour3d();
  inline void setPolygonContour3d( ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Builder initPolygonContour3d(unsigned int size);
  inline void adoptPolygonContour3d(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>> disownPolygonContour3d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PolygonBox::Pipeline {
public:
  typedef PolygonBox Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMLaneSpeedLimitSign::Reader {
public:
  typedef LMLaneSpeedLimitSign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getLimitedSpeed() const;

  inline  ::int16_t getTrackId() const;

  inline bool hasBbox2d() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getBbox2d() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMLaneSpeedLimitSign::Builder {
public:
  typedef LMLaneSpeedLimitSign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getLimitedSpeed();
  inline void setLimitedSpeed(float value);

  inline  ::int16_t getTrackId();
  inline void setTrackId( ::int16_t value);

  inline bool hasBbox2d();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getBbox2d();
  inline void setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initBbox2d();
  inline void adoptBbox2d(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownBbox2d();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMLaneSpeedLimitSign::Pipeline {
public:
  typedef LMLaneSpeedLimitSign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getBbox2d();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMLanePoint2f::Reader {
public:
  typedef LMLanePoint2f Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline  ::uint8_t getNextSegmentLaneLineType() const;

  inline  ::uint8_t getNextSegmentLaneLineColor() const;

  inline float getNextSegmentLaneLineWidth() const;

  inline float getNextSegmentLaneLineTypeConfidence() const;

  inline float getNextSegmentLaneLineColorConfidence() const;

  inline float getNextSegmentLaneLineWidthConfidence() const;

  inline  ::uint8_t getPointType() const;

  inline float getNextSegmentLaneLineWidthLeft() const;

  inline float getNextSegmentLaneLineWidthRight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMLanePoint2f::Builder {
public:
  typedef LMLanePoint2f Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline  ::uint8_t getNextSegmentLaneLineType();
  inline void setNextSegmentLaneLineType( ::uint8_t value);

  inline  ::uint8_t getNextSegmentLaneLineColor();
  inline void setNextSegmentLaneLineColor( ::uint8_t value);

  inline float getNextSegmentLaneLineWidth();
  inline void setNextSegmentLaneLineWidth(float value);

  inline float getNextSegmentLaneLineTypeConfidence();
  inline void setNextSegmentLaneLineTypeConfidence(float value);

  inline float getNextSegmentLaneLineColorConfidence();
  inline void setNextSegmentLaneLineColorConfidence(float value);

  inline float getNextSegmentLaneLineWidthConfidence();
  inline void setNextSegmentLaneLineWidthConfidence(float value);

  inline  ::uint8_t getPointType();
  inline void setPointType( ::uint8_t value);

  inline float getNextSegmentLaneLineWidthLeft();
  inline void setNextSegmentLaneLineWidthLeft(float value);

  inline float getNextSegmentLaneLineWidthRight();
  inline void setNextSegmentLaneLineWidthRight(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMLanePoint2f::Pipeline {
public:
  typedef LMLanePoint2f Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraBBox2DInfo::Reader {
public:
  typedef CameraBBox2DInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRawDetectionBox() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getRawDetectionBox() const;

  inline bool hasTrackedBox() const;
  inline  ::senseAD::msg::perception::Bbox2D::Reader getTrackedBox() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraBBox2DInfo::Builder {
public:
  typedef CameraBBox2DInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRawDetectionBox();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getRawDetectionBox();
  inline void setRawDetectionBox( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initRawDetectionBox();
  inline void adoptRawDetectionBox(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownRawDetectionBox();

  inline bool hasTrackedBox();
  inline  ::senseAD::msg::perception::Bbox2D::Builder getTrackedBox();
  inline void setTrackedBox( ::senseAD::msg::perception::Bbox2D::Reader value);
  inline  ::senseAD::msg::perception::Bbox2D::Builder initTrackedBox();
  inline void adoptTrackedBox(::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> disownTrackedBox();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraBBox2DInfo::Pipeline {
public:
  typedef CameraBBox2DInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getRawDetectionBox();
  inline  ::senseAD::msg::perception::Bbox2D::Pipeline getTrackedBox();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LMPerceptionRoad::Reader {
public:
  typedef LMPerceptionRoad Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline bool hasSensorName() const;
  inline  ::capnp::Text::Reader getSensorName() const;

  inline bool hasLaneLines() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Reader getLaneLines() const;

  inline bool hasLaneTurntypeSigns() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Reader getLaneTurntypeSigns() const;

  inline bool hasLaneSpeedLimitSigns() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader getLaneSpeedLimitSigns() const;

  inline bool hasSpeedLimitSigns() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader getSpeedLimitSigns() const;

  inline bool hasRegions() const;
  inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Reader getRegions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LMPerceptionRoad::Builder {
public:
  typedef LMPerceptionRoad Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline bool hasSensorName();
  inline  ::capnp::Text::Builder getSensorName();
  inline void setSensorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSensorName(unsigned int size);
  inline void adoptSensorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSensorName();

  inline bool hasLaneLines();
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Builder getLaneLines();
  inline void setLaneLines( ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Builder initLaneLines(unsigned int size);
  inline void adoptLaneLines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>> disownLaneLines();

  inline bool hasLaneTurntypeSigns();
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Builder getLaneTurntypeSigns();
  inline void setLaneTurntypeSigns( ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Builder initLaneTurntypeSigns(unsigned int size);
  inline void adoptLaneTurntypeSigns(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>> disownLaneTurntypeSigns();

  inline bool hasLaneSpeedLimitSigns();
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder getLaneSpeedLimitSigns();
  inline void setLaneSpeedLimitSigns( ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder initLaneSpeedLimitSigns(unsigned int size);
  inline void adoptLaneSpeedLimitSigns(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>> disownLaneSpeedLimitSigns();

  inline bool hasSpeedLimitSigns();
  inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder getSpeedLimitSigns();
  inline void setSpeedLimitSigns( ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder initSpeedLimitSigns(unsigned int size);
  inline void adoptSpeedLimitSigns(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>> disownSpeedLimitSigns();

  inline bool hasRegions();
  inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Builder getRegions();
  inline void setRegions( ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Builder initRegions(unsigned int size);
  inline void adoptRegions(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>> disownRegions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LMPerceptionRoad::Pipeline {
public:
  typedef LMPerceptionRoad Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UniADPlanningDebug::Reader {
public:
  typedef UniADPlanningDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTextboxString() const;
  inline  ::capnp::Text::Reader getTextboxString() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UniADPlanningDebug::Builder {
public:
  typedef UniADPlanningDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTextboxString();
  inline  ::capnp::Text::Builder getTextboxString();
  inline void setTextboxString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextboxString(unsigned int size);
  inline void adoptTextboxString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextboxString();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UniADPlanningDebug::Pipeline {
public:
  typedef UniADPlanningDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HolisticPath::Reader {
public:
  typedef HolisticPath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getConfidence() const;

  inline bool hasStartPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getStartPoint() const;

  inline bool hasEndPoint() const;
  inline  ::senseAD::msg::perception::Point2f::Reader getEndPoint() const;

  inline bool hasPointsBv() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getPointsBv() const;

  inline bool hasSampledPointsBv() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getSampledPointsBv() const;

  inline bool hasImagePoints() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getImagePoints() const;

  inline  ::int16_t getFittingDegree() const;

  inline bool hasPolyfitCoefficients() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPolyfitCoefficients() const;

  inline  ::int32_t getTrackId() const;

  inline  ::int32_t getTrackAge() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HolisticPath::Builder {
public:
  typedef HolisticPath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getConfidence();
  inline void setConfidence(float value);

  inline bool hasStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getStartPoint();
  inline void setStartPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initStartPoint();
  inline void adoptStartPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownStartPoint();

  inline bool hasEndPoint();
  inline  ::senseAD::msg::perception::Point2f::Builder getEndPoint();
  inline void setEndPoint( ::senseAD::msg::perception::Point2f::Reader value);
  inline  ::senseAD::msg::perception::Point2f::Builder initEndPoint();
  inline void adoptEndPoint(::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> disownEndPoint();

  inline bool hasPointsBv();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getPointsBv();
  inline void setPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initPointsBv(unsigned int size);
  inline void adoptPointsBv(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownPointsBv();

  inline bool hasSampledPointsBv();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getSampledPointsBv();
  inline void setSampledPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initSampledPointsBv(unsigned int size);
  inline void adoptSampledPointsBv(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownSampledPointsBv();

  inline bool hasImagePoints();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getImagePoints();
  inline void setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initImagePoints(unsigned int size);
  inline void adoptImagePoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownImagePoints();

  inline  ::int16_t getFittingDegree();
  inline void setFittingDegree( ::int16_t value);

  inline bool hasPolyfitCoefficients();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPolyfitCoefficients();
  inline void setPolyfitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPolyfitCoefficients(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPolyfitCoefficients(unsigned int size);
  inline void adoptPolyfitCoefficients(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPolyfitCoefficients();

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline  ::int32_t getTrackAge();
  inline void setTrackAge( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HolisticPath::Pipeline {
public:
  typedef HolisticPath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::Point2f::Pipeline getStartPoint();
  inline  ::senseAD::msg::perception::Point2f::Pipeline getEndPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CenterLine::Reader {
public:
  typedef CenterLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getConfidence() const;

  inline bool hasPointsBv() const;
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader getPointsBv() const;

  inline bool hasPointsBvType() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getPointsBvType() const;

  inline  ::int32_t getTrackId() const;

  inline  ::int32_t getTrackAge() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CenterLine::Builder {
public:
  typedef CenterLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getConfidence();
  inline void setConfidence(float value);

  inline bool hasPointsBv();
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder getPointsBv();
  inline void setPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder initPointsBv(unsigned int size);
  inline void adoptPointsBv(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> disownPointsBv();

  inline bool hasPointsBvType();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getPointsBvType();
  inline void setPointsBvType( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPointsBvType(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initPointsBvType(unsigned int size);
  inline void adoptPointsBvType(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownPointsBvType();

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline  ::int32_t getTrackAge();
  inline void setTrackAge( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CenterLine::Pipeline {
public:
  typedef CenterLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PartitionInfo::Reader {
public:
  typedef PartitionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNumPartition() const;

  inline bool hasRanges() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getRanges() const;

  inline bool hasSteps() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getSteps() const;

  inline bool hasNumVoxelsPerRange() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getNumVoxelsPerRange() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PartitionInfo::Builder {
public:
  typedef PartitionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNumPartition();
  inline void setNumPartition( ::uint32_t value);

  inline bool hasRanges();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getRanges();
  inline void setRanges( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRanges(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initRanges(unsigned int size);
  inline void adoptRanges(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownRanges();

  inline bool hasSteps();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getSteps();
  inline void setSteps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteps(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initSteps(unsigned int size);
  inline void adoptSteps(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownSteps();

  inline bool hasNumVoxelsPerRange();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getNumVoxelsPerRange();
  inline void setNumVoxelsPerRange( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNumVoxelsPerRange(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initNumVoxelsPerRange(unsigned int size);
  inline void adoptNumVoxelsPerRange(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownNumVoxelsPerRange();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PartitionInfo::Pipeline {
public:
  typedef PartitionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OccGrid::Reader {
public:
  typedef OccGrid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getConfidence() const;

  inline float getX() const;

  inline float getY() const;

  inline float getMinHeight() const;

  inline float getMaxHeight() const;

  inline float getGridSizeX() const;

  inline float getGridSizeY() const;

  inline  ::uint8_t getLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OccGrid::Builder {
public:
  typedef OccGrid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getConfidence();
  inline void setConfidence(float value);

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getMinHeight();
  inline void setMinHeight(float value);

  inline float getMaxHeight();
  inline void setMaxHeight(float value);

  inline float getGridSizeX();
  inline void setGridSizeX(float value);

  inline float getGridSizeY();
  inline void setGridSizeY(float value);

  inline  ::uint8_t getLabel();
  inline void setLabel( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OccGrid::Pipeline {
public:
  typedef OccGrid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OccupancyData::Reader {
public:
  typedef OccupancyData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasXPartitionInfo() const;
  inline  ::senseAD::msg::perception::PartitionInfo::Reader getXPartitionInfo() const;

  inline bool hasYPartitionInfo() const;
  inline  ::senseAD::msg::perception::PartitionInfo::Reader getYPartitionInfo() const;

  inline bool hasZPartitionInfo() const;
  inline  ::senseAD::msg::perception::PartitionInfo::Reader getZPartitionInfo() const;

  inline  ::uint32_t getLength() const;

  inline  ::uint32_t getWidth() const;

  inline bool hasIdxLowList() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getIdxLowList() const;

  inline bool hasIdxHighList() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getIdxHighList() const;

  inline bool hasOccTypeList() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getOccTypeList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OccupancyData::Builder {
public:
  typedef OccupancyData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasXPartitionInfo();
  inline  ::senseAD::msg::perception::PartitionInfo::Builder getXPartitionInfo();
  inline void setXPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value);
  inline  ::senseAD::msg::perception::PartitionInfo::Builder initXPartitionInfo();
  inline void adoptXPartitionInfo(::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> disownXPartitionInfo();

  inline bool hasYPartitionInfo();
  inline  ::senseAD::msg::perception::PartitionInfo::Builder getYPartitionInfo();
  inline void setYPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value);
  inline  ::senseAD::msg::perception::PartitionInfo::Builder initYPartitionInfo();
  inline void adoptYPartitionInfo(::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> disownYPartitionInfo();

  inline bool hasZPartitionInfo();
  inline  ::senseAD::msg::perception::PartitionInfo::Builder getZPartitionInfo();
  inline void setZPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value);
  inline  ::senseAD::msg::perception::PartitionInfo::Builder initZPartitionInfo();
  inline void adoptZPartitionInfo(::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> disownZPartitionInfo();

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline bool hasIdxLowList();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getIdxLowList();
  inline void setIdxLowList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIdxLowList(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initIdxLowList(unsigned int size);
  inline void adoptIdxLowList(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownIdxLowList();

  inline bool hasIdxHighList();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getIdxHighList();
  inline void setIdxHighList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIdxHighList(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initIdxHighList(unsigned int size);
  inline void adoptIdxHighList(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownIdxHighList();

  inline bool hasOccTypeList();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getOccTypeList();
  inline void setOccTypeList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOccTypeList(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initOccTypeList(unsigned int size);
  inline void adoptOccTypeList(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownOccTypeList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OccupancyData::Pipeline {
public:
  typedef OccupancyData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::perception::PartitionInfo::Pipeline getXPartitionInfo();
  inline  ::senseAD::msg::perception::PartitionInfo::Pipeline getYPartitionInfo();
  inline  ::senseAD::msg::perception::PartitionInfo::Pipeline getZPartitionInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OccupancyInfo::Reader {
public:
  typedef OccupancyInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getFrameTimestampNs() const;

  inline  ::int16_t getSensorId() const;

  inline  ::uint64_t getGridsNum() const;

  inline bool hasOccGrids() const;
  inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Reader getOccGrids() const;

  inline bool hasOccupancyData() const;
  inline  ::senseAD::msg::perception::OccupancyData::Reader getOccupancyData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OccupancyInfo::Builder {
public:
  typedef OccupancyInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getFrameTimestampNs();
  inline void setFrameTimestampNs( ::uint64_t value);

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::uint64_t getGridsNum();
  inline void setGridsNum( ::uint64_t value);

  inline bool hasOccGrids();
  inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Builder getOccGrids();
  inline void setOccGrids( ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Builder initOccGrids(unsigned int size);
  inline void adoptOccGrids(::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>> disownOccGrids();

  inline bool hasOccupancyData();
  inline  ::senseAD::msg::perception::OccupancyData::Builder getOccupancyData();
  inline void setOccupancyData( ::senseAD::msg::perception::OccupancyData::Reader value);
  inline  ::senseAD::msg::perception::OccupancyData::Builder initOccupancyData();
  inline void adoptOccupancyData(::capnp::Orphan< ::senseAD::msg::perception::OccupancyData>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::perception::OccupancyData> disownOccupancyData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OccupancyInfo::Pipeline {
public:
  typedef OccupancyInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::perception::OccupancyData::Pipeline getOccupancyData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int16_t CameraDebugInfo::Reader::getDepthType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CameraDebugInfo::Builder::getDepthType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraDebugInfo::Builder::setDepthType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CameraDebugInfo::Reader::hasOpticalFlowPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraDebugInfo::Builder::hasOpticalFlowPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader CameraDebugInfo::Reader::getOpticalFlowPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CameraDebugInfo::Builder::getOpticalFlowPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraDebugInfo::Builder::setOpticalFlowPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CameraDebugInfo::Builder::initOpticalFlowPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CameraDebugInfo::Builder::adoptOpticalFlowPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> CameraDebugInfo::Builder::disownOpticalFlowPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraDebugInfo::Reader::hasOpticalFlowDxy() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraDebugInfo::Builder::hasOpticalFlowDxy() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader CameraDebugInfo::Reader::getOpticalFlowDxy() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CameraDebugInfo::Builder::getOpticalFlowDxy() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraDebugInfo::Builder::setOpticalFlowDxy( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CameraDebugInfo::Builder::initOpticalFlowDxy(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CameraDebugInfo::Builder::adoptOpticalFlowDxy(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> CameraDebugInfo::Builder::disownOpticalFlowDxy() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Crosswalk::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Crosswalk::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Crosswalk::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Crosswalk::Reader::hasLaneId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasLaneId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Crosswalk::Reader::getLaneId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Crosswalk::Builder::getLaneId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setLaneId( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Crosswalk::Builder::setLaneId(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Crosswalk::Builder::initLaneId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptLaneId(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Crosswalk::Builder::disownLaneId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Crosswalk::Reader::hasConfidence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasConfidence() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Reader Crosswalk::Reader::getConfidence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::getConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setConfidence( ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::initConfidence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptConfidence(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>> Crosswalk::Builder::disownConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vectorf,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Crosswalk::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader Crosswalk::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>> Crosswalk::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Crosswalk::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader Crosswalk::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>> Crosswalk::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Polygon2D,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint16_t Crosswalk::Reader::getWidth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Crosswalk::Builder::getWidth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Crosswalk::Builder::setWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Crosswalk::Reader::getHeight() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Crosswalk::Builder::getHeight() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Crosswalk::Builder::setHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Crosswalk::Reader::hasBitMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasBitMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Crosswalk::Reader::getBitMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Crosswalk::Builder::getBitMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setBitMap( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Crosswalk::Builder::setBitMap(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Crosswalk::Builder::initBitMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptBitMap(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Crosswalk::Builder::disownBitMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Crosswalk::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Crosswalk::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader Crosswalk::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Crosswalk::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Crosswalk::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Crosswalk::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> Crosswalk::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadMarker::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadMarker::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoadMarker::Reader::hasConfidence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarker::Builder::hasConfidence() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader RoadMarker::Reader::getConfidence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder RoadMarker::Builder::getConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadMarker::Builder::setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RoadMarker::Builder::setConfidence(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder RoadMarker::Builder::initConfidence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadMarker::Builder::adoptConfidence(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> RoadMarker::Builder::disownConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t RoadMarker::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RoadMarker::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RoadMarker::Reader::getImagePointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadMarker::Builder::getImagePointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setImagePointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RoadMarker::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarker::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader RoadMarker::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder RoadMarker::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadMarker::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder RoadMarker::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadMarker::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> RoadMarker::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadMarker::Reader::getWorldPointNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadMarker::Builder::getWorldPointNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setWorldPointNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool RoadMarker::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarker::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader RoadMarker::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder RoadMarker::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadMarker::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder RoadMarker::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RoadMarker::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> RoadMarker::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadMarker::Reader::getConfNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadMarker::Builder::getConfNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setConfNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RoadMarker::Reader::getKeyPointTypesNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RoadMarker::Builder::getKeyPointTypesNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setKeyPointTypesNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool RoadMarker::Reader::hasKeyPointTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarker::Builder::hasKeyPointTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader RoadMarker::Reader::getKeyPointTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder RoadMarker::Builder::getKeyPointTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RoadMarker::Builder::setKeyPointTypes( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void RoadMarker::Builder::setKeyPointTypes(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder RoadMarker::Builder::initKeyPointTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RoadMarker::Builder::adoptKeyPointTypes(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> RoadMarker::Builder::disownKeyPointTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float RoadMarker::Reader::getHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float RoadMarker::Builder::getHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RoadMarker::Builder::setHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SpeedBump::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SpeedBump::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SpeedBump::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SpeedBump::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SpeedBump::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader SpeedBump::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SpeedBump::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SpeedBump::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> SpeedBump::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SpeedBump::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SpeedBump::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader SpeedBump::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SpeedBump::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SpeedBump::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> SpeedBump::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SpeedBump::Reader::hasConfidence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SpeedBump::Builder::hasConfidence() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpeedBump::Reader::getConfidence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpeedBump::Builder::getConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SpeedBump::Builder::setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void SpeedBump::Builder::setConfidence(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpeedBump::Builder::initConfidence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SpeedBump::Builder::adoptConfidence(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpeedBump::Builder::disownConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SpeedBump::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SpeedBump::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader SpeedBump::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SpeedBump::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder SpeedBump::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SpeedBump::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> SpeedBump::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Polygon2D::Reader::hasP2d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Polygon2D::Builder::hasP2d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader Polygon2D::Reader::getP2d() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Polygon2D::Builder::getP2d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Polygon2D::Builder::setP2d( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Polygon2D::Builder::initP2d(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Polygon2D::Builder::adoptP2d(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> Polygon2D::Builder::disownP2d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BirdViewCorners::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool BirdViewCorners::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BirdViewCorners::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BirdViewCorners::Reader::hasBvCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BirdViewCorners::Builder::hasBvCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader BirdViewCorners::Reader::getBvCorners() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder BirdViewCorners::Builder::getBvCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BirdViewCorners::Builder::setBvCorners( ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder BirdViewCorners::Builder::initBvCorners(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BirdViewCorners::Builder::adoptBvCorners(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>> BirdViewCorners::Builder::disownBvCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BirdViewCorners::Reader::hasCornerConf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BirdViewCorners::Builder::hasCornerConf() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader BirdViewCorners::Reader::getCornerConf() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder BirdViewCorners::Builder::getCornerConf() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BirdViewCorners::Builder::setCornerConf( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void BirdViewCorners::Builder::setCornerConf(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder BirdViewCorners::Builder::initCornerConf(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BirdViewCorners::Builder::adoptCornerConf(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> BirdViewCorners::Builder::disownCornerConf() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t MatchedSensorObjectInfo::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t MatchedSensorObjectInfo::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MatchedSensorObjectInfo::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MatchedSensorObjectInfo::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MatchedSensorObjectInfo::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MatchedSensorObjectInfo::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MatchedSensorObjectInfo::Reader::getObjectId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MatchedSensorObjectInfo::Builder::getObjectId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MatchedSensorObjectInfo::Builder::setObjectId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool BlobFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlobFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader BlobFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder BlobFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline BlobFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BlobFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder BlobFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlobFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> BlobFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t BlobFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlobFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BlobFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t BlobFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t BlobFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void BlobFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t BlobFrame::Reader::getBlobNum() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t BlobFrame::Builder::getBlobNum() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void BlobFrame::Builder::setBlobNum( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool BlobFrame::Reader::hasBlobObjectList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BlobFrame::Builder::hasBlobObjectList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader BlobFrame::Reader::getBlobObjectList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder BlobFrame::Builder::getBlobObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BlobFrame::Builder::setBlobObjectList( ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder BlobFrame::Builder::initBlobObjectList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BlobFrame::Builder::adoptBlobObjectList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>> BlobFrame::Builder::disownBlobObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficSignObject::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSignObject::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficSignObject::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSignObject::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TrafficSignObject::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficSignObject::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSignObject::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TrafficSignObject::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficSignObject::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficSignObject::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSignObject::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficSignObject::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSignObject::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSignObject::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader TrafficSignObject::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficSignObject::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline TrafficSignObject::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficSignObject::Builder::setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficSignObject::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficSignObject::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> TrafficSignObject::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrafficSignObject::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSignObject::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader TrafficSignObject::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder TrafficSignObject::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficSignObject::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder TrafficSignObject::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficSignObject::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> TrafficSignObject::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool StopLine::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader StopLine::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StopLine::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> StopLine::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StopLine::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader StopLine::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void StopLine::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> StopLine::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool StopLine::Reader::hasConfidence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasConfidence() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader StopLine::Reader::getConfidence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder StopLine::Builder::getConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void StopLine::Builder::setConfidence(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder StopLine::Builder::initConfidence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void StopLine::Builder::adoptConfidence(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> StopLine::Builder::disownConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t StopLine::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t StopLine::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopLine::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StopLine::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader StopLine::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder StopLine::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void StopLine::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> StopLine::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RoadAreaFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadAreaFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RoadAreaFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadAreaFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RoadAreaFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoadAreaFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadAreaFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadAreaFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RoadAreaFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t RoadAreaFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t RoadAreaFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadAreaFrame::Builder::setFrameTimestampNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoadAreaFrame::Reader::hasCameraName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadAreaFrame::Builder::hasCameraName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoadAreaFrame::Reader::getCameraName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoadAreaFrame::Builder::getCameraName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadAreaFrame::Builder::setCameraName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoadAreaFrame::Builder::initCameraName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadAreaFrame::Builder::adoptCameraName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoadAreaFrame::Builder::disownCameraName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadAreaFrame::Reader::hasRoadArea() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadAreaFrame::Builder::hasRoadArea() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::RoadArea::Reader RoadAreaFrame::Reader::getRoadArea() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::RoadArea::Builder RoadAreaFrame::Builder::getRoadArea() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::RoadArea::Pipeline RoadAreaFrame::Pipeline::getRoadArea() {
  return  ::senseAD::msg::perception::RoadArea::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoadAreaFrame::Builder::setRoadArea( ::senseAD::msg::perception::RoadArea::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::RoadArea::Builder RoadAreaFrame::Builder::initRoadArea() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadAreaFrame::Builder::adoptRoadArea(
    ::capnp::Orphan< ::senseAD::msg::perception::RoadArea>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::RoadArea> RoadAreaFrame::Builder::disownRoadArea() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadArea>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t CameraBlockageInfo::Reader::getBlockageType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CameraBlockageInfo::Builder::getBlockageType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraBlockageInfo::Builder::setBlockageType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CameraBlockageInfo::Reader::getGlareStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CameraBlockageInfo::Builder::getGlareStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraBlockageInfo::Builder::setGlareStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CameraBlockageInfo::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CameraBlockageInfo::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraBlockageInfo::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FailsafeFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FailsafeFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader FailsafeFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder FailsafeFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline FailsafeFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FailsafeFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder FailsafeFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FailsafeFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> FailsafeFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t FailsafeFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FailsafeFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FailsafeFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t FailsafeFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t FailsafeFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FailsafeFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FailsafeFrame::Reader::hasBlockageInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FailsafeFrame::Builder::hasBlockageInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBlockageInfo::Reader FailsafeFrame::Reader::getBlockageInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBlockageInfo::Builder FailsafeFrame::Builder::getBlockageInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBlockageInfo::Pipeline FailsafeFrame::Pipeline::getBlockageInfo() {
  return  ::senseAD::msg::perception::CameraBlockageInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FailsafeFrame::Builder::setBlockageInfo( ::senseAD::msg::perception::CameraBlockageInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBlockageInfo::Builder FailsafeFrame::Builder::initBlockageInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FailsafeFrame::Builder::adoptBlockageInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBlockageInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBlockageInfo> FailsafeFrame::Builder::disownBlockageInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBlockageInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FailsafeFrame::Reader::hasBlockageInfoList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FailsafeFrame::Builder::hasBlockageInfoList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Reader FailsafeFrame::Reader::getBlockageInfoList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Builder FailsafeFrame::Builder::getBlockageInfoList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FailsafeFrame::Builder::setBlockageInfoList( ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>::Builder FailsafeFrame::Builder::initBlockageInfoList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FailsafeFrame::Builder::adoptBlockageInfoList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>> FailsafeFrame::Builder::disownBlockageInfoList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CameraBlockageInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficLightObject::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficLightObject::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TrafficLightObject::Reader::getStatusLabel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLightObject::Builder::getStatusLabel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setStatusLabel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TrafficLightObject::Reader::getColorLabel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLightObject::Builder::getColorLabel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setColorLabel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TrafficLightObject::Reader::getTypeLabel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLightObject::Builder::getTypeLabel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setTypeLabel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float TrafficLightObject::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TrafficLightObject::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float TrafficLightObject::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float TrafficLightObject::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficLightObject::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficLightObject::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightObject::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightObject::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader TrafficLightObject::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficLightObject::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline TrafficLightObject::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficLightObject::Builder::setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficLightObject::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLightObject::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> TrafficLightObject::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficLightObject::Reader::getTlNum() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficLightObject::Builder::getTlNum() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setTlNum( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightObject::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightObject::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader TrafficLightObject::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder TrafficLightObject::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLightObject::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder TrafficLightObject::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLightObject::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> TrafficLightObject::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficLightObject::Reader::getFocus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficLightObject::Builder::getFocus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void TrafficLightObject::Builder::setFocus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double Vector3d::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Vector3d::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Vector3d::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Vector3d::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Vector3d::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Vector3d::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Vector3d::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Vector3d::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Vector3d::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool MotionInfo::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool MotionInfo::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t MotionInfo::Reader::getMotionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t MotionInfo::Builder::getMotionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setMotionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MotionInfo::Reader::hasCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3d::Reader MotionInfo::Reader::getCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3d::Builder MotionInfo::Builder::getCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3d::Pipeline MotionInfo::Pipeline::getCenter() {
  return  ::senseAD::msg::perception::Vector3d::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setCenter( ::senseAD::msg::perception::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3d::Builder MotionInfo::Builder::initCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptCenter(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3d> MotionInfo::Builder::disownCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasCenterUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasCenterUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader MotionInfo::Reader::getCenterUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::getCenterUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline MotionInfo::Pipeline::getCenterUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setCenterUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::initCenterUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptCenterUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> MotionInfo::Builder::disownCenterUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader MotionInfo::Reader::getVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::getVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline MotionInfo::Pipeline::getVelocity() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setVelocity( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::initVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptVelocity(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> MotionInfo::Builder::disownVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasVelocityUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasVelocityUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader MotionInfo::Reader::getVelocityUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::getVelocityUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline MotionInfo::Pipeline::getVelocityUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setVelocityUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::initVelocityUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptVelocityUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> MotionInfo::Builder::disownVelocityUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader MotionInfo::Reader::getAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::getAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline MotionInfo::Pipeline::getAcceleration() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setAcceleration( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::initAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptAcceleration(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> MotionInfo::Builder::disownAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasAccelerationUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasAccelerationUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader MotionInfo::Reader::getAccelerationUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::getAccelerationUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline MotionInfo::Pipeline::getAccelerationUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setAccelerationUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::initAccelerationUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptAccelerationUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> MotionInfo::Builder::disownAccelerationUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasJerk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasJerk() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader MotionInfo::Reader::getJerk() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::getJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline MotionInfo::Pipeline::getJerk() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setJerk( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::initJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptJerk(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> MotionInfo::Builder::disownJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool MotionInfo::Reader::hasJerkUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasJerkUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader MotionInfo::Reader::getJerkUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::getJerkUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline MotionInfo::Pipeline::getJerkUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setJerkUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder MotionInfo::Builder::initJerkUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptJerkUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> MotionInfo::Builder::disownJerkUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline float MotionInfo::Reader::getVelocityHeading() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float MotionInfo::Builder::getVelocityHeading() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setVelocityHeading(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float MotionInfo::Reader::getVelocityHeadingUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float MotionInfo::Builder::getVelocityHeadingUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setVelocityHeadingUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float MotionInfo::Reader::getVelocityHeadingRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float MotionInfo::Builder::getVelocityHeadingRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setVelocityHeadingRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float MotionInfo::Reader::getVelocityHeadingRateUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float MotionInfo::Builder::getVelocityHeadingRateUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MotionInfo::Builder::setVelocityHeadingRateUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool MotionInfo::Reader::hasRelativeVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool MotionInfo::Builder::hasRelativeVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader MotionInfo::Reader::getRelativeVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::getRelativeVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline MotionInfo::Pipeline::getRelativeVelocity() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void MotionInfo::Builder::setRelativeVelocity( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder MotionInfo::Builder::initRelativeVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void MotionInfo::Builder::adoptRelativeVelocity(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> MotionInfo::Builder::disownRelativeVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool RoadArea::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadArea::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader RoadArea::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder RoadArea::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadArea::Builder::setImage( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RoadArea::Builder::setImage(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder RoadArea::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadArea::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> RoadArea::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t RoadArea::Reader::getWidth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoadArea::Builder::getWidth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadArea::Builder::setWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RoadArea::Reader::getHeight() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoadArea::Builder::getHeight() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoadArea::Builder::setHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Point2f::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Point2f::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point2f::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Point2f::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Point2f::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point2f::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Point3d::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Point3d::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point3d::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Point3d::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Point3d::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point3d::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Point3d::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Point3d::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Point3d::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool GeneralMergeInfo::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GeneralMergeInfo::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GeneralMergeInfo::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GeneralMergeInfo::Reader::getMergeState() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GeneralMergeInfo::Builder::getMergeState() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GeneralMergeInfo::Builder::setMergeState( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GeneralMergeInfo::Reader::getMergeId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GeneralMergeInfo::Builder::getMergeId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GeneralMergeInfo::Builder::setMergeId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GeneralMergeInfo::Reader::getSplitId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GeneralMergeInfo::Builder::getSplitId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GeneralMergeInfo::Builder::setSplitId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RoadSemanticsFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemanticsFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RoadSemanticsFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadSemanticsFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RoadSemanticsFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoadSemanticsFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadSemanticsFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadSemanticsFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RoadSemanticsFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadSemanticsFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadSemanticsFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadSemanticsFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RoadSemanticsFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoadSemanticsFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RoadSemanticsFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RoadSemanticsFrame::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemanticsFrame::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoadSemanticsFrame::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoadSemanticsFrame::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadSemanticsFrame::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoadSemanticsFrame::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadSemanticsFrame::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoadSemanticsFrame::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadSemanticsFrame::Reader::hasRoadSemantics() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemanticsFrame::Builder::hasRoadSemantics() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::RoadSemantics::Reader RoadSemanticsFrame::Reader::getRoadSemantics() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::RoadSemantics::Builder RoadSemanticsFrame::Builder::getRoadSemantics() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::RoadSemantics::Pipeline RoadSemanticsFrame::Pipeline::getRoadSemantics() {
  return  ::senseAD::msg::perception::RoadSemantics::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoadSemanticsFrame::Builder::setRoadSemantics( ::senseAD::msg::perception::RoadSemantics::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::RoadSemantics::Builder RoadSemanticsFrame::Builder::initRoadSemantics() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadSemanticsFrame::Builder::adoptRoadSemantics(
    ::capnp::Orphan< ::senseAD::msg::perception::RoadSemantics>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::RoadSemantics> RoadSemanticsFrame::Builder::disownRoadSemantics() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadSemantics>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoadSemantics::Reader::hasTrafficLightResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemantics::Builder::hasTrafficLightResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader RoadSemantics::Reader::getTrafficLightResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::getTrafficLightResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadSemantics::Builder::setTrafficLightResults( ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::initTrafficLightResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadSemantics::Builder::adoptTrafficLightResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>> RoadSemantics::Builder::disownTrafficLightResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadSemantics::Reader::hasTrafficSignResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemantics::Builder::hasTrafficSignResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader RoadSemantics::Reader::getTrafficSignResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::getTrafficSignResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadSemantics::Builder::setTrafficSignResults( ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::initTrafficSignResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadSemantics::Builder::adoptTrafficSignResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>> RoadSemantics::Builder::disownTrafficSignResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadSemantics::Reader::hasRoadMarkerResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemantics::Builder::hasRoadMarkerResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Reader RoadSemantics::Reader::getRoadMarkerResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::getRoadMarkerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadSemantics::Builder::setRoadMarkerResults( ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::initRoadMarkerResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RoadSemantics::Builder::adoptRoadMarkerResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>> RoadSemantics::Builder::disownRoadMarkerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarkerObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoadSemantics::Reader::hasBoardPoleResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemantics::Builder::hasBoardPoleResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Reader RoadSemantics::Reader::getBoardPoleResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::getBoardPoleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RoadSemantics::Builder::setBoardPoleResults( ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::initBoardPoleResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RoadSemantics::Builder::adoptBoardPoleResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>> RoadSemantics::Builder::disownBoardPoleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::BoardPoleObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RoadSemantics::Reader::hasStaticObstacleResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RoadSemantics::Builder::hasStaticObstacleResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader RoadSemantics::Reader::getStaticObstacleResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::getStaticObstacleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RoadSemantics::Builder::setStaticObstacleResults( ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder RoadSemantics::Builder::initStaticObstacleResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void RoadSemantics::Builder::adoptStaticObstacleResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>> RoadSemantics::Builder::disownStaticObstacleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint8_t LMRegion::Reader::getRegionType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMRegion::Builder::getRegionType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMRegion::Builder::setRegionType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LMRegion::Reader::getRegionTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LMRegion::Builder::getRegionTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMRegion::Builder::setRegionTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMRegion::Reader::getTrackId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMRegion::Builder::getTrackId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMRegion::Builder::setTrackId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LMRegion::Reader::hasRegionBoundary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMRegion::Builder::hasRegionBoundary() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LMRegion::Reader::getRegionBoundary() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMRegion::Builder::getRegionBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMRegion::Builder::setRegionBoundary( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMRegion::Builder::initRegionBoundary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LMRegion::Builder::adoptRegionBoundary(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LMRegion::Builder::disownRegionBoundary() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LMRegion::Reader::hasJunctionPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LMRegion::Builder::hasJunctionPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LMRegion::Reader::getJunctionPoint() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMRegion::Builder::getJunctionPoint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LMRegion::Builder::setJunctionPoint( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMRegion::Builder::initJunctionPoint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LMRegion::Builder::adoptJunctionPoint(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LMRegion::Builder::disownJunctionPoint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t BoardPoleObject::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t BoardPoleObject::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BoardPoleObject::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t BoardPoleObject::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t BoardPoleObject::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BoardPoleObject::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float BoardPoleObject::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float BoardPoleObject::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BoardPoleObject::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float BoardPoleObject::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float BoardPoleObject::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void BoardPoleObject::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool BoardPoleObject::Reader::hasBbox2dInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BoardPoleObject::Builder::hasBbox2dInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader BoardPoleObject::Reader::getBbox2dInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder BoardPoleObject::Builder::getBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline BoardPoleObject::Pipeline::getBbox2dInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BoardPoleObject::Builder::setBbox2dInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder BoardPoleObject::Builder::initBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BoardPoleObject::Builder::adoptBbox2dInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> BoardPoleObject::Builder::disownBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BoardPoleObject::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BoardPoleObject::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader BoardPoleObject::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder BoardPoleObject::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BoardPoleObject::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder BoardPoleObject::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BoardPoleObject::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> BoardPoleObject::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ObjectFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ObjectFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ObjectFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ObjectFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ObjectFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ObjectFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ObjectFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ObjectFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ObjectFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ObjectFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ObjectFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObjectFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ObjectFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ObjectFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ObjectFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ObjectFrame::Reader::hasPerceptionObjectList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ObjectFrame::Builder::hasPerceptionObjectList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader ObjectFrame::Reader::getPerceptionObjectList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder ObjectFrame::Builder::getPerceptionObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ObjectFrame::Builder::setPerceptionObjectList( ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>::Builder ObjectFrame::Builder::initPerceptionObjectList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ObjectFrame::Builder::adoptPerceptionObjectList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>> ObjectFrame::Builder::disownPerceptionObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Object,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t Gop::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Gop::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Gop::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Gop::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Gop::Reader::getSubtype() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Gop::Builder::getSubtype() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setSubtype( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Gop::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Gop::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Gop::Reader::getCurrentPredictionTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Gop::Builder::getCurrentPredictionTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setCurrentPredictionTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Gop::Reader::hasSizeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasSizeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SizeInfo::Reader Gop::Reader::getSizeInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SizeInfo::Builder Gop::Builder::getSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SizeInfo::Pipeline Gop::Pipeline::getSizeInfo() {
  return  ::senseAD::msg::perception::SizeInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SizeInfo::Builder Gop::Builder::initSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptSizeInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> Gop::Builder::disownSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Gop::Reader::hasPolygonBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasPolygonBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PolygonBox::Reader Gop::Reader::getPolygonBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PolygonBox::Builder Gop::Builder::getPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PolygonBox::Pipeline Gop::Pipeline::getPolygonBox() {
  return  ::senseAD::msg::perception::PolygonBox::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PolygonBox::Builder Gop::Builder::initPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptPolygonBox(
    ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> Gop::Builder::disownPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Gop::Reader::hasDirectionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasDirectionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::DirectionInfo::Reader Gop::Reader::getDirectionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder Gop::Builder::getDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::DirectionInfo::Pipeline Gop::Pipeline::getDirectionInfo() {
  return  ::senseAD::msg::perception::DirectionInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder Gop::Builder::initDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptDirectionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> Gop::Builder::disownDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Gop::Reader::hasMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::MotionInfo::Reader Gop::Reader::getMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::MotionInfo::Builder Gop::Builder::getMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::MotionInfo::Pipeline Gop::Pipeline::getMotionInfo() {
  return  ::senseAD::msg::perception::MotionInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::MotionInfo::Builder Gop::Builder::initMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> Gop::Builder::disownMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int16_t Gop::Reader::getMotionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Gop::Builder::getMotionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getMotionUnknownScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getMotionUnknownScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionUnknownScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getMotionStaticScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getMotionStaticScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionStaticScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getMotionStoppedScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getMotionStoppedScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionStoppedScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getMotionMovingScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getMotionMovingScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionMovingScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Gop::Reader::getMotionCrossingScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float Gop::Builder::getMotionCrossingScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Gop::Builder::setMotionCrossingScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Gop::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader Gop::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder Gop::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline Gop::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder Gop::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> Gop::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Gop::Reader::hasBboxMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Gop::Builder::hasBboxMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Reader Gop::Reader::getBboxMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder Gop::Builder::getBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline Gop::Pipeline::getBboxMotionInfo() {
  return  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Gop::Builder::setBboxMotionInfo( ::senseAD::msg::perception::Bbox2DMotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder Gop::Builder::initBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Gop::Builder::adoptBboxMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo> Gop::Builder::disownBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool GopFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GopFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader GopFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder GopFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline GopFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GopFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder GopFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GopFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> GopFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t GopFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GopFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GopFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t GopFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t GopFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void GopFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool GopFrame::Reader::hasPerceptionGopList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GopFrame::Builder::hasPerceptionGopList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Reader GopFrame::Reader::getPerceptionGopList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Builder GopFrame::Builder::getPerceptionGopList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GopFrame::Builder::setPerceptionGopList( ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>::Builder GopFrame::Builder::initPerceptionGopList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GopFrame::Builder::adoptPerceptionGopList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>> GopFrame::Builder::disownPerceptionGopList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Gop,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ShadowModeFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ShadowModeFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ShadowModeFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ShadowModeFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ShadowModeFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ShadowModeFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ShadowModeFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ShadowModeFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ShadowModeFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ShadowModeFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ShadowModeFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ShadowModeFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ShadowModeFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ShadowModeFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ShadowModeFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ShadowModeFrame::Reader::hasPerceptionTagList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ShadowModeFrame::Builder::hasPerceptionTagList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Reader ShadowModeFrame::Reader::getPerceptionTagList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Builder ShadowModeFrame::Builder::getPerceptionTagList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ShadowModeFrame::Builder::setPerceptionTagList( ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>::Builder ShadowModeFrame::Builder::initPerceptionTagList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ShadowModeFrame::Builder::adoptPerceptionTagList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>> ShadowModeFrame::Builder::disownPerceptionTagList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Tag,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t Tag::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Tag::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tag::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Tag::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Tag::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tag::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Tag::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Tag::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Tag::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Tag::Reader::hasMatchTimestampNsList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Tag::Builder::hasMatchTimestampNsList() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Tag::Reader::getMatchTimestampNsList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::getMatchTimestampNsList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tag::Builder::setMatchTimestampNsList( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Tag::Builder::setMatchTimestampNsList(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::initMatchTimestampNsList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Tag::Builder::adoptMatchTimestampNsList(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Tag::Builder::disownMatchTimestampNsList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Tag::Reader::hasShadowModeTypeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Tag::Builder::hasShadowModeTypeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader Tag::Reader::getShadowModeTypeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::getShadowModeTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tag::Builder::setShadowModeTypeList( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Tag::Builder::setShadowModeTypeList(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::initShadowModeTypeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Tag::Builder::adoptShadowModeTypeList(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> Tag::Builder::disownShadowModeTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tag::Reader::hasTagNameList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Tag::Builder::hasTagNameList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader Tag::Reader::getTagNameList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::getTagNameList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Tag::Builder::setTagNameList( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Tag::Builder::setTagNameList(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Tag::Builder::initTagNameList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Tag::Builder::adoptTagNameList(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> Tag::Builder::disownTagNameList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BaseCameraAttribute::Reader::getIsLandmarkValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool BaseCameraAttribute::Builder::getIsLandmarkValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BaseCameraAttribute::Builder::setIsLandmarkValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BaseCameraAttribute::Reader::hasLandmark() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BaseCameraAttribute::Builder::hasLandmark() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader BaseCameraAttribute::Reader::getLandmark() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder BaseCameraAttribute::Builder::getLandmark() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BaseCameraAttribute::Builder::setLandmark( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder BaseCameraAttribute::Builder::initLandmark(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BaseCameraAttribute::Builder::adoptLandmark(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> BaseCameraAttribute::Builder::disownLandmark() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BaseCameraAttribute::Reader::hasLandmarkScores() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BaseCameraAttribute::Builder::hasLandmarkScores() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader BaseCameraAttribute::Reader::getLandmarkScores() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder BaseCameraAttribute::Builder::getLandmarkScores() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BaseCameraAttribute::Builder::setLandmarkScores( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void BaseCameraAttribute::Builder::setLandmarkScores(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder BaseCameraAttribute::Builder::initLandmarkScores(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BaseCameraAttribute::Builder::adoptLandmarkScores(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> BaseCameraAttribute::Builder::disownLandmarkScores() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BaseCameraAttribute::Reader::getIsDirectionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool BaseCameraAttribute::Builder::getIsDirectionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BaseCameraAttribute::Builder::setIsDirectionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool BaseCameraAttribute::Reader::hasViewportDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BaseCameraAttribute::Builder::hasViewportDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader BaseCameraAttribute::Reader::getViewportDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder BaseCameraAttribute::Builder::getViewportDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline BaseCameraAttribute::Pipeline::getViewportDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void BaseCameraAttribute::Builder::setViewportDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder BaseCameraAttribute::Builder::initViewportDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BaseCameraAttribute::Builder::adoptViewportDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> BaseCameraAttribute::Builder::disownViewportDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DirectionInfo::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DirectionInfo::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DirectionInfo::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DirectionInfo::Reader::hasDirectionYpr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DirectionInfo::Builder::hasDirectionYpr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader DirectionInfo::Reader::getDirectionYpr() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder DirectionInfo::Builder::getDirectionYpr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline DirectionInfo::Pipeline::getDirectionYpr() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DirectionInfo::Builder::setDirectionYpr( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder DirectionInfo::Builder::initDirectionYpr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DirectionInfo::Builder::adoptDirectionYpr(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> DirectionInfo::Builder::disownDirectionYpr() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DirectionInfo::Reader::hasDirectionYprUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DirectionInfo::Builder::hasDirectionYprUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader DirectionInfo::Reader::getDirectionYprUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder DirectionInfo::Builder::getDirectionYprUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline DirectionInfo::Pipeline::getDirectionYprUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DirectionInfo::Builder::setDirectionYprUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder DirectionInfo::Builder::initDirectionYprUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DirectionInfo::Builder::adoptDirectionYprUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> DirectionInfo::Builder::disownDirectionYprUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float DirectionInfo::Reader::getYaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DirectionInfo::Builder::getYaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DirectionInfo::Builder::setYaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DirectionInfo::Reader::getYawUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DirectionInfo::Builder::getYawUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DirectionInfo::Builder::setYawUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float DirectionInfo::Reader::getYawRate() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float DirectionInfo::Builder::getYawRate() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DirectionInfo::Builder::setYawRate(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float DirectionInfo::Reader::getYawRateUncertainty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float DirectionInfo::Builder::getYawRateUncertainty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DirectionInfo::Builder::setYawRateUncertainty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t AutomobileLightStatus::Reader::getLeftTurn() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AutomobileLightStatus::Builder::getLeftTurn() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setLeftTurn( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t AutomobileLightStatus::Reader::getRightTurn() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AutomobileLightStatus::Builder::getRightTurn() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setRightTurn( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t AutomobileLightStatus::Reader::getHazard() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AutomobileLightStatus::Builder::getHazard() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setHazard( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t AutomobileLightStatus::Reader::getBrake() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AutomobileLightStatus::Builder::getBrake() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setBrake( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AutomobileLightStatus::Reader::getLeftTurnConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AutomobileLightStatus::Builder::getLeftTurnConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setLeftTurnConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float AutomobileLightStatus::Reader::getRightTurnConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AutomobileLightStatus::Builder::getRightTurnConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setRightTurnConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AutomobileLightStatus::Reader::getHazardConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AutomobileLightStatus::Builder::getHazardConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setHazardConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float AutomobileLightStatus::Reader::getBrakeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float AutomobileLightStatus::Builder::getBrakeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AutomobileLightStatus::Builder::setBrakeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLaneLine::Reader::getClosestSegmentLaneLineType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLaneLine::Builder::getClosestSegmentLaneLineType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setClosestSegmentLaneLineType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLaneLine::Reader::getClosestSegmentLaneLineColor() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLaneLine::Builder::getClosestSegmentLaneLineColor() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setClosestSegmentLaneLineColor( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float LMLaneLine::Reader::getClosestSegmentLaneLineColorConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LMLaneLine::Builder::getClosestSegmentLaneLineColorConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setClosestSegmentLaneLineColorConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLaneLine::Reader::getPolyFitOrder() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLaneLine::Builder::getPolyFitOrder() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setPolyFitOrder( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LMLaneLine::Reader::hasPolyFitCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasPolyFitCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LMLaneLine::Reader::getPolyFitCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LMLaneLine::Builder::getPolyFitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::setPolyFitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LMLaneLine::Builder::setPolyFitCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LMLaneLine::Builder::initPolyFitCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LMLaneLine::Builder::adoptPolyFitCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LMLaneLine::Builder::disownPolyFitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LMLaneLine::Reader::hasStartPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasStartPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader LMLaneLine::Reader::getStartPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder LMLaneLine::Builder::getStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline LMLaneLine::Pipeline::getStartPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LMLaneLine::Builder::setStartPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder LMLaneLine::Builder::initStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::adoptStartPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> LMLaneLine::Builder::disownStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LMLaneLine::Reader::hasEndPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasEndPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader LMLaneLine::Reader::getEndPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder LMLaneLine::Builder::getEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline LMLaneLine::Pipeline::getEndPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LMLaneLine::Builder::setEndPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder LMLaneLine::Builder::initEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::adoptEndPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> LMLaneLine::Builder::disownEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LMLaneLine::Reader::hasJunctionPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasJunctionPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader LMLaneLine::Reader::getJunctionPoint() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::getJunctionPoint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::setJunctionPoint( ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::initJunctionPoint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LMLaneLine::Builder::adoptJunctionPoint(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>> LMLaneLine::Builder::disownJunctionPoint() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float LMLaneLine::Reader::getLaneLineWidthMeter() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float LMLaneLine::Builder::getLaneLineWidthMeter() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setLaneLineWidthMeter(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMLaneLine::Reader::getTrackId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMLaneLine::Builder::getTrackId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setTrackId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float LMLaneLine::Reader::getLaneConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LMLaneLine::Builder::getLaneConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LMLaneLine::Builder::setLaneConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LMLaneLine::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LMLaneLine::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LMLaneLine::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LMLaneLine::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LMLaneLine::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LMLaneLine::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LMLaneLine::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LMLaneLine::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LMLaneLine::Reader::hasWorldPointsReproj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneLine::Builder::hasWorldPointsReproj() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LMLaneLine::Reader::getWorldPointsReproj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::getWorldPointsReproj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LMLaneLine::Builder::setWorldPointsReproj( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LMLaneLine::Builder::initWorldPointsReproj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LMLaneLine::Builder::adoptWorldPointsReproj(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LMLaneLine::Builder::disownWorldPointsReproj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Vectorf::Reader::hasVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Vectorf::Builder::hasVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Vectorf::Reader::getVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Vectorf::Builder::getVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Vectorf::Builder::setVector( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Vectorf::Builder::setVector(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Vectorf::Builder::initVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Vectorf::Builder::adoptVector(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Vectorf::Builder::disownVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Boundary::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Boundary::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader Boundary::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Boundary::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Boundary::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Boundary::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Boundary::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> Boundary::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Boundary::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Boundary::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader Boundary::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Boundary::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Boundary::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Boundary::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Boundary::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> Boundary::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float Boundary::Reader::getDirectionX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Boundary::Builder::getDirectionX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Boundary::Builder::setDirectionX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Boundary::Reader::getDirectionY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Boundary::Builder::getDirectionY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Boundary::Builder::setDirectionY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Boundary::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Boundary::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Boundary::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Boundary::Reader::getIsLine() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool Boundary::Builder::getIsLine() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void Boundary::Builder::setIsLine(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Boundary::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Boundary::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Boundary::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2DMotionInfo::Reader::getWidthVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Bbox2DMotionInfo::Builder::getWidthVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bbox2DMotionInfo::Builder::setWidthVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2DMotionInfo::Reader::getHeightVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Bbox2DMotionInfo::Builder::getHeightVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bbox2DMotionInfo::Builder::setHeightVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2DMotionInfo::Reader::getWidthHeightRatioVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Bbox2DMotionInfo::Builder::getWidthHeightRatioVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bbox2DMotionInfo::Builder::setWidthHeightRatioVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2DMotionInfo::Reader::getBottomCenterXVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Bbox2DMotionInfo::Builder::getBottomCenterXVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bbox2DMotionInfo::Builder::setBottomCenterXVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2DMotionInfo::Reader::getBottomCenterYVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Bbox2DMotionInfo::Builder::getBottomCenterYVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bbox2DMotionInfo::Builder::setBottomCenterYVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ModelOutputFeature::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ModelOutputFeature::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ModelOutputFeature::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ModelOutputFeature::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ModelOutputFeature::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ModelOutputFeature::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ModelOutputFeature::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ModelOutputFeature::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModelOutputFeature::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ModelOutputFeature::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ModelOutputFeature::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelOutputFeature::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ModelOutputFeature::Builder::setValue( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ModelOutputFeature::Builder::setValue(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ModelOutputFeature::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ModelOutputFeature::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ModelOutputFeature::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool EnvODDFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EnvODDFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader EnvODDFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder EnvODDFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline EnvODDFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EnvODDFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder EnvODDFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EnvODDFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> EnvODDFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t EnvODDFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EnvODDFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EnvODDFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t EnvODDFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t EnvODDFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EnvODDFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool EnvODDFrame::Reader::hasSceneInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EnvODDFrame::Builder::hasSceneInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SceneInfo::Reader EnvODDFrame::Reader::getSceneInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SceneInfo::Builder EnvODDFrame::Builder::getSceneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SceneInfo::Pipeline EnvODDFrame::Pipeline::getSceneInfo() {
  return  ::senseAD::msg::perception::SceneInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EnvODDFrame::Builder::setSceneInfo( ::senseAD::msg::perception::SceneInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SceneInfo::Builder EnvODDFrame::Builder::initSceneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EnvODDFrame::Builder::adoptSceneInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::SceneInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SceneInfo> EnvODDFrame::Builder::disownSceneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SceneInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int8_t EnvODDFrame::Reader::getCityLightsInfo() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int8_t EnvODDFrame::Builder::getCityLightsInfo() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void EnvODDFrame::Builder::setCityLightsInfo( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t EnvODDFrame::Reader::getBlobNum() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t EnvODDFrame::Builder::getBlobNum() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void EnvODDFrame::Builder::setBlobNum( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool EnvODDFrame::Reader::hasBlobObjectList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool EnvODDFrame::Builder::hasBlobObjectList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader EnvODDFrame::Reader::getBlobObjectList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder EnvODDFrame::Builder::getBlobObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void EnvODDFrame::Builder::setBlobObjectList( ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>::Builder EnvODDFrame::Builder::initBlobObjectList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void EnvODDFrame::Builder::adoptBlobObjectList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>> EnvODDFrame::Builder::disownBlobObjectList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Blob,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Reader::getLeftTurn() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Builder::getLeftTurn() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NonAutomobileVehicleLightStatus::Builder::setLeftTurn( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Reader::getRightTurn() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Builder::getRightTurn() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NonAutomobileVehicleLightStatus::Builder::setRightTurn( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Reader::getBrake() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t NonAutomobileVehicleLightStatus::Builder::getBrake() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NonAutomobileVehicleLightStatus::Builder::setBrake( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Point3f::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Point3f::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point3f::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Point3f::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Point3f::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point3f::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Point3f::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Point3f::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Point3f::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LMSpeedLimitSign::Reader::getLimitedSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LMSpeedLimitSign::Builder::getLimitedSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMSpeedLimitSign::Builder::setLimitedSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMSpeedLimitSign::Reader::getTrackId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMSpeedLimitSign::Builder::getTrackId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LMSpeedLimitSign::Builder::setTrackId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LMSpeedLimitSign::Reader::hasBbox2d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMSpeedLimitSign::Builder::hasBbox2d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader LMSpeedLimitSign::Reader::getBbox2d() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMSpeedLimitSign::Builder::getBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline LMSpeedLimitSign::Pipeline::getBbox2d() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LMSpeedLimitSign::Builder::setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMSpeedLimitSign::Builder::initBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMSpeedLimitSign::Builder::adoptBbox2d(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> LMSpeedLimitSign::Builder::disownBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Polygon3D::Reader::hasP3d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Polygon3D::Builder::hasP3d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader Polygon3D::Reader::getP3d() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder Polygon3D::Builder::getP3d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Polygon3D::Builder::setP3d( ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>::Builder Polygon3D::Builder::initP3d(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Polygon3D::Builder::adoptP3d(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>> Polygon3D::Builder::disownP3d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LidarDangerousZone::Reader::hasPolygon() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZone::Builder::hasPolygon() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LidarDangerousZone::Reader::getPolygon() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LidarDangerousZone::Builder::getPolygon() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LidarDangerousZone::Builder::setPolygon( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LidarDangerousZone::Builder::initPolygon(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LidarDangerousZone::Builder::adoptPolygon(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LidarDangerousZone::Builder::disownPolygon() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t LidarDangerousZone::Reader::getDangerousLevel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LidarDangerousZone::Builder::getDangerousLevel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZone::Builder::setDangerousLevel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LidarDangerousZone::Reader::getDzoneId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LidarDangerousZone::Builder::getDzoneId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZone::Builder::setDzoneId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LidarDangerousZone::Reader::hasPreDzoneIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZone::Builder::hasPreDzoneIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarDangerousZone::Reader::getPreDzoneIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::getPreDzoneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LidarDangerousZone::Builder::setPreDzoneIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LidarDangerousZone::Builder::setPreDzoneIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::initPreDzoneIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LidarDangerousZone::Builder::adoptPreDzoneIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> LidarDangerousZone::Builder::disownPreDzoneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LidarDangerousZone::Reader::hasOccluderIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZone::Builder::hasOccluderIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarDangerousZone::Reader::getOccluderIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::getOccluderIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LidarDangerousZone::Builder::setOccluderIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void LidarDangerousZone::Builder::setOccluderIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::initOccluderIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LidarDangerousZone::Builder::adoptOccluderIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> LidarDangerousZone::Builder::disownOccluderIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LidarDangerousZone::Reader::hasShadowIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZone::Builder::hasShadowIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader LidarDangerousZone::Reader::getShadowIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::getShadowIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LidarDangerousZone::Builder::setShadowIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LidarDangerousZone::Builder::setShadowIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder LidarDangerousZone::Builder::initShadowIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LidarDangerousZone::Builder::adoptShadowIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> LidarDangerousZone::Builder::disownShadowIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float LidarDangerousZone::Reader::getHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LidarDangerousZone::Builder::getHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZone::Builder::setHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LidarDangerousZone::Reader::getType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LidarDangerousZone::Builder::getType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZone::Builder::setType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RoadMarkerObject::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoadMarkerObject::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadMarkerObject::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RoadMarkerObject::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RoadMarkerObject::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoadMarkerObject::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float RoadMarkerObject::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float RoadMarkerObject::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RoadMarkerObject::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float RoadMarkerObject::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float RoadMarkerObject::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RoadMarkerObject::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool RoadMarkerObject::Reader::hasBbox2dInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarkerObject::Builder::hasBbox2dInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader RoadMarkerObject::Reader::getBbox2dInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder RoadMarkerObject::Builder::getBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline RoadMarkerObject::Pipeline::getBbox2dInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoadMarkerObject::Builder::setBbox2dInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder RoadMarkerObject::Builder::initBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadMarkerObject::Builder::adoptBbox2dInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> RoadMarkerObject::Builder::disownBbox2dInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadMarkerObject::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadMarkerObject::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader RoadMarkerObject::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder RoadMarkerObject::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadMarkerObject::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder RoadMarkerObject::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadMarkerObject::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> RoadMarkerObject::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t LaneLine::Reader::getId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LaneLine::Builder::getId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LaneLine::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LaneLine::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LaneLine::Reader::getTrackAge() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LaneLine::Builder::getTrackAge() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setTrackAge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getDistanceToLeftBumper() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getDistanceToLeftBumper() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setDistanceToLeftBumper(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getDistanceToRightBumper() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getDistanceToRightBumper() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setDistanceToRightBumper(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLanelineWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLanelineWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneLine::Reader::getColorId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneLine::Builder::getColorId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setColorId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneLine::Reader::getLanelineTypeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneLine::Builder::getLanelineTypeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineTypeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneLine::Reader::getEdgeTypeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneLine::Builder::getEdgeTypeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setEdgeTypeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLaneConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLaneConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLaneConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getColorConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getColorConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setColorConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLanelineTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLanelineTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getEdgeTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getEdgeTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setEdgeTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLanelineWidthConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLanelineWidthConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineWidthConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool LaneLine::Reader::hasStartPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasStartPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader LaneLine::Reader::getStartPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder LaneLine::Builder::getStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline LaneLine::Pipeline::getStartPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LaneLine::Builder::setStartPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder LaneLine::Builder::initStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::adoptStartPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> LaneLine::Builder::disownStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LaneLine::Reader::hasEndPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasEndPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader LaneLine::Reader::getEndPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder LaneLine::Builder::getEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline LaneLine::Pipeline::getEndPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LaneLine::Builder::setEndPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder LaneLine::Builder::initEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::adoptEndPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> LaneLine::Builder::disownEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LaneLine::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LaneLine::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LaneLine::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LaneLine::Reader::hasWorldPointsReproj() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasWorldPointsReproj() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader LaneLine::Reader::getWorldPointsReproj() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::getWorldPointsReproj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setWorldPointsReproj( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::initWorldPointsReproj(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptWorldPointsReproj(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> LaneLine::Builder::disownWorldPointsReproj() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int16_t LaneLine::Reader::getFittingDegree() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LaneLine::Builder::getFittingDegree() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setFittingDegree( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool LaneLine::Reader::hasPolyfitCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasPolyfitCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader LaneLine::Reader::getPolyfitCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LaneLine::Builder::getPolyfitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setPolyfitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void LaneLine::Builder::setPolyfitCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder LaneLine::Builder::initPolyfitCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptPolyfitCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> LaneLine::Builder::disownPolyfitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LaneLine::Reader::hasJunctionPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasJunctionPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader LaneLine::Reader::getJunctionPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::getJunctionPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setJunctionPoints( ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::initJunctionPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptJunctionPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>> LaneLine::Builder::disownJunctionPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLanePoint2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LaneLine::Reader::getIsLineJunctionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS);
}

inline bool LaneLine::Builder::getIsLineJunctionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setIsLineJunctionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<200>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LaneLine::Reader::getLaneCategory() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LaneLine::Builder::getLaneCategory() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLaneCategory( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LaneLine::Reader::getLineTypeId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LaneLine::Builder::getLineTypeId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLineTypeId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLineTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLineTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLineTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LaneLine::Reader::getFittingType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LaneLine::Builder::getFittingType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setFittingType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLanelineWidthLeft() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLanelineWidthLeft() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineWidthLeft(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float LaneLine::Reader::getLanelineWidthRight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float LaneLine::Builder::getLanelineWidthRight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLanelineWidthRight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool LaneLine::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader LaneLine::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> LaneLine::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool SizeInfo::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SizeInfo::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SizeInfo::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SizeInfo::Reader::hasSize() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SizeInfo::Builder::hasSize() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader SizeInfo::Reader::getSize() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder SizeInfo::Builder::getSize() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline SizeInfo::Pipeline::getSize() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SizeInfo::Builder::setSize( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder SizeInfo::Builder::initSize() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SizeInfo::Builder::adoptSize(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> SizeInfo::Builder::disownSize() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SizeInfo::Reader::hasSizeUncertainty() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SizeInfo::Builder::hasSizeUncertainty() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Matrix3f::Reader SizeInfo::Reader::getSizeUncertainty() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Matrix3f::Builder SizeInfo::Builder::getSizeUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Matrix3f::Pipeline SizeInfo::Pipeline::getSizeUncertainty() {
  return  ::senseAD::msg::perception::Matrix3f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SizeInfo::Builder::setSizeUncertainty( ::senseAD::msg::perception::Matrix3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Matrix3f::Builder SizeInfo::Builder::initSizeUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SizeInfo::Builder::adoptSizeUncertainty(
    ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Matrix3f> SizeInfo::Builder::disownSizeUncertainty() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Matrix3f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Matrix3f::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Matrix3f::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader Matrix3f::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline Matrix3f::Pipeline::getX() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Matrix3f::Builder::setX( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::initX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Matrix3f::Builder::adoptX(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> Matrix3f::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Matrix3f::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Matrix3f::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader Matrix3f::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline Matrix3f::Pipeline::getY() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Matrix3f::Builder::setY( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::initY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Matrix3f::Builder::adoptY(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> Matrix3f::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Matrix3f::Reader::hasZ() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Matrix3f::Builder::hasZ() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader Matrix3f::Reader::getZ() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::getZ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline Matrix3f::Pipeline::getZ() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Matrix3f::Builder::setZ( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder Matrix3f::Builder::initZ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Matrix3f::Builder::adoptZ(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> Matrix3f::Builder::disownZ() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t Vector4i::Reader::getX() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Vector4i::Builder::getX() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Vector4i::Builder::setX( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Vector4i::Reader::getY() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Vector4i::Builder::getY() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Vector4i::Builder::setY( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Vector4i::Reader::getZ() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Vector4i::Builder::getZ() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Vector4i::Builder::setZ( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Vector4i::Reader::getW() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Vector4i::Builder::getW() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Vector4i::Builder::setW( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SlotLimiter::Reader::hasLimiterPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlotLimiter::Builder::hasLimiterPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader SlotLimiter::Reader::getLimiterPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SlotLimiter::Builder::getLimiterPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlotLimiter::Builder::setLimiterPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder SlotLimiter::Builder::initLimiterPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SlotLimiter::Builder::adoptLimiterPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> SlotLimiter::Builder::disownLimiterPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float SlotLimiter::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SlotLimiter::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlotLimiter::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SlotLimiter::Reader::getLimiterStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SlotLimiter::Builder::getLimiterStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlotLimiter::Builder::setLimiterStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SlotParkingLock::Reader::hasParkingLockPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlotParkingLock::Builder::hasParkingLockPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader SlotParkingLock::Reader::getParkingLockPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder SlotParkingLock::Builder::getParkingLockPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline SlotParkingLock::Pipeline::getParkingLockPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SlotParkingLock::Builder::setParkingLockPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder SlotParkingLock::Builder::initParkingLockPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlotParkingLock::Builder::adoptParkingLockPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> SlotParkingLock::Builder::disownParkingLockPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float SlotParkingLock::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SlotParkingLock::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlotParkingLock::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SlotParkingLock::Reader::getParkingLockStatus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SlotParkingLock::Builder::getParkingLockStatus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlotParkingLock::Builder::setParkingLockStatus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ParkingSlot::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ParkingSlot::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ParkingSlot::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ParkingSlot::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ParkingSlot::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ParkingSlot::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ParkingSlot::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ParkingSlot::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingSlot::Reader::hasCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader ParkingSlot::Reader::getCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::getCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline ParkingSlot::Pipeline::getCenter() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setCenter( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::initCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptCenter(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> ParkingSlot::Builder::disownCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasWideDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasWideDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader ParkingSlot::Reader::getWideDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::getWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline ParkingSlot::Pipeline::getWideDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setWideDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::initWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptWideDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> ParkingSlot::Builder::disownWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasLongDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasLongDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader ParkingSlot::Reader::getLongDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::getLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline ParkingSlot::Pipeline::getLongDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setLongDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder ParkingSlot::Builder::initLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptLongDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> ParkingSlot::Builder::disownLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::getIsOccupied() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool ParkingSlot::Builder::getIsOccupied() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setIsOccupied(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ParkingSlot::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ParkingSlot::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingSlot::Reader::hasSlotPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasSlotPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader ParkingSlot::Reader::getSlotPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ParkingSlot::Builder::getSlotPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::setSlotPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ParkingSlot::Builder::initSlotPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ParkingSlot::Builder::adoptSlotPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> ParkingSlot::Builder::disownSlotPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasSlotLimiter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasSlotLimiter() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SlotLimiter::Reader ParkingSlot::Reader::getSlotLimiter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SlotLimiter::Builder ParkingSlot::Builder::getSlotLimiter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SlotLimiter::Pipeline ParkingSlot::Pipeline::getSlotLimiter() {
  return  ::senseAD::msg::perception::SlotLimiter::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setSlotLimiter( ::senseAD::msg::perception::SlotLimiter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SlotLimiter::Builder ParkingSlot::Builder::initSlotLimiter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptSlotLimiter(
    ::capnp::Orphan< ::senseAD::msg::perception::SlotLimiter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SlotLimiter> ParkingSlot::Builder::disownSlotLimiter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotLimiter>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasSlotParkingLock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasSlotParkingLock() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SlotParkingLock::Reader ParkingSlot::Reader::getSlotParkingLock() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SlotParkingLock::Builder ParkingSlot::Builder::getSlotParkingLock() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SlotParkingLock::Pipeline ParkingSlot::Pipeline::getSlotParkingLock() {
  return  ::senseAD::msg::perception::SlotParkingLock::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setSlotParkingLock( ::senseAD::msg::perception::SlotParkingLock::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SlotParkingLock::Builder ParkingSlot::Builder::initSlotParkingLock() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptSlotParkingLock(
    ::capnp::Orphan< ::senseAD::msg::perception::SlotParkingLock>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SlotParkingLock> ParkingSlot::Builder::disownSlotParkingLock() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SlotParkingLock>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ParkingSlotsFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlotsFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ParkingSlotsFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingSlotsFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ParkingSlotsFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingSlotsFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingSlotsFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingSlotsFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ParkingSlotsFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ParkingSlotsFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingSlotsFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingSlotsFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ParkingSlotsFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ParkingSlotsFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ParkingSlotsFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingSlotsFrame::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlotsFrame::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ParkingSlotsFrame::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ParkingSlotsFrame::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ParkingSlotsFrame::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ParkingSlotsFrame::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ParkingSlotsFrame::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ParkingSlotsFrame::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ParkingSlotsFrame::Reader::hasSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlotsFrame::Builder::hasSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader ParkingSlotsFrame::Reader::getSlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder ParkingSlotsFrame::Builder::getSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ParkingSlotsFrame::Builder::setSlots( ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder ParkingSlotsFrame::Builder::initSlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ParkingSlotsFrame::Builder::adoptSlots(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>> ParkingSlotsFrame::Builder::disownSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ParkingSlot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasLanelineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasLanelineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getLanelineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getLanelineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setLanelineResults( ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initLanelineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptLanelineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownLanelineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasStoplineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasStoplineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getStoplineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getStoplineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setStoplineResults( ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initStoplineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptStoplineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownStoplineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasFreespaceResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasFreespaceResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getFreespaceResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getFreespaceResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setFreespaceResults( ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initFreespaceResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptFreespaceResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownFreespaceResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasCrosswalkResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasCrosswalkResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getCrosswalkResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getCrosswalkResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setCrosswalkResults( ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initCrosswalkResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptCrosswalkResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownCrosswalkResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Crosswalk,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasSpeedBumpResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasSpeedBumpResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getSpeedBumpResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getSpeedBumpResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setSpeedBumpResults( ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initSpeedBumpResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptSpeedBumpResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownSpeedBumpResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::SpeedBump,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasHolisticPathResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasHolisticPathResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getHolisticPathResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getHolisticPathResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setHolisticPathResults( ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initHolisticPathResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptHolisticPathResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownHolisticPathResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::HolisticPath,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasCenterlineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasCenterlineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getCenterlineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getCenterlineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setCenterlineResults( ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initCenterlineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptCenterlineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownCenterlineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::CenterLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool RoadGeometry::Reader::hasRoadMarkerResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometry::Builder::hasRoadMarkerResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Reader RoadGeometry::Reader::getRoadMarkerResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::getRoadMarkerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void RoadGeometry::Builder::setRoadMarkerResults( ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>::Builder RoadGeometry::Builder::initRoadMarkerResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void RoadGeometry::Builder::adoptRoadMarkerResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>> RoadGeometry::Builder::disownRoadMarkerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::RoadMarker,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool LidarDangerousZoneFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZoneFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader LidarDangerousZoneFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder LidarDangerousZoneFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline LidarDangerousZoneFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LidarDangerousZoneFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder LidarDangerousZoneFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LidarDangerousZoneFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> LidarDangerousZoneFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t LidarDangerousZoneFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LidarDangerousZoneFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZoneFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LidarDangerousZoneFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LidarDangerousZoneFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZoneFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double LidarDangerousZoneFrame::Reader::getHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double LidarDangerousZoneFrame::Builder::getHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZoneFrame::Builder::setHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LidarDangerousZoneFrame::Reader::getType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LidarDangerousZoneFrame::Builder::getType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LidarDangerousZoneFrame::Builder::setType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool LidarDangerousZoneFrame::Reader::hasDzones() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LidarDangerousZoneFrame::Builder::hasDzones() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Reader LidarDangerousZoneFrame::Reader::getDzones() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Builder LidarDangerousZoneFrame::Builder::getDzones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LidarDangerousZoneFrame::Builder::setDzones( ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>::Builder LidarDangerousZoneFrame::Builder::initDzones(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LidarDangerousZoneFrame::Builder::adoptDzones(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>> LidarDangerousZoneFrame::Builder::disownDzones() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LidarDangerousZone,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t TrafficLight::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficLight::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLight::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TrafficLight::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TrafficLight::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TrafficLight::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TrafficLight::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasGroupId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasGroupId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TrafficLight::Reader::getGroupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TrafficLight::Builder::getGroupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setGroupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TrafficLight::Builder::initGroupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptGroupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TrafficLight::Builder::disownGroupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint16_t TrafficLight::Reader::getColorLabel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLight::Builder::getColorLabel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setColorLabel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TrafficLight::Reader::getTurnType() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLight::Builder::getTurnType() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setTurnType( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float TrafficLight::Reader::getDuringTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float TrafficLight::Builder::getDuringTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setDuringTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLight::Reader::hasImage2dInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasImage2dInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Reader TrafficLight::Reader::getImage2dInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Builder TrafficLight::Builder::getImage2dInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setImage2dInfo( ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>::Builder TrafficLight::Builder::initImage2dInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptImage2dInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>> TrafficLight::Builder::disownImage2dInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TLImage2DInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasWorldGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasWorldGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Reader TrafficLight::Reader::getWorldGeometry() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Builder TrafficLight::Builder::getWorldGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setWorldGeometry( ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>::Builder TrafficLight::Builder::initWorldGeometry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptWorldGeometry(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>> TrafficLight::Builder::disownWorldGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Vector3f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasLocalGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasLocalGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector3f::Reader TrafficLight::Reader::getLocalGeometry() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector3f::Builder TrafficLight::Builder::getLocalGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector3f::Pipeline TrafficLight::Pipeline::getLocalGeometry() {
  return  ::senseAD::msg::perception::Vector3f::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TrafficLight::Builder::setLocalGeometry( ::senseAD::msg::perception::Vector3f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector3f::Builder TrafficLight::Builder::initLocalGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::adoptLocalGeometry(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector3f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector3f> TrafficLight::Builder::disownLocalGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector3f>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasLanelineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasLanelineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getLanelineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getLanelineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setLanelineResults( ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initLanelineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptLanelineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownLanelineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LaneLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasStoplineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasStoplineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getStoplineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getStoplineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setStoplineResults( ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initStoplineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptStoplineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownStoplineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::StopLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasBoundaryResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasBoundaryResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getBoundaryResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getBoundaryResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setBoundaryResults( ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initBoundaryResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptBoundaryResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownBoundaryResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Boundary,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasFreespaceResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasFreespaceResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getFreespaceResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getFreespaceResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setFreespaceResults( ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initFreespaceResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptFreespaceResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownFreespaceResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Freespace,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasTrafficLightResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasTrafficLightResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getTrafficLightResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getTrafficLightResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setTrafficLightResults( ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initTrafficLightResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptTrafficLightResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownTrafficLightResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool RoadStruct::Reader::hasTrafficSignResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool RoadStruct::Builder::hasTrafficSignResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader RoadStruct::Reader::getTrafficSignResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::getTrafficSignResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void RoadStruct::Builder::setTrafficSignResults( ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>::Builder RoadStruct::Builder::initTrafficSignResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void RoadStruct::Builder::adoptTrafficSignResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>> RoadStruct::Builder::disownTrafficSignResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSignObject,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Bbox2D::Reader::getInitialized() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Bbox2D::Builder::getInitialized() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setInitialized(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2D::Reader::getTopLeftX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Bbox2D::Builder::getTopLeftX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setTopLeftX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2D::Reader::getTopLeftY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Bbox2D::Builder::getTopLeftY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setTopLeftY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2D::Reader::getBottomRightX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Bbox2D::Builder::getBottomRightX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setBottomRightX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2D::Reader::getBottomRightY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Bbox2D::Builder::getBottomRightY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setBottomRightY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Bbox2D::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Bbox2D::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Bbox2D::Reader::getIsLeftSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Bbox2D::Builder::getIsLeftSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setIsLeftSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Bbox2D::Reader::getIsRightSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Bbox2D::Builder::getIsRightSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setIsRightSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Bbox2D::Reader::getIsTopSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Bbox2D::Builder::getIsTopSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setIsTopSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Bbox2D::Reader::getIsBottomSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Bbox2D::Builder::getIsBottomSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Bbox2D::Builder::setIsBottomSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Internal2DBBox::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Internal2DBBox::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Internal2DBBox::Reader::getTopLeftX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Internal2DBBox::Builder::getTopLeftX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setTopLeftX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Internal2DBBox::Reader::getTopLeftY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Internal2DBBox::Builder::getTopLeftY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setTopLeftY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Internal2DBBox::Reader::getBottomRightX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Internal2DBBox::Builder::getBottomRightX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setBottomRightX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Internal2DBBox::Reader::getBottomRightY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Internal2DBBox::Builder::getBottomRightY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setBottomRightY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Internal2DBBox::Reader::getIsLeftSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool Internal2DBBox::Builder::getIsLeftSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setIsLeftSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool Internal2DBBox::Reader::getIsRightSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool Internal2DBBox::Builder::getIsRightSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setIsRightSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool Internal2DBBox::Reader::getIsTopSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool Internal2DBBox::Builder::getIsTopSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setIsTopSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool Internal2DBBox::Reader::getIsBottomSideTruncated() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool Internal2DBBox::Builder::getIsBottomSideTruncated() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Internal2DBBox::Builder::setIsBottomSideTruncated(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SceneInfo::Reader::getSceneBrightnessInfo() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SceneInfo::Builder::getSceneBrightnessInfo() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SceneInfo::Builder::setSceneBrightnessInfo( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SceneInfo::Reader::getSceneWeatherInfo() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SceneInfo::Builder::getSceneWeatherInfo() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SceneInfo::Builder::setSceneWeatherInfo( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SceneInfo::Reader::getSceneEnvironmentInfo() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SceneInfo::Builder::getSceneEnvironmentInfo() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SceneInfo::Builder::setSceneEnvironmentInfo( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t AutomobileDoorStatus::Reader::getBboxValidity() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AutomobileDoorStatus::Builder::getBboxValidity() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AutomobileDoorStatus::Builder::setBboxValidity( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t AutomobileDoorStatus::Reader::getLeftDoorStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AutomobileDoorStatus::Builder::getLeftDoorStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AutomobileDoorStatus::Builder::setLeftDoorStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t AutomobileDoorStatus::Reader::getRightDoorStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AutomobileDoorStatus::Builder::getRightDoorStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AutomobileDoorStatus::Builder::setRightDoorStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t AutomobileDoorStatus::Reader::getRearDoorStatus() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AutomobileDoorStatus::Builder::getRearDoorStatus() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AutomobileDoorStatus::Builder::setRearDoorStatus( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getGeneralObjectProbilibty() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getGeneralObjectProbilibty() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setGeneralObjectProbilibty(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getSubtype() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getSubtype() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setSubtype( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasSubTypeProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasSubTypeProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Object::Reader::getSubTypeProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Object::Builder::getSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Object::Builder::setSubTypeProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Object::Builder::setSubTypeProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Object::Builder::initSubTypeProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptSubTypeProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Object::Builder::disownSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t Object::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Object::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getTrackAgeTimeSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getTrackAgeTimeSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackAgeTimeSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Object::Reader::getLastMeasureUpdateTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Object::Builder::getLastMeasureUpdateTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setLastMeasureUpdateTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Object::Reader::getCurrentPredictionTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Object::Builder::getCurrentPredictionTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setCurrentPredictionTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasSizeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasSizeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SizeInfo::Reader Object::Reader::getSizeInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SizeInfo::Builder Object::Builder::getSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SizeInfo::Pipeline Object::Pipeline::getSizeInfo() {
  return  ::senseAD::msg::perception::SizeInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SizeInfo::Builder Object::Builder::initSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptSizeInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> Object::Builder::disownSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasPolygonBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasPolygonBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PolygonBox::Reader Object::Reader::getPolygonBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PolygonBox::Builder Object::Builder::getPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PolygonBox::Pipeline Object::Pipeline::getPolygonBox() {
  return  ::senseAD::msg::perception::PolygonBox::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PolygonBox::Builder Object::Builder::initPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptPolygonBox(
    ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> Object::Builder::disownPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasDirectionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasDirectionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::DirectionInfo::Reader Object::Reader::getDirectionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder Object::Builder::getDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::DirectionInfo::Pipeline Object::Pipeline::getDirectionInfo() {
  return  ::senseAD::msg::perception::DirectionInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder Object::Builder::initDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptDirectionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> Object::Builder::disownDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasBvCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasBvCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::BirdViewCorners::Reader Object::Reader::getBvCorners() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::BirdViewCorners::Builder Object::Builder::getBvCorners() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::BirdViewCorners::Pipeline Object::Pipeline::getBvCorners() {
  return  ::senseAD::msg::perception::BirdViewCorners::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setBvCorners( ::senseAD::msg::perception::BirdViewCorners::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::BirdViewCorners::Builder Object::Builder::initBvCorners() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptBvCorners(
    ::capnp::Orphan< ::senseAD::msg::perception::BirdViewCorners>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::BirdViewCorners> Object::Builder::disownBvCorners() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BirdViewCorners>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::MotionInfo::Reader Object::Reader::getMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::MotionInfo::Builder Object::Builder::getMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::MotionInfo::Pipeline Object::Pipeline::getMotionInfo() {
  return  ::senseAD::msg::perception::MotionInfo::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::MotionInfo::Builder Object::Builder::initMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> Object::Builder::disownMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int16_t Object::Reader::getMotionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getMotionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getMotionUnknownScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getMotionUnknownScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionUnknownScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getMotionStaticScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getMotionStaticScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionStaticScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getMotionStoppedScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getMotionStoppedScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionStoppedScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getMotionMovingScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getMotionMovingScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionMovingScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float Object::Reader::getMotionCrossingScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float Object::Builder::getMotionCrossingScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionCrossingScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getMaintenanceStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getMaintenanceStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMaintenanceStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getOcclusionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getOcclusionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setOcclusionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Object::Reader::getSensorSource() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Object::Builder::getSensorSource() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setSensorSource( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasGeneralMergeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasGeneralMergeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::GeneralMergeInfo::Reader Object::Reader::getGeneralMergeInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::GeneralMergeInfo::Builder Object::Builder::getGeneralMergeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::GeneralMergeInfo::Pipeline Object::Pipeline::getGeneralMergeInfo() {
  return  ::senseAD::msg::perception::GeneralMergeInfo::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setGeneralMergeInfo( ::senseAD::msg::perception::GeneralMergeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::GeneralMergeInfo::Builder Object::Builder::initGeneralMergeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptGeneralMergeInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::GeneralMergeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::GeneralMergeInfo> Object::Builder::disownGeneralMergeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::GeneralMergeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasFeature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasFeature() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader Object::Reader::getFeature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder Object::Builder::getFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Object::Builder::setFeature( ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder Object::Builder::initFeature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptFeature(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> Object::Builder::disownFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader Object::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder Object::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline Object::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder Object::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> Object::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasBboxMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasBboxMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Reader Object::Reader::getBboxMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder Object::Builder::getBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline Object::Pipeline::getBboxMotionInfo() {
  return  ::senseAD::msg::perception::Bbox2DMotionInfo::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setBboxMotionInfo( ::senseAD::msg::perception::Bbox2DMotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2DMotionInfo::Builder Object::Builder::initBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptBboxMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2DMotionInfo> Object::Builder::disownBboxMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2DMotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::perception::Object::DerivedType Object::Reader::getDerivedtype() const {
  return _reader.getDataField< ::senseAD::msg::perception::Object::DerivedType>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::perception::Object::DerivedType Object::Builder::getDerivedtype() {
  return _builder.getDataField< ::senseAD::msg::perception::Object::DerivedType>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setDerivedtype( ::senseAD::msg::perception::Object::DerivedType value) {
  _builder.setDataField< ::senseAD::msg::perception::Object::DerivedType>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasAttribute() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasAttribute() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::BaseCameraAttribute::Reader Object::Reader::getAttribute() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::BaseCameraAttribute::Builder Object::Builder::getAttribute() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::BaseCameraAttribute::Pipeline Object::Pipeline::getAttribute() {
  return  ::senseAD::msg::perception::BaseCameraAttribute::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setAttribute( ::senseAD::msg::perception::BaseCameraAttribute::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::BaseCameraAttribute::Builder Object::Builder::initAttribute() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptAttribute(
    ::capnp::Orphan< ::senseAD::msg::perception::BaseCameraAttribute>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::BaseCameraAttribute> Object::Builder::disownAttribute() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::BaseCameraAttribute>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasAutomobileLightStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasAutomobileLightStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::AutomobileLightStatus::Reader Object::Reader::getAutomobileLightStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::AutomobileLightStatus::Builder Object::Builder::getAutomobileLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::AutomobileLightStatus::Pipeline Object::Pipeline::getAutomobileLightStatus() {
  return  ::senseAD::msg::perception::AutomobileLightStatus::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setAutomobileLightStatus( ::senseAD::msg::perception::AutomobileLightStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::AutomobileLightStatus::Builder Object::Builder::initAutomobileLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptAutomobileLightStatus(
    ::capnp::Orphan< ::senseAD::msg::perception::AutomobileLightStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::AutomobileLightStatus> Object::Builder::disownAutomobileLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileLightStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Object::Reader::getIsRightEdgeDetected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<576>() * ::capnp::ELEMENTS);
}

inline bool Object::Builder::getIsRightEdgeDetected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<576>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setIsRightEdgeDetected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<576>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasRightEdgeLine() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasRightEdgeLine() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Vector4i::Reader Object::Reader::getRightEdgeLine() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Vector4i::Builder Object::Builder::getRightEdgeLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Vector4i::Pipeline Object::Pipeline::getRightEdgeLine() {
  return  ::senseAD::msg::perception::Vector4i::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setRightEdgeLine( ::senseAD::msg::perception::Vector4i::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Vector4i::Builder Object::Builder::initRightEdgeLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptRightEdgeLine(
    ::capnp::Orphan< ::senseAD::msg::perception::Vector4i>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Vector4i> Object::Builder::disownRightEdgeLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Vector4i>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasNonAutomobileVehicleLightStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasNonAutomobileVehicleLightStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Reader Object::Reader::getNonAutomobileVehicleLightStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Builder Object::Builder::getNonAutomobileVehicleLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Pipeline Object::Pipeline::getNonAutomobileVehicleLightStatus() {
  return  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setNonAutomobileVehicleLightStatus( ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::NonAutomobileVehicleLightStatus::Builder Object::Builder::initNonAutomobileVehicleLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptNonAutomobileVehicleLightStatus(
    ::capnp::Orphan< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus> Object::Builder::disownNonAutomobileVehicleLightStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::NonAutomobileVehicleLightStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Object::Reader::getIsWithPed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<577>() * ::capnp::ELEMENTS);
}

inline bool Object::Builder::getIsWithPed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<577>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setIsWithPed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<577>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getUmbrella() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getUmbrella() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setUmbrella( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getCall() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getCall() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setCall( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getPhone() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getPhone() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setPhone( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getWave() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getWave() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setWave( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getStanding() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getStanding() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setStanding( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasUpperBodyDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasUpperBodyDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader Object::Reader::getUpperBodyDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::getUpperBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline Object::Pipeline::getUpperBodyDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setUpperBodyDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::initUpperBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptUpperBodyDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> Object::Builder::disownUpperBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasLowerBodyDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasLowerBodyDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader Object::Reader::getLowerBodyDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::getLowerBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline Object::Pipeline::getLowerBodyDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setLowerBodyDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::initLowerBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptLowerBodyDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> Object::Builder::disownLowerBodyDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasFaceDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasFaceDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader Object::Reader::getFaceDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::getFaceDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline Object::Pipeline::getFaceDirection() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setFaceDirection( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder Object::Builder::initFaceDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptFaceDirection(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> Object::Builder::disownFaceDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasIntention() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasIntention() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PedestrianIntention::Reader Object::Reader::getIntention() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PedestrianIntention::Builder Object::Builder::getIntention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PedestrianIntention::Pipeline Object::Pipeline::getIntention() {
  return  ::senseAD::msg::perception::PedestrianIntention::Pipeline(_typeless.getPointerField(17));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setIntention( ::senseAD::msg::perception::PedestrianIntention::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PedestrianIntention::Builder Object::Builder::initIntention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptIntention(
    ::capnp::Orphan< ::senseAD::msg::perception::PedestrianIntention>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PedestrianIntention> Object::Builder::disownIntention() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PedestrianIntention>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Object::Reader::getIsOnBike() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<578>() * ::capnp::ELEMENTS);
}

inline bool Object::Builder::getIsOnBike() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<578>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setIsOnBike(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<578>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasDepthPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasDepthPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::DepthDetPoint::Reader Object::Reader::getDepthPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::DepthDetPoint::Builder Object::Builder::getDepthPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::DepthDetPoint::Pipeline Object::Pipeline::getDepthPoint() {
  return  ::senseAD::msg::perception::DepthDetPoint::Pipeline(_typeless.getPointerField(18));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setDepthPoint( ::senseAD::msg::perception::DepthDetPoint::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::DepthDetPoint::Builder Object::Builder::initDepthPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptDepthPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::DepthDetPoint>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::DepthDetPoint> Object::Builder::disownDepthPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DepthDetPoint>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasOdRdInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasOdRdInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::ObjectLaneAssignments::Reader Object::Reader::getOdRdInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::ObjectLaneAssignments::Builder Object::Builder::getOdRdInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::ObjectLaneAssignments::Pipeline Object::Pipeline::getOdRdInfo() {
  return  ::senseAD::msg::perception::ObjectLaneAssignments::Pipeline(_typeless.getPointerField(19));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setOdRdInfo( ::senseAD::msg::perception::ObjectLaneAssignments::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::ObjectLaneAssignments::Builder Object::Builder::initOdRdInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptOdRdInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::ObjectLaneAssignments>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::ObjectLaneAssignments> Object::Builder::disownOdRdInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::ObjectLaneAssignments>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasDebugInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasDebugInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraDebugInfo::Reader Object::Reader::getDebugInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::get(_reader.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraDebugInfo::Builder Object::Builder::getDebugInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::get(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraDebugInfo::Pipeline Object::Pipeline::getDebugInfo() {
  return  ::senseAD::msg::perception::CameraDebugInfo::Pipeline(_typeless.getPointerField(20));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setDebugInfo( ::senseAD::msg::perception::CameraDebugInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::set(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraDebugInfo::Builder Object::Builder::initDebugInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::init(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptDebugInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraDebugInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraDebugInfo> Object::Builder::disownDebugInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraDebugInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline  ::uint64_t Object::Reader::getPointCloudTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Object::Builder::getPointCloudTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setPointCloudTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double Object::Reader::getTrackRange() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double Object::Builder::getTrackRange() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackRange(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double Object::Reader::getTrackRangeRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double Object::Builder::getTrackRangeRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackRangeRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double Object::Reader::getTrackRangeAccelRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double Object::Builder::getTrackRangeAccelRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackRangeAccelRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double Object::Reader::getTrackLatRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double Object::Builder::getTrackLatRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackLatRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasMatchedSensorObjectInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasMatchedSensorObjectInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Reader Object::Reader::getMatchedSensorObjectInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Builder Object::Builder::getMatchedSensorObjectInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void Object::Builder::setMatchedSensorObjectInfo( ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>::Builder Object::Builder::initMatchedSensorObjectInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptMatchedSensorObjectInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>> Object::Builder::disownMatchedSensorObjectInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::MatchedSensorObjectInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline  ::uint16_t Object::Reader::getColorLabel() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Object::Builder::getColorLabel() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setColorLabel( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasAutomobileDoorStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasAutomobileDoorStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::AutomobileDoorStatus::Reader Object::Reader::getAutomobileDoorStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::get(_reader.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::AutomobileDoorStatus::Builder Object::Builder::getAutomobileDoorStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::get(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::AutomobileDoorStatus::Pipeline Object::Pipeline::getAutomobileDoorStatus() {
  return  ::senseAD::msg::perception::AutomobileDoorStatus::Pipeline(_typeless.getPointerField(22));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setAutomobileDoorStatus( ::senseAD::msg::perception::AutomobileDoorStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::set(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::AutomobileDoorStatus::Builder Object::Builder::initAutomobileDoorStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::init(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}
inline void Object::Builder::adoptAutomobileDoorStatus(
    ::capnp::Orphan< ::senseAD::msg::perception::AutomobileDoorStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::AutomobileDoorStatus> Object::Builder::disownAutomobileDoorStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::AutomobileDoorStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<22>() * ::capnp::POINTERS));
}

inline bool Object::Reader::hasHistInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasHistInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader Object::Reader::getHistInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Object::Builder::getHistInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}
inline void Object::Builder::setHistInfo( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Object::Builder::initHistInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptHistInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> Object::Builder::disownHistInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<23>() * ::capnp::POINTERS));
}

inline  ::uint8_t Object::Reader::getTrackStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Object::Builder::getTrackStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setTrackStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasSensorIdBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasSensorIdBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Reader Object::Reader::getSensorIdBox() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Builder Object::Builder::getSensorIdBox() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}
inline void Object::Builder::setSensorIdBox( ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>::Builder Object::Builder::initSensorIdBox(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptSensorIdBox(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>> Object::Builder::disownSensorIdBox() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Internal2DBBox,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<24>() * ::capnp::POINTERS));
}

inline  ::int8_t Object::Reader::getMotionState() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getMotionState() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setMotionState( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Object::Reader::getCarDoorState() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getCarDoorState() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}
inline void Object::Builder::setCarDoorState( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t FSLinePt::Reader::getV() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t FSLinePt::Builder::getV() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FSLinePt::Builder::setV( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t FSLinePt::Reader::getLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t FSLinePt::Builder::getLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FSLinePt::Builder::setLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FSLinePt::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool FSLinePt::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void FSLinePt::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool FSLineResult::Reader::hasFsLinePts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FSLineResult::Builder::hasFsLinePts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Reader FSLineResult::Reader::getFsLinePts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Builder FSLineResult::Builder::getFsLinePts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FSLineResult::Builder::setFsLinePts( ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>::Builder FSLineResult::Builder::initFsLinePts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FSLineResult::Builder::adoptFsLinePts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>> FSLineResult::Builder::disownFsLinePts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLinePt,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t FSLineResult::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FSLineResult::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FSLineResult::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FSLineResult::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool FSLineResult::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void FSLineResult::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool FSLineFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FSLineFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader FSLineFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder FSLineFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline FSLineFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FSLineFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder FSLineFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FSLineFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> FSLineFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FSLineFrame::Reader::hasFisheyeFsLineResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FSLineFrame::Builder::hasFisheyeFsLineResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Reader FSLineFrame::Reader::getFisheyeFsLineResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Builder FSLineFrame::Builder::getFisheyeFsLineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FSLineFrame::Builder::setFisheyeFsLineResults( ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>::Builder FSLineFrame::Builder::initFisheyeFsLineResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FSLineFrame::Builder::adoptFisheyeFsLineResults(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>> FSLineFrame::Builder::disownFisheyeFsLineResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::FSLineResult,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t Freespace::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Freespace::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Freespace::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader Freespace::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> Freespace::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasWorldPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasWorldPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader Freespace::Reader::getWorldPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::getWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setWorldPoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::initWorldPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptWorldPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> Freespace::Builder::disownWorldPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasCameraOpticalCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasCameraOpticalCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader Freespace::Reader::getCameraOpticalCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder Freespace::Builder::getCameraOpticalCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline Freespace::Pipeline::getCameraOpticalCenter() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Freespace::Builder::setCameraOpticalCenter( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder Freespace::Builder::initCameraOpticalCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::adoptCameraOpticalCenter(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> Freespace::Builder::disownCameraOpticalCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasAngleResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasAngleResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Freespace::Reader::getAngleResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::getAngleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setAngleResults( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Freespace::Builder::setAngleResults(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::initAngleResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptAngleResults(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Freespace::Builder::disownAngleResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasRangeResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasRangeResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Freespace::Reader::getRangeResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::getRangeResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setRangeResults( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Freespace::Builder::setRangeResults(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::initRangeResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptRangeResults(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Freespace::Builder::disownRangeResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasConfidence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasConfidence() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Freespace::Reader::getConfidence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::getConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setConfidence( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Freespace::Builder::setConfidence(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::initConfidence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptConfidence(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Freespace::Builder::disownConfidence() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t Freespace::Reader::getCol() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Freespace::Builder::getCol() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setCol( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Freespace::Reader::getRow() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Freespace::Builder::getRow() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setRow( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Freespace::Reader::getResolution() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Freespace::Builder::getResolution() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setResolution(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Freespace::Reader::hasOccupancyGrid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasOccupancyGrid() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader Freespace::Reader::getOccupancyGrid() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::getOccupancyGrid() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setOccupancyGrid( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void Freespace::Builder::setOccupancyGrid(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::initOccupancyGrid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptOccupancyGrid(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> Freespace::Builder::disownOccupancyGrid() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint16_t Freespace::Reader::getWidth() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Freespace::Builder::getWidth() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setWidth( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Freespace::Reader::getHeight() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Freespace::Builder::getHeight() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Freespace::Builder::setHeight( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Freespace::Reader::hasBitMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasBitMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Freespace::Reader::getBitMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::getBitMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setBitMap( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void Freespace::Builder::setBitMap(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Freespace::Builder::initBitMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptBitMap(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Freespace::Builder::disownBitMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Freespace::Reader::hasHistInfoVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Freespace::Builder::hasHistInfoVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader Freespace::Reader::getHistInfoVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::getHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Freespace::Builder::setHistInfoVector( ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>::Builder Freespace::Builder::initHistInfoVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Freespace::Builder::adoptHistInfoVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>> Freespace::Builder::disownHistInfoVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::HistInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::int16_t PedestrianIntention::Reader::getCrossing() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PedestrianIntention::Builder::getCrossing() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PedestrianIntention::Builder::setCrossing( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PedestrianIntention::Reader::getAttentionToEgoCar() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PedestrianIntention::Builder::getAttentionToEgoCar() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PedestrianIntention::Builder::setAttentionToEgoCar( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DepthDetPoint::Reader::getNearestPointX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DepthDetPoint::Builder::getNearestPointX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DepthDetPoint::Builder::setNearestPointX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DepthDetPoint::Reader::getDepthPointX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DepthDetPoint::Builder::getDepthPointX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DepthDetPoint::Builder::setDepthPointX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float DepthDetPoint::Reader::getDepthPointY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float DepthDetPoint::Builder::getDepthPointY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DepthDetPoint::Builder::setDepthPointY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DepthDetPoint::Reader::hasLandmarkFrontPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DepthDetPoint::Builder::hasLandmarkFrontPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader DepthDetPoint::Reader::getLandmarkFrontPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder DepthDetPoint::Builder::getLandmarkFrontPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline DepthDetPoint::Pipeline::getLandmarkFrontPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DepthDetPoint::Builder::setLandmarkFrontPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder DepthDetPoint::Builder::initLandmarkFrontPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DepthDetPoint::Builder::adoptLandmarkFrontPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> DepthDetPoint::Builder::disownLandmarkFrontPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DepthDetPoint::Reader::hasLandmarkRearPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DepthDetPoint::Builder::hasLandmarkRearPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader DepthDetPoint::Reader::getLandmarkRearPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder DepthDetPoint::Builder::getLandmarkRearPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline DepthDetPoint::Pipeline::getLandmarkRearPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DepthDetPoint::Builder::setLandmarkRearPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder DepthDetPoint::Builder::initLandmarkRearPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DepthDetPoint::Builder::adoptLandmarkRearPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> DepthDetPoint::Builder::disownLandmarkRearPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t DepthDetPoint::Reader::getOrientation() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DepthDetPoint::Builder::getOrientation() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DepthDetPoint::Builder::setOrientation( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t DepthDetPoint::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t DepthDetPoint::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DepthDetPoint::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool TLImage2DInfo::Reader::hasCameraName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TLImage2DInfo::Builder::hasCameraName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TLImage2DInfo::Reader::getCameraName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TLImage2DInfo::Builder::getCameraName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TLImage2DInfo::Builder::setCameraName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TLImage2DInfo::Builder::initCameraName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TLImage2DInfo::Builder::adoptCameraName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TLImage2DInfo::Builder::disownCameraName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TLImage2DInfo::Reader::hasDetectedBbox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TLImage2DInfo::Builder::hasDetectedBbox() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader TLImage2DInfo::Reader::getDetectedBbox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder TLImage2DInfo::Builder::getDetectedBbox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline TLImage2DInfo::Pipeline::getDetectedBbox() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TLImage2DInfo::Builder::setDetectedBbox( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder TLImage2DInfo::Builder::initDetectedBbox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TLImage2DInfo::Builder::adoptDetectedBbox(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> TLImage2DInfo::Builder::disownDetectedBbox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TLImage2DInfo::Reader::getIsProjectionValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TLImage2DInfo::Builder::getIsProjectionValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TLImage2DInfo::Builder::setIsProjectionValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TLImage2DInfo::Reader::hasProjectedCenterPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TLImage2DInfo::Builder::hasProjectedCenterPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader TLImage2DInfo::Reader::getProjectedCenterPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder TLImage2DInfo::Builder::getProjectedCenterPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline TLImage2DInfo::Pipeline::getProjectedCenterPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TLImage2DInfo::Builder::setProjectedCenterPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder TLImage2DInfo::Builder::initProjectedCenterPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TLImage2DInfo::Builder::adoptProjectedCenterPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> TLImage2DInfo::Builder::disownProjectedCenterPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TrafficLightSignFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightSignFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TrafficLightSignFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLightSignFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TrafficLightSignFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficLightSignFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLightSignFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLightSignFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TrafficLightSignFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t TrafficLightSignFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TrafficLightSignFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLightSignFrame::Builder::setFrameTimestampNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TrafficLightSignFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficLightSignFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficLightSignFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightSignFrame::Reader::hasTrafficSign() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightSignFrame::Builder::hasTrafficSign() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Reader TrafficLightSignFrame::Reader::getTrafficSign() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Builder TrafficLightSignFrame::Builder::getTrafficSign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLightSignFrame::Builder::setTrafficSign( ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>::Builder TrafficLightSignFrame::Builder::initTrafficSign(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLightSignFrame::Builder::adoptTrafficSign(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>> TrafficLightSignFrame::Builder::disownTrafficSign() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficSign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TrafficLightSignFrame::Reader::hasTrafficLightGroupList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightSignFrame::Builder::hasTrafficLightGroupList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Reader TrafficLightSignFrame::Reader::getTrafficLightGroupList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Builder TrafficLightSignFrame::Builder::getTrafficLightGroupList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficLightSignFrame::Builder::setTrafficLightGroupList( ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>::Builder TrafficLightSignFrame::Builder::initTrafficLightGroupList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TrafficLightSignFrame::Builder::adoptTrafficLightGroupList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>> TrafficLightSignFrame::Builder::disownTrafficLightGroupList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLightGroup,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TrafficLightSignFrame::Reader::hasCameraNameList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightSignFrame::Builder::hasCameraNameList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader TrafficLightSignFrame::Reader::getCameraNameList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TrafficLightSignFrame::Builder::getCameraNameList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TrafficLightSignFrame::Builder::setCameraNameList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void TrafficLightSignFrame::Builder::setCameraNameList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder TrafficLightSignFrame::Builder::initCameraNameList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TrafficLightSignFrame::Builder::adoptCameraNameList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> TrafficLightSignFrame::Builder::disownCameraNameList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t Blob::Reader::getObjectTrackId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::Builder::getObjectTrackId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObjectTrackId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Blob::Reader::getObejctPairedId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::Builder::getObejctPairedId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObejctPairedId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Blob::Reader::getObjectCyclesTraced() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Blob::Builder::getObjectCyclesTraced() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObjectCyclesTraced( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Blob::Reader::hasDetBbox2d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Blob::Builder::hasDetBbox2d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader Blob::Reader::getDetBbox2d() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder Blob::Builder::getDetBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline Blob::Pipeline::getDetBbox2d() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Blob::Builder::setDetBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder Blob::Builder::initDetBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Blob::Builder::adoptDetBbox2d(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> Blob::Builder::disownDetBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Blob::Reader::getPosX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getPosX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setPosX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getPosY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getPosY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setPosY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getPosZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getPosZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setPosZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getLeftAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getLeftAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setLeftAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getRightAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getRightAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setRightAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getTopAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getTopAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setTopAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getBottomAngle() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getBottomAngle() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setBottomAngle(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getClassConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getClassConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setClassConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getBlobType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getBlobType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setBlobType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getBlobStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getBlobStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setBlobStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getOncomingVehicleProbability() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getOncomingVehicleProbability() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setOncomingVehicleProbability( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getPreceedingVehicleProbability() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getPreceedingVehicleProbability() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setPreceedingVehicleProbability( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Blob::Reader::getObjectId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::Builder::getObjectId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObjectId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Blob::Reader::getObjectIdPaired() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Blob::Builder::getObjectIdPaired() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObjectIdPaired( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Blob::Reader::getIntensity() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Blob::Builder::getIntensity() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setIntensity( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline float Blob::Reader::getLuminousFlux() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float Blob::Builder::getLuminousFlux() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setLuminousFlux(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Blob::Reader::getObjectType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Blob::Builder::getObjectType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setObjectType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getProbabilityVehicleOncoming() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getProbabilityVehicleOncoming() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setProbabilityVehicleOncoming( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Blob::Reader::getProbabilityVehiclePreceeding() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Blob::Builder::getProbabilityVehiclePreceeding() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}
inline void Blob::Builder::setProbabilityVehiclePreceeding( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS, value);
}

inline bool RoadFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RoadFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RoadFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoadFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RoadFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t RoadFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t RoadFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadFrame::Builder::setFrameTimestampNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RoadFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoadFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RoadFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RoadFrame::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadFrame::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoadFrame::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoadFrame::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadFrame::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoadFrame::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadFrame::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoadFrame::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadFrame::Reader::hasRoadStruct() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadFrame::Builder::hasRoadStruct() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::RoadStruct::Reader RoadFrame::Reader::getRoadStruct() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::RoadStruct::Builder RoadFrame::Builder::getRoadStruct() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::RoadStruct::Pipeline RoadFrame::Pipeline::getRoadStruct() {
  return  ::senseAD::msg::perception::RoadStruct::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoadFrame::Builder::setRoadStruct( ::senseAD::msg::perception::RoadStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::RoadStruct::Builder RoadFrame::Builder::initRoadStruct() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadFrame::Builder::adoptRoadStruct(
    ::capnp::Orphan< ::senseAD::msg::perception::RoadStruct>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::RoadStruct> RoadFrame::Builder::disownRoadStruct() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ObjectLaneAssignments::Reader::hasLaneAssignments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ObjectLaneAssignments::Builder::hasLaneAssignments() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader ObjectLaneAssignments::Reader::getLaneAssignments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjectLaneAssignments::Builder::getLaneAssignments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ObjectLaneAssignments::Builder::setLaneAssignments( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ObjectLaneAssignments::Builder::setLaneAssignments(::kj::ArrayPtr<const  ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder ObjectLaneAssignments::Builder::initLaneAssignments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ObjectLaneAssignments::Builder::adoptLaneAssignments(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> ObjectLaneAssignments::Builder::disownLaneAssignments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoadGeometryFrame::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometryFrame::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RoadGeometryFrame::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadGeometryFrame::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RoadGeometryFrame::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoadGeometryFrame::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RoadGeometryFrame::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoadGeometryFrame::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RoadGeometryFrame::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RoadGeometryFrame::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoadGeometryFrame::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoadGeometryFrame::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RoadGeometryFrame::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoadGeometryFrame::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RoadGeometryFrame::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool RoadGeometryFrame::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometryFrame::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoadGeometryFrame::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoadGeometryFrame::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoadGeometryFrame::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoadGeometryFrame::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoadGeometryFrame::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoadGeometryFrame::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoadGeometryFrame::Reader::hasRoadGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoadGeometryFrame::Builder::hasRoadGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::RoadGeometry::Reader RoadGeometryFrame::Reader::getRoadGeometry() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::RoadGeometry::Builder RoadGeometryFrame::Builder::getRoadGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::RoadGeometry::Pipeline RoadGeometryFrame::Pipeline::getRoadGeometry() {
  return  ::senseAD::msg::perception::RoadGeometry::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoadGeometryFrame::Builder::setRoadGeometry( ::senseAD::msg::perception::RoadGeometry::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::RoadGeometry::Builder RoadGeometryFrame::Builder::initRoadGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoadGeometryFrame::Builder::adoptRoadGeometry(
    ::capnp::Orphan< ::senseAD::msg::perception::RoadGeometry>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::RoadGeometry> RoadGeometryFrame::Builder::disownRoadGeometry() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::RoadGeometry>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VecPoint2f::Reader::hasVector() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VecPoint2f::Builder::hasVector() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader VecPoint2f::Reader::getVector() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder VecPoint2f::Builder::getVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VecPoint2f::Builder::setVector( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder VecPoint2f::Builder::initVector(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void VecPoint2f::Builder::adoptVector(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> VecPoint2f::Builder::disownVector() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Vector3f::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Vector3f::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Vector3f::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Vector3f::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Vector3f::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Vector3f::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Vector3f::Reader::getZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Vector3f::Builder::getZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Vector3f::Builder::setZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightGroup::Reader::hasTrafficLights() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightGroup::Builder::hasTrafficLights() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Reader TrafficLightGroup::Reader::getTrafficLights() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Builder TrafficLightGroup::Builder::getTrafficLights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLightGroup::Builder::setTrafficLights( ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>::Builder TrafficLightGroup::Builder::initTrafficLights(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TrafficLightGroup::Builder::adoptTrafficLights(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>> TrafficLightGroup::Builder::disownTrafficLights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::TrafficLight,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrafficLightGroup::Reader::hasGroupId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightGroup::Builder::hasGroupId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TrafficLightGroup::Reader::getGroupId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TrafficLightGroup::Builder::getGroupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLightGroup::Builder::setGroupId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TrafficLightGroup::Builder::initGroupId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLightGroup::Builder::adoptGroupId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TrafficLightGroup::Builder::disownGroupId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t TrafficLightGroup::Reader::getColorLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficLightGroup::Builder::getColorLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLightGroup::Builder::setColorLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TrafficLightGroup::Reader::getTurnType() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TrafficLightGroup::Builder::getTurnType() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficLightGroup::Builder::setTurnType( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrafficLightGroup::Reader::getDuringTime() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TrafficLightGroup::Builder::getDuringTime() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficLightGroup::Builder::setDuringTime(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LMLaneTurnTypeSign::Reader::getTurnType() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LMLaneTurnTypeSign::Builder::getTurnType() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMLaneTurnTypeSign::Builder::setTurnType( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMLaneTurnTypeSign::Reader::getTrackId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMLaneTurnTypeSign::Builder::getTrackId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMLaneTurnTypeSign::Builder::setTrackId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LMLaneTurnTypeSign::Reader::hasBbox2d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneTurnTypeSign::Builder::hasBbox2d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader LMLaneTurnTypeSign::Reader::getBbox2d() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMLaneTurnTypeSign::Builder::getBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline LMLaneTurnTypeSign::Pipeline::getBbox2d() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LMLaneTurnTypeSign::Builder::setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMLaneTurnTypeSign::Builder::initBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMLaneTurnTypeSign::Builder::adoptBbox2d(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> LMLaneTurnTypeSign::Builder::disownBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficSign::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TrafficSign::Reader::getLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TrafficSign::Reader::getSubType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getSubType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setSubType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasSubTypeProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasSubTypeProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader TrafficSign::Reader::getSubTypeProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder TrafficSign::Builder::getSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::setSubTypeProbs( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TrafficSign::Builder::setSubTypeProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder TrafficSign::Builder::initSubTypeProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TrafficSign::Builder::adoptSubTypeProbs(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> TrafficSign::Builder::disownSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TrafficSign::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getTrackAgeTimeSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getTrackAgeTimeSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTrackAgeTimeSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TrafficSign::Reader::getLastMeasureUpdateTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficSign::Builder::getLastMeasureUpdateTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setLastMeasureUpdateTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TrafficSign::Reader::getCurrentPredictionTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficSign::Builder::getCurrentPredictionTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setCurrentPredictionTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasSizeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasSizeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::SizeInfo::Reader TrafficSign::Reader::getSizeInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::SizeInfo::Builder TrafficSign::Builder::getSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::SizeInfo::Pipeline TrafficSign::Pipeline::getSizeInfo() {
  return  ::senseAD::msg::perception::SizeInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setSizeInfo( ::senseAD::msg::perception::SizeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::SizeInfo::Builder TrafficSign::Builder::initSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptSizeInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::SizeInfo> TrafficSign::Builder::disownSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::SizeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasPolygonBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasPolygonBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PolygonBox::Reader TrafficSign::Reader::getPolygonBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PolygonBox::Builder TrafficSign::Builder::getPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PolygonBox::Pipeline TrafficSign::Pipeline::getPolygonBox() {
  return  ::senseAD::msg::perception::PolygonBox::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setPolygonBox( ::senseAD::msg::perception::PolygonBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PolygonBox::Builder TrafficSign::Builder::initPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptPolygonBox(
    ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PolygonBox> TrafficSign::Builder::disownPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PolygonBox>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasDirectionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasDirectionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::DirectionInfo::Reader TrafficSign::Reader::getDirectionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder TrafficSign::Builder::getDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::DirectionInfo::Pipeline TrafficSign::Pipeline::getDirectionInfo() {
  return  ::senseAD::msg::perception::DirectionInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setDirectionInfo( ::senseAD::msg::perception::DirectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::DirectionInfo::Builder TrafficSign::Builder::initDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptDirectionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::DirectionInfo> TrafficSign::Builder::disownDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::DirectionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::MotionInfo::Reader TrafficSign::Reader::getMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::MotionInfo::Builder TrafficSign::Builder::getMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::MotionInfo::Pipeline TrafficSign::Pipeline::getMotionInfo() {
  return  ::senseAD::msg::perception::MotionInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setMotionInfo( ::senseAD::msg::perception::MotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::MotionInfo::Builder TrafficSign::Builder::initMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::MotionInfo> TrafficSign::Builder::disownMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::MotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int16_t TrafficSign::Reader::getMotionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getMotionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMotionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getMotionStaticScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getMotionStaticScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMotionStaticScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TrafficSign::Reader::getMaintenanceStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getMaintenanceStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMaintenanceStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t TrafficSign::Reader::getOcclusionStatus() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TrafficSign::Builder::getOcclusionStatus() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setOcclusionStatus( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasFeature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasFeature() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader TrafficSign::Reader::getFeature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder TrafficSign::Builder::getFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::setFeature( ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder TrafficSign::Builder::initFeature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void TrafficSign::Builder::adoptFeature(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> TrafficSign::Builder::disownFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Reader TrafficSign::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficSign::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline TrafficSign::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setCameraBboxInfo( ::senseAD::msg::perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::CameraBBox2DInfo::Builder TrafficSign::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::CameraBBox2DInfo> TrafficSign::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool PolygonBox::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PolygonBox::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PolygonBox::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PolygonBox::Reader::hasPolygonContour() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PolygonBox::Builder::hasPolygonContour() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader PolygonBox::Reader::getPolygonContour() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder PolygonBox::Builder::getPolygonContour() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PolygonBox::Builder::setPolygonContour( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder PolygonBox::Builder::initPolygonContour(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PolygonBox::Builder::adoptPolygonContour(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> PolygonBox::Builder::disownPolygonContour() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float PolygonBox::Reader::getHeightLowerSurface() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PolygonBox::Builder::getHeightLowerSurface() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PolygonBox::Builder::setHeightLowerSurface(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PolygonBox::Reader::getHeightUpperSurface() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PolygonBox::Builder::getHeightUpperSurface() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PolygonBox::Builder::setHeightUpperSurface(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PolygonBox::Reader::hasPolygonContour3d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PolygonBox::Builder::hasPolygonContour3d() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Reader PolygonBox::Reader::getPolygonContour3d() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Builder PolygonBox::Builder::getPolygonContour3d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PolygonBox::Builder::setPolygonContour3d( ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>::Builder PolygonBox::Builder::initPolygonContour3d(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PolygonBox::Builder::adoptPolygonContour3d(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>> PolygonBox::Builder::disownPolygonContour3d() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point3d,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline float LMLaneSpeedLimitSign::Reader::getLimitedSpeed() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LMLaneSpeedLimitSign::Builder::getLimitedSpeed() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMLaneSpeedLimitSign::Builder::setLimitedSpeed(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMLaneSpeedLimitSign::Reader::getTrackId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMLaneSpeedLimitSign::Builder::getTrackId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LMLaneSpeedLimitSign::Builder::setTrackId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LMLaneSpeedLimitSign::Reader::hasBbox2d() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMLaneSpeedLimitSign::Builder::hasBbox2d() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader LMLaneSpeedLimitSign::Reader::getBbox2d() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMLaneSpeedLimitSign::Builder::getBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline LMLaneSpeedLimitSign::Pipeline::getBbox2d() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LMLaneSpeedLimitSign::Builder::setBbox2d( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder LMLaneSpeedLimitSign::Builder::initBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMLaneSpeedLimitSign::Builder::adoptBbox2d(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> LMLaneSpeedLimitSign::Builder::disownBbox2d() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float LMLanePoint2f::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLanePoint2f::Reader::getNextSegmentLaneLineType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLanePoint2f::Builder::getNextSegmentLaneLineType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLanePoint2f::Reader::getNextSegmentLaneLineColor() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLanePoint2f::Builder::getNextSegmentLaneLineColor() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineColor( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineColorConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineColorConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineColorConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineWidthConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineWidthConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineWidthConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t LMLanePoint2f::Reader::getPointType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t LMLanePoint2f::Builder::getPointType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setPointType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineWidthLeft() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineWidthLeft() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineWidthLeft(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float LMLanePoint2f::Reader::getNextSegmentLaneLineWidthRight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float LMLanePoint2f::Builder::getNextSegmentLaneLineWidthRight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void LMLanePoint2f::Builder::setNextSegmentLaneLineWidthRight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CameraBBox2DInfo::Reader::hasRawDetectionBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CameraBBox2DInfo::Builder::hasRawDetectionBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader CameraBBox2DInfo::Reader::getRawDetectionBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder CameraBBox2DInfo::Builder::getRawDetectionBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline CameraBBox2DInfo::Pipeline::getRawDetectionBox() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CameraBBox2DInfo::Builder::setRawDetectionBox( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder CameraBBox2DInfo::Builder::initRawDetectionBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CameraBBox2DInfo::Builder::adoptRawDetectionBox(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> CameraBBox2DInfo::Builder::disownRawDetectionBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CameraBBox2DInfo::Reader::hasTrackedBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CameraBBox2DInfo::Builder::hasTrackedBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Bbox2D::Reader CameraBBox2DInfo::Reader::getTrackedBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Bbox2D::Builder CameraBBox2DInfo::Builder::getTrackedBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Bbox2D::Pipeline CameraBBox2DInfo::Pipeline::getTrackedBox() {
  return  ::senseAD::msg::perception::Bbox2D::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CameraBBox2DInfo::Builder::setTrackedBox( ::senseAD::msg::perception::Bbox2D::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Bbox2D::Builder CameraBBox2DInfo::Builder::initTrackedBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CameraBBox2DInfo::Builder::adoptTrackedBox(
    ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Bbox2D> CameraBBox2DInfo::Builder::disownTrackedBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Bbox2D>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader LMPerceptionRoad::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder LMPerceptionRoad::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline LMPerceptionRoad::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LMPerceptionRoad::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder LMPerceptionRoad::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> LMPerceptionRoad::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t LMPerceptionRoad::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LMPerceptionRoad::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LMPerceptionRoad::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t LMPerceptionRoad::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LMPerceptionRoad::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void LMPerceptionRoad::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool LMPerceptionRoad::Reader::hasSensorName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasSensorName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LMPerceptionRoad::Reader::getSensorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LMPerceptionRoad::Builder::getSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setSensorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LMPerceptionRoad::Builder::initSensorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptSensorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LMPerceptionRoad::Builder::disownSensorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasLaneLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasLaneLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Reader LMPerceptionRoad::Reader::getLaneLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::getLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setLaneLines( ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::initLaneLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptLaneLines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>> LMPerceptionRoad::Builder::disownLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasLaneTurntypeSigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasLaneTurntypeSigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Reader LMPerceptionRoad::Reader::getLaneTurntypeSigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::getLaneTurntypeSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setLaneTurntypeSigns( ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::initLaneTurntypeSigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptLaneTurntypeSigns(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>> LMPerceptionRoad::Builder::disownLaneTurntypeSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneTurnTypeSign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasLaneSpeedLimitSigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasLaneSpeedLimitSigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader LMPerceptionRoad::Reader::getLaneSpeedLimitSigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::getLaneSpeedLimitSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setLaneSpeedLimitSigns( ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::initLaneSpeedLimitSigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptLaneSpeedLimitSigns(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>> LMPerceptionRoad::Builder::disownLaneSpeedLimitSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMLaneSpeedLimitSign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasSpeedLimitSigns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasSpeedLimitSigns() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader LMPerceptionRoad::Reader::getSpeedLimitSigns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::getSpeedLimitSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setSpeedLimitSigns( ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::initSpeedLimitSigns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptSpeedLimitSigns(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>> LMPerceptionRoad::Builder::disownSpeedLimitSigns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMSpeedLimitSign,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool LMPerceptionRoad::Reader::hasRegions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool LMPerceptionRoad::Builder::hasRegions() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Reader LMPerceptionRoad::Reader::getRegions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::getRegions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void LMPerceptionRoad::Builder::setRegions( ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>::Builder LMPerceptionRoad::Builder::initRegions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void LMPerceptionRoad::Builder::adoptRegions(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>> LMPerceptionRoad::Builder::disownRegions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::LMRegion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool UniADPlanningDebug::Reader::hasTextboxString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UniADPlanningDebug::Builder::hasTextboxString() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UniADPlanningDebug::Reader::getTextboxString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UniADPlanningDebug::Builder::getTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UniADPlanningDebug::Builder::setTextboxString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UniADPlanningDebug::Builder::initTextboxString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UniADPlanningDebug::Builder::adoptTextboxString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UniADPlanningDebug::Builder::disownTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float HolisticPath::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float HolisticPath::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HolisticPath::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HolisticPath::Reader::hasStartPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasStartPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader HolisticPath::Reader::getStartPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder HolisticPath::Builder::getStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline HolisticPath::Pipeline::getStartPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HolisticPath::Builder::setStartPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder HolisticPath::Builder::initStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::adoptStartPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> HolisticPath::Builder::disownStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HolisticPath::Reader::hasEndPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasEndPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::Point2f::Reader HolisticPath::Reader::getEndPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::Point2f::Builder HolisticPath::Builder::getEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::Point2f::Pipeline HolisticPath::Pipeline::getEndPoint() {
  return  ::senseAD::msg::perception::Point2f::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void HolisticPath::Builder::setEndPoint( ::senseAD::msg::perception::Point2f::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::Point2f::Builder HolisticPath::Builder::initEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::adoptEndPoint(
    ::capnp::Orphan< ::senseAD::msg::perception::Point2f>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::Point2f> HolisticPath::Builder::disownEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::Point2f>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool HolisticPath::Reader::hasPointsBv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasPointsBv() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader HolisticPath::Reader::getPointsBv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::getPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::setPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::initPointsBv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void HolisticPath::Builder::adoptPointsBv(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> HolisticPath::Builder::disownPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HolisticPath::Reader::hasSampledPointsBv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasSampledPointsBv() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader HolisticPath::Reader::getSampledPointsBv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::getSampledPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::setSampledPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::initSampledPointsBv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void HolisticPath::Builder::adoptSampledPointsBv(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> HolisticPath::Builder::disownSampledPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HolisticPath::Reader::hasImagePoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasImagePoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader HolisticPath::Reader::getImagePoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::getImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::setImagePoints( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder HolisticPath::Builder::initImagePoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void HolisticPath::Builder::adoptImagePoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> HolisticPath::Builder::disownImagePoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int16_t HolisticPath::Reader::getFittingDegree() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t HolisticPath::Builder::getFittingDegree() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void HolisticPath::Builder::setFittingDegree( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool HolisticPath::Reader::hasPolyfitCoefficients() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool HolisticPath::Builder::hasPolyfitCoefficients() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader HolisticPath::Reader::getPolyfitCoefficients() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HolisticPath::Builder::getPolyfitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void HolisticPath::Builder::setPolyfitCoefficients( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void HolisticPath::Builder::setPolyfitCoefficients(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HolisticPath::Builder::initPolyfitCoefficients(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void HolisticPath::Builder::adoptPolyfitCoefficients(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> HolisticPath::Builder::disownPolyfitCoefficients() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t HolisticPath::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t HolisticPath::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void HolisticPath::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t HolisticPath::Reader::getTrackAge() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t HolisticPath::Builder::getTrackAge() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void HolisticPath::Builder::setTrackAge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float CenterLine::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CenterLine::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CenterLine::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CenterLine::Reader::hasPointsBv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CenterLine::Builder::hasPointsBv() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader CenterLine::Reader::getPointsBv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CenterLine::Builder::getPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CenterLine::Builder::setPointsBv( ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>::Builder CenterLine::Builder::initPointsBv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CenterLine::Builder::adoptPointsBv(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>> CenterLine::Builder::disownPointsBv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::Point2f,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CenterLine::Reader::hasPointsBvType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CenterLine::Builder::hasPointsBvType() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader CenterLine::Reader::getPointsBvType() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder CenterLine::Builder::getPointsBvType() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CenterLine::Builder::setPointsBvType( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void CenterLine::Builder::setPointsBvType(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder CenterLine::Builder::initPointsBvType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CenterLine::Builder::adoptPointsBvType(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> CenterLine::Builder::disownPointsBvType() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t CenterLine::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CenterLine::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CenterLine::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CenterLine::Reader::getTrackAge() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CenterLine::Builder::getTrackAge() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CenterLine::Builder::setTrackAge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PartitionInfo::Reader::getNumPartition() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PartitionInfo::Builder::getNumPartition() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PartitionInfo::Builder::setNumPartition( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PartitionInfo::Reader::hasRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PartitionInfo::Builder::hasRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader PartitionInfo::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::getRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PartitionInfo::Builder::setRanges( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PartitionInfo::Builder::setRanges(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PartitionInfo::Builder::adoptRanges(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> PartitionInfo::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PartitionInfo::Reader::hasSteps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PartitionInfo::Builder::hasSteps() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader PartitionInfo::Reader::getSteps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::getSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PartitionInfo::Builder::setSteps( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PartitionInfo::Builder::setSteps(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::initSteps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PartitionInfo::Builder::adoptSteps(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> PartitionInfo::Builder::disownSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PartitionInfo::Reader::hasNumVoxelsPerRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PartitionInfo::Builder::hasNumVoxelsPerRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader PartitionInfo::Reader::getNumVoxelsPerRange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::getNumVoxelsPerRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PartitionInfo::Builder::setNumVoxelsPerRange( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void PartitionInfo::Builder::setNumVoxelsPerRange(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PartitionInfo::Builder::initNumVoxelsPerRange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PartitionInfo::Builder::adoptNumVoxelsPerRange(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> PartitionInfo::Builder::disownNumVoxelsPerRange() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float OccGrid::Reader::getConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getMinHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getMinHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setMinHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getMaxHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getMaxHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setMaxHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getGridSizeX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getGridSizeX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setGridSizeX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float OccGrid::Reader::getGridSizeY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float OccGrid::Builder::getGridSizeY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setGridSizeY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t OccGrid::Reader::getLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t OccGrid::Builder::getLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void OccGrid::Builder::setLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool OccupancyData::Reader::hasXPartitionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasXPartitionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PartitionInfo::Reader OccupancyData::Reader::getXPartitionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::getXPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PartitionInfo::Pipeline OccupancyData::Pipeline::getXPartitionInfo() {
  return  ::senseAD::msg::perception::PartitionInfo::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OccupancyData::Builder::setXPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::initXPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::adoptXPartitionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> OccupancyData::Builder::disownXPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OccupancyData::Reader::hasYPartitionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasYPartitionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PartitionInfo::Reader OccupancyData::Reader::getYPartitionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::getYPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PartitionInfo::Pipeline OccupancyData::Pipeline::getYPartitionInfo() {
  return  ::senseAD::msg::perception::PartitionInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void OccupancyData::Builder::setYPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::initYPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::adoptYPartitionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> OccupancyData::Builder::disownYPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OccupancyData::Reader::hasZPartitionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasZPartitionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::PartitionInfo::Reader OccupancyData::Reader::getZPartitionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::getZPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::PartitionInfo::Pipeline OccupancyData::Pipeline::getZPartitionInfo() {
  return  ::senseAD::msg::perception::PartitionInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void OccupancyData::Builder::setZPartitionInfo( ::senseAD::msg::perception::PartitionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::PartitionInfo::Builder OccupancyData::Builder::initZPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::adoptZPartitionInfo(
    ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::PartitionInfo> OccupancyData::Builder::disownZPartitionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::PartitionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t OccupancyData::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OccupancyData::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OccupancyData::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t OccupancyData::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t OccupancyData::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OccupancyData::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OccupancyData::Reader::hasIdxLowList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasIdxLowList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader OccupancyData::Reader::getIdxLowList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::getIdxLowList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::setIdxLowList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void OccupancyData::Builder::setIdxLowList(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::initIdxLowList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void OccupancyData::Builder::adoptIdxLowList(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> OccupancyData::Builder::disownIdxLowList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool OccupancyData::Reader::hasIdxHighList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasIdxHighList() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader OccupancyData::Reader::getIdxHighList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::getIdxHighList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::setIdxHighList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void OccupancyData::Builder::setIdxHighList(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::initIdxHighList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void OccupancyData::Builder::adoptIdxHighList(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> OccupancyData::Builder::disownIdxHighList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool OccupancyData::Reader::hasOccTypeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyData::Builder::hasOccTypeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader OccupancyData::Reader::getOccTypeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::getOccTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void OccupancyData::Builder::setOccTypeList( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void OccupancyData::Builder::setOccTypeList(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder OccupancyData::Builder::initOccTypeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void OccupancyData::Builder::adoptOccTypeList(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> OccupancyData::Builder::disownOccTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool OccupancyInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader OccupancyInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder OccupancyInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline OccupancyInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OccupancyInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder OccupancyInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OccupancyInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> OccupancyInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t OccupancyInfo::Reader::getFrameTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OccupancyInfo::Builder::getFrameTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OccupancyInfo::Builder::setFrameTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t OccupancyInfo::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t OccupancyInfo::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void OccupancyInfo::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OccupancyInfo::Reader::getGridsNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OccupancyInfo::Builder::getGridsNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OccupancyInfo::Builder::setGridsNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool OccupancyInfo::Reader::hasOccGrids() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyInfo::Builder::hasOccGrids() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Reader OccupancyInfo::Reader::getOccGrids() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Builder OccupancyInfo::Builder::getOccGrids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OccupancyInfo::Builder::setOccGrids( ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>::Builder OccupancyInfo::Builder::initOccGrids(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OccupancyInfo::Builder::adoptOccGrids(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>> OccupancyInfo::Builder::disownOccGrids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::perception::OccGrid,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OccupancyInfo::Reader::hasOccupancyData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OccupancyInfo::Builder::hasOccupancyData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::perception::OccupancyData::Reader OccupancyInfo::Reader::getOccupancyData() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::perception::OccupancyData::Builder OccupancyInfo::Builder::getOccupancyData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::perception::OccupancyData::Pipeline OccupancyInfo::Pipeline::getOccupancyData() {
  return  ::senseAD::msg::perception::OccupancyData::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void OccupancyInfo::Builder::setOccupancyData( ::senseAD::msg::perception::OccupancyData::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::perception::OccupancyData::Builder OccupancyInfo::Builder::initOccupancyData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OccupancyInfo::Builder::adoptOccupancyData(
    ::capnp::Orphan< ::senseAD::msg::perception::OccupancyData>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::perception::OccupancyData> OccupancyInfo::Builder::disownOccupancyData() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::perception::OccupancyData>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

