// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: planning.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>
#include <ad_msg_idl/std_msgs/typed_data_list.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d1c354adac515fa0);
CAPNP_DECLARE_SCHEMA(f70add9e6b359be3);
CAPNP_DECLARE_SCHEMA(cb0834bdbb16932c);
enum class Gear_cb0834bdbb16932c: uint16_t {
  GEAR_NONE,
  GEAR_PARK,
  GEAR_REVERSE,
  GEAR_NEUTRAL,
  GEAR_DRIVE,
  GEAR_LOW,
};
CAPNP_DECLARE_ENUM(Gear, cb0834bdbb16932c);
CAPNP_DECLARE_SCHEMA(f3344ea96d6177f9);
enum class TurnSignal_f3344ea96d6177f9: uint16_t {
  TURN_NONE,
  TURN_LEFT,
  TURN_RIGHT,
  TURN_EMERGENCY,
};
CAPNP_DECLARE_ENUM(TurnSignal, f3344ea96d6177f9);
CAPNP_DECLARE_SCHEMA(98033e176fda904a);
enum class TrajectoryMode_98033e176fda904a: uint16_t {
  MODE_NONE,
  MODE_ACC,
  MODE_LKA,
  MODE_HPP_CRUISE,
  MODE_PARKING,
};
CAPNP_DECLARE_ENUM(TrajectoryMode, 98033e176fda904a);
CAPNP_DECLARE_SCHEMA(c49f366acaa6d1af);
enum class TurnSteer_c49f366acaa6d1af: uint16_t {
  STEER_NONE,
  STEER_RETURN,
  STEER_COMPLETED,
  STEER_COMPLETED_HALF,
};
CAPNP_DECLARE_ENUM(TurnSteer, c49f366acaa6d1af);
CAPNP_DECLARE_SCHEMA(e3b1f16ab9edab2b);
CAPNP_DECLARE_SCHEMA(c827c34c70796a24);
CAPNP_DECLARE_SCHEMA(f87c4ae61ccec309);
CAPNP_DECLARE_SCHEMA(8b19f430463b96ba);
CAPNP_DECLARE_SCHEMA(feef0c05bcf9f45b);
CAPNP_DECLARE_SCHEMA(be217c1b942c401b);
CAPNP_DECLARE_SCHEMA(9139f3ce2cb27538);
CAPNP_DECLARE_SCHEMA(c43e0dcb7dbf15ff);
CAPNP_DECLARE_SCHEMA(f38ee52e0693694f);
CAPNP_DECLARE_SCHEMA(ad945810f8dfd5b5);
CAPNP_DECLARE_SCHEMA(b0e3437464613479);
CAPNP_DECLARE_SCHEMA(f47c8c0a27344b4b);
CAPNP_DECLARE_SCHEMA(e87f8c8f8b470f31);
CAPNP_DECLARE_SCHEMA(a09896695501a5b8);
CAPNP_DECLARE_SCHEMA(92947ea3f1f0de96);
CAPNP_DECLARE_SCHEMA(fb9a661dc31be088);
CAPNP_DECLARE_SCHEMA(a071b14ebf889d29);
CAPNP_DECLARE_SCHEMA(b825159f7192db84);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_planning {

struct TrajectoryPoint {
  TrajectoryPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1c354adac515fa0, 9, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Trajectory {
  Trajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Gear_cb0834bdbb16932c Gear;

  typedef ::capnp::schemas::TurnSignal_f3344ea96d6177f9 TurnSignal;

  typedef ::capnp::schemas::TrajectoryMode_98033e176fda904a TrajectoryMode;

  typedef ::capnp::schemas::TurnSteer_c49f366acaa6d1af TurnSteer;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f70add9e6b359be3, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLight {
  TrafficLight() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3b1f16ab9edab2b, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReflineDebug {
  ReflineDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c827c34c70796a24, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningLine {
  PlanningLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f87c4ae61ccec309, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningDebug {
  PlanningDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b19f430463b96ba, 9, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DecisionTarget {
  DecisionTarget() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(feef0c05bcf9f45b, 7, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DecisionDebug {
  DecisionDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be217c1b942c401b, 7, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MapLinePoint {
  MapLinePoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9139f3ce2cb27538, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PathPoint {
  PathPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c43e0dcb7dbf15ff, 9, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReferenceLineAndLaneLine {
  ReferenceLineAndLaneLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f38ee52e0693694f, 0, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TurnReminder {
  TurnReminder() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad945810f8dfd5b5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OrientedBoundingBox {
  OrientedBoundingBox() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0e3437464613479, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AgentState {
  AgentState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f47c8c0a27344b4b, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AgentDebug {
  AgentDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e87f8c8f8b470f31, 7, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScenarioAnalysisAgent {
  ScenarioAnalysisAgent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a09896695501a5b8, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScenarioAnalysisLaneline {
  ScenarioAnalysisLaneline() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92947ea3f1f0de96, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScenarioAnalysisRefline {
  ScenarioAnalysisRefline() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb9a661dc31be088, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScenarioModel {
  ScenarioModel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a071b14ebf889d29, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScenarioModelDebug {
  ScenarioModelDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b825159f7192db84, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TrajectoryPoint::Reader {
public:
  typedef TrajectoryPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline bool hasDirection() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getDirection() const;

  inline double getVelocity() const;

  inline float getTheta() const;

  inline double getSteerAngle() const;

  inline float getCurvature() const;

  inline double getSumDistance() const;

  inline double getTimeDifference() const;

  inline double getYawRate() const;

  inline double getAcceleration() const;

  inline  ::uint32_t getTrajNumberOfSurplus() const;

  inline bool getIsTurnSteerOfNextPath() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrajectoryPoint::Builder {
public:
  typedef TrajectoryPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline bool hasDirection();
  inline  ::senseAD::msg::std_msgs::Point::Builder getDirection();
  inline void setDirection( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initDirection();
  inline void adoptDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownDirection();

  inline double getVelocity();
  inline void setVelocity(double value);

  inline float getTheta();
  inline void setTheta(float value);

  inline double getSteerAngle();
  inline void setSteerAngle(double value);

  inline float getCurvature();
  inline void setCurvature(float value);

  inline double getSumDistance();
  inline void setSumDistance(double value);

  inline double getTimeDifference();
  inline void setTimeDifference(double value);

  inline double getYawRate();
  inline void setYawRate(double value);

  inline double getAcceleration();
  inline void setAcceleration(double value);

  inline  ::uint32_t getTrajNumberOfSurplus();
  inline void setTrajNumberOfSurplus( ::uint32_t value);

  inline bool getIsTurnSteerOfNextPath();
  inline void setIsTurnSteerOfNextPath(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrajectoryPoint::Pipeline {
public:
  typedef TrajectoryPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Trajectory::Reader {
public:
  typedef Trajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasTrajPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader getTrajPointArray() const;

  inline  ::senseAD::msg::avp_planning::Trajectory::Gear getGearEnum() const;

  inline  ::senseAD::msg::avp_planning::Trajectory::TurnSignal getTurnSignalEnum() const;

  inline bool getUpdatedByVehicleStatus() const;

  inline  ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode getTrajectoryMode() const;

  inline bool hasTrajectoryEnds() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader getTrajectoryEnds() const;

  inline  ::senseAD::msg::avp_planning::Trajectory::TurnSteer getTurnSteerEnum() const;

  inline double getTrajSumDistance() const;

  inline bool getIsFinalSegment() const;

  inline double getDistancecut() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Trajectory::Builder {
public:
  typedef Trajectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasTrajPointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder getTrajPointArray();
  inline void setTrajPointArray( ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder initTrajPointArray(unsigned int size);
  inline void adoptTrajPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> disownTrajPointArray();

  inline  ::senseAD::msg::avp_planning::Trajectory::Gear getGearEnum();
  inline void setGearEnum( ::senseAD::msg::avp_planning::Trajectory::Gear value);

  inline  ::senseAD::msg::avp_planning::Trajectory::TurnSignal getTurnSignalEnum();
  inline void setTurnSignalEnum( ::senseAD::msg::avp_planning::Trajectory::TurnSignal value);

  inline bool getUpdatedByVehicleStatus();
  inline void setUpdatedByVehicleStatus(bool value);

  inline  ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode getTrajectoryMode();
  inline void setTrajectoryMode( ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode value);

  inline bool hasTrajectoryEnds();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder getTrajectoryEnds();
  inline void setTrajectoryEnds( ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder initTrajectoryEnds(unsigned int size);
  inline void adoptTrajectoryEnds(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> disownTrajectoryEnds();

  inline  ::senseAD::msg::avp_planning::Trajectory::TurnSteer getTurnSteerEnum();
  inline void setTurnSteerEnum( ::senseAD::msg::avp_planning::Trajectory::TurnSteer value);

  inline double getTrajSumDistance();
  inline void setTrajSumDistance(double value);

  inline bool getIsFinalSegment();
  inline void setIsFinalSegment(bool value);

  inline double getDistancecut();
  inline void setDistancecut(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Trajectory::Pipeline {
public:
  typedef Trajectory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLight::Reader {
public:
  typedef TrafficLight Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasSignalSequence() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getSignalSequence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLight::Builder {
public:
  typedef TrafficLight Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasSignalSequence();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getSignalSequence();
  inline void setSignalSequence( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSignalSequence(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initSignalSequence(unsigned int size);
  inline void adoptSignalSequence(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownSignalSequence();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLight::Pipeline {
public:
  typedef TrafficLight Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReflineDebug::Reader {
public:
  typedef ReflineDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPathPts() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPathPts() const;

  inline  ::uint32_t getOriginIdx() const;

  inline  ::uint32_t getIfValid() const;

  inline  ::uint32_t getFirstInvalidIdx() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReflineDebug::Builder {
public:
  typedef ReflineDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPathPts();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPathPts();
  inline void setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPathPts(unsigned int size);
  inline void adoptPathPts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPathPts();

  inline  ::uint32_t getOriginIdx();
  inline void setOriginIdx( ::uint32_t value);

  inline  ::uint32_t getIfValid();
  inline void setIfValid( ::uint32_t value);

  inline  ::uint32_t getFirstInvalidIdx();
  inline void setFirstInvalidIdx( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReflineDebug::Pipeline {
public:
  typedef ReflineDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningLine::Reader {
public:
  typedef PlanningLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasColors() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getColors() const;

  inline double getWidth() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningLine::Builder {
public:
  typedef PlanningLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPoints();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasColors();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getColors();
  inline void setColors( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initColors();
  inline void adoptColors(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownColors();

  inline double getWidth();
  inline void setWidth(double value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningLine::Pipeline {
public:
  typedef PlanningLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getColors();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningDebug::Reader {
public:
  typedef PlanningDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestamp() const;

  inline  ::uint32_t getNum() const;

  inline  ::uint64_t getPredictTimestamp() const;

  inline bool hasX() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getX() const;

  inline bool hasY() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getY() const;

  inline bool hasV() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getV() const;

  inline bool hasYaw() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getYaw() const;

  inline bool hasA() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getA() const;

  inline bool hasJerk() const;
  inline  ::senseAD::msg::std_msgs::Float64List::Reader getJerk() const;

  inline double getSpeedLimit() const;

  inline double getStopDistance() const;

  inline double getSpeedRef() const;

  inline double getPlaceholder1() const;

  inline double getPlaceholder2() const;

  inline double getPlaceholder3() const;

  inline bool hasObstacleTagBinary() const;
  inline  ::capnp::Text::Reader getObstacleTagBinary() const;

  inline bool hasPpTextboxString() const;
  inline  ::capnp::Text::Reader getPpTextboxString() const;

  inline bool hasLines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader getLines() const;

  inline bool hasOnlineStoredData() const;
  inline  ::capnp::Text::Reader getOnlineStoredData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningDebug::Builder {
public:
  typedef PlanningDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestamp();
  inline void setTimestamp( ::uint64_t value);

  inline  ::uint32_t getNum();
  inline void setNum( ::uint32_t value);

  inline  ::uint64_t getPredictTimestamp();
  inline void setPredictTimestamp( ::uint64_t value);

  inline bool hasX();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getX();
  inline void setX( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initX();
  inline void adoptX(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownX();

  inline bool hasY();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getY();
  inline void setY( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initY();
  inline void adoptY(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownY();

  inline bool hasV();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getV();
  inline void setV( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initV();
  inline void adoptV(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownV();

  inline bool hasYaw();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getYaw();
  inline void setYaw( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initYaw();
  inline void adoptYaw(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownYaw();

  inline bool hasA();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getA();
  inline void setA( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initA();
  inline void adoptA(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownA();

  inline bool hasJerk();
  inline  ::senseAD::msg::std_msgs::Float64List::Builder getJerk();
  inline void setJerk( ::senseAD::msg::std_msgs::Float64List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float64List::Builder initJerk();
  inline void adoptJerk(::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> disownJerk();

  inline double getSpeedLimit();
  inline void setSpeedLimit(double value);

  inline double getStopDistance();
  inline void setStopDistance(double value);

  inline double getSpeedRef();
  inline void setSpeedRef(double value);

  inline double getPlaceholder1();
  inline void setPlaceholder1(double value);

  inline double getPlaceholder2();
  inline void setPlaceholder2(double value);

  inline double getPlaceholder3();
  inline void setPlaceholder3(double value);

  inline bool hasObstacleTagBinary();
  inline  ::capnp::Text::Builder getObstacleTagBinary();
  inline void setObstacleTagBinary( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initObstacleTagBinary(unsigned int size);
  inline void adoptObstacleTagBinary(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownObstacleTagBinary();

  inline bool hasPpTextboxString();
  inline  ::capnp::Text::Builder getPpTextboxString();
  inline void setPpTextboxString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPpTextboxString(unsigned int size);
  inline void adoptPpTextboxString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPpTextboxString();

  inline bool hasLines();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder getLines();
  inline void setLines( ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder initLines(unsigned int size);
  inline void adoptLines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>> disownLines();

  inline bool hasOnlineStoredData();
  inline  ::capnp::Text::Builder getOnlineStoredData();
  inline void setOnlineStoredData( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOnlineStoredData(unsigned int size);
  inline void adoptOnlineStoredData(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOnlineStoredData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningDebug::Pipeline {
public:
  typedef PlanningDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getX();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getY();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getV();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getYaw();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getA();
  inline  ::senseAD::msg::std_msgs::Float64List::Pipeline getJerk();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DecisionTarget::Reader {
public:
  typedef DecisionTarget Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline float getCurrentVelocity() const;

  inline  ::int32_t getLateralScenario() const;

  inline  ::int32_t getLongitudinalScenario() const;

  inline  ::int32_t getLateralTask() const;

  inline  ::int32_t getLongitudinalTask() const;

  inline  ::uint32_t getArea() const;

  inline  ::uint32_t getLatact() const;

  inline  ::uint32_t getLngact() const;

  inline  ::uint32_t getChangeDirection() const;

  inline bool hasCurrentReflineEnu() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getCurrentReflineEnu() const;

  inline bool hasTargetReflineEnu() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getTargetReflineEnu() const;

  inline float getSpeedLimit() const;

  inline bool hasStopPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getStopPoint() const;

  inline bool hasSpeedLimitPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getSpeedLimitPoint() const;

  inline  ::uint32_t getRoutingLaneChangeFlag() const;

  inline bool hasLaneTypeChangePoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getLaneTypeChangePoint() const;

  inline bool getRoutingChangeLaneTwiceFlag() const;

  inline bool hasLaneTypeChangeTwicePoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getLaneTypeChangeTwicePoint() const;

  inline bool getReflineChangeFlag() const;

  inline  ::uint32_t getSignalBlub() const;

  inline  ::uint32_t getTurntype() const;

  inline bool getTrafficStop() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DecisionTarget::Builder {
public:
  typedef DecisionTarget Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline float getCurrentVelocity();
  inline void setCurrentVelocity(float value);

  inline  ::int32_t getLateralScenario();
  inline void setLateralScenario( ::int32_t value);

  inline  ::int32_t getLongitudinalScenario();
  inline void setLongitudinalScenario( ::int32_t value);

  inline  ::int32_t getLateralTask();
  inline void setLateralTask( ::int32_t value);

  inline  ::int32_t getLongitudinalTask();
  inline void setLongitudinalTask( ::int32_t value);

  inline  ::uint32_t getArea();
  inline void setArea( ::uint32_t value);

  inline  ::uint32_t getLatact();
  inline void setLatact( ::uint32_t value);

  inline  ::uint32_t getLngact();
  inline void setLngact( ::uint32_t value);

  inline  ::uint32_t getChangeDirection();
  inline void setChangeDirection( ::uint32_t value);

  inline bool hasCurrentReflineEnu();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getCurrentReflineEnu();
  inline void setCurrentReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initCurrentReflineEnu(unsigned int size);
  inline void adoptCurrentReflineEnu(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownCurrentReflineEnu();

  inline bool hasTargetReflineEnu();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getTargetReflineEnu();
  inline void setTargetReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initTargetReflineEnu(unsigned int size);
  inline void adoptTargetReflineEnu(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownTargetReflineEnu();

  inline float getSpeedLimit();
  inline void setSpeedLimit(float value);

  inline bool hasStopPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getStopPoint();
  inline void setStopPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initStopPoint();
  inline void adoptStopPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownStopPoint();

  inline bool hasSpeedLimitPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getSpeedLimitPoint();
  inline void setSpeedLimitPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initSpeedLimitPoint();
  inline void adoptSpeedLimitPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownSpeedLimitPoint();

  inline  ::uint32_t getRoutingLaneChangeFlag();
  inline void setRoutingLaneChangeFlag( ::uint32_t value);

  inline bool hasLaneTypeChangePoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getLaneTypeChangePoint();
  inline void setLaneTypeChangePoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initLaneTypeChangePoint();
  inline void adoptLaneTypeChangePoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownLaneTypeChangePoint();

  inline bool getRoutingChangeLaneTwiceFlag();
  inline void setRoutingChangeLaneTwiceFlag(bool value);

  inline bool hasLaneTypeChangeTwicePoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getLaneTypeChangeTwicePoint();
  inline void setLaneTypeChangeTwicePoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initLaneTypeChangeTwicePoint();
  inline void adoptLaneTypeChangeTwicePoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownLaneTypeChangeTwicePoint();

  inline bool getReflineChangeFlag();
  inline void setReflineChangeFlag(bool value);

  inline  ::uint32_t getSignalBlub();
  inline void setSignalBlub( ::uint32_t value);

  inline  ::uint32_t getTurntype();
  inline void setTurntype( ::uint32_t value);

  inline bool getTrafficStop();
  inline void setTrafficStop(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DecisionTarget::Pipeline {
public:
  typedef DecisionTarget Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getStopPoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getSpeedLimitPoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getLaneTypeChangePoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getLaneTypeChangeTwicePoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DecisionDebug::Reader {
public:
  typedef DecisionDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasReflines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader getReflines() const;

  inline bool hasJunctionReflines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader getJunctionReflines() const;

  inline bool getArriveTargetLane() const;

  inline  ::uint32_t getLateralStage() const;

  inline  ::uint32_t getIfNeedRoutingLanechange() const;

  inline  ::uint32_t getLanechangeCauseSrlIdx() const;

  inline  ::uint32_t getLanechangeRoutingIdx() const;

  inline  ::uint32_t getEfficientLane() const;

  inline bool hasEfficientCount() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getEfficientCount() const;

  inline bool hasLongsceneApplied() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLongsceneApplied() const;

  inline  ::uint32_t getHighlightLongscene() const;

  inline bool hasLatsceneTrans() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLatsceneTrans() const;

  inline  ::uint32_t getLatStage() const;

  inline double getDist2junction() const;

  inline bool hasCurrRoadid() const;
  inline  ::capnp::Text::Reader getCurrRoadid() const;

  inline bool hasCurrLandid() const;
  inline  ::capnp::Text::Reader getCurrLandid() const;

  inline  ::uint32_t getIfInJunction() const;

  inline  ::uint32_t getFaultVehicleCount() const;

  inline  ::uint32_t getReflineChangeFlag() const;

  inline  ::uint32_t getRoutingChangeLaneTwiceFlag() const;

  inline bool hasTrafficlights() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader getTrafficlights() const;

  inline bool hasReflineBlockForUnknown() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getReflineBlockForUnknown() const;

  inline bool hasJunctionLinkBlockForUnknown() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getJunctionLinkBlockForUnknown() const;

  inline bool hasBlockUnknownIdLine() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getBlockUnknownIdLine() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DecisionDebug::Builder {
public:
  typedef DecisionDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasReflines();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder getReflines();
  inline void setReflines( ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder initReflines(unsigned int size);
  inline void adoptReflines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>> disownReflines();

  inline bool hasJunctionReflines();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder getJunctionReflines();
  inline void setJunctionReflines( ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder initJunctionReflines(unsigned int size);
  inline void adoptJunctionReflines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>> disownJunctionReflines();

  inline bool getArriveTargetLane();
  inline void setArriveTargetLane(bool value);

  inline  ::uint32_t getLateralStage();
  inline void setLateralStage( ::uint32_t value);

  inline  ::uint32_t getIfNeedRoutingLanechange();
  inline void setIfNeedRoutingLanechange( ::uint32_t value);

  inline  ::uint32_t getLanechangeCauseSrlIdx();
  inline void setLanechangeCauseSrlIdx( ::uint32_t value);

  inline  ::uint32_t getLanechangeRoutingIdx();
  inline void setLanechangeRoutingIdx( ::uint32_t value);

  inline  ::uint32_t getEfficientLane();
  inline void setEfficientLane( ::uint32_t value);

  inline bool hasEfficientCount();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getEfficientCount();
  inline void setEfficientCount( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setEfficientCount(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initEfficientCount(unsigned int size);
  inline void adoptEfficientCount(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownEfficientCount();

  inline bool hasLongsceneApplied();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLongsceneApplied();
  inline void setLongsceneApplied( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLongsceneApplied(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLongsceneApplied(unsigned int size);
  inline void adoptLongsceneApplied(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLongsceneApplied();

  inline  ::uint32_t getHighlightLongscene();
  inline void setHighlightLongscene( ::uint32_t value);

  inline bool hasLatsceneTrans();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLatsceneTrans();
  inline void setLatsceneTrans( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLatsceneTrans(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLatsceneTrans(unsigned int size);
  inline void adoptLatsceneTrans(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLatsceneTrans();

  inline  ::uint32_t getLatStage();
  inline void setLatStage( ::uint32_t value);

  inline double getDist2junction();
  inline void setDist2junction(double value);

  inline bool hasCurrRoadid();
  inline  ::capnp::Text::Builder getCurrRoadid();
  inline void setCurrRoadid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrRoadid(unsigned int size);
  inline void adoptCurrRoadid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrRoadid();

  inline bool hasCurrLandid();
  inline  ::capnp::Text::Builder getCurrLandid();
  inline void setCurrLandid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurrLandid(unsigned int size);
  inline void adoptCurrLandid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurrLandid();

  inline  ::uint32_t getIfInJunction();
  inline void setIfInJunction( ::uint32_t value);

  inline  ::uint32_t getFaultVehicleCount();
  inline void setFaultVehicleCount( ::uint32_t value);

  inline  ::uint32_t getReflineChangeFlag();
  inline void setReflineChangeFlag( ::uint32_t value);

  inline  ::uint32_t getRoutingChangeLaneTwiceFlag();
  inline void setRoutingChangeLaneTwiceFlag( ::uint32_t value);

  inline bool hasTrafficlights();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder getTrafficlights();
  inline void setTrafficlights( ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder initTrafficlights(unsigned int size);
  inline void adoptTrafficlights(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>> disownTrafficlights();

  inline bool hasReflineBlockForUnknown();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getReflineBlockForUnknown();
  inline void setReflineBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReflineBlockForUnknown(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initReflineBlockForUnknown(unsigned int size);
  inline void adoptReflineBlockForUnknown(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownReflineBlockForUnknown();

  inline bool hasJunctionLinkBlockForUnknown();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getJunctionLinkBlockForUnknown();
  inline void setJunctionLinkBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setJunctionLinkBlockForUnknown(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initJunctionLinkBlockForUnknown(unsigned int size);
  inline void adoptJunctionLinkBlockForUnknown(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownJunctionLinkBlockForUnknown();

  inline bool hasBlockUnknownIdLine();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getBlockUnknownIdLine();
  inline void setBlockUnknownIdLine( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBlockUnknownIdLine(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initBlockUnknownIdLine(unsigned int size);
  inline void adoptBlockUnknownIdLine(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownBlockUnknownIdLine();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DecisionDebug::Pipeline {
public:
  typedef DecisionDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapLinePoint::Reader {
public:
  typedef MapLinePoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline bool hasDirection() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getDirection() const;

  inline double getTheta() const;

  inline double getKappa() const;

  inline double getS() const;

  inline double getDkappa() const;

  inline double getDdkappa() const;

  inline double getXDerivative() const;

  inline double getYDerivative() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapLinePoint::Builder {
public:
  typedef MapLinePoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline bool hasDirection();
  inline  ::senseAD::msg::std_msgs::Point::Builder getDirection();
  inline void setDirection( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initDirection();
  inline void adoptDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownDirection();

  inline double getTheta();
  inline void setTheta(double value);

  inline double getKappa();
  inline void setKappa(double value);

  inline double getS();
  inline void setS(double value);

  inline double getDkappa();
  inline void setDkappa(double value);

  inline double getDdkappa();
  inline void setDdkappa(double value);

  inline double getXDerivative();
  inline void setXDerivative(double value);

  inline double getYDerivative();
  inline void setYDerivative(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapLinePoint::Pipeline {
public:
  typedef MapLinePoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PathPoint::Reader {
public:
  typedef PathPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline bool hasDirection() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getDirection() const;

  inline double getTheta() const;

  inline double getSteer() const;

  inline double getKappa() const;

  inline double getS() const;

  inline double getDkappa() const;

  inline double getDdkappa() const;

  inline double getXDerivative() const;

  inline double getYDerivative() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PathPoint::Builder {
public:
  typedef PathPoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline bool hasDirection();
  inline  ::senseAD::msg::std_msgs::Point::Builder getDirection();
  inline void setDirection( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initDirection();
  inline void adoptDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownDirection();

  inline double getTheta();
  inline void setTheta(double value);

  inline double getSteer();
  inline void setSteer(double value);

  inline double getKappa();
  inline void setKappa(double value);

  inline double getS();
  inline void setS(double value);

  inline double getDkappa();
  inline void setDkappa(double value);

  inline double getDdkappa();
  inline void setDdkappa(double value);

  inline double getXDerivative();
  inline void setXDerivative(double value);

  inline double getYDerivative();
  inline void setYDerivative(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PathPoint::Pipeline {
public:
  typedef PathPoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReferenceLineAndLaneLine::Reader {
public:
  typedef ReferenceLineAndLaneLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasReferenceLinePointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getReferenceLinePointArray() const;

  inline bool hasLeftLaneLinePointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getLeftLaneLinePointArray() const;

  inline bool hasRightLaneLinePointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getRightLaneLinePointArray() const;

  inline bool hasLeftFreeSpacePointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getLeftFreeSpacePointArray() const;

  inline bool hasRightFreeSpacePointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getRightFreeSpacePointArray() const;

  inline bool hasLeftOriginFSBoundPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getLeftOriginFSBoundPointArray() const;

  inline bool hasRightOriginFSBoundPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getRightOriginFSBoundPointArray() const;

  inline bool hasLeftOriginBoundPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getLeftOriginBoundPointArray() const;

  inline bool hasRightOriginBoundPointArray() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader getRightOriginBoundPointArray() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReferenceLineAndLaneLine::Builder {
public:
  typedef ReferenceLineAndLaneLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasReferenceLinePointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getReferenceLinePointArray();
  inline void setReferenceLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initReferenceLinePointArray(unsigned int size);
  inline void adoptReferenceLinePointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownReferenceLinePointArray();

  inline bool hasLeftLaneLinePointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getLeftLaneLinePointArray();
  inline void setLeftLaneLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initLeftLaneLinePointArray(unsigned int size);
  inline void adoptLeftLaneLinePointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownLeftLaneLinePointArray();

  inline bool hasRightLaneLinePointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getRightLaneLinePointArray();
  inline void setRightLaneLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initRightLaneLinePointArray(unsigned int size);
  inline void adoptRightLaneLinePointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownRightLaneLinePointArray();

  inline bool hasLeftFreeSpacePointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getLeftFreeSpacePointArray();
  inline void setLeftFreeSpacePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initLeftFreeSpacePointArray(unsigned int size);
  inline void adoptLeftFreeSpacePointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownLeftFreeSpacePointArray();

  inline bool hasRightFreeSpacePointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getRightFreeSpacePointArray();
  inline void setRightFreeSpacePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initRightFreeSpacePointArray(unsigned int size);
  inline void adoptRightFreeSpacePointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownRightFreeSpacePointArray();

  inline bool hasLeftOriginFSBoundPointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getLeftOriginFSBoundPointArray();
  inline void setLeftOriginFSBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initLeftOriginFSBoundPointArray(unsigned int size);
  inline void adoptLeftOriginFSBoundPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownLeftOriginFSBoundPointArray();

  inline bool hasRightOriginFSBoundPointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getRightOriginFSBoundPointArray();
  inline void setRightOriginFSBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initRightOriginFSBoundPointArray(unsigned int size);
  inline void adoptRightOriginFSBoundPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownRightOriginFSBoundPointArray();

  inline bool hasLeftOriginBoundPointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getLeftOriginBoundPointArray();
  inline void setLeftOriginBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initLeftOriginBoundPointArray(unsigned int size);
  inline void adoptLeftOriginBoundPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownLeftOriginBoundPointArray();

  inline bool hasRightOriginBoundPointArray();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder getRightOriginBoundPointArray();
  inline void setRightOriginBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder initRightOriginBoundPointArray(unsigned int size);
  inline void adoptRightOriginBoundPointArray(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> disownRightOriginBoundPointArray();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReferenceLineAndLaneLine::Pipeline {
public:
  typedef ReferenceLineAndLaneLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TurnReminder::Reader {
public:
  typedef TurnReminder Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool getTurnLeft() const;

  inline bool getTurnRight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TurnReminder::Builder {
public:
  typedef TurnReminder Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool getTurnLeft();
  inline void setTurnLeft(bool value);

  inline bool getTurnRight();
  inline void setTurnRight(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TurnReminder::Pipeline {
public:
  typedef TurnReminder Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OrientedBoundingBox::Reader {
public:
  typedef OrientedBoundingBox Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline float getX() const;

  inline float getY() const;

  inline float getLength() const;

  inline float getWidth() const;

  inline float getHeight() const;

  inline float getYaw() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OrientedBoundingBox::Builder {
public:
  typedef OrientedBoundingBox Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getLength();
  inline void setLength(float value);

  inline float getWidth();
  inline void setWidth(float value);

  inline float getHeight();
  inline void setHeight(float value);

  inline float getYaw();
  inline void setYaw(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OrientedBoundingBox::Pipeline {
public:
  typedef OrientedBoundingBox Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AgentState::Reader {
public:
  typedef AgentState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

  inline bool hasRollPitchYaw() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getRollPitchYaw() const;

  inline bool hasVelocity() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getVelocity() const;

  inline bool hasAcceleration() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getAcceleration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AgentState::Builder {
public:
  typedef AgentState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

  inline bool hasRollPitchYaw();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getRollPitchYaw();
  inline void setRollPitchYaw( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initRollPitchYaw();
  inline void adoptRollPitchYaw(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownRollPitchYaw();

  inline bool hasVelocity();
  inline  ::senseAD::msg::std_msgs::Point::Builder getVelocity();
  inline void setVelocity( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initVelocity();
  inline void adoptVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownVelocity();

  inline bool hasAcceleration();
  inline  ::senseAD::msg::std_msgs::Point::Builder getAcceleration();
  inline void setAcceleration( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initAcceleration();
  inline void adoptAcceleration(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownAcceleration();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AgentState::Pipeline {
public:
  typedef AgentState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getRollPitchYaw();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getVelocity();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getAcceleration();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AgentDebug::Reader {
public:
  typedef AgentDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int64_t getId() const;

  inline  ::int16_t getObjectLabel() const;

  inline bool hasState() const;
  inline  ::senseAD::msg::avp_planning::AgentState::Reader getState() const;

  inline  ::int64_t getDecision() const;

  inline bool hasObb() const;
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader getObb() const;

  inline  ::int8_t getEgoRelevance() const;

  inline  ::uint8_t getFaultyVehicleLabel() const;

  inline double getWaitingTime() const;

  inline float getLeftProb() const;

  inline float getRightProb() const;

  inline float getHazardProb() const;

  inline float getBrakeProb() const;

  inline float getFaultyProb() const;

  inline bool hasPolygonPts() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPolygonPts() const;

  inline bool getIdExistVeh() const;

  inline float getBlindPercentage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AgentDebug::Builder {
public:
  typedef AgentDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline  ::int16_t getObjectLabel();
  inline void setObjectLabel( ::int16_t value);

  inline bool hasState();
  inline  ::senseAD::msg::avp_planning::AgentState::Builder getState();
  inline void setState( ::senseAD::msg::avp_planning::AgentState::Reader value);
  inline  ::senseAD::msg::avp_planning::AgentState::Builder initState();
  inline void adoptState(::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState> disownState();

  inline  ::int64_t getDecision();
  inline void setDecision( ::int64_t value);

  inline bool hasObb();
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder getObb();
  inline void setObb( ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader value);
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder initObb();
  inline void adoptObb(::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox> disownObb();

  inline  ::int8_t getEgoRelevance();
  inline void setEgoRelevance( ::int8_t value);

  inline  ::uint8_t getFaultyVehicleLabel();
  inline void setFaultyVehicleLabel( ::uint8_t value);

  inline double getWaitingTime();
  inline void setWaitingTime(double value);

  inline float getLeftProb();
  inline void setLeftProb(float value);

  inline float getRightProb();
  inline void setRightProb(float value);

  inline float getHazardProb();
  inline void setHazardProb(float value);

  inline float getBrakeProb();
  inline void setBrakeProb(float value);

  inline float getFaultyProb();
  inline void setFaultyProb(float value);

  inline bool hasPolygonPts();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPolygonPts();
  inline void setPolygonPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPolygonPts(unsigned int size);
  inline void adoptPolygonPts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPolygonPts();

  inline bool getIdExistVeh();
  inline void setIdExistVeh(bool value);

  inline float getBlindPercentage();
  inline void setBlindPercentage(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AgentDebug::Pipeline {
public:
  typedef AgentDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_planning::AgentState::Pipeline getState();
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline getObb();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScenarioAnalysisAgent::Reader {
public:
  typedef ScenarioAnalysisAgent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::int64_t getId() const;

  inline  ::int16_t getObjectLabel() const;

  inline bool hasState() const;
  inline  ::senseAD::msg::avp_planning::AgentState::Reader getState() const;

  inline bool hasObb() const;
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader getObb() const;

  inline  ::int8_t getEgoRelevance() const;

  inline  ::uint8_t getFaultyVehicleLabel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScenarioAnalysisAgent::Builder {
public:
  typedef ScenarioAnalysisAgent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

  inline  ::int16_t getObjectLabel();
  inline void setObjectLabel( ::int16_t value);

  inline bool hasState();
  inline  ::senseAD::msg::avp_planning::AgentState::Builder getState();
  inline void setState( ::senseAD::msg::avp_planning::AgentState::Reader value);
  inline  ::senseAD::msg::avp_planning::AgentState::Builder initState();
  inline void adoptState(::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState> disownState();

  inline bool hasObb();
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder getObb();
  inline void setObb( ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader value);
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder initObb();
  inline void adoptObb(::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox> disownObb();

  inline  ::int8_t getEgoRelevance();
  inline void setEgoRelevance( ::int8_t value);

  inline  ::uint8_t getFaultyVehicleLabel();
  inline void setFaultyVehicleLabel( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScenarioAnalysisAgent::Pipeline {
public:
  typedef ScenarioAnalysisAgent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_planning::AgentState::Pipeline getState();
  inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline getObb();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScenarioAnalysisLaneline::Reader {
public:
  typedef ScenarioAnalysisLaneline Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPts() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPts() const;

  inline bool hasCanLaneChange() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getCanLaneChange() const;

  inline bool hasValid() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScenarioAnalysisLaneline::Builder {
public:
  typedef ScenarioAnalysisLaneline Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPts();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPts();
  inline void setPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPts(unsigned int size);
  inline void adoptPts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPts();

  inline bool hasCanLaneChange();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getCanLaneChange();
  inline void setCanLaneChange( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCanLaneChange(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initCanLaneChange(unsigned int size);
  inline void adoptCanLaneChange(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownCanLaneChange();

  inline bool hasValid();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getValid();
  inline void setValid( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setValid(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initValid(unsigned int size);
  inline void adoptValid(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownValid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScenarioAnalysisLaneline::Pipeline {
public:
  typedef ScenarioAnalysisLaneline Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScenarioAnalysisRefline::Reader {
public:
  typedef ScenarioAnalysisRefline Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasPathPts() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPathPts() const;

  inline  ::int8_t getDirection() const;

  inline bool hasLaneIds() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getLaneIds() const;

  inline bool getIsValid() const;

  inline bool hasLeftLaneline() const;
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader getLeftLaneline() const;

  inline bool hasRightLaneline() const;
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader getRightLaneline() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScenarioAnalysisRefline::Builder {
public:
  typedef ScenarioAnalysisRefline Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasPathPts();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPathPts();
  inline void setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPathPts(unsigned int size);
  inline void adoptPathPts(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPathPts();

  inline  ::int8_t getDirection();
  inline void setDirection( ::int8_t value);

  inline bool hasLaneIds();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getLaneIds();
  inline void setLaneIds( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setLaneIds(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initLaneIds(unsigned int size);
  inline void adoptLaneIds(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownLaneIds();

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline bool hasLeftLaneline();
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder getLeftLaneline();
  inline void setLeftLaneline( ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader value);
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder initLeftLaneline();
  inline void adoptLeftLaneline(::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline> disownLeftLaneline();

  inline bool hasRightLaneline();
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder getRightLaneline();
  inline void setRightLaneline( ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader value);
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder initRightLaneline();
  inline void adoptRightLaneline(::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline> disownRightLaneline();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScenarioAnalysisRefline::Pipeline {
public:
  typedef ScenarioAnalysisRefline Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline getLeftLaneline();
  inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline getRightLaneline();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScenarioModel::Reader {
public:
  typedef ScenarioModel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasReflines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Reader getReflines() const;

  inline bool hasAgents() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Reader getAgents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScenarioModel::Builder {
public:
  typedef ScenarioModel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasReflines();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Builder getReflines();
  inline void setReflines( ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Builder initReflines(unsigned int size);
  inline void adoptReflines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>> disownReflines();

  inline bool hasAgents();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Builder getAgents();
  inline void setAgents( ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Builder initAgents(unsigned int size);
  inline void adoptAgents(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>> disownAgents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScenarioModel::Pipeline {
public:
  typedef ScenarioModel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScenarioModelDebug::Reader {
public:
  typedef ScenarioModelDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasAgents() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Reader getAgents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScenarioModelDebug::Builder {
public:
  typedef ScenarioModelDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasAgents();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Builder getAgents();
  inline void setAgents( ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Builder initAgents(unsigned int size);
  inline void adoptAgents(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>> disownAgents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScenarioModelDebug::Pipeline {
public:
  typedef ScenarioModelDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TrajectoryPoint::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrajectoryPoint::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TrajectoryPoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrajectoryPoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrajectoryPoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrajectoryPoint::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrajectoryPoint::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrajectoryPoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrajectoryPoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrajectoryPoint::Reader::hasDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrajectoryPoint::Builder::hasDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader TrajectoryPoint::Reader::getDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::getDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline TrajectoryPoint::Pipeline::getDirection() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TrajectoryPoint::Builder::setDirection( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder TrajectoryPoint::Builder::initDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrajectoryPoint::Builder::adoptDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> TrajectoryPoint::Builder::disownDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double TrajectoryPoint::Reader::getVelocity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getVelocity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setVelocity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float TrajectoryPoint::Reader::getTheta() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float TrajectoryPoint::Builder::getTheta() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTheta(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getSteerAngle() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getSteerAngle() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setSteerAngle(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float TrajectoryPoint::Reader::getCurvature() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float TrajectoryPoint::Builder::getCurvature() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setCurvature(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getSumDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getSumDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setSumDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getTimeDifference() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getTimeDifference() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTimeDifference(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getYawRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getYawRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setYawRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double TrajectoryPoint::Reader::getAcceleration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double TrajectoryPoint::Builder::getAcceleration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setAcceleration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TrajectoryPoint::Reader::getTrajNumberOfSurplus() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TrajectoryPoint::Builder::getTrajNumberOfSurplus() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setTrajNumberOfSurplus( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool TrajectoryPoint::Reader::getIsTurnSteerOfNextPath() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<544>() * ::capnp::ELEMENTS);
}

inline bool TrajectoryPoint::Builder::getIsTurnSteerOfNextPath() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<544>() * ::capnp::ELEMENTS);
}
inline void TrajectoryPoint::Builder::setIsTurnSteerOfNextPath(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<544>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader Trajectory::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder Trajectory::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline Trajectory::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Trajectory::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder Trajectory::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> Trajectory::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Trajectory::Reader::hasTrajPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasTrajPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader Trajectory::Reader::getTrajPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::getTrajPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::setTrajPointArray( ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::initTrajPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Trajectory::Builder::adoptTrajPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> Trajectory::Builder::disownTrajPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_planning::Trajectory::Gear Trajectory::Reader::getGearEnum() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::Trajectory::Gear Trajectory::Builder::getGearEnum() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setGearEnum( ::senseAD::msg::avp_planning::Trajectory::Gear value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::Trajectory::Gear>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_planning::Trajectory::TurnSignal Trajectory::Reader::getTurnSignalEnum() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::Trajectory::TurnSignal Trajectory::Builder::getTurnSignalEnum() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTurnSignalEnum( ::senseAD::msg::avp_planning::Trajectory::TurnSignal value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSignal>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::getUpdatedByVehicleStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Trajectory::Builder::getUpdatedByVehicleStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setUpdatedByVehicleStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode Trajectory::Reader::getTrajectoryMode() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode Trajectory::Builder::getTrajectoryMode() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajectoryMode( ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::Trajectory::TrajectoryMode>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::hasTrajectoryEnds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Trajectory::Builder::hasTrajectoryEnds() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader Trajectory::Reader::getTrajectoryEnds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::getTrajectoryEnds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Trajectory::Builder::setTrajectoryEnds( ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>::Builder Trajectory::Builder::initTrajectoryEnds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Trajectory::Builder::adoptTrajectoryEnds(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>> Trajectory::Builder::disownTrajectoryEnds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrajectoryPoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_planning::Trajectory::TurnSteer Trajectory::Reader::getTurnSteerEnum() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSteer>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::Trajectory::TurnSteer Trajectory::Builder::getTurnSteerEnum() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSteer>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTurnSteerEnum( ::senseAD::msg::avp_planning::Trajectory::TurnSteer value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::Trajectory::TurnSteer>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getTrajSumDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getTrajSumDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setTrajSumDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Trajectory::Reader::getIsFinalSegment() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool Trajectory::Builder::getIsFinalSegment() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setIsFinalSegment(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline double Trajectory::Reader::getDistancecut() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Trajectory::Builder::getDistancecut() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Trajectory::Builder::setDistancecut(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLight::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TrafficLight::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLight::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TrafficLight::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficLight::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TrafficLight::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TrafficLight::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TrafficLight::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TrafficLight::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TrafficLight::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TrafficLight::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TrafficLight::Reader::hasSignalSequence() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLight::Builder::hasSignalSequence() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader TrafficLight::Reader::getSignalSequence() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TrafficLight::Builder::getSignalSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficLight::Builder::setSignalSequence( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void TrafficLight::Builder::setSignalSequence(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TrafficLight::Builder::initSignalSequence(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TrafficLight::Builder::adoptSignalSequence(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> TrafficLight::Builder::disownSignalSequence() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ReflineDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReflineDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ReflineDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReflineDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ReflineDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReflineDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReflineDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReflineDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ReflineDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReflineDebug::Reader::hasPathPts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReflineDebug::Builder::hasPathPts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader ReflineDebug::Reader::getPathPts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ReflineDebug::Builder::getPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReflineDebug::Builder::setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ReflineDebug::Builder::initPathPts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReflineDebug::Builder::adoptPathPts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> ReflineDebug::Builder::disownPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t ReflineDebug::Reader::getOriginIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getOriginIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setOriginIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ReflineDebug::Reader::getIfValid() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getIfValid() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setIfValid( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ReflineDebug::Reader::getFirstInvalidIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReflineDebug::Builder::getFirstInvalidIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReflineDebug::Builder::setFirstInvalidIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningLine::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningLine::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningLine::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningLine::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningLine::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningLine::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningLine::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlanningLine::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader PlanningLine::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningLine::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder PlanningLine::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlanningLine::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> PlanningLine::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningLine::Reader::hasColors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasColors() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningLine::Reader::getColors() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningLine::Builder::getColors() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningLine::Pipeline::getColors() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlanningLine::Builder::setColors( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningLine::Builder::initColors() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::adoptColors(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningLine::Builder::disownColors() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double PlanningLine::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double PlanningLine::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningLine::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningLine::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningLine::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningLine::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningLine::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningLine::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningLine::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PlanningLine::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningLine::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t PlanningDebug::Reader::getTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningDebug::Builder::getTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlanningDebug::Reader::getNum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlanningDebug::Builder::getNum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setNum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PlanningDebug::Reader::getPredictTimestamp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningDebug::Builder::getPredictTimestamp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPredictTimestamp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasX() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasX() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getX() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getX() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setX( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptX(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownX() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasY() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasY() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getY() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getY() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setY( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptY(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownY() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasV() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasV() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getV() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setV( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initV() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptV(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasYaw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasYaw() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getYaw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getYaw() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setYaw( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptYaw(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasA() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getA() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getA() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getA() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setA( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initA() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptA(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownA() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasJerk() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasJerk() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float64List::Reader PlanningDebug::Reader::getJerk() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::getJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float64List::Pipeline PlanningDebug::Pipeline::getJerk() {
  return  ::senseAD::msg::std_msgs::Float64List::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void PlanningDebug::Builder::setJerk( ::senseAD::msg::std_msgs::Float64List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float64List::Builder PlanningDebug::Builder::initJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::adoptJerk(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float64List> PlanningDebug::Builder::disownJerk() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float64List>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline double PlanningDebug::Reader::getSpeedLimit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getSpeedLimit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setSpeedLimit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getStopDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getStopDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setStopDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getSpeedRef() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getSpeedRef() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setSpeedRef(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double PlanningDebug::Reader::getPlaceholder3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double PlanningDebug::Builder::getPlaceholder3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlanningDebug::Builder::setPlaceholder3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningDebug::Reader::hasObstacleTagBinary() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasObstacleTagBinary() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getObstacleTagBinary() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getObstacleTagBinary() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setObstacleTagBinary( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initObstacleTagBinary(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptObstacleTagBinary(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownObstacleTagBinary() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasPpTextboxString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasPpTextboxString() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getPpTextboxString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getPpTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setPpTextboxString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initPpTextboxString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptPpTextboxString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownPpTextboxString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader PlanningDebug::Reader::getLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::getLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setLines( ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>::Builder PlanningDebug::Builder::initLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptLines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>> PlanningDebug::Builder::disownLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool PlanningDebug::Reader::hasOnlineStoredData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningDebug::Builder::hasOnlineStoredData() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlanningDebug::Reader::getOnlineStoredData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::getOnlineStoredData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void PlanningDebug::Builder::setOnlineStoredData( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlanningDebug::Builder::initOnlineStoredData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void PlanningDebug::Builder::adoptOnlineStoredData(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlanningDebug::Builder::disownOnlineStoredData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DecisionTarget::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionTarget::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DecisionTarget::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionTarget::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DecisionTarget::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float DecisionTarget::Reader::getCurrentVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float DecisionTarget::Builder::getCurrentVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setCurrentVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLateralScenario() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLateralScenario() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLateralScenario( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLongitudinalScenario() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLongitudinalScenario() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLongitudinalScenario( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLateralTask() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLateralTask() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLateralTask( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DecisionTarget::Reader::getLongitudinalTask() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DecisionTarget::Builder::getLongitudinalTask() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLongitudinalTask( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getArea() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getArea() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setArea( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getLatact() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getLatact() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLatact( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getLngact() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getLngact() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setLngact( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getChangeDirection() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getChangeDirection() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setChangeDirection( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasCurrentReflineEnu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasCurrentReflineEnu() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader DecisionTarget::Reader::getCurrentReflineEnu() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::getCurrentReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::setCurrentReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::initCurrentReflineEnu(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DecisionTarget::Builder::adoptCurrentReflineEnu(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> DecisionTarget::Builder::disownCurrentReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasTargetReflineEnu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasTargetReflineEnu() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader DecisionTarget::Reader::getTargetReflineEnu() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::getTargetReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::setTargetReflineEnu( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder DecisionTarget::Builder::initTargetReflineEnu(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DecisionTarget::Builder::adoptTargetReflineEnu(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> DecisionTarget::Builder::disownTargetReflineEnu() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float DecisionTarget::Reader::getSpeedLimit() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float DecisionTarget::Builder::getSpeedLimit() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setSpeedLimit(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasStopPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasStopPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getStopPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getStopPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setStopPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptStopPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownStopPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::hasSpeedLimitPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasSpeedLimitPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getSpeedLimitPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getSpeedLimitPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setSpeedLimitPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptSpeedLimitPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownSpeedLimitPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionTarget::Reader::getRoutingLaneChangeFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getRoutingLaneChangeFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setRoutingLaneChangeFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasLaneTypeChangePoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasLaneTypeChangePoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getLaneTypeChangePoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getLaneTypeChangePoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setLaneTypeChangePoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptLaneTypeChangePoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownLaneTypeChangePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::getRoutingChangeLaneTwiceFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getRoutingChangeLaneTwiceFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setRoutingChangeLaneTwiceFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<352>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::hasLaneTypeChangeTwicePoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionTarget::Builder::hasLaneTypeChangeTwicePoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader DecisionTarget::Reader::getLaneTypeChangeTwicePoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::getLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline DecisionTarget::Pipeline::getLaneTypeChangeTwicePoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void DecisionTarget::Builder::setLaneTypeChangeTwicePoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder DecisionTarget::Builder::initLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DecisionTarget::Builder::adoptLaneTypeChangeTwicePoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> DecisionTarget::Builder::disownLaneTypeChangeTwicePoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DecisionTarget::Reader::getReflineChangeFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getReflineChangeFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setReflineChangeFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<353>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getSignalBlub() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getSignalBlub() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setSignalBlub( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionTarget::Reader::getTurntype() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionTarget::Builder::getTurntype() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setTurntype( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionTarget::Reader::getTrafficStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}

inline bool DecisionTarget::Builder::getTrafficStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS);
}
inline void DecisionTarget::Builder::setTrafficStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<354>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader DecisionDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline DecisionDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DecisionDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder DecisionDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> DecisionDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasReflines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasReflines() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getReflines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setReflines( ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initReflines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptReflines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasJunctionReflines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasJunctionReflines() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getJunctionReflines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getJunctionReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setJunctionReflines( ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initJunctionReflines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptJunctionReflines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownJunctionReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ReflineDebug,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::getArriveTargetLane() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DecisionDebug::Builder::getArriveTargetLane() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setArriveTargetLane(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLateralStage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLateralStage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLateralStage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getIfNeedRoutingLanechange() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getIfNeedRoutingLanechange() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setIfNeedRoutingLanechange( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLanechangeCauseSrlIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLanechangeCauseSrlIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLanechangeCauseSrlIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getLanechangeRoutingIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLanechangeRoutingIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLanechangeRoutingIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getEfficientLane() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getEfficientLane() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setEfficientLane( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasEfficientCount() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasEfficientCount() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getEfficientCount() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getEfficientCount() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setEfficientCount( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setEfficientCount(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initEfficientCount(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptEfficientCount(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownEfficientCount() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasLongsceneApplied() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasLongsceneApplied() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getLongsceneApplied() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getLongsceneApplied() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setLongsceneApplied( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setLongsceneApplied(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initLongsceneApplied(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptLongsceneApplied(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownLongsceneApplied() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getHighlightLongscene() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getHighlightLongscene() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setHighlightLongscene( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasLatsceneTrans() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasLatsceneTrans() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getLatsceneTrans() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getLatsceneTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setLatsceneTrans( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setLatsceneTrans(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initLatsceneTrans(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptLatsceneTrans(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownLatsceneTrans() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getLatStage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getLatStage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setLatStage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double DecisionDebug::Reader::getDist2junction() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double DecisionDebug::Builder::getDist2junction() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setDist2junction(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasCurrRoadid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasCurrRoadid() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getCurrRoadid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getCurrRoadid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setCurrRoadid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initCurrRoadid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptCurrRoadid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownCurrRoadid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasCurrLandid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasCurrLandid() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DecisionDebug::Reader::getCurrLandid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::getCurrLandid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setCurrLandid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DecisionDebug::Builder::initCurrLandid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptCurrLandid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DecisionDebug::Builder::disownCurrLandid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint32_t DecisionDebug::Reader::getIfInJunction() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getIfInJunction() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setIfInJunction( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getFaultVehicleCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getFaultVehicleCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setFaultVehicleCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getReflineChangeFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getReflineChangeFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setReflineChangeFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t DecisionDebug::Reader::getRoutingChangeLaneTwiceFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t DecisionDebug::Builder::getRoutingChangeLaneTwiceFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void DecisionDebug::Builder::setRoutingChangeLaneTwiceFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool DecisionDebug::Reader::hasTrafficlights() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasTrafficlights() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader DecisionDebug::Reader::getTrafficlights() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::getTrafficlights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setTrafficlights( ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>::Builder DecisionDebug::Builder::initTrafficlights(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptTrafficlights(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>> DecisionDebug::Builder::disownTrafficlights() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::TrafficLight,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasReflineBlockForUnknown() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasReflineBlockForUnknown() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getReflineBlockForUnknown() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getReflineBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setReflineBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setReflineBlockForUnknown(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initReflineBlockForUnknown(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptReflineBlockForUnknown(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownReflineBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasJunctionLinkBlockForUnknown() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasJunctionLinkBlockForUnknown() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getJunctionLinkBlockForUnknown() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getJunctionLinkBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setJunctionLinkBlockForUnknown( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setJunctionLinkBlockForUnknown(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initJunctionLinkBlockForUnknown(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptJunctionLinkBlockForUnknown(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownJunctionLinkBlockForUnknown() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool DecisionDebug::Reader::hasBlockUnknownIdLine() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool DecisionDebug::Builder::hasBlockUnknownIdLine() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader DecisionDebug::Reader::getBlockUnknownIdLine() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::getBlockUnknownIdLine() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void DecisionDebug::Builder::setBlockUnknownIdLine( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void DecisionDebug::Builder::setBlockUnknownIdLine(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder DecisionDebug::Builder::initBlockUnknownIdLine(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void DecisionDebug::Builder::adoptBlockUnknownIdLine(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> DecisionDebug::Builder::disownBlockUnknownIdLine() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint64_t MapLinePoint::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapLinePoint::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapLinePoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MapLinePoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader MapLinePoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapLinePoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline MapLinePoint::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MapLinePoint::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapLinePoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapLinePoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> MapLinePoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MapLinePoint::Reader::hasDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MapLinePoint::Builder::hasDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader MapLinePoint::Reader::getDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapLinePoint::Builder::getDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline MapLinePoint::Pipeline::getDirection() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MapLinePoint::Builder::setDirection( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapLinePoint::Builder::initDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MapLinePoint::Builder::adoptDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> MapLinePoint::Builder::disownDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double MapLinePoint::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getKappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getKappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setKappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getS() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getS() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setS(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getDkappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getDkappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setDkappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getDdkappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getDdkappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setDdkappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getXDerivative() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getXDerivative() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setXDerivative(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double MapLinePoint::Reader::getYDerivative() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double MapLinePoint::Builder::getYDerivative() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void MapLinePoint::Builder::setYDerivative(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PathPoint::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PathPoint::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PathPoint::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PathPoint::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader PathPoint::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder PathPoint::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline PathPoint::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PathPoint::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder PathPoint::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PathPoint::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> PathPoint::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PathPoint::Reader::hasDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PathPoint::Builder::hasDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader PathPoint::Reader::getDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder PathPoint::Builder::getDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline PathPoint::Pipeline::getDirection() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PathPoint::Builder::setDirection( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder PathPoint::Builder::initDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PathPoint::Builder::adoptDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> PathPoint::Builder::disownDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double PathPoint::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getSteer() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getSteer() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setSteer(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getKappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getKappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setKappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getS() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getS() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setS(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getDkappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getDkappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setDkappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getDdkappa() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getDdkappa() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setDdkappa(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getXDerivative() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getXDerivative() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setXDerivative(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double PathPoint::Reader::getYDerivative() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double PathPoint::Builder::getYDerivative() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PathPoint::Builder::setYDerivative(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ReferenceLineAndLaneLine::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ReferenceLineAndLaneLine::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReferenceLineAndLaneLine::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ReferenceLineAndLaneLine::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReferenceLineAndLaneLine::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ReferenceLineAndLaneLine::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ReferenceLineAndLaneLine::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasReferenceLinePointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasReferenceLinePointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getReferenceLinePointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getReferenceLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setReferenceLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initReferenceLinePointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptReferenceLinePointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownReferenceLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasLeftLaneLinePointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasLeftLaneLinePointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getLeftLaneLinePointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getLeftLaneLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setLeftLaneLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initLeftLaneLinePointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptLeftLaneLinePointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownLeftLaneLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasRightLaneLinePointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasRightLaneLinePointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getRightLaneLinePointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getRightLaneLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setRightLaneLinePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initRightLaneLinePointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptRightLaneLinePointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownRightLaneLinePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasLeftFreeSpacePointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasLeftFreeSpacePointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getLeftFreeSpacePointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getLeftFreeSpacePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setLeftFreeSpacePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initLeftFreeSpacePointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptLeftFreeSpacePointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownLeftFreeSpacePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasRightFreeSpacePointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasRightFreeSpacePointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getRightFreeSpacePointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getRightFreeSpacePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setRightFreeSpacePointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initRightFreeSpacePointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptRightFreeSpacePointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownRightFreeSpacePointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasLeftOriginFSBoundPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasLeftOriginFSBoundPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getLeftOriginFSBoundPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getLeftOriginFSBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setLeftOriginFSBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initLeftOriginFSBoundPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptLeftOriginFSBoundPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownLeftOriginFSBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasRightOriginFSBoundPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasRightOriginFSBoundPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getRightOriginFSBoundPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getRightOriginFSBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setRightOriginFSBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initRightOriginFSBoundPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptRightOriginFSBoundPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownRightOriginFSBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasLeftOriginBoundPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasLeftOriginBoundPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getLeftOriginBoundPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getLeftOriginBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setLeftOriginBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initLeftOriginBoundPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptLeftOriginBoundPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownLeftOriginBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ReferenceLineAndLaneLine::Reader::hasRightOriginBoundPointArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ReferenceLineAndLaneLine::Builder::hasRightOriginBoundPointArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader ReferenceLineAndLaneLine::Reader::getRightOriginBoundPointArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::getRightOriginBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ReferenceLineAndLaneLine::Builder::setRightOriginBoundPointArray( ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>::Builder ReferenceLineAndLaneLine::Builder::initRightOriginBoundPointArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ReferenceLineAndLaneLine::Builder::adoptRightOriginBoundPointArray(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>> ReferenceLineAndLaneLine::Builder::disownRightOriginBoundPointArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::MapLinePoint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool TurnReminder::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TurnReminder::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader TurnReminder::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder TurnReminder::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline TurnReminder::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TurnReminder::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder TurnReminder::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TurnReminder::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> TurnReminder::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TurnReminder::Reader::getTurnLeft() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TurnReminder::Builder::getTurnLeft() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TurnReminder::Builder::setTurnLeft(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TurnReminder::Reader::getTurnRight() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool TurnReminder::Builder::getTurnRight() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TurnReminder::Builder::setTurnRight(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OrientedBoundingBox::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OrientedBoundingBox::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader OrientedBoundingBox::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder OrientedBoundingBox::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline OrientedBoundingBox::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OrientedBoundingBox::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder OrientedBoundingBox::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OrientedBoundingBox::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> OrientedBoundingBox::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float OrientedBoundingBox::Reader::getX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float OrientedBoundingBox::Reader::getY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float OrientedBoundingBox::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float OrientedBoundingBox::Reader::getWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float OrientedBoundingBox::Reader::getHeight() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getHeight() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setHeight(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float OrientedBoundingBox::Reader::getYaw() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float OrientedBoundingBox::Builder::getYaw() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void OrientedBoundingBox::Builder::setYaw(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AgentState::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AgentState::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AgentState::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AgentState::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AgentState::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AgentState::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AgentState::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AgentState::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AgentState::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AgentState::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AgentState::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader AgentState::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline AgentState::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AgentState::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AgentState::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> AgentState::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AgentState::Reader::hasRollPitchYaw() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AgentState::Builder::hasRollPitchYaw() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader AgentState::Reader::getRollPitchYaw() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder AgentState::Builder::getRollPitchYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline AgentState::Pipeline::getRollPitchYaw() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AgentState::Builder::setRollPitchYaw( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder AgentState::Builder::initRollPitchYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AgentState::Builder::adoptRollPitchYaw(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> AgentState::Builder::disownRollPitchYaw() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AgentState::Reader::hasVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AgentState::Builder::hasVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader AgentState::Reader::getVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::getVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline AgentState::Pipeline::getVelocity() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AgentState::Builder::setVelocity( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::initVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AgentState::Builder::adoptVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> AgentState::Builder::disownVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AgentState::Reader::hasAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AgentState::Builder::hasAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader AgentState::Reader::getAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::getAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline AgentState::Pipeline::getAcceleration() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AgentState::Builder::setAcceleration( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder AgentState::Builder::initAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AgentState::Builder::adoptAcceleration(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> AgentState::Builder::disownAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AgentDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AgentDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AgentDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AgentDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AgentDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AgentDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AgentDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AgentDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AgentDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AgentDebug::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AgentDebug::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t AgentDebug::Reader::getObjectLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AgentDebug::Builder::getObjectLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setObjectLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool AgentDebug::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AgentDebug::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AgentState::Reader AgentDebug::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AgentState::Builder AgentDebug::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AgentState::Pipeline AgentDebug::Pipeline::getState() {
  return  ::senseAD::msg::avp_planning::AgentState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AgentDebug::Builder::setState( ::senseAD::msg::avp_planning::AgentState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AgentState::Builder AgentDebug::Builder::initState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AgentDebug::Builder::adoptState(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState> AgentDebug::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t AgentDebug::Reader::getDecision() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AgentDebug::Builder::getDecision() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setDecision( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AgentDebug::Reader::hasObb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AgentDebug::Builder::hasObb() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader AgentDebug::Reader::getObb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder AgentDebug::Builder::getObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline AgentDebug::Pipeline::getObb() {
  return  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AgentDebug::Builder::setObb( ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder AgentDebug::Builder::initObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AgentDebug::Builder::adoptObb(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox> AgentDebug::Builder::disownObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t AgentDebug::Reader::getEgoRelevance() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AgentDebug::Builder::getEgoRelevance() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setEgoRelevance( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AgentDebug::Reader::getFaultyVehicleLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AgentDebug::Builder::getFaultyVehicleLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setFaultyVehicleLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double AgentDebug::Reader::getWaitingTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double AgentDebug::Builder::getWaitingTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setWaitingTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getLeftProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getLeftProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setLeftProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getRightProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getRightProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setRightProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getHazardProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getHazardProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setHazardProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getBrakeProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getBrakeProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setBrakeProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getFaultyProb() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getFaultyProb() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setFaultyProb(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool AgentDebug::Reader::hasPolygonPts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AgentDebug::Builder::hasPolygonPts() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader AgentDebug::Reader::getPolygonPts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder AgentDebug::Builder::getPolygonPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AgentDebug::Builder::setPolygonPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder AgentDebug::Builder::initPolygonPts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void AgentDebug::Builder::adoptPolygonPts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> AgentDebug::Builder::disownPolygonPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AgentDebug::Reader::getIdExistVeh() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS);
}

inline bool AgentDebug::Builder::getIdExistVeh() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setIdExistVeh(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS, value);
}

inline float AgentDebug::Reader::getBlindPercentage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float AgentDebug::Builder::getBlindPercentage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AgentDebug::Builder::setBlindPercentage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool ScenarioAnalysisAgent::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisAgent::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ScenarioAnalysisAgent::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisAgent::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ScenarioAnalysisAgent::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisAgent::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisAgent::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisAgent::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ScenarioAnalysisAgent::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t ScenarioAnalysisAgent::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ScenarioAnalysisAgent::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisAgent::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ScenarioAnalysisAgent::Reader::getObjectLabel() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ScenarioAnalysisAgent::Builder::getObjectLabel() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisAgent::Builder::setObjectLabel( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ScenarioAnalysisAgent::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisAgent::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AgentState::Reader ScenarioAnalysisAgent::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AgentState::Builder ScenarioAnalysisAgent::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AgentState::Pipeline ScenarioAnalysisAgent::Pipeline::getState() {
  return  ::senseAD::msg::avp_planning::AgentState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisAgent::Builder::setState( ::senseAD::msg::avp_planning::AgentState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AgentState::Builder ScenarioAnalysisAgent::Builder::initState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisAgent::Builder::adoptState(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AgentState> ScenarioAnalysisAgent::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AgentState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisAgent::Reader::hasObb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisAgent::Builder::hasObb() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader ScenarioAnalysisAgent::Reader::getObb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder ScenarioAnalysisAgent::Builder::getObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline ScenarioAnalysisAgent::Pipeline::getObb() {
  return  ::senseAD::msg::avp_planning::OrientedBoundingBox::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisAgent::Builder::setObb( ::senseAD::msg::avp_planning::OrientedBoundingBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::OrientedBoundingBox::Builder ScenarioAnalysisAgent::Builder::initObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisAgent::Builder::adoptObb(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::OrientedBoundingBox> ScenarioAnalysisAgent::Builder::disownObb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::OrientedBoundingBox>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t ScenarioAnalysisAgent::Reader::getEgoRelevance() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int8_t ScenarioAnalysisAgent::Builder::getEgoRelevance() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisAgent::Builder::setEgoRelevance( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ScenarioAnalysisAgent::Reader::getFaultyVehicleLabel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ScenarioAnalysisAgent::Builder::getFaultyVehicleLabel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisAgent::Builder::setFaultyVehicleLabel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ScenarioAnalysisLaneline::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisLaneline::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ScenarioAnalysisLaneline::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisLaneline::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ScenarioAnalysisLaneline::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisLaneline::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisLaneline::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisLaneline::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ScenarioAnalysisLaneline::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisLaneline::Reader::hasPts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisLaneline::Builder::hasPts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader ScenarioAnalysisLaneline::Reader::getPts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ScenarioAnalysisLaneline::Builder::getPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisLaneline::Builder::setPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ScenarioAnalysisLaneline::Builder::initPts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ScenarioAnalysisLaneline::Builder::adoptPts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> ScenarioAnalysisLaneline::Builder::disownPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisLaneline::Reader::hasCanLaneChange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisLaneline::Builder::hasCanLaneChange() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader ScenarioAnalysisLaneline::Reader::getCanLaneChange() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ScenarioAnalysisLaneline::Builder::getCanLaneChange() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisLaneline::Builder::setCanLaneChange( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ScenarioAnalysisLaneline::Builder::setCanLaneChange(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ScenarioAnalysisLaneline::Builder::initCanLaneChange(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ScenarioAnalysisLaneline::Builder::adoptCanLaneChange(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> ScenarioAnalysisLaneline::Builder::disownCanLaneChange() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisLaneline::Reader::hasValid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisLaneline::Builder::hasValid() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader ScenarioAnalysisLaneline::Reader::getValid() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ScenarioAnalysisLaneline::Builder::getValid() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisLaneline::Builder::setValid( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void ScenarioAnalysisLaneline::Builder::setValid(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ScenarioAnalysisLaneline::Builder::initValid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ScenarioAnalysisLaneline::Builder::adoptValid(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> ScenarioAnalysisLaneline::Builder::disownValid() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisRefline::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisRefline::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ScenarioAnalysisRefline::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisRefline::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ScenarioAnalysisRefline::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisRefline::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioAnalysisRefline::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisRefline::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ScenarioAnalysisRefline::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisRefline::Reader::hasPathPts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisRefline::Builder::hasPathPts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader ScenarioAnalysisRefline::Reader::getPathPts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ScenarioAnalysisRefline::Builder::getPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisRefline::Builder::setPathPts( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder ScenarioAnalysisRefline::Builder::initPathPts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ScenarioAnalysisRefline::Builder::adoptPathPts(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> ScenarioAnalysisRefline::Builder::disownPathPts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int8_t ScenarioAnalysisRefline::Reader::getDirection() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t ScenarioAnalysisRefline::Builder::getDirection() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisRefline::Builder::setDirection( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ScenarioAnalysisRefline::Reader::hasLaneIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisRefline::Builder::hasLaneIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ScenarioAnalysisRefline::Reader::getLaneIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ScenarioAnalysisRefline::Builder::getLaneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisRefline::Builder::setLaneIds( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ScenarioAnalysisRefline::Builder::setLaneIds(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ScenarioAnalysisRefline::Builder::initLaneIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ScenarioAnalysisRefline::Builder::adoptLaneIds(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ScenarioAnalysisRefline::Builder::disownLaneIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisRefline::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool ScenarioAnalysisRefline::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ScenarioAnalysisRefline::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ScenarioAnalysisRefline::Reader::hasLeftLaneline() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisRefline::Builder::hasLeftLaneline() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader ScenarioAnalysisRefline::Reader::getLeftLaneline() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder ScenarioAnalysisRefline::Builder::getLeftLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline ScenarioAnalysisRefline::Pipeline::getLeftLaneline() {
  return  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisRefline::Builder::setLeftLaneline( ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder ScenarioAnalysisRefline::Builder::initLeftLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisRefline::Builder::adoptLeftLaneline(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline> ScenarioAnalysisRefline::Builder::disownLeftLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ScenarioAnalysisRefline::Reader::hasRightLaneline() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioAnalysisRefline::Builder::hasRightLaneline() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader ScenarioAnalysisRefline::Reader::getRightLaneline() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder ScenarioAnalysisRefline::Builder::getRightLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline ScenarioAnalysisRefline::Pipeline::getRightLaneline() {
  return  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ScenarioAnalysisRefline::Builder::setRightLaneline( ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline::Builder ScenarioAnalysisRefline::Builder::initRightLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ScenarioAnalysisRefline::Builder::adoptRightLaneline(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline> ScenarioAnalysisRefline::Builder::disownRightLaneline() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioAnalysisLaneline>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ScenarioModel::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioModel::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ScenarioModel::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioModel::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ScenarioModel::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ScenarioModel::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioModel::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScenarioModel::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ScenarioModel::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScenarioModel::Reader::hasReflines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioModel::Builder::hasReflines() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Reader ScenarioModel::Reader::getReflines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Builder ScenarioModel::Builder::getReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScenarioModel::Builder::setReflines( ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>::Builder ScenarioModel::Builder::initReflines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ScenarioModel::Builder::adoptReflines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>> ScenarioModel::Builder::disownReflines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisRefline,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ScenarioModel::Reader::hasAgents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioModel::Builder::hasAgents() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Reader ScenarioModel::Reader::getAgents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Builder ScenarioModel::Builder::getAgents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ScenarioModel::Builder::setAgents( ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>::Builder ScenarioModel::Builder::initAgents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ScenarioModel::Builder::adoptAgents(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>> ScenarioModel::Builder::disownAgents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::ScenarioAnalysisAgent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ScenarioModelDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioModelDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ScenarioModelDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioModelDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ScenarioModelDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ScenarioModelDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ScenarioModelDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScenarioModelDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ScenarioModelDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScenarioModelDebug::Reader::hasAgents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScenarioModelDebug::Builder::hasAgents() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Reader ScenarioModelDebug::Reader::getAgents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Builder ScenarioModelDebug::Builder::getAgents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScenarioModelDebug::Builder::setAgents( ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>::Builder ScenarioModelDebug::Builder::initAgents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ScenarioModelDebug::Builder::adoptAgents(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>> ScenarioModelDebug::Builder::disownAgents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::AgentDebug,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

