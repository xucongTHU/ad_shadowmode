// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: planning_v3.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_fusion_map/avp_fusion_map.capnp.h>
#include <ad_msg_idl/avp_parking_cmd/parking_cmd.capnp.h>
#include <ad_msg_idl/avp_planning/planning.capnp.h>
#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e8be203f9949719f);
CAPNP_DECLARE_SCHEMA(f5a73c3e6500d979);
CAPNP_DECLARE_SCHEMA(88d297827545ec06);
CAPNP_DECLARE_SCHEMA(be47120ac22cb86a);
CAPNP_DECLARE_SCHEMA(9c8f54f56c92f72c);
CAPNP_DECLARE_SCHEMA(9c50db56f8ed44ee);
CAPNP_DECLARE_SCHEMA(e3d3d8b70febcdd5);
enum class AvpPlanFeedBack_e3d3d8b70febcdd5: uint16_t {
  NONE,
  OK,
  FAIL,
  PAUSE,
  EMERGENCY_BRAKE,
  EMERGENCY_BRAKE_RELEASE,
  TRAJ_FINISH,
  ROUTE_TRACKING,
  ROUTE_TRACK_LOST,
  FOUND_IDLE_SLOT,
  SUMMON_PARKOUT,
  HPM_FAIL,
  ROUTE_ONCE_FAILED,
  ROUTE_NEARBY,
  ROUTE_REVERSE,
  ROAMING_START_RELEASE,
  ROAMING_MATCH_FAILED,
  APA_WAIT,
};
CAPNP_DECLARE_ENUM(AvpPlanFeedBack, e3d3d8b70febcdd5);
CAPNP_DECLARE_SCHEMA(b490d020ea0d79e9);
CAPNP_DECLARE_SCHEMA(dda21347ece604df);
enum class SlotState_dda21347ece604df: uint16_t {
  UNKNOWN,
  AVAILABLE,
  OCCUPIED,
};
CAPNP_DECLARE_ENUM(SlotState, dda21347ece604df);
CAPNP_DECLARE_SCHEMA(82b27d0c5737803f);
CAPNP_DECLARE_SCHEMA(c0a32a9a2312cf26);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_planning {

struct PlanningWarnningRouteMapping {
  PlanningWarnningRouteMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8be203f9949719f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningNodeWarning {
  PlanningNodeWarning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5a73c3e6500d979, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningHpaWarning {
  PlanningHpaWarning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88d297827545ec06, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningApaWarning {
  PlanningApaWarning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be47120ac22cb86a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningRaRouteInfo {
  PlanningRaRouteInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c8f54f56c92f72c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningWarningOutput {
  PlanningWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c50db56f8ed44ee, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::AvpPlanFeedBack_e3d3d8b70febcdd5 AvpPlanFeedBack;

struct PlanningStatus {
  PlanningStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b490d020ea0d79e9, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::SlotState_dda21347ece604df SlotState;

struct PlanningSlotDisplayActor {
  PlanningSlotDisplayActor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82b27d0c5737803f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningStatusInfo {
  PlanningStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0a32a9a2312cf26, 3, 17)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlanningWarnningRouteMapping::Reader {
public:
  typedef PlanningWarnningRouteMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getUnavailableInput() const;

  inline bool getRouteFail() const;

  inline bool getPreRouteFail() const;

  inline bool getDataSaveFail() const;

  inline bool getProcessFail() const;

  inline bool getInvalidFreespaceSource() const;

  inline bool getInvalidVehicleposeSource() const;

  inline bool getInvalidSematicmapSource() const;

  inline bool getFailEndslot() const;

  inline bool getTimeout() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningWarnningRouteMapping::Builder {
public:
  typedef PlanningWarnningRouteMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getUnavailableInput();
  inline void setUnavailableInput(bool value);

  inline bool getRouteFail();
  inline void setRouteFail(bool value);

  inline bool getPreRouteFail();
  inline void setPreRouteFail(bool value);

  inline bool getDataSaveFail();
  inline void setDataSaveFail(bool value);

  inline bool getProcessFail();
  inline void setProcessFail(bool value);

  inline bool getInvalidFreespaceSource();
  inline void setInvalidFreespaceSource(bool value);

  inline bool getInvalidVehicleposeSource();
  inline void setInvalidVehicleposeSource(bool value);

  inline bool getInvalidSematicmapSource();
  inline void setInvalidSematicmapSource(bool value);

  inline bool getFailEndslot();
  inline void setFailEndslot(bool value);

  inline bool getTimeout();
  inline void setTimeout(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningWarnningRouteMapping::Pipeline {
public:
  typedef PlanningWarnningRouteMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningNodeWarning::Reader {
public:
  typedef PlanningNodeWarning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getMakeApaTaskFailed() const;

  inline bool getMakeHppTaskFailed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningNodeWarning::Builder {
public:
  typedef PlanningNodeWarning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getMakeApaTaskFailed();
  inline void setMakeApaTaskFailed(bool value);

  inline bool getMakeHppTaskFailed();
  inline void setMakeHppTaskFailed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningNodeWarning::Pipeline {
public:
  typedef PlanningNodeWarning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningHpaWarning::Reader {
public:
  typedef PlanningHpaWarning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPlanFailedForCollision() const;

  inline bool getPlanFailedForTrajLenTooShort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningHpaWarning::Builder {
public:
  typedef PlanningHpaWarning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPlanFailedForCollision();
  inline void setPlanFailedForCollision(bool value);

  inline bool getPlanFailedForTrajLenTooShort();
  inline void setPlanFailedForTrajLenTooShort(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningHpaWarning::Pipeline {
public:
  typedef PlanningHpaWarning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningApaWarning::Reader {
public:
  typedef PlanningApaWarning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getPlanFailedForLong() const;

  inline bool getPlanFailedForLAT() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningApaWarning::Builder {
public:
  typedef PlanningApaWarning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getPlanFailedForLong();
  inline void setPlanFailedForLong(bool value);

  inline bool getPlanFailedForLAT();
  inline void setPlanFailedForLAT(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningApaWarning::Pipeline {
public:
  typedef PlanningApaWarning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningRaRouteInfo::Reader {
public:
  typedef PlanningRaRouteInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMileage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningRaRouteInfo::Builder {
public:
  typedef PlanningRaRouteInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getMileage();
  inline void setMileage( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningRaRouteInfo::Pipeline {
public:
  typedef PlanningRaRouteInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningWarningOutput::Reader {
public:
  typedef PlanningWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getObstaclesInPath() const;

  inline bool getAbortWithGearShiftOverTimes() const;

  inline bool getAbortWithParkingTimeTooLong() const;

  inline bool getAbortWithLearningTimeTooLong() const;

  inline bool getAbortWithLearningDistanceTooLong() const;

  inline bool getAbortWithReverseDistanceTooLong() const;

  inline bool getCruiseTotalTimeTooLong() const;

  inline bool getCruiseNoAvailableSlot() const;

  inline bool hasRouteMappingWarnning() const;
  inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Reader getRouteMappingWarnning() const;

  inline bool hasNodeWarnning() const;
  inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Reader getNodeWarnning() const;

  inline bool hasHpaWarnning() const;
  inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Reader getHpaWarnning() const;

  inline bool hasApaWarnning() const;
  inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Reader getApaWarnning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningWarningOutput::Builder {
public:
  typedef PlanningWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getObstaclesInPath();
  inline void setObstaclesInPath(bool value);

  inline bool getAbortWithGearShiftOverTimes();
  inline void setAbortWithGearShiftOverTimes(bool value);

  inline bool getAbortWithParkingTimeTooLong();
  inline void setAbortWithParkingTimeTooLong(bool value);

  inline bool getAbortWithLearningTimeTooLong();
  inline void setAbortWithLearningTimeTooLong(bool value);

  inline bool getAbortWithLearningDistanceTooLong();
  inline void setAbortWithLearningDistanceTooLong(bool value);

  inline bool getAbortWithReverseDistanceTooLong();
  inline void setAbortWithReverseDistanceTooLong(bool value);

  inline bool getCruiseTotalTimeTooLong();
  inline void setCruiseTotalTimeTooLong(bool value);

  inline bool getCruiseNoAvailableSlot();
  inline void setCruiseNoAvailableSlot(bool value);

  inline bool hasRouteMappingWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Builder getRouteMappingWarnning();
  inline void setRouteMappingWarnning( ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Builder initRouteMappingWarnning();
  inline void adoptRouteMappingWarnning(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping> disownRouteMappingWarnning();

  inline bool hasNodeWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Builder getNodeWarnning();
  inline void setNodeWarnning( ::senseAD::msg::avp_planning::PlanningNodeWarning::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Builder initNodeWarnning();
  inline void adoptNodeWarnning(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningNodeWarning>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningNodeWarning> disownNodeWarnning();

  inline bool hasHpaWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Builder getHpaWarnning();
  inline void setHpaWarnning( ::senseAD::msg::avp_planning::PlanningHpaWarning::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Builder initHpaWarnning();
  inline void adoptHpaWarnning(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningHpaWarning>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningHpaWarning> disownHpaWarnning();

  inline bool hasApaWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Builder getApaWarnning();
  inline void setApaWarnning( ::senseAD::msg::avp_planning::PlanningApaWarning::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Builder initApaWarnning();
  inline void adoptApaWarnning(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningApaWarning>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningApaWarning> disownApaWarnning();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningWarningOutput::Pipeline {
public:
  typedef PlanningWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Pipeline getRouteMappingWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Pipeline getNodeWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Pipeline getHpaWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Pipeline getApaWarnning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningStatus::Reader {
public:
  typedef PlanningStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

  inline bool getParkingOut() const;

  inline bool getParkingIn() const;

  inline bool getApaPlanningSuccess() const;

  inline bool getApaPlanningFail() const;

  inline bool getPlanningSuspend() const;

  inline bool getPlanningAbort() const;

  inline bool getPlanCmdStop() const;

  inline bool getPlanCmdSteer() const;

  inline bool getPlanCmdDrive() const;

  inline bool getPlanCmdEnd() const;

  inline bool getPlanCmdFinish() const;

  inline bool getPlanCmdPrepare() const;

  inline bool getPlanCmdEmergencyBrake() const;

  inline bool getPlanHpa() const;

  inline bool getPlanHps() const;

  inline bool getHpmPlanningSuccess() const;

  inline bool getHpmPlanningFail() const;

  inline bool getHpmRouteSaveSuccess() const;

  inline bool getHpmRouteSaveFail() const;

  inline bool getCruiseReachEnd() const;

  inline bool getCruisePlanCmdStop() const;

  inline bool getCruisePlanCmdPause() const;

  inline bool getCruiseAlongParking() const;

  inline bool getIsShortTrajectoryLocalizationNeeded() const;

  inline bool getPlanCmdStopDone() const;

  inline  ::senseAD::msg::avp_planning::AvpPlanFeedBack getPlanFeedBack() const;

  inline bool getIsVehicleInSlot() const;

  inline float getCruiseLeftDistance() const;

  inline bool getRoamingParking() const;

  inline bool getPlanRaMapping() const;

  inline bool getPlanRaRouting() const;

  inline bool getPlanRaRoutingSuccess() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningStatus::Builder {
public:
  typedef PlanningStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

  inline bool getParkingOut();
  inline void setParkingOut(bool value);

  inline bool getParkingIn();
  inline void setParkingIn(bool value);

  inline bool getApaPlanningSuccess();
  inline void setApaPlanningSuccess(bool value);

  inline bool getApaPlanningFail();
  inline void setApaPlanningFail(bool value);

  inline bool getPlanningSuspend();
  inline void setPlanningSuspend(bool value);

  inline bool getPlanningAbort();
  inline void setPlanningAbort(bool value);

  inline bool getPlanCmdStop();
  inline void setPlanCmdStop(bool value);

  inline bool getPlanCmdSteer();
  inline void setPlanCmdSteer(bool value);

  inline bool getPlanCmdDrive();
  inline void setPlanCmdDrive(bool value);

  inline bool getPlanCmdEnd();
  inline void setPlanCmdEnd(bool value);

  inline bool getPlanCmdFinish();
  inline void setPlanCmdFinish(bool value);

  inline bool getPlanCmdPrepare();
  inline void setPlanCmdPrepare(bool value);

  inline bool getPlanCmdEmergencyBrake();
  inline void setPlanCmdEmergencyBrake(bool value);

  inline bool getPlanHpa();
  inline void setPlanHpa(bool value);

  inline bool getPlanHps();
  inline void setPlanHps(bool value);

  inline bool getHpmPlanningSuccess();
  inline void setHpmPlanningSuccess(bool value);

  inline bool getHpmPlanningFail();
  inline void setHpmPlanningFail(bool value);

  inline bool getHpmRouteSaveSuccess();
  inline void setHpmRouteSaveSuccess(bool value);

  inline bool getHpmRouteSaveFail();
  inline void setHpmRouteSaveFail(bool value);

  inline bool getCruiseReachEnd();
  inline void setCruiseReachEnd(bool value);

  inline bool getCruisePlanCmdStop();
  inline void setCruisePlanCmdStop(bool value);

  inline bool getCruisePlanCmdPause();
  inline void setCruisePlanCmdPause(bool value);

  inline bool getCruiseAlongParking();
  inline void setCruiseAlongParking(bool value);

  inline bool getIsShortTrajectoryLocalizationNeeded();
  inline void setIsShortTrajectoryLocalizationNeeded(bool value);

  inline bool getPlanCmdStopDone();
  inline void setPlanCmdStopDone(bool value);

  inline  ::senseAD::msg::avp_planning::AvpPlanFeedBack getPlanFeedBack();
  inline void setPlanFeedBack( ::senseAD::msg::avp_planning::AvpPlanFeedBack value);

  inline bool getIsVehicleInSlot();
  inline void setIsVehicleInSlot(bool value);

  inline float getCruiseLeftDistance();
  inline void setCruiseLeftDistance(float value);

  inline bool getRoamingParking();
  inline void setRoamingParking(bool value);

  inline bool getPlanRaMapping();
  inline void setPlanRaMapping(bool value);

  inline bool getPlanRaRouting();
  inline void setPlanRaRouting(bool value);

  inline bool getPlanRaRoutingSuccess();
  inline void setPlanRaRoutingSuccess(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningStatus::Pipeline {
public:
  typedef PlanningStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningSlotDisplayActor::Reader {
public:
  typedef PlanningSlotDisplayActor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsTargetSlot() const;

  inline bool getIsSelectable() const;

  inline  ::senseAD::msg::avp_planning::SlotState getSlotState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningSlotDisplayActor::Builder {
public:
  typedef PlanningSlotDisplayActor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsTargetSlot();
  inline void setIsTargetSlot(bool value);

  inline bool getIsSelectable();
  inline void setIsSelectable(bool value);

  inline  ::senseAD::msg::avp_planning::SlotState getSlotState();
  inline void setSlotState( ::senseAD::msg::avp_planning::SlotState value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningSlotDisplayActor::Pipeline {
public:
  typedef PlanningSlotDisplayActor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningStatusInfo::Reader {
public:
  typedef PlanningStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMsgId() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline  ::uint64_t getAvpStatusUid() const;

  inline bool hasPlanningStatus() const;
  inline  ::senseAD::msg::avp_planning::PlanningStatus::Reader getPlanningStatus() const;

  inline bool hasPlanningWarnning() const;
  inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Reader getPlanningWarnning() const;

  inline bool hasReferenceLineLaneLine() const;
  inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Reader getReferenceLineLaneLine() const;

  inline bool hasScenarioModelDebug() const;
  inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Reader getScenarioModelDebug() const;

  inline bool hasTurnReminder() const;
  inline  ::senseAD::msg::avp_planning::TurnReminder::Reader getTurnReminder() const;

  inline bool hasTrajectory() const;
  inline  ::senseAD::msg::avp_planning::Trajectory::Reader getTrajectory() const;

  inline bool hasParkingSlots() const;
  inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Reader getParkingSlots() const;

  inline bool hasTargetSlot() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader getTargetSlot() const;

  inline bool hasRecommendationDirections() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader getRecommendationDirections() const;

  inline bool hasParkingSlotsDisplayActors() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader getParkingSlotsDisplayActors() const;

  inline bool hasParkingSlotsOptDisplayActors() const;
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader getParkingSlotsOptDisplayActors() const;

  inline bool hasPlanRaRouteInfo() const;
  inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Reader getPlanRaRouteInfo() const;

  inline bool hasRecommendationDirectionsTail() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader getRecommendationDirectionsTail() const;

  inline bool hasRecommendationParkingInDirections() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader getRecommendationParkingInDirections() const;

  inline bool hasOdomTrajectory() const;
  inline  ::senseAD::msg::avp_planning::Trajectory::Reader getOdomTrajectory() const;

  inline bool hasParkingInAlignSet() const;
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader getParkingInAlignSet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningStatusInfo::Builder {
public:
  typedef PlanningStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline  ::uint64_t getAvpStatusUid();
  inline void setAvpStatusUid( ::uint64_t value);

  inline bool hasPlanningStatus();
  inline  ::senseAD::msg::avp_planning::PlanningStatus::Builder getPlanningStatus();
  inline void setPlanningStatus( ::senseAD::msg::avp_planning::PlanningStatus::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningStatus::Builder initPlanningStatus();
  inline void adoptPlanningStatus(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningStatus> disownPlanningStatus();

  inline bool hasPlanningWarnning();
  inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Builder getPlanningWarnning();
  inline void setPlanningWarnning( ::senseAD::msg::avp_planning::PlanningWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Builder initPlanningWarnning();
  inline void adoptPlanningWarnning(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarningOutput> disownPlanningWarnning();

  inline bool hasReferenceLineLaneLine();
  inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Builder getReferenceLineLaneLine();
  inline void setReferenceLineLaneLine( ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Reader value);
  inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Builder initReferenceLineLaneLine();
  inline void adoptReferenceLineLaneLine(::capnp::Orphan< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine> disownReferenceLineLaneLine();

  inline bool hasScenarioModelDebug();
  inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Builder getScenarioModelDebug();
  inline void setScenarioModelDebug( ::senseAD::msg::avp_planning::ScenarioModelDebug::Reader value);
  inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Builder initScenarioModelDebug();
  inline void adoptScenarioModelDebug(::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioModelDebug>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioModelDebug> disownScenarioModelDebug();

  inline bool hasTurnReminder();
  inline  ::senseAD::msg::avp_planning::TurnReminder::Builder getTurnReminder();
  inline void setTurnReminder( ::senseAD::msg::avp_planning::TurnReminder::Reader value);
  inline  ::senseAD::msg::avp_planning::TurnReminder::Builder initTurnReminder();
  inline void adoptTurnReminder(::capnp::Orphan< ::senseAD::msg::avp_planning::TurnReminder>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::TurnReminder> disownTurnReminder();

  inline bool hasTrajectory();
  inline  ::senseAD::msg::avp_planning::Trajectory::Builder getTrajectory();
  inline void setTrajectory( ::senseAD::msg::avp_planning::Trajectory::Reader value);
  inline  ::senseAD::msg::avp_planning::Trajectory::Builder initTrajectory();
  inline void adoptTrajectory(::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory> disownTrajectory();

  inline bool hasParkingSlots();
  inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Builder getParkingSlots();
  inline void setParkingSlots( ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Reader value);
  inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Builder initParkingSlots();
  inline void adoptParkingSlots(::capnp::Orphan< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray> disownParkingSlots();

  inline bool hasTargetSlot();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder getTargetSlot();
  inline void setTargetSlot( ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder initTargetSlot();
  inline void adoptTargetSlot(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD> disownTargetSlot();

  inline bool hasRecommendationDirections();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder getRecommendationDirections();
  inline void setRecommendationDirections( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRecommendationDirections(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder initRecommendationDirections(unsigned int size);
  inline void adoptRecommendationDirections(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> disownRecommendationDirections();

  inline bool hasParkingSlotsDisplayActors();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder getParkingSlotsDisplayActors();
  inline void setParkingSlotsDisplayActors( ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder initParkingSlotsDisplayActors(unsigned int size);
  inline void adoptParkingSlotsDisplayActors(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>> disownParkingSlotsDisplayActors();

  inline bool hasParkingSlotsOptDisplayActors();
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder getParkingSlotsOptDisplayActors();
  inline void setParkingSlotsOptDisplayActors( ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder initParkingSlotsOptDisplayActors(unsigned int size);
  inline void adoptParkingSlotsOptDisplayActors(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>> disownParkingSlotsOptDisplayActors();

  inline bool hasPlanRaRouteInfo();
  inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Builder getPlanRaRouteInfo();
  inline void setPlanRaRouteInfo( ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Reader value);
  inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Builder initPlanRaRouteInfo();
  inline void adoptPlanRaRouteInfo(::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningRaRouteInfo> disownPlanRaRouteInfo();

  inline bool hasRecommendationDirectionsTail();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder getRecommendationDirectionsTail();
  inline void setRecommendationDirectionsTail( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value);
  inline void setRecommendationDirectionsTail(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder initRecommendationDirectionsTail(unsigned int size);
  inline void adoptRecommendationDirectionsTail(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> disownRecommendationDirectionsTail();

  inline bool hasRecommendationParkingInDirections();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder getRecommendationParkingInDirections();
  inline void setRecommendationParkingInDirections( ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder initRecommendationParkingInDirections();
  inline void adoptRecommendationParkingInDirections(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection> disownRecommendationParkingInDirections();

  inline bool hasOdomTrajectory();
  inline  ::senseAD::msg::avp_planning::Trajectory::Builder getOdomTrajectory();
  inline void setOdomTrajectory( ::senseAD::msg::avp_planning::Trajectory::Reader value);
  inline  ::senseAD::msg::avp_planning::Trajectory::Builder initOdomTrajectory();
  inline void adoptOdomTrajectory(::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory> disownOdomTrajectory();

  inline bool hasParkingInAlignSet();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder getParkingInAlignSet();
  inline void setParkingInAlignSet( ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder initParkingInAlignSet();
  inline void adoptParkingInAlignSet(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup> disownParkingInAlignSet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningStatusInfo::Pipeline {
public:
  typedef PlanningStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_planning::PlanningStatus::Pipeline getPlanningStatus();
  inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Pipeline getPlanningWarnning();
  inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Pipeline getReferenceLineLaneLine();
  inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Pipeline getScenarioModelDebug();
  inline  ::senseAD::msg::avp_planning::TurnReminder::Pipeline getTurnReminder();
  inline  ::senseAD::msg::avp_planning::Trajectory::Pipeline getTrajectory();
  inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Pipeline getParkingSlots();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline getTargetSlot();
  inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Pipeline getPlanRaRouteInfo();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline getRecommendationParkingInDirections();
  inline  ::senseAD::msg::avp_planning::Trajectory::Pipeline getOdomTrajectory();
  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline getParkingInAlignSet();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PlanningWarnningRouteMapping::Reader::getUnavailableInput() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getUnavailableInput() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setUnavailableInput(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getRouteFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getRouteFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setRouteFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getPreRouteFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getPreRouteFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setPreRouteFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getDataSaveFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getDataSaveFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setDataSaveFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getProcessFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getProcessFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setProcessFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getInvalidFreespaceSource() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getInvalidFreespaceSource() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setInvalidFreespaceSource(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getInvalidVehicleposeSource() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getInvalidVehicleposeSource() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setInvalidVehicleposeSource(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getInvalidSematicmapSource() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getInvalidSematicmapSource() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setInvalidSematicmapSource(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getFailEndslot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getFailEndslot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setFailEndslot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarnningRouteMapping::Reader::getTimeout() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarnningRouteMapping::Builder::getTimeout() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PlanningWarnningRouteMapping::Builder::setTimeout(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningNodeWarning::Reader::getMakeApaTaskFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningNodeWarning::Builder::getMakeApaTaskFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningNodeWarning::Builder::setMakeApaTaskFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningNodeWarning::Reader::getMakeHppTaskFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningNodeWarning::Builder::getMakeHppTaskFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningNodeWarning::Builder::setMakeHppTaskFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningHpaWarning::Reader::getPlanFailedForCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningHpaWarning::Builder::getPlanFailedForCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningHpaWarning::Builder::setPlanFailedForCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningHpaWarning::Reader::getPlanFailedForTrajLenTooShort() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningHpaWarning::Builder::getPlanFailedForTrajLenTooShort() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningHpaWarning::Builder::setPlanFailedForTrajLenTooShort(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningApaWarning::Reader::getPlanFailedForLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningApaWarning::Builder::getPlanFailedForLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningApaWarning::Builder::setPlanFailedForLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningApaWarning::Reader::getPlanFailedForLAT() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningApaWarning::Builder::getPlanFailedForLAT() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningApaWarning::Builder::setPlanFailedForLAT(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t PlanningRaRouteInfo::Reader::getMileage() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t PlanningRaRouteInfo::Builder::getMileage() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningRaRouteInfo::Builder::setMileage( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getObstaclesInPath() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getObstaclesInPath() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setObstaclesInPath(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getAbortWithGearShiftOverTimes() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getAbortWithGearShiftOverTimes() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setAbortWithGearShiftOverTimes(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getAbortWithParkingTimeTooLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getAbortWithParkingTimeTooLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setAbortWithParkingTimeTooLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getAbortWithLearningTimeTooLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getAbortWithLearningTimeTooLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setAbortWithLearningTimeTooLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getAbortWithLearningDistanceTooLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getAbortWithLearningDistanceTooLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setAbortWithLearningDistanceTooLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getAbortWithReverseDistanceTooLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getAbortWithReverseDistanceTooLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setAbortWithReverseDistanceTooLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getCruiseTotalTimeTooLong() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getCruiseTotalTimeTooLong() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setCruiseTotalTimeTooLong(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::getCruiseNoAvailableSlot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool PlanningWarningOutput::Builder::getCruiseNoAvailableSlot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlanningWarningOutput::Builder::setCruiseNoAvailableSlot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningWarningOutput::Reader::hasRouteMappingWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningWarningOutput::Builder::hasRouteMappingWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Reader PlanningWarningOutput::Reader::getRouteMappingWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Builder PlanningWarningOutput::Builder::getRouteMappingWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Pipeline PlanningWarningOutput::Pipeline::getRouteMappingWarnning() {
  return  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningWarningOutput::Builder::setRouteMappingWarnning( ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping::Builder PlanningWarningOutput::Builder::initRouteMappingWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningWarningOutput::Builder::adoptRouteMappingWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping> PlanningWarningOutput::Builder::disownRouteMappingWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarnningRouteMapping>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlanningWarningOutput::Reader::hasNodeWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningWarningOutput::Builder::hasNodeWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Reader PlanningWarningOutput::Reader::getNodeWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Builder PlanningWarningOutput::Builder::getNodeWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Pipeline PlanningWarningOutput::Pipeline::getNodeWarnning() {
  return  ::senseAD::msg::avp_planning::PlanningNodeWarning::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlanningWarningOutput::Builder::setNodeWarnning( ::senseAD::msg::avp_planning::PlanningNodeWarning::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningNodeWarning::Builder PlanningWarningOutput::Builder::initNodeWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningWarningOutput::Builder::adoptNodeWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningNodeWarning>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningNodeWarning> PlanningWarningOutput::Builder::disownNodeWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningNodeWarning>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningWarningOutput::Reader::hasHpaWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningWarningOutput::Builder::hasHpaWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Reader PlanningWarningOutput::Reader::getHpaWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Builder PlanningWarningOutput::Builder::getHpaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Pipeline PlanningWarningOutput::Pipeline::getHpaWarnning() {
  return  ::senseAD::msg::avp_planning::PlanningHpaWarning::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlanningWarningOutput::Builder::setHpaWarnning( ::senseAD::msg::avp_planning::PlanningHpaWarning::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningHpaWarning::Builder PlanningWarningOutput::Builder::initHpaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningWarningOutput::Builder::adoptHpaWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningHpaWarning>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningHpaWarning> PlanningWarningOutput::Builder::disownHpaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningHpaWarning>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlanningWarningOutput::Reader::hasApaWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningWarningOutput::Builder::hasApaWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Reader PlanningWarningOutput::Reader::getApaWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Builder PlanningWarningOutput::Builder::getApaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Pipeline PlanningWarningOutput::Pipeline::getApaWarnning() {
  return  ::senseAD::msg::avp_planning::PlanningApaWarning::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlanningWarningOutput::Builder::setApaWarnning( ::senseAD::msg::avp_planning::PlanningApaWarning::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningApaWarning::Builder PlanningWarningOutput::Builder::initApaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningWarningOutput::Builder::adoptApaWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningApaWarning>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningApaWarning> PlanningWarningOutput::Builder::disownApaWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningApaWarning>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningStatus::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getParkingOut() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getParkingOut() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setParkingOut(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getParkingIn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getParkingIn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setParkingIn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getApaPlanningSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getApaPlanningSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setApaPlanningSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getApaPlanningFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getApaPlanningFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setApaPlanningFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanningSuspend() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanningSuspend() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanningSuspend(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanningAbort() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanningAbort() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanningAbort(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdSteer() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdSteer() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdSteer(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdDrive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdDrive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdDrive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdEnd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdEnd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdEnd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdFinish() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdFinish() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdFinish(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdPrepare() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdPrepare() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdPrepare(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdEmergencyBrake() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdEmergencyBrake() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdEmergencyBrake(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanHpa() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanHpa() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanHpa(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanHps() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanHps() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanHps(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getHpmPlanningSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getHpmPlanningSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setHpmPlanningSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getHpmPlanningFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getHpmPlanningFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setHpmPlanningFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getHpmRouteSaveSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getHpmRouteSaveSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setHpmRouteSaveSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getHpmRouteSaveFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getHpmRouteSaveFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setHpmRouteSaveFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getCruiseReachEnd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getCruiseReachEnd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setCruiseReachEnd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getCruisePlanCmdStop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getCruisePlanCmdStop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setCruisePlanCmdStop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getCruisePlanCmdPause() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getCruisePlanCmdPause() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setCruisePlanCmdPause(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getCruiseAlongParking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getCruiseAlongParking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setCruiseAlongParking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getIsShortTrajectoryLocalizationNeeded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getIsShortTrajectoryLocalizationNeeded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setIsShortTrajectoryLocalizationNeeded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanCmdStopDone() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanCmdStopDone() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanCmdStopDone(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_planning::AvpPlanFeedBack PlanningStatus::Reader::getPlanFeedBack() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::AvpPlanFeedBack>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::AvpPlanFeedBack PlanningStatus::Builder::getPlanFeedBack() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::AvpPlanFeedBack>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanFeedBack( ::senseAD::msg::avp_planning::AvpPlanFeedBack value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::AvpPlanFeedBack>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getIsVehicleInSlot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getIsVehicleInSlot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setIsVehicleInSlot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline float PlanningStatus::Reader::getCruiseLeftDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PlanningStatus::Builder::getCruiseLeftDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setCruiseLeftDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getRoamingParking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getRoamingParking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setRoamingParking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanRaMapping() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanRaMapping() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanRaMapping(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanRaRouting() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanRaRouting() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanRaRouting(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatus::Reader::getPlanRaRoutingSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline bool PlanningStatus::Builder::getPlanRaRoutingSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void PlanningStatus::Builder::setPlanRaRoutingSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningSlotDisplayActor::Reader::getIsTargetSlot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PlanningSlotDisplayActor::Builder::getIsTargetSlot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningSlotDisplayActor::Builder::setIsTargetSlot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningSlotDisplayActor::Reader::getIsSelectable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PlanningSlotDisplayActor::Builder::getIsSelectable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningSlotDisplayActor::Builder::setIsSelectable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_planning::SlotState PlanningSlotDisplayActor::Reader::getSlotState() const {
  return _reader.getDataField< ::senseAD::msg::avp_planning::SlotState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_planning::SlotState PlanningSlotDisplayActor::Builder::getSlotState() {
  return _builder.getDataField< ::senseAD::msg::avp_planning::SlotState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningSlotDisplayActor::Builder::setSlotState( ::senseAD::msg::avp_planning::SlotState value) {
  _builder.setDataField< ::senseAD::msg::avp_planning::SlotState>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader PlanningStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline PlanningStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder PlanningStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> PlanningStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t PlanningStatusInfo::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningStatusInfo::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningStatusInfo::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus PlanningStatusInfo::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus PlanningStatusInfo::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlanningStatusInfo::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t PlanningStatusInfo::Reader::getAvpStatusUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlanningStatusInfo::Builder::getAvpStatusUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlanningStatusInfo::Builder::setAvpStatusUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PlanningStatusInfo::Reader::hasPlanningStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasPlanningStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningStatus::Reader PlanningStatusInfo::Reader::getPlanningStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningStatus::Builder PlanningStatusInfo::Builder::getPlanningStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningStatus::Pipeline PlanningStatusInfo::Pipeline::getPlanningStatus() {
  return  ::senseAD::msg::avp_planning::PlanningStatus::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setPlanningStatus( ::senseAD::msg::avp_planning::PlanningStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningStatus::Builder PlanningStatusInfo::Builder::initPlanningStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptPlanningStatus(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningStatus> PlanningStatusInfo::Builder::disownPlanningStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasPlanningWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasPlanningWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Reader PlanningStatusInfo::Reader::getPlanningWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Builder PlanningStatusInfo::Builder::getPlanningWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Pipeline PlanningStatusInfo::Pipeline::getPlanningWarnning() {
  return  ::senseAD::msg::avp_planning::PlanningWarningOutput::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setPlanningWarnning( ::senseAD::msg::avp_planning::PlanningWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningWarningOutput::Builder PlanningStatusInfo::Builder::initPlanningWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptPlanningWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningWarningOutput> PlanningStatusInfo::Builder::disownPlanningWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasReferenceLineLaneLine() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasReferenceLineLaneLine() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Reader PlanningStatusInfo::Reader::getReferenceLineLaneLine() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Builder PlanningStatusInfo::Builder::getReferenceLineLaneLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Pipeline PlanningStatusInfo::Pipeline::getReferenceLineLaneLine() {
  return  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setReferenceLineLaneLine( ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine::Builder PlanningStatusInfo::Builder::initReferenceLineLaneLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptReferenceLineLaneLine(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine> PlanningStatusInfo::Builder::disownReferenceLineLaneLine() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ReferenceLineAndLaneLine>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasScenarioModelDebug() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasScenarioModelDebug() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Reader PlanningStatusInfo::Reader::getScenarioModelDebug() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Builder PlanningStatusInfo::Builder::getScenarioModelDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Pipeline PlanningStatusInfo::Pipeline::getScenarioModelDebug() {
  return  ::senseAD::msg::avp_planning::ScenarioModelDebug::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setScenarioModelDebug( ::senseAD::msg::avp_planning::ScenarioModelDebug::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ScenarioModelDebug::Builder PlanningStatusInfo::Builder::initScenarioModelDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptScenarioModelDebug(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioModelDebug>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ScenarioModelDebug> PlanningStatusInfo::Builder::disownScenarioModelDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ScenarioModelDebug>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasTurnReminder() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasTurnReminder() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::TurnReminder::Reader PlanningStatusInfo::Reader::getTurnReminder() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::TurnReminder::Builder PlanningStatusInfo::Builder::getTurnReminder() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::TurnReminder::Pipeline PlanningStatusInfo::Pipeline::getTurnReminder() {
  return  ::senseAD::msg::avp_planning::TurnReminder::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setTurnReminder( ::senseAD::msg::avp_planning::TurnReminder::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::TurnReminder::Builder PlanningStatusInfo::Builder::initTurnReminder() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptTurnReminder(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::TurnReminder>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::TurnReminder> PlanningStatusInfo::Builder::disownTurnReminder() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::TurnReminder>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasTrajectory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasTrajectory() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::Trajectory::Reader PlanningStatusInfo::Reader::getTrajectory() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::Trajectory::Builder PlanningStatusInfo::Builder::getTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::Trajectory::Pipeline PlanningStatusInfo::Pipeline::getTrajectory() {
  return  ::senseAD::msg::avp_planning::Trajectory::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setTrajectory( ::senseAD::msg::avp_planning::Trajectory::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::Trajectory::Builder PlanningStatusInfo::Builder::initTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptTrajectory(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory> PlanningStatusInfo::Builder::disownTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasParkingSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasParkingSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Reader PlanningStatusInfo::Reader::getParkingSlots() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Builder PlanningStatusInfo::Builder::getParkingSlots() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Pipeline PlanningStatusInfo::Pipeline::getParkingSlots() {
  return  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setParkingSlots( ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_fusion_map::FusionSlotOutArray::Builder PlanningStatusInfo::Builder::initParkingSlots() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptParkingSlots(
    ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray> PlanningStatusInfo::Builder::disownParkingSlots() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_fusion_map::FusionSlotOutArray>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasTargetSlot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasTargetSlot() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader PlanningStatusInfo::Reader::getTargetSlot() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder PlanningStatusInfo::Builder::getTargetSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline PlanningStatusInfo::Pipeline::getTargetSlot() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setTargetSlot( ::senseAD::msg::avp_parking_cmd::ParkingCMD::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingCMD::Builder PlanningStatusInfo::Builder::initTargetSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptTargetSlot(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingCMD> PlanningStatusInfo::Builder::disownTargetSlot() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingCMD>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasRecommendationDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasRecommendationDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader PlanningStatusInfo::Reader::getRecommendationDirections() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder PlanningStatusInfo::Builder::getRecommendationDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::setRecommendationDirections( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void PlanningStatusInfo::Builder::setRecommendationDirections(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder PlanningStatusInfo::Builder::initRecommendationDirections(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void PlanningStatusInfo::Builder::adoptRecommendationDirections(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> PlanningStatusInfo::Builder::disownRecommendationDirections() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasParkingSlotsDisplayActors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasParkingSlotsDisplayActors() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader PlanningStatusInfo::Reader::getParkingSlotsDisplayActors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder PlanningStatusInfo::Builder::getParkingSlotsDisplayActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::setParkingSlotsDisplayActors( ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder PlanningStatusInfo::Builder::initParkingSlotsDisplayActors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void PlanningStatusInfo::Builder::adoptParkingSlotsDisplayActors(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>> PlanningStatusInfo::Builder::disownParkingSlotsDisplayActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasParkingSlotsOptDisplayActors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasParkingSlotsOptDisplayActors() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader PlanningStatusInfo::Reader::getParkingSlotsOptDisplayActors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder PlanningStatusInfo::Builder::getParkingSlotsOptDisplayActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::setParkingSlotsOptDisplayActors( ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>::Builder PlanningStatusInfo::Builder::initParkingSlotsOptDisplayActors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void PlanningStatusInfo::Builder::adoptParkingSlotsOptDisplayActors(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>> PlanningStatusInfo::Builder::disownParkingSlotsOptDisplayActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_planning::PlanningSlotDisplayActor,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasPlanRaRouteInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasPlanRaRouteInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Reader PlanningStatusInfo::Reader::getPlanRaRouteInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Builder PlanningStatusInfo::Builder::getPlanRaRouteInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Pipeline PlanningStatusInfo::Pipeline::getPlanRaRouteInfo() {
  return  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setPlanRaRouteInfo( ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::PlanningRaRouteInfo::Builder PlanningStatusInfo::Builder::initPlanRaRouteInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptPlanRaRouteInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::PlanningRaRouteInfo> PlanningStatusInfo::Builder::disownPlanRaRouteInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::PlanningRaRouteInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasRecommendationDirectionsTail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasRecommendationDirectionsTail() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader PlanningStatusInfo::Reader::getRecommendationDirectionsTail() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder PlanningStatusInfo::Builder::getRecommendationDirectionsTail() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::setRecommendationDirectionsTail( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline void PlanningStatusInfo::Builder::setRecommendationDirectionsTail(::kj::ArrayPtr<const  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>::Builder PlanningStatusInfo::Builder::initRecommendationDirectionsTail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void PlanningStatusInfo::Builder::adoptRecommendationDirectionsTail(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>> PlanningStatusInfo::Builder::disownRecommendationDirectionsTail() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasRecommendationParkingInDirections() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasRecommendationParkingInDirections() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader PlanningStatusInfo::Reader::getRecommendationParkingInDirections() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder PlanningStatusInfo::Builder::getRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline PlanningStatusInfo::Pipeline::getRecommendationParkingInDirections() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setRecommendationParkingInDirections( ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInDirection::Builder PlanningStatusInfo::Builder::initRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptRecommendationParkingInDirections(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInDirection> PlanningStatusInfo::Builder::disownRecommendationParkingInDirections() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInDirection>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasOdomTrajectory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasOdomTrajectory() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::Trajectory::Reader PlanningStatusInfo::Reader::getOdomTrajectory() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::Trajectory::Builder PlanningStatusInfo::Builder::getOdomTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::Trajectory::Pipeline PlanningStatusInfo::Pipeline::getOdomTrajectory() {
  return  ::senseAD::msg::avp_planning::Trajectory::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setOdomTrajectory( ::senseAD::msg::avp_planning::Trajectory::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::Trajectory::Builder PlanningStatusInfo::Builder::initOdomTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptOdomTrajectory(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::Trajectory> PlanningStatusInfo::Builder::disownOdomTrajectory() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::Trajectory>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool PlanningStatusInfo::Reader::hasParkingInAlignSet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool PlanningStatusInfo::Builder::hasParkingInAlignSet() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader PlanningStatusInfo::Reader::getParkingInAlignSet() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder PlanningStatusInfo::Builder::getParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline PlanningStatusInfo::Pipeline::getParkingInAlignSet() {
  return  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Pipeline(_typeless.getPointerField(16));
}
#endif  // !CAPNP_LITE
inline void PlanningStatusInfo::Builder::setParkingInAlignSet( ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup::Builder PlanningStatusInfo::Builder::initParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void PlanningStatusInfo::Builder::adoptParkingInAlignSet(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup> PlanningStatusInfo::Builder::disownParkingInAlignSet() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ParkingInAlignGroup>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

