// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: planning_aeb.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(daf0e83fd5b4e4fc);
CAPNP_DECLARE_SCHEMA(b61eab7654e98ee6);
CAPNP_DECLARE_SCHEMA(848b6def9b0c59c4);
CAPNP_DECLARE_SCHEMA(eab5ccbdf8228e1d);
CAPNP_DECLARE_SCHEMA(e4150953c4daa974);
CAPNP_DECLARE_SCHEMA(e0be6e5b9498675a);
CAPNP_DECLARE_SCHEMA(d14127a70645ae04);
CAPNP_DECLARE_SCHEMA(ef91cc5547a951ec);
CAPNP_DECLARE_SCHEMA(bbbd86d0ef3cb4fa);
CAPNP_DECLARE_SCHEMA(be6b9684774c19f4);
CAPNP_DECLARE_SCHEMA(c837ffa7b859a810);
CAPNP_DECLARE_SCHEMA(fda3cb44d496f99f);
CAPNP_DECLARE_SCHEMA(b6a084c97df815d2);
CAPNP_DECLARE_SCHEMA(d8388563d1f7cae1);
CAPNP_DECLARE_SCHEMA(a9dbab2865369b30);
CAPNP_DECLARE_SCHEMA(c8240814ba0287c9);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_planning {

struct AEBRequest {
  AEBRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daf0e83fd5b4e4fc, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AEBDebugInfo {
  AEBDebugInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b61eab7654e98ee6, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AebMode {
  AebMode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(848b6def9b0c59c4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AebOdFactor {
  AebOdFactor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eab5ccbdf8228e1d, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AebUssFactor {
  AebUssFactor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4150953c4daa974, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UssDistance {
  UssDistance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0be6e5b9498675a, 16, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AebVisualization {
  AebVisualization() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d14127a70645ae04, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleMsgs {
  VehicleMsgs() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef91cc5547a951ec, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObsCubMsgs {
  ObsCubMsgs() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbbd86d0ef3cb4fa, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ObsCylMsgs {
  ObsCylMsgs() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be6b9684774c19f4, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EgoPose {
  EgoPose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c837ffa7b859a810, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EgoPoseExtend {
  EgoPoseExtend() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fda3cb44d496f99f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EgoPredictionPose {
  EgoPredictionPose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6a084c97df815d2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EgoPredictionPoseExtend {
  EgoPredictionPoseExtend() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8388563d1f7cae1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GeoCenter {
  GeoCenter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9dbab2865369b30, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WheelBaseCenter {
  WheelBaseCenter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8240814ba0287c9, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AEBRequest::Reader {
public:
  typedef AEBRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool getEnabled() const;

  inline double getAcc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AEBRequest::Builder {
public:
  typedef AEBRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline double getAcc();
  inline void setAcc(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AEBRequest::Pipeline {
public:
  typedef AEBRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AEBDebugInfo::Reader {
public:
  typedef AEBDebugInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool getAebFlag() const;

  inline bool hasAebMode() const;
  inline  ::senseAD::msg::avp_planning::AebMode::Reader getAebMode() const;

  inline bool hasAebOdFactor() const;
  inline  ::senseAD::msg::avp_planning::AebOdFactor::Reader getAebOdFactor() const;

  inline bool hasAebUssFactor() const;
  inline  ::senseAD::msg::avp_planning::AebUssFactor::Reader getAebUssFactor() const;

  inline bool hasAebVisualization() const;
  inline  ::senseAD::msg::avp_planning::AebVisualization::Reader getAebVisualization() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AEBDebugInfo::Builder {
public:
  typedef AEBDebugInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool getAebFlag();
  inline void setAebFlag(bool value);

  inline bool hasAebMode();
  inline  ::senseAD::msg::avp_planning::AebMode::Builder getAebMode();
  inline void setAebMode( ::senseAD::msg::avp_planning::AebMode::Reader value);
  inline  ::senseAD::msg::avp_planning::AebMode::Builder initAebMode();
  inline void adoptAebMode(::capnp::Orphan< ::senseAD::msg::avp_planning::AebMode>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebMode> disownAebMode();

  inline bool hasAebOdFactor();
  inline  ::senseAD::msg::avp_planning::AebOdFactor::Builder getAebOdFactor();
  inline void setAebOdFactor( ::senseAD::msg::avp_planning::AebOdFactor::Reader value);
  inline  ::senseAD::msg::avp_planning::AebOdFactor::Builder initAebOdFactor();
  inline void adoptAebOdFactor(::capnp::Orphan< ::senseAD::msg::avp_planning::AebOdFactor>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebOdFactor> disownAebOdFactor();

  inline bool hasAebUssFactor();
  inline  ::senseAD::msg::avp_planning::AebUssFactor::Builder getAebUssFactor();
  inline void setAebUssFactor( ::senseAD::msg::avp_planning::AebUssFactor::Reader value);
  inline  ::senseAD::msg::avp_planning::AebUssFactor::Builder initAebUssFactor();
  inline void adoptAebUssFactor(::capnp::Orphan< ::senseAD::msg::avp_planning::AebUssFactor>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebUssFactor> disownAebUssFactor();

  inline bool hasAebVisualization();
  inline  ::senseAD::msg::avp_planning::AebVisualization::Builder getAebVisualization();
  inline void setAebVisualization( ::senseAD::msg::avp_planning::AebVisualization::Reader value);
  inline  ::senseAD::msg::avp_planning::AebVisualization::Builder initAebVisualization();
  inline void adoptAebVisualization(::capnp::Orphan< ::senseAD::msg::avp_planning::AebVisualization>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebVisualization> disownAebVisualization();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AEBDebugInfo::Pipeline {
public:
  typedef AEBDebugInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_planning::AebMode::Pipeline getAebMode();
  inline  ::senseAD::msg::avp_planning::AebOdFactor::Pipeline getAebOdFactor();
  inline  ::senseAD::msg::avp_planning::AebUssFactor::Pipeline getAebUssFactor();
  inline  ::senseAD::msg::avp_planning::AebVisualization::Pipeline getAebVisualization();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AebMode::Reader {
public:
  typedef AebMode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getAebUss() const;

  inline bool getAebOd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AebMode::Builder {
public:
  typedef AebMode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getAebUss();
  inline void setAebUss(bool value);

  inline bool getAebOd();
  inline void setAebOd(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AebMode::Pipeline {
public:
  typedef AebMode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AebOdFactor::Reader {
public:
  typedef AebOdFactor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCollision() const;

  inline  ::uint8_t getCollisionIndex() const;

  inline bool getTimeEnable() const;

  inline bool getSEnable() const;

  inline double getTimeBrake() const;

  inline double getTimeEmergency() const;

  inline double getTimeBuff() const;

  inline double getTimeSafe() const;

  inline double getStopS() const;

  inline double getEmergencyBrakeDistance() const;

  inline double getPredictionSumDist() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AebOdFactor::Builder {
public:
  typedef AebOdFactor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCollision();
  inline void setCollision(bool value);

  inline  ::uint8_t getCollisionIndex();
  inline void setCollisionIndex( ::uint8_t value);

  inline bool getTimeEnable();
  inline void setTimeEnable(bool value);

  inline bool getSEnable();
  inline void setSEnable(bool value);

  inline double getTimeBrake();
  inline void setTimeBrake(double value);

  inline double getTimeEmergency();
  inline void setTimeEmergency(double value);

  inline double getTimeBuff();
  inline void setTimeBuff(double value);

  inline double getTimeSafe();
  inline void setTimeSafe(double value);

  inline double getStopS();
  inline void setStopS(double value);

  inline double getEmergencyBrakeDistance();
  inline void setEmergencyBrakeDistance(double value);

  inline double getPredictionSumDist();
  inline void setPredictionSumDist(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AebOdFactor::Pipeline {
public:
  typedef AebOdFactor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AebUssFactor::Reader {
public:
  typedef AebUssFactor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCollision() const;

  inline  ::uint8_t getUssLable() const;

  inline bool hasUssDistance() const;
  inline  ::senseAD::msg::avp_planning::UssDistance::Reader getUssDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AebUssFactor::Builder {
public:
  typedef AebUssFactor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCollision();
  inline void setCollision(bool value);

  inline  ::uint8_t getUssLable();
  inline void setUssLable( ::uint8_t value);

  inline bool hasUssDistance();
  inline  ::senseAD::msg::avp_planning::UssDistance::Builder getUssDistance();
  inline void setUssDistance( ::senseAD::msg::avp_planning::UssDistance::Reader value);
  inline  ::senseAD::msg::avp_planning::UssDistance::Builder initUssDistance();
  inline void adoptUssDistance(::capnp::Orphan< ::senseAD::msg::avp_planning::UssDistance>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::UssDistance> disownUssDistance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AebUssFactor::Pipeline {
public:
  typedef AebUssFactor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::UssDistance::Pipeline getUssDistance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UssDistance::Reader {
public:
  typedef UssDistance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getFrontMin() const;

  inline double getRearMin() const;

  inline double getLeftMin() const;

  inline double getRightMin() const;

  inline double getFrontLeftLeft() const;

  inline double getFrontLeftMid() const;

  inline double getFrontRightMid() const;

  inline double getFrontRightRight() const;

  inline double getRearLeftLeft() const;

  inline double getRearLeftMid() const;

  inline double getRearRightMid() const;

  inline double getRearRightRight() const;

  inline double getLeftFront() const;

  inline double getLeftRear() const;

  inline double getRightFront() const;

  inline double getRightRear() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UssDistance::Builder {
public:
  typedef UssDistance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getFrontMin();
  inline void setFrontMin(double value);

  inline double getRearMin();
  inline void setRearMin(double value);

  inline double getLeftMin();
  inline void setLeftMin(double value);

  inline double getRightMin();
  inline void setRightMin(double value);

  inline double getFrontLeftLeft();
  inline void setFrontLeftLeft(double value);

  inline double getFrontLeftMid();
  inline void setFrontLeftMid(double value);

  inline double getFrontRightMid();
  inline void setFrontRightMid(double value);

  inline double getFrontRightRight();
  inline void setFrontRightRight(double value);

  inline double getRearLeftLeft();
  inline void setRearLeftLeft(double value);

  inline double getRearLeftMid();
  inline void setRearLeftMid(double value);

  inline double getRearRightMid();
  inline void setRearRightMid(double value);

  inline double getRearRightRight();
  inline void setRearRightRight(double value);

  inline double getLeftFront();
  inline void setLeftFront(double value);

  inline double getLeftRear();
  inline void setLeftRear(double value);

  inline double getRightFront();
  inline void setRightFront(double value);

  inline double getRightRear();
  inline void setRightRear(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UssDistance::Pipeline {
public:
  typedef UssDistance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AebVisualization::Reader {
public:
  typedef AebVisualization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEmergState() const;

  inline bool hasVehicleMsgs() const;
  inline  ::senseAD::msg::avp_planning::VehicleMsgs::Reader getVehicleMsgs() const;

  inline bool hasObsCubMsgs() const;
  inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Reader getObsCubMsgs() const;

  inline bool hasObsCylMsgs() const;
  inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Reader getObsCylMsgs() const;

  inline bool hasEgoPose() const;
  inline  ::senseAD::msg::avp_planning::EgoPose::Reader getEgoPose() const;

  inline bool hasEgoPoseExtend() const;
  inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Reader getEgoPoseExtend() const;

  inline bool hasEgoPredictionPose() const;
  inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Reader getEgoPredictionPose() const;

  inline bool hasEgoPredictionPoseExtend() const;
  inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Reader getEgoPredictionPoseExtend() const;

  inline  ::int8_t getMainState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AebVisualization::Builder {
public:
  typedef AebVisualization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEmergState();
  inline void setEmergState(bool value);

  inline bool hasVehicleMsgs();
  inline  ::senseAD::msg::avp_planning::VehicleMsgs::Builder getVehicleMsgs();
  inline void setVehicleMsgs( ::senseAD::msg::avp_planning::VehicleMsgs::Reader value);
  inline  ::senseAD::msg::avp_planning::VehicleMsgs::Builder initVehicleMsgs();
  inline void adoptVehicleMsgs(::capnp::Orphan< ::senseAD::msg::avp_planning::VehicleMsgs>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::VehicleMsgs> disownVehicleMsgs();

  inline bool hasObsCubMsgs();
  inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Builder getObsCubMsgs();
  inline void setObsCubMsgs( ::senseAD::msg::avp_planning::ObsCubMsgs::Reader value);
  inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Builder initObsCubMsgs();
  inline void adoptObsCubMsgs(::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCubMsgs>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCubMsgs> disownObsCubMsgs();

  inline bool hasObsCylMsgs();
  inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Builder getObsCylMsgs();
  inline void setObsCylMsgs( ::senseAD::msg::avp_planning::ObsCylMsgs::Reader value);
  inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Builder initObsCylMsgs();
  inline void adoptObsCylMsgs(::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCylMsgs>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCylMsgs> disownObsCylMsgs();

  inline bool hasEgoPose();
  inline  ::senseAD::msg::avp_planning::EgoPose::Builder getEgoPose();
  inline void setEgoPose( ::senseAD::msg::avp_planning::EgoPose::Reader value);
  inline  ::senseAD::msg::avp_planning::EgoPose::Builder initEgoPose();
  inline void adoptEgoPose(::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPose>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPose> disownEgoPose();

  inline bool hasEgoPoseExtend();
  inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Builder getEgoPoseExtend();
  inline void setEgoPoseExtend( ::senseAD::msg::avp_planning::EgoPoseExtend::Reader value);
  inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Builder initEgoPoseExtend();
  inline void adoptEgoPoseExtend(::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPoseExtend>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPoseExtend> disownEgoPoseExtend();

  inline bool hasEgoPredictionPose();
  inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Builder getEgoPredictionPose();
  inline void setEgoPredictionPose( ::senseAD::msg::avp_planning::EgoPredictionPose::Reader value);
  inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Builder initEgoPredictionPose();
  inline void adoptEgoPredictionPose(::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPose>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPose> disownEgoPredictionPose();

  inline bool hasEgoPredictionPoseExtend();
  inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Builder getEgoPredictionPoseExtend();
  inline void setEgoPredictionPoseExtend( ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Reader value);
  inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Builder initEgoPredictionPoseExtend();
  inline void adoptEgoPredictionPoseExtend(::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend> disownEgoPredictionPoseExtend();

  inline  ::int8_t getMainState();
  inline void setMainState( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AebVisualization::Pipeline {
public:
  typedef AebVisualization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::VehicleMsgs::Pipeline getVehicleMsgs();
  inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Pipeline getObsCubMsgs();
  inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Pipeline getObsCylMsgs();
  inline  ::senseAD::msg::avp_planning::EgoPose::Pipeline getEgoPose();
  inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Pipeline getEgoPoseExtend();
  inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Pipeline getEgoPredictionPose();
  inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Pipeline getEgoPredictionPoseExtend();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleMsgs::Reader {
public:
  typedef VehicleMsgs Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLength() const;

  inline double getWidth() const;

  inline double getLengthExtend() const;

  inline double getWidthExtend() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleMsgs::Builder {
public:
  typedef VehicleMsgs Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLength();
  inline void setLength(double value);

  inline double getWidth();
  inline void setWidth(double value);

  inline double getLengthExtend();
  inline void setLengthExtend(double value);

  inline double getWidthExtend();
  inline void setWidthExtend(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleMsgs::Pipeline {
public:
  typedef VehicleMsgs Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObsCubMsgs::Reader {
public:
  typedef ObsCubMsgs Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCollision() const;

  inline double getX() const;

  inline double getY() const;

  inline double getTheta() const;

  inline double getLength() const;

  inline double getWidth() const;

  inline double getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObsCubMsgs::Builder {
public:
  typedef ObsCubMsgs Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCollision();
  inline void setCollision(bool value);

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getTheta();
  inline void setTheta(double value);

  inline double getLength();
  inline void setLength(double value);

  inline double getWidth();
  inline void setWidth(double value);

  inline double getId();
  inline void setId(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObsCubMsgs::Pipeline {
public:
  typedef ObsCubMsgs Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ObsCylMsgs::Reader {
public:
  typedef ObsCylMsgs Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCollision() const;

  inline double getX() const;

  inline double getY() const;

  inline double getRadius() const;

  inline double getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ObsCylMsgs::Builder {
public:
  typedef ObsCylMsgs Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getCollision();
  inline void setCollision(bool value);

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getRadius();
  inline void setRadius(double value);

  inline double getId();
  inline void setId(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ObsCylMsgs::Pipeline {
public:
  typedef ObsCylMsgs Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EgoPose::Reader {
public:
  typedef EgoPose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter() const;
  inline  ::senseAD::msg::avp_planning::GeoCenter::Reader getGeoCenter() const;

  inline bool hasWheelBaseCenter() const;
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader getWheelBaseCenter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EgoPose::Builder {
public:
  typedef EgoPose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter();
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder getGeoCenter();
  inline void setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder initGeoCenter();
  inline void adoptGeoCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> disownGeoCenter();

  inline bool hasWheelBaseCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder getWheelBaseCenter();
  inline void setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder initWheelBaseCenter();
  inline void adoptWheelBaseCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> disownWheelBaseCenter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EgoPose::Pipeline {
public:
  typedef EgoPose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline getGeoCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline getWheelBaseCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EgoPoseExtend::Reader {
public:
  typedef EgoPoseExtend Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter() const;
  inline  ::senseAD::msg::avp_planning::GeoCenter::Reader getGeoCenter() const;

  inline bool hasWheelBaseCenter() const;
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader getWheelBaseCenter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EgoPoseExtend::Builder {
public:
  typedef EgoPoseExtend Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter();
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder getGeoCenter();
  inline void setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder initGeoCenter();
  inline void adoptGeoCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> disownGeoCenter();

  inline bool hasWheelBaseCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder getWheelBaseCenter();
  inline void setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder initWheelBaseCenter();
  inline void adoptWheelBaseCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> disownWheelBaseCenter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EgoPoseExtend::Pipeline {
public:
  typedef EgoPoseExtend Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline getGeoCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline getWheelBaseCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EgoPredictionPose::Reader {
public:
  typedef EgoPredictionPose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter() const;
  inline  ::senseAD::msg::avp_planning::GeoCenter::Reader getGeoCenter() const;

  inline bool hasWheelBaseCenter() const;
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader getWheelBaseCenter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EgoPredictionPose::Builder {
public:
  typedef EgoPredictionPose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter();
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder getGeoCenter();
  inline void setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder initGeoCenter();
  inline void adoptGeoCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> disownGeoCenter();

  inline bool hasWheelBaseCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder getWheelBaseCenter();
  inline void setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder initWheelBaseCenter();
  inline void adoptWheelBaseCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> disownWheelBaseCenter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EgoPredictionPose::Pipeline {
public:
  typedef EgoPredictionPose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline getGeoCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline getWheelBaseCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EgoPredictionPoseExtend::Reader {
public:
  typedef EgoPredictionPoseExtend Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter() const;
  inline  ::senseAD::msg::avp_planning::GeoCenter::Reader getGeoCenter() const;

  inline bool hasWheelBaseCenter() const;
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader getWheelBaseCenter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EgoPredictionPoseExtend::Builder {
public:
  typedef EgoPredictionPoseExtend Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGeoCenter();
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder getGeoCenter();
  inline void setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::GeoCenter::Builder initGeoCenter();
  inline void adoptGeoCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> disownGeoCenter();

  inline bool hasWheelBaseCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder getWheelBaseCenter();
  inline void setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value);
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder initWheelBaseCenter();
  inline void adoptWheelBaseCenter(::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> disownWheelBaseCenter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EgoPredictionPoseExtend::Pipeline {
public:
  typedef EgoPredictionPoseExtend Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline getGeoCenter();
  inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline getWheelBaseCenter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GeoCenter::Reader {
public:
  typedef GeoCenter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getTheta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GeoCenter::Builder {
public:
  typedef GeoCenter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getTheta();
  inline void setTheta(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GeoCenter::Pipeline {
public:
  typedef GeoCenter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WheelBaseCenter::Reader {
public:
  typedef WheelBaseCenter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getTheta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WheelBaseCenter::Builder {
public:
  typedef WheelBaseCenter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getTheta();
  inline void setTheta(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WheelBaseCenter::Pipeline {
public:
  typedef WheelBaseCenter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AEBRequest::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AEBRequest::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AEBRequest::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AEBRequest::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AEBRequest::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AEBRequest::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AEBRequest::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AEBRequest::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AEBRequest::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AEBRequest::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AEBRequest::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AEBRequest::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double AEBRequest::Reader::getAcc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double AEBRequest::Builder::getAcc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AEBRequest::Builder::setAcc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AEBDebugInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AEBDebugInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AEBDebugInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AEBDebugInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AEBDebugInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AEBDebugInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AEBDebugInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AEBDebugInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AEBDebugInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AEBDebugInfo::Reader::getAebFlag() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AEBDebugInfo::Builder::getAebFlag() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AEBDebugInfo::Builder::setAebFlag(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AEBDebugInfo::Reader::hasAebMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AEBDebugInfo::Builder::hasAebMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AebMode::Reader AEBDebugInfo::Reader::getAebMode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AebMode::Builder AEBDebugInfo::Builder::getAebMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AebMode::Pipeline AEBDebugInfo::Pipeline::getAebMode() {
  return  ::senseAD::msg::avp_planning::AebMode::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AEBDebugInfo::Builder::setAebMode( ::senseAD::msg::avp_planning::AebMode::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AebMode::Builder AEBDebugInfo::Builder::initAebMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AEBDebugInfo::Builder::adoptAebMode(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AebMode>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebMode> AEBDebugInfo::Builder::disownAebMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebMode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AEBDebugInfo::Reader::hasAebOdFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AEBDebugInfo::Builder::hasAebOdFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AebOdFactor::Reader AEBDebugInfo::Reader::getAebOdFactor() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AebOdFactor::Builder AEBDebugInfo::Builder::getAebOdFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AebOdFactor::Pipeline AEBDebugInfo::Pipeline::getAebOdFactor() {
  return  ::senseAD::msg::avp_planning::AebOdFactor::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AEBDebugInfo::Builder::setAebOdFactor( ::senseAD::msg::avp_planning::AebOdFactor::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AebOdFactor::Builder AEBDebugInfo::Builder::initAebOdFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AEBDebugInfo::Builder::adoptAebOdFactor(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AebOdFactor>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebOdFactor> AEBDebugInfo::Builder::disownAebOdFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebOdFactor>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AEBDebugInfo::Reader::hasAebUssFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AEBDebugInfo::Builder::hasAebUssFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AebUssFactor::Reader AEBDebugInfo::Reader::getAebUssFactor() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AebUssFactor::Builder AEBDebugInfo::Builder::getAebUssFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AebUssFactor::Pipeline AEBDebugInfo::Pipeline::getAebUssFactor() {
  return  ::senseAD::msg::avp_planning::AebUssFactor::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AEBDebugInfo::Builder::setAebUssFactor( ::senseAD::msg::avp_planning::AebUssFactor::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AebUssFactor::Builder AEBDebugInfo::Builder::initAebUssFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AEBDebugInfo::Builder::adoptAebUssFactor(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AebUssFactor>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebUssFactor> AEBDebugInfo::Builder::disownAebUssFactor() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebUssFactor>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AEBDebugInfo::Reader::hasAebVisualization() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AEBDebugInfo::Builder::hasAebVisualization() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::AebVisualization::Reader AEBDebugInfo::Reader::getAebVisualization() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::AebVisualization::Builder AEBDebugInfo::Builder::getAebVisualization() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::AebVisualization::Pipeline AEBDebugInfo::Pipeline::getAebVisualization() {
  return  ::senseAD::msg::avp_planning::AebVisualization::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AEBDebugInfo::Builder::setAebVisualization( ::senseAD::msg::avp_planning::AebVisualization::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::AebVisualization::Builder AEBDebugInfo::Builder::initAebVisualization() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AEBDebugInfo::Builder::adoptAebVisualization(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::AebVisualization>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::AebVisualization> AEBDebugInfo::Builder::disownAebVisualization() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::AebVisualization>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AebMode::Reader::getAebUss() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AebMode::Builder::getAebUss() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AebMode::Builder::setAebUss(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AebMode::Reader::getAebOd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool AebMode::Builder::getAebOd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebMode::Builder::setAebOd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AebOdFactor::Reader::getCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AebOdFactor::Builder::getCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AebOdFactor::Reader::getCollisionIndex() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AebOdFactor::Builder::getCollisionIndex() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setCollisionIndex( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AebOdFactor::Reader::getTimeEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool AebOdFactor::Builder::getTimeEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setTimeEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AebOdFactor::Reader::getSEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool AebOdFactor::Builder::getSEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setSEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getTimeBrake() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getTimeBrake() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setTimeBrake(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getTimeEmergency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getTimeEmergency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setTimeEmergency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getTimeBuff() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getTimeBuff() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setTimeBuff(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getTimeSafe() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getTimeSafe() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setTimeSafe(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getStopS() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getStopS() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setStopS(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getEmergencyBrakeDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getEmergencyBrakeDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setEmergencyBrakeDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double AebOdFactor::Reader::getPredictionSumDist() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double AebOdFactor::Builder::getPredictionSumDist() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AebOdFactor::Builder::setPredictionSumDist(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AebUssFactor::Reader::getCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AebUssFactor::Builder::getCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AebUssFactor::Builder::setCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AebUssFactor::Reader::getUssLable() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AebUssFactor::Builder::getUssLable() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebUssFactor::Builder::setUssLable( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AebUssFactor::Reader::hasUssDistance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AebUssFactor::Builder::hasUssDistance() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::UssDistance::Reader AebUssFactor::Reader::getUssDistance() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::UssDistance::Builder AebUssFactor::Builder::getUssDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::UssDistance::Pipeline AebUssFactor::Pipeline::getUssDistance() {
  return  ::senseAD::msg::avp_planning::UssDistance::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AebUssFactor::Builder::setUssDistance( ::senseAD::msg::avp_planning::UssDistance::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::UssDistance::Builder AebUssFactor::Builder::initUssDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AebUssFactor::Builder::adoptUssDistance(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::UssDistance>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::UssDistance> AebUssFactor::Builder::disownUssDistance() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::UssDistance>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double UssDistance::Reader::getFrontMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getFrontMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setFrontMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRearMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRearMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRearMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getLeftMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getLeftMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setLeftMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRightMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRightMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRightMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getFrontLeftLeft() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getFrontLeftLeft() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setFrontLeftLeft(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getFrontLeftMid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getFrontLeftMid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setFrontLeftMid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getFrontRightMid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getFrontRightMid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setFrontRightMid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getFrontRightRight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getFrontRightRight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setFrontRightRight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRearLeftLeft() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRearLeftLeft() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRearLeftLeft(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRearLeftMid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRearLeftMid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRearLeftMid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRearRightMid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRearRightMid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRearRightMid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRearRightRight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRearRightRight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRearRightRight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getLeftFront() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getLeftFront() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setLeftFront(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getLeftRear() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getLeftRear() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setLeftRear(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRightFront() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRightFront() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRightFront(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double UssDistance::Reader::getRightRear() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double UssDistance::Builder::getRightRear() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void UssDistance::Builder::setRightRear(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline bool AebVisualization::Reader::getEmergState() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AebVisualization::Builder::getEmergState() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AebVisualization::Builder::setEmergState(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AebVisualization::Reader::hasVehicleMsgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasVehicleMsgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::VehicleMsgs::Reader AebVisualization::Reader::getVehicleMsgs() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::VehicleMsgs::Builder AebVisualization::Builder::getVehicleMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::VehicleMsgs::Pipeline AebVisualization::Pipeline::getVehicleMsgs() {
  return  ::senseAD::msg::avp_planning::VehicleMsgs::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setVehicleMsgs( ::senseAD::msg::avp_planning::VehicleMsgs::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::VehicleMsgs::Builder AebVisualization::Builder::initVehicleMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptVehicleMsgs(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::VehicleMsgs>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::VehicleMsgs> AebVisualization::Builder::disownVehicleMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::VehicleMsgs>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasObsCubMsgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasObsCubMsgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Reader AebVisualization::Reader::getObsCubMsgs() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Builder AebVisualization::Builder::getObsCubMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Pipeline AebVisualization::Pipeline::getObsCubMsgs() {
  return  ::senseAD::msg::avp_planning::ObsCubMsgs::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setObsCubMsgs( ::senseAD::msg::avp_planning::ObsCubMsgs::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ObsCubMsgs::Builder AebVisualization::Builder::initObsCubMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptObsCubMsgs(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCubMsgs>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCubMsgs> AebVisualization::Builder::disownObsCubMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCubMsgs>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasObsCylMsgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasObsCylMsgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Reader AebVisualization::Reader::getObsCylMsgs() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Builder AebVisualization::Builder::getObsCylMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Pipeline AebVisualization::Pipeline::getObsCylMsgs() {
  return  ::senseAD::msg::avp_planning::ObsCylMsgs::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setObsCylMsgs( ::senseAD::msg::avp_planning::ObsCylMsgs::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::ObsCylMsgs::Builder AebVisualization::Builder::initObsCylMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptObsCylMsgs(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCylMsgs>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::ObsCylMsgs> AebVisualization::Builder::disownObsCylMsgs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::ObsCylMsgs>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasEgoPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasEgoPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::EgoPose::Reader AebVisualization::Reader::getEgoPose() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::EgoPose::Builder AebVisualization::Builder::getEgoPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::EgoPose::Pipeline AebVisualization::Pipeline::getEgoPose() {
  return  ::senseAD::msg::avp_planning::EgoPose::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setEgoPose( ::senseAD::msg::avp_planning::EgoPose::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::EgoPose::Builder AebVisualization::Builder::initEgoPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptEgoPose(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPose>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPose> AebVisualization::Builder::disownEgoPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPose>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasEgoPoseExtend() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasEgoPoseExtend() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Reader AebVisualization::Reader::getEgoPoseExtend() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Builder AebVisualization::Builder::getEgoPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Pipeline AebVisualization::Pipeline::getEgoPoseExtend() {
  return  ::senseAD::msg::avp_planning::EgoPoseExtend::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setEgoPoseExtend( ::senseAD::msg::avp_planning::EgoPoseExtend::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::EgoPoseExtend::Builder AebVisualization::Builder::initEgoPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptEgoPoseExtend(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPoseExtend>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPoseExtend> AebVisualization::Builder::disownEgoPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPoseExtend>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasEgoPredictionPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasEgoPredictionPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Reader AebVisualization::Reader::getEgoPredictionPose() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Builder AebVisualization::Builder::getEgoPredictionPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Pipeline AebVisualization::Pipeline::getEgoPredictionPose() {
  return  ::senseAD::msg::avp_planning::EgoPredictionPose::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setEgoPredictionPose( ::senseAD::msg::avp_planning::EgoPredictionPose::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPose::Builder AebVisualization::Builder::initEgoPredictionPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptEgoPredictionPose(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPose>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPose> AebVisualization::Builder::disownEgoPredictionPose() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPose>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool AebVisualization::Reader::hasEgoPredictionPoseExtend() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool AebVisualization::Builder::hasEgoPredictionPoseExtend() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Reader AebVisualization::Reader::getEgoPredictionPoseExtend() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Builder AebVisualization::Builder::getEgoPredictionPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Pipeline AebVisualization::Pipeline::getEgoPredictionPoseExtend() {
  return  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void AebVisualization::Builder::setEgoPredictionPoseExtend( ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::EgoPredictionPoseExtend::Builder AebVisualization::Builder::initEgoPredictionPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void AebVisualization::Builder::adoptEgoPredictionPoseExtend(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend> AebVisualization::Builder::disownEgoPredictionPoseExtend() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::EgoPredictionPoseExtend>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::int8_t AebVisualization::Reader::getMainState() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t AebVisualization::Builder::getMainState() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AebVisualization::Builder::setMainState( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double VehicleMsgs::Reader::getLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double VehicleMsgs::Builder::getLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VehicleMsgs::Builder::setLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double VehicleMsgs::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double VehicleMsgs::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VehicleMsgs::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double VehicleMsgs::Reader::getLengthExtend() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double VehicleMsgs::Builder::getLengthExtend() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VehicleMsgs::Builder::setLengthExtend(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double VehicleMsgs::Reader::getWidthExtend() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double VehicleMsgs::Builder::getWidthExtend() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VehicleMsgs::Builder::setWidthExtend(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ObsCubMsgs::Reader::getCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ObsCubMsgs::Builder::getCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double ObsCubMsgs::Reader::getId() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double ObsCubMsgs::Builder::getId() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ObsCubMsgs::Builder::setId(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ObsCylMsgs::Reader::getCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ObsCylMsgs::Builder::getCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ObsCylMsgs::Builder::setCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ObsCylMsgs::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ObsCylMsgs::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ObsCylMsgs::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ObsCylMsgs::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ObsCylMsgs::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ObsCylMsgs::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ObsCylMsgs::Reader::getRadius() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double ObsCylMsgs::Builder::getRadius() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ObsCylMsgs::Builder::setRadius(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double ObsCylMsgs::Reader::getId() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double ObsCylMsgs::Builder::getId() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ObsCylMsgs::Builder::setId(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool EgoPose::Reader::hasGeoCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPose::Builder::hasGeoCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Reader EgoPose::Reader::getGeoCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPose::Builder::getGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline EgoPose::Pipeline::getGeoCenter() {
  return  ::senseAD::msg::avp_planning::GeoCenter::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EgoPose::Builder::setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPose::Builder::initGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EgoPose::Builder::adoptGeoCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> EgoPose::Builder::disownGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EgoPose::Reader::hasWheelBaseCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPose::Builder::hasWheelBaseCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader EgoPose::Reader::getWheelBaseCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPose::Builder::getWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline EgoPose::Pipeline::getWheelBaseCenter() {
  return  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EgoPose::Builder::setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPose::Builder::initWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EgoPose::Builder::adoptWheelBaseCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> EgoPose::Builder::disownWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool EgoPoseExtend::Reader::hasGeoCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPoseExtend::Builder::hasGeoCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Reader EgoPoseExtend::Reader::getGeoCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPoseExtend::Builder::getGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline EgoPoseExtend::Pipeline::getGeoCenter() {
  return  ::senseAD::msg::avp_planning::GeoCenter::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EgoPoseExtend::Builder::setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPoseExtend::Builder::initGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EgoPoseExtend::Builder::adoptGeoCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> EgoPoseExtend::Builder::disownGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EgoPoseExtend::Reader::hasWheelBaseCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPoseExtend::Builder::hasWheelBaseCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader EgoPoseExtend::Reader::getWheelBaseCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPoseExtend::Builder::getWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline EgoPoseExtend::Pipeline::getWheelBaseCenter() {
  return  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EgoPoseExtend::Builder::setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPoseExtend::Builder::initWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EgoPoseExtend::Builder::adoptWheelBaseCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> EgoPoseExtend::Builder::disownWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool EgoPredictionPose::Reader::hasGeoCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPredictionPose::Builder::hasGeoCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Reader EgoPredictionPose::Reader::getGeoCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPredictionPose::Builder::getGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline EgoPredictionPose::Pipeline::getGeoCenter() {
  return  ::senseAD::msg::avp_planning::GeoCenter::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EgoPredictionPose::Builder::setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPredictionPose::Builder::initGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EgoPredictionPose::Builder::adoptGeoCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> EgoPredictionPose::Builder::disownGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EgoPredictionPose::Reader::hasWheelBaseCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPredictionPose::Builder::hasWheelBaseCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader EgoPredictionPose::Reader::getWheelBaseCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPredictionPose::Builder::getWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline EgoPredictionPose::Pipeline::getWheelBaseCenter() {
  return  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EgoPredictionPose::Builder::setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPredictionPose::Builder::initWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EgoPredictionPose::Builder::adoptWheelBaseCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> EgoPredictionPose::Builder::disownWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool EgoPredictionPoseExtend::Reader::hasGeoCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPredictionPoseExtend::Builder::hasGeoCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Reader EgoPredictionPoseExtend::Reader::getGeoCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPredictionPoseExtend::Builder::getGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::GeoCenter::Pipeline EgoPredictionPoseExtend::Pipeline::getGeoCenter() {
  return  ::senseAD::msg::avp_planning::GeoCenter::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EgoPredictionPoseExtend::Builder::setGeoCenter( ::senseAD::msg::avp_planning::GeoCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::GeoCenter::Builder EgoPredictionPoseExtend::Builder::initGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EgoPredictionPoseExtend::Builder::adoptGeoCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::GeoCenter> EgoPredictionPoseExtend::Builder::disownGeoCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::GeoCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EgoPredictionPoseExtend::Reader::hasWheelBaseCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EgoPredictionPoseExtend::Builder::hasWheelBaseCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Reader EgoPredictionPoseExtend::Reader::getWheelBaseCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPredictionPoseExtend::Builder::getWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline EgoPredictionPoseExtend::Pipeline::getWheelBaseCenter() {
  return  ::senseAD::msg::avp_planning::WheelBaseCenter::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EgoPredictionPoseExtend::Builder::setWheelBaseCenter( ::senseAD::msg::avp_planning::WheelBaseCenter::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_planning::WheelBaseCenter::Builder EgoPredictionPoseExtend::Builder::initWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EgoPredictionPoseExtend::Builder::adoptWheelBaseCenter(
    ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_planning::WheelBaseCenter> EgoPredictionPoseExtend::Builder::disownWheelBaseCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_planning::WheelBaseCenter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double GeoCenter::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double GeoCenter::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GeoCenter::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double GeoCenter::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double GeoCenter::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GeoCenter::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double GeoCenter::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double GeoCenter::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GeoCenter::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double WheelBaseCenter::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double WheelBaseCenter::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WheelBaseCenter::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double WheelBaseCenter::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double WheelBaseCenter::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WheelBaseCenter::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double WheelBaseCenter::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double WheelBaseCenter::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void WheelBaseCenter::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

