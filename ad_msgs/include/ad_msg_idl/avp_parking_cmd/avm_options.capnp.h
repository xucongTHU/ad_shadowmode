// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avm_options.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a8801d52b2ba7f97);
CAPNP_DECLARE_SCHEMA(a3866dcf03499e09);
enum class CameraID_a3866dcf03499e09: uint16_t {
  FRONT,
  REAR,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(CameraID, a3866dcf03499e09);
CAPNP_DECLARE_SCHEMA(d54fe4e351f44d3e);
CAPNP_DECLARE_SCHEMA(b1459671222380d6);
CAPNP_DECLARE_SCHEMA(dc61fe7173f034ca);
CAPNP_DECLARE_SCHEMA(9b9098380fc6aefd);
CAPNP_DECLARE_SCHEMA(a8e745fba741b402);
CAPNP_DECLARE_SCHEMA(ca8dc55c43c1d655);
CAPNP_DECLARE_SCHEMA(efb5cc16701aa9dd);
CAPNP_DECLARE_SCHEMA(a9403fc90f664c40);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_parking_cmd {

struct AvmOptions {
  AvmOptions() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CameraID_a3866dcf03499e09 CameraID;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8801d52b2ba7f97, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryParam {
  QueryParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d54fe4e351f44d3e, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeParam {
  ChangeParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1459671222380d6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvmOptionsRequest {
  AvmOptionsRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Param;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc61fe7173f034ca, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvmOptionsRequest::Param {
  Param() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    QUERY_PARAM,
    CHANGE_PARAM,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b9098380fc6aefd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueryResult {
  QueryResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8e745fba741b402, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeResult {
  ChangeResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca8dc55c43c1d655, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvmOptionsResponse {
  AvmOptionsResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Result;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(efb5cc16701aa9dd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AvmOptionsResponse::Result {
  Result() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    QUERY_RESULT,
    CHANGE_RESULT,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9403fc90f664c40, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AvmOptions::Reader {
public:
  typedef AvmOptions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getAvmEnable() const;

  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID getCameraID() const;

  inline bool getDynamicLineEnbale() const;

  inline bool getTransparentChassisEnable() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvmOptions::Builder {
public:
  typedef AvmOptions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getAvmEnable();
  inline void setAvmEnable(bool value);

  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID getCameraID();
  inline void setCameraID( ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID value);

  inline bool getDynamicLineEnbale();
  inline void setDynamicLineEnbale(bool value);

  inline bool getTransparentChassisEnable();
  inline void setTransparentChassisEnable(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvmOptions::Pipeline {
public:
  typedef AvmOptions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryParam::Reader {
public:
  typedef QueryParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryParam::Builder {
public:
  typedef QueryParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryParam::Pipeline {
public:
  typedef QueryParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeParam::Reader {
public:
  typedef ChangeParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOptions() const;
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader getOptions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeParam::Builder {
public:
  typedef ChangeParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOptions();
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder getOptions();
  inline void setOptions( ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder initOptions();
  inline void adoptOptions(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions> disownOptions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeParam::Pipeline {
public:
  typedef ChangeParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline getOptions();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvmOptionsRequest::Reader {
public:
  typedef AvmOptionsRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Param::Reader getParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvmOptionsRequest::Builder {
public:
  typedef AvmOptionsRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Param::Builder getParam();
  inline typename Param::Builder initParam();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvmOptionsRequest::Pipeline {
public:
  typedef AvmOptionsRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Param::Pipeline getParam();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvmOptionsRequest::Param::Reader {
public:
  typedef Param Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isQueryParam() const;
  inline bool hasQueryParam() const;
  inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Reader getQueryParam() const;

  inline bool isChangeParam() const;
  inline bool hasChangeParam() const;
  inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Reader getChangeParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvmOptionsRequest::Param::Builder {
public:
  typedef Param Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isQueryParam();
  inline bool hasQueryParam();
  inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Builder getQueryParam();
  inline void setQueryParam( ::senseAD::msg::avp_parking_cmd::QueryParam::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Builder initQueryParam();
  inline void adoptQueryParam(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryParam> disownQueryParam();

  inline bool isChangeParam();
  inline bool hasChangeParam();
  inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Builder getChangeParam();
  inline void setChangeParam( ::senseAD::msg::avp_parking_cmd::ChangeParam::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Builder initChangeParam();
  inline void adoptChangeParam(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeParam> disownChangeParam();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvmOptionsRequest::Param::Pipeline {
public:
  typedef Param Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryResult::Reader {
public:
  typedef QueryResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOptions() const;
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader getOptions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryResult::Builder {
public:
  typedef QueryResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOptions();
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder getOptions();
  inline void setOptions( ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder initOptions();
  inline void adoptOptions(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions> disownOptions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryResult::Pipeline {
public:
  typedef QueryResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline getOptions();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeResult::Reader {
public:
  typedef ChangeResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeResult::Builder {
public:
  typedef ChangeResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeResult::Pipeline {
public:
  typedef ChangeResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvmOptionsResponse::Reader {
public:
  typedef AvmOptionsResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

  inline typename Result::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvmOptionsResponse::Builder {
public:
  typedef AvmOptionsResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

  inline typename Result::Builder getResult();
  inline typename Result::Builder initResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvmOptionsResponse::Pipeline {
public:
  typedef AvmOptionsResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Result::Pipeline getResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AvmOptionsResponse::Result::Reader {
public:
  typedef Result Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isQueryResult() const;
  inline bool hasQueryResult() const;
  inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Reader getQueryResult() const;

  inline bool isChangeResult() const;
  inline bool hasChangeResult() const;
  inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Reader getChangeResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AvmOptionsResponse::Result::Builder {
public:
  typedef Result Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isQueryResult();
  inline bool hasQueryResult();
  inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Builder getQueryResult();
  inline void setQueryResult( ::senseAD::msg::avp_parking_cmd::QueryResult::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Builder initQueryResult();
  inline void adoptQueryResult(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryResult>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryResult> disownQueryResult();

  inline bool isChangeResult();
  inline bool hasChangeResult();
  inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Builder getChangeResult();
  inline void setChangeResult( ::senseAD::msg::avp_parking_cmd::ChangeResult::Reader value);
  inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Builder initChangeResult();
  inline void adoptChangeResult(::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeResult>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeResult> disownChangeResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AvmOptionsResponse::Result::Pipeline {
public:
  typedef Result Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AvmOptions::Reader::getAvmEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AvmOptions::Builder::getAvmEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvmOptions::Builder::setAvmEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID AvmOptions::Reader::getCameraID() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID AvmOptions::Builder::getCameraID() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AvmOptions::Builder::setCameraID( ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::AvmOptions::CameraID>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AvmOptions::Reader::getDynamicLineEnbale() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool AvmOptions::Builder::getDynamicLineEnbale() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AvmOptions::Builder::setDynamicLineEnbale(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AvmOptions::Reader::getTransparentChassisEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool AvmOptions::Builder::getTransparentChassisEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AvmOptions::Builder::setTransparentChassisEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ChangeParam::Reader::hasOptions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeParam::Builder::hasOptions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader ChangeParam::Reader::getOptions() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder ChangeParam::Builder::getOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline ChangeParam::Pipeline::getOptions() {
  return  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ChangeParam::Builder::setOptions( ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder ChangeParam::Builder::initOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeParam::Builder::adoptOptions(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions> ChangeParam::Builder::disownOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename AvmOptionsRequest::Param::Reader AvmOptionsRequest::Reader::getParam() const {
  return typename AvmOptionsRequest::Param::Reader(_reader);
}
inline typename AvmOptionsRequest::Param::Builder AvmOptionsRequest::Builder::getParam() {
  return typename AvmOptionsRequest::Param::Builder(_builder);
}
#if !CAPNP_LITE
inline typename AvmOptionsRequest::Param::Pipeline AvmOptionsRequest::Pipeline::getParam() {
  return typename AvmOptionsRequest::Param::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename AvmOptionsRequest::Param::Builder AvmOptionsRequest::Builder::initParam() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename AvmOptionsRequest::Param::Builder(_builder);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptionsRequest::Param::Which AvmOptionsRequest::Param::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptionsRequest::Param::Which AvmOptionsRequest::Param::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AvmOptionsRequest::Param::Reader::isQueryParam() const {
  return which() == AvmOptionsRequest::Param::QUERY_PARAM;
}
inline bool AvmOptionsRequest::Param::Builder::isQueryParam() {
  return which() == AvmOptionsRequest::Param::QUERY_PARAM;
}
inline bool AvmOptionsRequest::Param::Reader::hasQueryParam() const {
  if (which() != AvmOptionsRequest::Param::QUERY_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvmOptionsRequest::Param::Builder::hasQueryParam() {
  if (which() != AvmOptionsRequest::Param::QUERY_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Reader AvmOptionsRequest::Param::Reader::getQueryParam() const {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::QUERY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Builder AvmOptionsRequest::Param::Builder::getQueryParam() {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::QUERY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsRequest::Param::Builder::setQueryParam( ::senseAD::msg::avp_parking_cmd::QueryParam::Reader value) {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::QUERY_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::QueryParam::Builder AvmOptionsRequest::Param::Builder::initQueryParam() {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::QUERY_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsRequest::Param::Builder::adoptQueryParam(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryParam>&& value) {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::QUERY_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryParam> AvmOptionsRequest::Param::Builder::disownQueryParam() {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::QUERY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvmOptionsRequest::Param::Reader::isChangeParam() const {
  return which() == AvmOptionsRequest::Param::CHANGE_PARAM;
}
inline bool AvmOptionsRequest::Param::Builder::isChangeParam() {
  return which() == AvmOptionsRequest::Param::CHANGE_PARAM;
}
inline bool AvmOptionsRequest::Param::Reader::hasChangeParam() const {
  if (which() != AvmOptionsRequest::Param::CHANGE_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvmOptionsRequest::Param::Builder::hasChangeParam() {
  if (which() != AvmOptionsRequest::Param::CHANGE_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Reader AvmOptionsRequest::Param::Reader::getChangeParam() const {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::CHANGE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Builder AvmOptionsRequest::Param::Builder::getChangeParam() {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::CHANGE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsRequest::Param::Builder::setChangeParam( ::senseAD::msg::avp_parking_cmd::ChangeParam::Reader value) {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::CHANGE_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeParam::Builder AvmOptionsRequest::Param::Builder::initChangeParam() {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::CHANGE_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsRequest::Param::Builder::adoptChangeParam(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeParam>&& value) {
  _builder.setDataField<AvmOptionsRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AvmOptionsRequest::Param::CHANGE_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeParam> AvmOptionsRequest::Param::Builder::disownChangeParam() {
  KJ_IREQUIRE((which() == AvmOptionsRequest::Param::CHANGE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QueryResult::Reader::hasOptions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueryResult::Builder::hasOptions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader QueryResult::Reader::getOptions() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder QueryResult::Builder::getOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline QueryResult::Pipeline::getOptions() {
  return  ::senseAD::msg::avp_parking_cmd::AvmOptions::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void QueryResult::Builder::setOptions( ::senseAD::msg::avp_parking_cmd::AvmOptions::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptions::Builder QueryResult::Builder::initOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryResult::Builder::adoptOptions(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::AvmOptions> QueryResult::Builder::disownOptions() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::AvmOptions>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvmOptionsResponse::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AvmOptionsResponse::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AvmOptionsResponse::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename AvmOptionsResponse::Result::Reader AvmOptionsResponse::Reader::getResult() const {
  return typename AvmOptionsResponse::Result::Reader(_reader);
}
inline typename AvmOptionsResponse::Result::Builder AvmOptionsResponse::Builder::getResult() {
  return typename AvmOptionsResponse::Result::Builder(_builder);
}
#if !CAPNP_LITE
inline typename AvmOptionsResponse::Result::Pipeline AvmOptionsResponse::Pipeline::getResult() {
  return typename AvmOptionsResponse::Result::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename AvmOptionsResponse::Result::Builder AvmOptionsResponse::Builder::initResult() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename AvmOptionsResponse::Result::Builder(_builder);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptionsResponse::Result::Which AvmOptionsResponse::Result::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::msg::avp_parking_cmd::AvmOptionsResponse::Result::Which AvmOptionsResponse::Result::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool AvmOptionsResponse::Result::Reader::isQueryResult() const {
  return which() == AvmOptionsResponse::Result::QUERY_RESULT;
}
inline bool AvmOptionsResponse::Result::Builder::isQueryResult() {
  return which() == AvmOptionsResponse::Result::QUERY_RESULT;
}
inline bool AvmOptionsResponse::Result::Reader::hasQueryResult() const {
  if (which() != AvmOptionsResponse::Result::QUERY_RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvmOptionsResponse::Result::Builder::hasQueryResult() {
  if (which() != AvmOptionsResponse::Result::QUERY_RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Reader AvmOptionsResponse::Result::Reader::getQueryResult() const {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::QUERY_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Builder AvmOptionsResponse::Result::Builder::getQueryResult() {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::QUERY_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsResponse::Result::Builder::setQueryResult( ::senseAD::msg::avp_parking_cmd::QueryResult::Reader value) {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::QUERY_RESULT);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::QueryResult::Builder AvmOptionsResponse::Result::Builder::initQueryResult() {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::QUERY_RESULT);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsResponse::Result::Builder::adoptQueryResult(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryResult>&& value) {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::QUERY_RESULT);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::QueryResult> AvmOptionsResponse::Result::Builder::disownQueryResult() {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::QUERY_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::QueryResult>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AvmOptionsResponse::Result::Reader::isChangeResult() const {
  return which() == AvmOptionsResponse::Result::CHANGE_RESULT;
}
inline bool AvmOptionsResponse::Result::Builder::isChangeResult() {
  return which() == AvmOptionsResponse::Result::CHANGE_RESULT;
}
inline bool AvmOptionsResponse::Result::Reader::hasChangeResult() const {
  if (which() != AvmOptionsResponse::Result::CHANGE_RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AvmOptionsResponse::Result::Builder::hasChangeResult() {
  if (which() != AvmOptionsResponse::Result::CHANGE_RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Reader AvmOptionsResponse::Result::Reader::getChangeResult() const {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::CHANGE_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Builder AvmOptionsResponse::Result::Builder::getChangeResult() {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::CHANGE_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsResponse::Result::Builder::setChangeResult( ::senseAD::msg::avp_parking_cmd::ChangeResult::Reader value) {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::CHANGE_RESULT);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_parking_cmd::ChangeResult::Builder AvmOptionsResponse::Result::Builder::initChangeResult() {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::CHANGE_RESULT);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AvmOptionsResponse::Result::Builder::adoptChangeResult(
    ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeResult>&& value) {
  _builder.setDataField<AvmOptionsResponse::Result::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, AvmOptionsResponse::Result::CHANGE_RESULT);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_parking_cmd::ChangeResult> AvmOptionsResponse::Result::Builder::disownChangeResult() {
  KJ_IREQUIRE((which() == AvmOptionsResponse::Result::CHANGE_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_parking_cmd::ChangeResult>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

