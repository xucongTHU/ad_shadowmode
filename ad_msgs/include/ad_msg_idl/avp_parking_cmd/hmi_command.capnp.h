// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hmi_command.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(82ae583563afe0fe);
CAPNP_DECLARE_SCHEMA(eb5c3eb1ae941619);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_parking_cmd {

struct HMICommand {
  HMICommand() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82ae583563afe0fe, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HMICommandResponse {
  HMICommandResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb5c3eb1ae941619, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class HMICommand::Reader {
public:
  typedef HMICommand Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline bool getFlagPause() const;

  inline bool getFlagHppStudy() const;

  inline bool getFlagHpaCruise() const;

  inline bool getFlagAlongParking() const;

  inline bool getFlagFindParkingSpace() const;

  inline bool getFlagStartParking() const;

  inline bool getFlagSpaceParkingCal() const;

  inline bool getFlagUseAnonMap() const;

  inline bool getFlagResetSystem() const;

  inline bool getFlagResetSystemApa() const;

  inline bool getFlagResetSystemHpp() const;

  inline bool getFlagDeleteAnonMap() const;

  inline bool getFlagShowFsMask() const;

  inline bool getFlagSegmentation() const;

  inline bool getFlagDisplayOriginalIpm() const;

  inline bool getFlagHpaLoadDefaultMap() const;

  inline bool getFlagHpaSummon() const;

  inline bool getFlagHpsStudy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HMICommand::Builder {
public:
  typedef HMICommand Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool getFlagPause();
  inline void setFlagPause(bool value);

  inline bool getFlagHppStudy();
  inline void setFlagHppStudy(bool value);

  inline bool getFlagHpaCruise();
  inline void setFlagHpaCruise(bool value);

  inline bool getFlagAlongParking();
  inline void setFlagAlongParking(bool value);

  inline bool getFlagFindParkingSpace();
  inline void setFlagFindParkingSpace(bool value);

  inline bool getFlagStartParking();
  inline void setFlagStartParking(bool value);

  inline bool getFlagSpaceParkingCal();
  inline void setFlagSpaceParkingCal(bool value);

  inline bool getFlagUseAnonMap();
  inline void setFlagUseAnonMap(bool value);

  inline bool getFlagResetSystem();
  inline void setFlagResetSystem(bool value);

  inline bool getFlagResetSystemApa();
  inline void setFlagResetSystemApa(bool value);

  inline bool getFlagResetSystemHpp();
  inline void setFlagResetSystemHpp(bool value);

  inline bool getFlagDeleteAnonMap();
  inline void setFlagDeleteAnonMap(bool value);

  inline bool getFlagShowFsMask();
  inline void setFlagShowFsMask(bool value);

  inline bool getFlagSegmentation();
  inline void setFlagSegmentation(bool value);

  inline bool getFlagDisplayOriginalIpm();
  inline void setFlagDisplayOriginalIpm(bool value);

  inline bool getFlagHpaLoadDefaultMap();
  inline void setFlagHpaLoadDefaultMap(bool value);

  inline bool getFlagHpaSummon();
  inline void setFlagHpaSummon(bool value);

  inline bool getFlagHpsStudy();
  inline void setFlagHpsStudy(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HMICommand::Pipeline {
public:
  typedef HMICommand Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HMICommandResponse::Reader {
public:
  typedef HMICommandResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HMICommandResponse::Builder {
public:
  typedef HMICommandResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getOk();
  inline void setOk(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HMICommandResponse::Pipeline {
public:
  typedef HMICommandResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool HMICommand::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HMICommand::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader HMICommand::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder HMICommand::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline HMICommand::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HMICommand::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder HMICommand::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HMICommand::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> HMICommand::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t HMICommand::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t HMICommand::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagPause() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagPause() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagPause(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagHppStudy() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagHppStudy() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagHppStudy(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagHpaCruise() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagHpaCruise() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagHpaCruise(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagAlongParking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagAlongParking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagAlongParking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagFindParkingSpace() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagFindParkingSpace() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagFindParkingSpace(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagStartParking() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagStartParking() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagStartParking(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagSpaceParkingCal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagSpaceParkingCal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagSpaceParkingCal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagUseAnonMap() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagUseAnonMap() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagUseAnonMap(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagResetSystem() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagResetSystem() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagResetSystem(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<72>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagResetSystemApa() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagResetSystemApa() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagResetSystemApa(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<73>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagResetSystemHpp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagResetSystemHpp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagResetSystemHpp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<74>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagDeleteAnonMap() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagDeleteAnonMap() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagDeleteAnonMap(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<75>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagShowFsMask() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagShowFsMask() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagShowFsMask(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<76>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagSegmentation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagSegmentation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagSegmentation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<77>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagDisplayOriginalIpm() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagDisplayOriginalIpm() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagDisplayOriginalIpm(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<78>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagHpaLoadDefaultMap() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagHpaLoadDefaultMap() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagHpaLoadDefaultMap(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagHpaSummon() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagHpaSummon() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagHpaSummon(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommand::Reader::getFlagHpsStudy() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}

inline bool HMICommand::Builder::getFlagHpsStudy() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}
inline void HMICommand::Builder::setFlagHpsStudy(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS, value);
}

inline bool HMICommandResponse::Reader::getOk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool HMICommandResponse::Builder::getOk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HMICommandResponse::Builder::setOk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

