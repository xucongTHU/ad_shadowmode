// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: parking_cmd.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d3e67f3fa93e9754);
CAPNP_DECLARE_SCHEMA(b5cc960a473a3284);
CAPNP_DECLARE_SCHEMA(ff76af70231b4944);
enum class ParkingOutDirection_ff76af70231b4944: uint16_t {
  NONE,
  FRONT,
  FRONT_LEFT,
  FRONT_RIGHT,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(ParkingOutDirection, ff76af70231b4944);
CAPNP_DECLARE_SCHEMA(dfbe4bd818fe02b2);
CAPNP_DECLARE_SCHEMA(ec6a9f8d02830fa7);
CAPNP_DECLARE_SCHEMA(ec8bcba1c6300900);
enum class VehicleHeadingType_ec8bcba1c6300900: uint16_t {
  NONE,
  VEHICLE_HEAD,
  VEHICLE_TAIL,
};
CAPNP_DECLARE_ENUM(VehicleHeadingType, ec8bcba1c6300900);
CAPNP_DECLARE_SCHEMA(8241bbc95440ece7);
CAPNP_DECLARE_SCHEMA(ac6552535d30051c);
CAPNP_DECLARE_SCHEMA(88ab8004ccd2c614);
enum class ParkingInAlignType_88ab8004ccd2c614: uint16_t {
  NONE,
  CENTER,
  LEFT,
  RIGHT,
};
CAPNP_DECLARE_ENUM(ParkingInAlignType, 88ab8004ccd2c614);
CAPNP_DECLARE_SCHEMA(f2cb6c9564f8c3fe);
CAPNP_DECLARE_SCHEMA(ce041e98d6e0ed78);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_parking_cmd {

struct ParkingCMD {
  ParkingCMD() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3e67f3fa93e9754, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingCMDResponse {
  ParkingCMDResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5cc960a473a3284, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::ParkingOutDirection_ff76af70231b4944 ParkingOutDirection;

struct ParkingOutDirectionRequest {
  ParkingOutDirectionRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfbe4bd818fe02b2, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingOutDirectionResponse {
  ParkingOutDirectionResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec6a9f8d02830fa7, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::VehicleHeadingType_ec8bcba1c6300900 VehicleHeadingType;

struct ParkingInType {
  ParkingInType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8241bbc95440ece7, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingInDirection {
  ParkingInDirection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac6552535d30051c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::ParkingInAlignType_88ab8004ccd2c614 ParkingInAlignType;

struct ParkingInAlignItem {
  ParkingInAlignItem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2cb6c9564f8c3fe, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingInAlignGroup {
  ParkingInAlignGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce041e98d6e0ed78, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ParkingCMD::Reader {
public:
  typedef ParkingCMD Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingCMD::Builder {
public:
  typedef ParkingCMD Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingCMD::Pipeline {
public:
  typedef ParkingCMD Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingCMDResponse::Reader {
public:
  typedef ParkingCMDResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingCMDResponse::Builder {
public:
  typedef ParkingCMDResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getOk();
  inline void setOk(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingCMDResponse::Pipeline {
public:
  typedef ParkingCMDResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingOutDirectionRequest::Reader {
public:
  typedef ParkingOutDirectionRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getDirection() const;

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getDirectionTail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingOutDirectionRequest::Builder {
public:
  typedef ParkingOutDirectionRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getDirection();
  inline void setDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value);

  inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection getDirectionTail();
  inline void setDirectionTail( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingOutDirectionRequest::Pipeline {
public:
  typedef ParkingOutDirectionRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingOutDirectionResponse::Reader {
public:
  typedef ParkingOutDirectionResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingOutDirectionResponse::Builder {
public:
  typedef ParkingOutDirectionResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getOk();
  inline void setOk(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingOutDirectionResponse::Pipeline {
public:
  typedef ParkingOutDirectionResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingInType::Reader {
public:
  typedef ParkingInType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_parking_cmd::VehicleHeadingType getParkingInType() const;

  inline bool getRecommendation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingInType::Builder {
public:
  typedef ParkingInType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_parking_cmd::VehicleHeadingType getParkingInType();
  inline void setParkingInType( ::senseAD::msg::avp_parking_cmd::VehicleHeadingType value);

  inline bool getRecommendation();
  inline void setRecommendation(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingInType::Pipeline {
public:
  typedef ParkingInType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingInDirection::Reader {
public:
  typedef ParkingInDirection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId() const;

  inline bool hasDirection() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Reader getDirection() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingInDirection::Builder {
public:
  typedef ParkingInDirection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId();
  inline void setReqId( ::uint64_t value);

  inline bool hasDirection();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Builder getDirection();
  inline void setDirection( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Builder initDirection(unsigned int size);
  inline void adoptDirection(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>> disownDirection();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingInDirection::Pipeline {
public:
  typedef ParkingInDirection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingInAlignItem::Reader {
public:
  typedef ParkingInAlignItem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignType getParkingInAlign() const;

  inline bool getActive() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingInAlignItem::Builder {
public:
  typedef ParkingInAlignItem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignType getParkingInAlign();
  inline void setParkingInAlign( ::senseAD::msg::avp_parking_cmd::ParkingInAlignType value);

  inline bool getActive();
  inline void setActive(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingInAlignItem::Pipeline {
public:
  typedef ParkingInAlignItem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingInAlignGroup::Reader {
public:
  typedef ParkingInAlignGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId() const;

  inline bool hasAligns() const;
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Reader getAligns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingInAlignGroup::Builder {
public:
  typedef ParkingInAlignGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getReqId();
  inline void setReqId( ::uint64_t value);

  inline bool hasAligns();
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Builder getAligns();
  inline void setAligns( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Builder initAligns(unsigned int size);
  inline void adoptAligns(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>> disownAligns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingInAlignGroup::Pipeline {
public:
  typedef ParkingInAlignGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ParkingCMD::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingCMD::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ParkingCMD::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingCMD::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ParkingCMD::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingCMD::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingCMD::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingCMD::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ParkingCMD::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ParkingCMD::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingCMD::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingCMD::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ParkingCMD::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 18446744073709551615ull);
}

inline  ::uint64_t ParkingCMD::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 18446744073709551615ull);
}
inline void ParkingCMD::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 18446744073709551615ull);
}

inline bool ParkingCMDResponse::Reader::getOk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ParkingCMDResponse::Builder::getOk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingCMDResponse::Builder::setOk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingOutDirectionRequest::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingOutDirectionRequest::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ParkingOutDirectionRequest::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingOutDirectionRequest::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ParkingOutDirectionRequest::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingOutDirectionRequest::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingOutDirectionRequest::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingOutDirectionRequest::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ParkingOutDirectionRequest::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ParkingOutDirectionRequest::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingOutDirectionRequest::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingOutDirectionRequest::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection ParkingOutDirectionRequest::Reader::getDirection() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection ParkingOutDirectionRequest::Builder::getDirection() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ParkingOutDirectionRequest::Builder::setDirection( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection ParkingOutDirectionRequest::Reader::getDirectionTail() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingOutDirection ParkingOutDirectionRequest::Builder::getDirectionTail() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ParkingOutDirectionRequest::Builder::setDirectionTail( ::senseAD::msg::avp_parking_cmd::ParkingOutDirection value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::ParkingOutDirection>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingOutDirectionResponse::Reader::getOk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ParkingOutDirectionResponse::Builder::getOk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingOutDirectionResponse::Builder::setOk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_parking_cmd::VehicleHeadingType ParkingInType::Reader::getParkingInType() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::VehicleHeadingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::VehicleHeadingType ParkingInType::Builder::getParkingInType() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::VehicleHeadingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingInType::Builder::setParkingInType( ::senseAD::msg::avp_parking_cmd::VehicleHeadingType value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::VehicleHeadingType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingInType::Reader::getRecommendation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool ParkingInType::Builder::getRecommendation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ParkingInType::Builder::setRecommendation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ParkingInDirection::Reader::getReqId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingInDirection::Builder::getReqId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingInDirection::Builder::setReqId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingInDirection::Reader::hasDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingInDirection::Builder::hasDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Reader ParkingInDirection::Reader::getDirection() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Builder ParkingInDirection::Builder::getDirection() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingInDirection::Builder::setDirection( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>::Builder ParkingInDirection::Builder::initDirection(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ParkingInDirection::Builder::adoptDirection(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>> ParkingInDirection::Builder::disownDirection() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignType ParkingInAlignItem::Reader::getParkingInAlign() const {
  return _reader.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingInAlignType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_parking_cmd::ParkingInAlignType ParkingInAlignItem::Builder::getParkingInAlign() {
  return _builder.getDataField< ::senseAD::msg::avp_parking_cmd::ParkingInAlignType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingInAlignItem::Builder::setParkingInAlign( ::senseAD::msg::avp_parking_cmd::ParkingInAlignType value) {
  _builder.setDataField< ::senseAD::msg::avp_parking_cmd::ParkingInAlignType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingInAlignItem::Reader::getActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool ParkingInAlignItem::Builder::getActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ParkingInAlignItem::Builder::setActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ParkingInAlignGroup::Reader::getReqId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingInAlignGroup::Builder::getReqId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingInAlignGroup::Builder::setReqId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingInAlignGroup::Reader::hasAligns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingInAlignGroup::Builder::hasAligns() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Reader ParkingInAlignGroup::Reader::getAligns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Builder ParkingInAlignGroup::Builder::getAligns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingInAlignGroup::Builder::setAligns( ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>::Builder ParkingInAlignGroup::Builder::initAligns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ParkingInAlignGroup::Builder::adoptAligns(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>> ParkingInAlignGroup::Builder::disownAligns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_parking_cmd::ParkingInAlignItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

