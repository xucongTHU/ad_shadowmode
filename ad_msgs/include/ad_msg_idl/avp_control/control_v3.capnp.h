// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: control_v3.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_vehicle/vehicle.capnp.h>
#include <ad_msg_idl/avp_control/control_debug.capnp.h>
#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(aa5219641617e548);
CAPNP_DECLARE_SCHEMA(f4d3504490daba47);
CAPNP_DECLARE_SCHEMA(d62777bfc5da7d8c);
CAPNP_DECLARE_SCHEMA(8a26a24adf16b234);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_control {

struct ControlInnerWarning {
  ControlInnerWarning() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa5219641617e548, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlWarningOutput {
  ControlWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4d3504490daba47, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlStatus {
  ControlStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d62777bfc5da7d8c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ControlStatusInfo {
  ControlStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a26a24adf16b234, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ControlInnerWarning::Reader {
public:
  typedef ControlInnerWarning Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getBlockInSteerDoing() const;

  inline bool getBlockInStopDoing() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlInnerWarning::Builder {
public:
  typedef ControlInnerWarning Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getBlockInSteerDoing();
  inline void setBlockInSteerDoing(bool value);

  inline bool getBlockInStopDoing();
  inline void setBlockInStopDoing(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlInnerWarning::Pipeline {
public:
  typedef ControlInnerWarning Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlWarningOutput::Reader {
public:
  typedef ControlWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getDoorOpened() const;

  inline bool getFrontLidOpened() const;

  inline bool getRearLidOpened() const;

  inline bool getAbortWithUser() const;

  inline bool getAbortWithUserTakeOver() const;

  inline bool getAbortWithOverSpeed() const;

  inline bool getAbortWithEscActive() const;

  inline bool getAbortWithAssociateError() const;

  inline bool getAbortWithSensorError() const;

  inline bool getAbortWithHardwareError() const;

  inline bool getAbortWithSoftwareError() const;

  inline bool getAbortWithControlError() const;

  inline bool getDriverSeatBeltOpened() const;

  inline bool getRearMirrorFold() const;

  inline bool hasInnerWarning() const;
  inline  ::senseAD::msg::avp_control::ControlInnerWarning::Reader getInnerWarning() const;

  inline bool getChargeConnected() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlWarningOutput::Builder {
public:
  typedef ControlWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getDoorOpened();
  inline void setDoorOpened(bool value);

  inline bool getFrontLidOpened();
  inline void setFrontLidOpened(bool value);

  inline bool getRearLidOpened();
  inline void setRearLidOpened(bool value);

  inline bool getAbortWithUser();
  inline void setAbortWithUser(bool value);

  inline bool getAbortWithUserTakeOver();
  inline void setAbortWithUserTakeOver(bool value);

  inline bool getAbortWithOverSpeed();
  inline void setAbortWithOverSpeed(bool value);

  inline bool getAbortWithEscActive();
  inline void setAbortWithEscActive(bool value);

  inline bool getAbortWithAssociateError();
  inline void setAbortWithAssociateError(bool value);

  inline bool getAbortWithSensorError();
  inline void setAbortWithSensorError(bool value);

  inline bool getAbortWithHardwareError();
  inline void setAbortWithHardwareError(bool value);

  inline bool getAbortWithSoftwareError();
  inline void setAbortWithSoftwareError(bool value);

  inline bool getAbortWithControlError();
  inline void setAbortWithControlError(bool value);

  inline bool getDriverSeatBeltOpened();
  inline void setDriverSeatBeltOpened(bool value);

  inline bool getRearMirrorFold();
  inline void setRearMirrorFold(bool value);

  inline bool hasInnerWarning();
  inline  ::senseAD::msg::avp_control::ControlInnerWarning::Builder getInnerWarning();
  inline void setInnerWarning( ::senseAD::msg::avp_control::ControlInnerWarning::Reader value);
  inline  ::senseAD::msg::avp_control::ControlInnerWarning::Builder initInnerWarning();
  inline void adoptInnerWarning(::capnp::Orphan< ::senseAD::msg::avp_control::ControlInnerWarning>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlInnerWarning> disownInnerWarning();

  inline bool getChargeConnected();
  inline void setChargeConnected(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlWarningOutput::Pipeline {
public:
  typedef ControlWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::avp_control::ControlInnerWarning::Pipeline getInnerWarning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlStatus::Reader {
public:
  typedef ControlStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

  inline bool getHandShakeSuccessed() const;

  inline bool getHandShakeFailed() const;

  inline bool getControlSuspend() const;

  inline bool getControlAbort() const;

  inline bool getControlDriving() const;

  inline bool getControlDrivingDone() const;

  inline bool getControlStreering() const;

  inline bool getControlStreeringDone() const;

  inline bool getControlStoping() const;

  inline bool getControlStopingDone() const;

  inline float getVehicleSpeedMps() const;

  inline bool getVehicleStationary() const;

  inline bool getPedalApplied() const;

  inline  ::senseAD::msg::vehicle::GearCommand getActualGear() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlStatus::Builder {
public:
  typedef ControlStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

  inline bool getHandShakeSuccessed();
  inline void setHandShakeSuccessed(bool value);

  inline bool getHandShakeFailed();
  inline void setHandShakeFailed(bool value);

  inline bool getControlSuspend();
  inline void setControlSuspend(bool value);

  inline bool getControlAbort();
  inline void setControlAbort(bool value);

  inline bool getControlDriving();
  inline void setControlDriving(bool value);

  inline bool getControlDrivingDone();
  inline void setControlDrivingDone(bool value);

  inline bool getControlStreering();
  inline void setControlStreering(bool value);

  inline bool getControlStreeringDone();
  inline void setControlStreeringDone(bool value);

  inline bool getControlStoping();
  inline void setControlStoping(bool value);

  inline bool getControlStopingDone();
  inline void setControlStopingDone(bool value);

  inline float getVehicleSpeedMps();
  inline void setVehicleSpeedMps(float value);

  inline bool getVehicleStationary();
  inline void setVehicleStationary(bool value);

  inline bool getPedalApplied();
  inline void setPedalApplied(bool value);

  inline  ::senseAD::msg::vehicle::GearCommand getActualGear();
  inline void setActualGear( ::senseAD::msg::vehicle::GearCommand value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlStatus::Pipeline {
public:
  typedef ControlStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ControlStatusInfo::Reader {
public:
  typedef ControlStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMsgId() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline  ::uint64_t getAvpStatusUid() const;

  inline bool hasControlStatus() const;
  inline  ::senseAD::msg::avp_control::ControlStatus::Reader getControlStatus() const;

  inline bool hasControlWarnning() const;
  inline  ::senseAD::msg::avp_control::ControlWarningOutput::Reader getControlWarnning() const;

  inline bool hasControlDebug() const;
  inline  ::senseAD::msg::avp_control::ControlDebug::Reader getControlDebug() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlStatusInfo::Builder {
public:
  typedef ControlStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline  ::uint64_t getAvpStatusUid();
  inline void setAvpStatusUid( ::uint64_t value);

  inline bool hasControlStatus();
  inline  ::senseAD::msg::avp_control::ControlStatus::Builder getControlStatus();
  inline void setControlStatus( ::senseAD::msg::avp_control::ControlStatus::Reader value);
  inline  ::senseAD::msg::avp_control::ControlStatus::Builder initControlStatus();
  inline void adoptControlStatus(::capnp::Orphan< ::senseAD::msg::avp_control::ControlStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlStatus> disownControlStatus();

  inline bool hasControlWarnning();
  inline  ::senseAD::msg::avp_control::ControlWarningOutput::Builder getControlWarnning();
  inline void setControlWarnning( ::senseAD::msg::avp_control::ControlWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_control::ControlWarningOutput::Builder initControlWarnning();
  inline void adoptControlWarnning(::capnp::Orphan< ::senseAD::msg::avp_control::ControlWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlWarningOutput> disownControlWarnning();

  inline bool hasControlDebug();
  inline  ::senseAD::msg::avp_control::ControlDebug::Builder getControlDebug();
  inline void setControlDebug( ::senseAD::msg::avp_control::ControlDebug::Reader value);
  inline  ::senseAD::msg::avp_control::ControlDebug::Builder initControlDebug();
  inline void adoptControlDebug(::capnp::Orphan< ::senseAD::msg::avp_control::ControlDebug>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlDebug> disownControlDebug();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlStatusInfo::Pipeline {
public:
  typedef ControlStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_control::ControlStatus::Pipeline getControlStatus();
  inline  ::senseAD::msg::avp_control::ControlWarningOutput::Pipeline getControlWarnning();
  inline  ::senseAD::msg::avp_control::ControlDebug::Pipeline getControlDebug();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ControlInnerWarning::Reader::getBlockInSteerDoing() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlInnerWarning::Builder::getBlockInSteerDoing() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlInnerWarning::Builder::setBlockInSteerDoing(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ControlInnerWarning::Reader::getBlockInStopDoing() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlInnerWarning::Builder::getBlockInStopDoing() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlInnerWarning::Builder::setBlockInStopDoing(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getDoorOpened() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getDoorOpened() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setDoorOpened(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getFrontLidOpened() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getFrontLidOpened() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setFrontLidOpened(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getRearLidOpened() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getRearLidOpened() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setRearLidOpened(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithUser() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithUser() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithUser(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithUserTakeOver() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithUserTakeOver() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithUserTakeOver(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithOverSpeed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithOverSpeed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithOverSpeed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithEscActive() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithEscActive() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithEscActive(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithAssociateError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithAssociateError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithAssociateError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithSensorError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithSensorError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithSensorError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithHardwareError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithHardwareError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithHardwareError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithSoftwareError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithSoftwareError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithSoftwareError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getAbortWithControlError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getAbortWithControlError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setAbortWithControlError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getDriverSeatBeltOpened() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getDriverSeatBeltOpened() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setDriverSeatBeltOpened(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::getRearMirrorFold() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getRearMirrorFold() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setRearMirrorFold(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool ControlWarningOutput::Reader::hasInnerWarning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlWarningOutput::Builder::hasInnerWarning() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::ControlInnerWarning::Reader ControlWarningOutput::Reader::getInnerWarning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::ControlInnerWarning::Builder ControlWarningOutput::Builder::getInnerWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_control::ControlInnerWarning::Pipeline ControlWarningOutput::Pipeline::getInnerWarning() {
  return  ::senseAD::msg::avp_control::ControlInnerWarning::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ControlWarningOutput::Builder::setInnerWarning( ::senseAD::msg::avp_control::ControlInnerWarning::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::ControlInnerWarning::Builder ControlWarningOutput::Builder::initInnerWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlWarningOutput::Builder::adoptInnerWarning(
    ::capnp::Orphan< ::senseAD::msg::avp_control::ControlInnerWarning>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlInnerWarning> ControlWarningOutput::Builder::disownInnerWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlInnerWarning>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ControlWarningOutput::Reader::getChargeConnected() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool ControlWarningOutput::Builder::getChargeConnected() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ControlWarningOutput::Builder::setChargeConnected(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getHandShakeSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getHandShakeSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setHandShakeSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getHandShakeFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getHandShakeFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setHandShakeFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlSuspend() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlSuspend() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlSuspend(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlAbort() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlAbort() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlAbort(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlDriving() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlDriving() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlDriving(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlDrivingDone() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlDrivingDone() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlDrivingDone(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlStreering() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlStreering() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlStreering(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlStreeringDone() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlStreeringDone() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlStreeringDone(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlStoping() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlStoping() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlStoping(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getControlStopingDone() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getControlStopingDone() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setControlStopingDone(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float ControlStatus::Reader::getVehicleSpeedMps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ControlStatus::Builder::getVehicleSpeedMps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setVehicleSpeedMps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getVehicleStationary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getVehicleStationary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setVehicleStationary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatus::Reader::getPedalApplied() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool ControlStatus::Builder::getPedalApplied() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setPedalApplied(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::GearCommand ControlStatus::Reader::getActualGear() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::GearCommand ControlStatus::Builder::getActualGear() {
  return _builder.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlStatus::Builder::setActualGear( ::senseAD::msg::vehicle::GearCommand value) {
  _builder.setDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ControlStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ControlStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ControlStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ControlStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ControlStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ControlStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t ControlStatusInfo::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlStatusInfo::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlStatusInfo::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus ControlStatusInfo::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus ControlStatusInfo::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlStatusInfo::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ControlStatusInfo::Reader::getAvpStatusUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ControlStatusInfo::Builder::getAvpStatusUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlStatusInfo::Builder::setAvpStatusUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ControlStatusInfo::Reader::hasControlStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ControlStatusInfo::Builder::hasControlStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::ControlStatus::Reader ControlStatusInfo::Reader::getControlStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::ControlStatus::Builder ControlStatusInfo::Builder::getControlStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_control::ControlStatus::Pipeline ControlStatusInfo::Pipeline::getControlStatus() {
  return  ::senseAD::msg::avp_control::ControlStatus::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ControlStatusInfo::Builder::setControlStatus( ::senseAD::msg::avp_control::ControlStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::ControlStatus::Builder ControlStatusInfo::Builder::initControlStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ControlStatusInfo::Builder::adoptControlStatus(
    ::capnp::Orphan< ::senseAD::msg::avp_control::ControlStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlStatus> ControlStatusInfo::Builder::disownControlStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ControlStatusInfo::Reader::hasControlWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ControlStatusInfo::Builder::hasControlWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::ControlWarningOutput::Reader ControlStatusInfo::Reader::getControlWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::ControlWarningOutput::Builder ControlStatusInfo::Builder::getControlWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_control::ControlWarningOutput::Pipeline ControlStatusInfo::Pipeline::getControlWarnning() {
  return  ::senseAD::msg::avp_control::ControlWarningOutput::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ControlStatusInfo::Builder::setControlWarnning( ::senseAD::msg::avp_control::ControlWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::ControlWarningOutput::Builder ControlStatusInfo::Builder::initControlWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ControlStatusInfo::Builder::adoptControlWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_control::ControlWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlWarningOutput> ControlStatusInfo::Builder::disownControlWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ControlStatusInfo::Reader::hasControlDebug() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ControlStatusInfo::Builder::hasControlDebug() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::ControlDebug::Reader ControlStatusInfo::Reader::getControlDebug() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::ControlDebug::Builder ControlStatusInfo::Builder::getControlDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_control::ControlDebug::Pipeline ControlStatusInfo::Pipeline::getControlDebug() {
  return  ::senseAD::msg::avp_control::ControlDebug::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ControlStatusInfo::Builder::setControlDebug( ::senseAD::msg::avp_control::ControlDebug::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::ControlDebug::Builder ControlStatusInfo::Builder::initControlDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ControlStatusInfo::Builder::adoptControlDebug(
    ::capnp::Orphan< ::senseAD::msg::avp_control::ControlDebug>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::ControlDebug> ControlStatusInfo::Builder::disownControlDebug() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ControlDebug>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

