// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: control_debug.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fcf4b379a1b61256);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_control {

struct ControlDebug {
  ControlDebug() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcf4b379a1b61256, 130, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ControlDebug::Reader {
public:
  typedef ControlDebug Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline double getMpcTrajectoryIndex() const;

  inline double getMpcUtmx() const;

  inline double getMpcUtmy() const;

  inline double getMpcAngleOffset() const;

  inline double getMpcDeltaU() const;

  inline double getMpcDeltaULimit() const;

  inline double getMpcCalculateTimeMs() const;

  inline double getFrontWheelLastTime() const;

  inline double getSteerLimit() const;

  inline double getSigmaCmd() const;

  inline double getTrajectoryStartIndexLat() const;

  inline double getTrajectoryStartIndexLatDelay() const;

  inline double getTrajectoryStartIndexLatPreview() const;

  inline double getTgtPosX() const;

  inline double getTgtPosY() const;

  inline double getLatPidOut() const;

  inline double getLatTotalErr() const;

  inline double getTgtFrontRearAngle() const;

  inline double getLatPidMax() const;

  inline double getLatPidMin() const;

  inline double getLatPidI() const;

  inline double getImax() const;

  inline double getImin() const;

  inline double getPosTimeIndex() const;

  inline double getVelTimeIndex() const;

  inline double getAccTimeIndex() const;

  inline double getVelI() const;

  inline double getAccFb() const;

  inline double getAccFf() const;

  inline double getGravityCompen() const;

  inline double getVelFf() const;

  inline double getVelFb() const;

  inline double getVelCmd() const;

  inline double getAccCmd() const;

  inline double getAccCompenCmdBfFilter() const;

  inline double getAccCompenCmdAfFilter() const;

  inline double getAccErr() const;

  inline double getAccI() const;

  inline double getSteerAngleCmd() const;

  inline double getThrottleCmd() const;

  inline double getBrakeCmd() const;

  inline  ::uint32_t getGearCmd() const;

  inline  ::int32_t getTurnSignalCmd() const;

  inline double getHeadingError() const;

  inline double getHeadingErrorDelay() const;

  inline double getHeadingErrorPreview() const;

  inline double getLatDistanceError() const;

  inline double getLatDistanceErrorDelay() const;

  inline double getLatDistanceErrorPreview() const;

  inline double getLatYawRateError() const;

  inline double getLatYawRateErrorDelay() const;

  inline double getLatYawRateErrorPreview() const;

  inline double getLonDistanceError() const;

  inline double getVelError() const;

  inline double getStopDisErr() const;

  inline  ::uint32_t getStopPointIndex() const;

  inline  ::uint32_t getExceedStopPointFlag() const;

  inline double getUtmPosX() const;

  inline double getUtmPosY() const;

  inline double getUtmVelX() const;

  inline double getUtmVelY() const;

  inline double getUtmAccX() const;

  inline double getUtmAccY() const;

  inline double getUtmRoll() const;

  inline double getUtmPitch() const;

  inline double getUtmPitchFilter() const;

  inline double getUtmHeading() const;

  inline double getVehicleVelX() const;

  inline double getVehicleAccX() const;

  inline double getVehicleAccY() const;

  inline double getVehicleAngularYawRate() const;

  inline double getVehicleSteerAngle() const;

  inline double getVehicleThrottle() const;

  inline double getVehicleBrake() const;

  inline  ::uint32_t getVehicleGear() const;

  inline  ::uint32_t getVehicleTurnLight() const;

  inline  ::uint32_t getVehicleAutoEnable() const;

  inline  ::uint32_t getVehicleAccEnable() const;

  inline  ::uint32_t getVehicleBrakeEnable() const;

  inline  ::uint32_t getVehicleSteerEnable() const;

  inline  ::uint32_t getVehicleFlDoorState() const;

  inline  ::uint32_t getVehicleFrDoorState() const;

  inline  ::uint32_t getVehicleRlDoorState() const;

  inline  ::uint32_t getVehicleRrDoorState() const;

  inline  ::uint32_t getVehicleTrunkDoorState() const;

  inline  ::uint32_t getTrajectoryLength() const;

  inline  ::uint32_t getTrajRealstateUpdate() const;

  inline  ::uint32_t getVehicleCurrentState() const;

  inline double getTgtHeading() const;

  inline double getTgtHeadingDelay() const;

  inline double getTgtHeadingPreview() const;

  inline double getDeviationHeading() const;

  inline double getAdaptiveHeading() const;

  inline double getOriginHeading() const;

  inline double getMaxCurvature() const;

  inline double getWeightYawRateErr() const;

  inline double getAdrcTdVel() const;

  inline double getAdrcTdVelDot() const;

  inline double getAdrcObsEsoZ1() const;

  inline double getAdrcObsEsoZ2() const;

  inline double getAdrcObsEsoZ3() const;

  inline double getAdrcComputerU1() const;

  inline double getAdrcComputerU2() const;

  inline double getAdrcComputerU3() const;

  inline double getAdrcComputerU() const;

  inline double getAdrcFhan() const;

  inline double getTrajCurMax() const;

  inline double getTrajCurMin() const;

  inline double getTrajCurRateMid() const;

  inline double getTrajCurRateHigh() const;

  inline double getTrajCurRateHigher() const;

  inline double getTrajCurRateFlag() const;

  inline double getTrajCurSteerAngleMinIndex() const;

  inline double getTrajCurSteerAngleMaxIndex() const;

  inline double getTrajCurDeltaSteerAngleIndex() const;

  inline double getParkingPointA() const;

  inline double getParkingPointB() const;

  inline double getParkingPointC() const;

  inline double getParkingPointD() const;

  inline double getParkingPointParallelA() const;

  inline double getParkingPointParallelB() const;

  inline double getIntersectionPointLineTraj() const;

  inline double getSpeedObserver() const;

  inline double getSlope() const;

  inline double getSlopeCompensate() const;

  inline double getPadeXi() const;

  inline double getDistancePreview() const;

  inline double getMotorSpeed2Vel() const;

  inline double getLatWheelAngleFf() const;

  inline double getLatWheelAngleFb() const;

  inline double getLatOutput() const;

  inline double getStandbyLog1() const;

  inline double getStandbyLog2() const;

  inline  ::uint32_t getTurnSteerDecision() const;

  inline  ::uint32_t getTurnSteerDecisionLast() const;

  inline double getTrajSumDistance() const;

  inline double getLatHeadingErrFb() const;

  inline double getLatDistErrFb() const;

  inline double getParkStopDist() const;

  inline double getTorqueCmd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ControlDebug::Builder {
public:
  typedef ControlDebug Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline double getMpcTrajectoryIndex();
  inline void setMpcTrajectoryIndex(double value);

  inline double getMpcUtmx();
  inline void setMpcUtmx(double value);

  inline double getMpcUtmy();
  inline void setMpcUtmy(double value);

  inline double getMpcAngleOffset();
  inline void setMpcAngleOffset(double value);

  inline double getMpcDeltaU();
  inline void setMpcDeltaU(double value);

  inline double getMpcDeltaULimit();
  inline void setMpcDeltaULimit(double value);

  inline double getMpcCalculateTimeMs();
  inline void setMpcCalculateTimeMs(double value);

  inline double getFrontWheelLastTime();
  inline void setFrontWheelLastTime(double value);

  inline double getSteerLimit();
  inline void setSteerLimit(double value);

  inline double getSigmaCmd();
  inline void setSigmaCmd(double value);

  inline double getTrajectoryStartIndexLat();
  inline void setTrajectoryStartIndexLat(double value);

  inline double getTrajectoryStartIndexLatDelay();
  inline void setTrajectoryStartIndexLatDelay(double value);

  inline double getTrajectoryStartIndexLatPreview();
  inline void setTrajectoryStartIndexLatPreview(double value);

  inline double getTgtPosX();
  inline void setTgtPosX(double value);

  inline double getTgtPosY();
  inline void setTgtPosY(double value);

  inline double getLatPidOut();
  inline void setLatPidOut(double value);

  inline double getLatTotalErr();
  inline void setLatTotalErr(double value);

  inline double getTgtFrontRearAngle();
  inline void setTgtFrontRearAngle(double value);

  inline double getLatPidMax();
  inline void setLatPidMax(double value);

  inline double getLatPidMin();
  inline void setLatPidMin(double value);

  inline double getLatPidI();
  inline void setLatPidI(double value);

  inline double getImax();
  inline void setImax(double value);

  inline double getImin();
  inline void setImin(double value);

  inline double getPosTimeIndex();
  inline void setPosTimeIndex(double value);

  inline double getVelTimeIndex();
  inline void setVelTimeIndex(double value);

  inline double getAccTimeIndex();
  inline void setAccTimeIndex(double value);

  inline double getVelI();
  inline void setVelI(double value);

  inline double getAccFb();
  inline void setAccFb(double value);

  inline double getAccFf();
  inline void setAccFf(double value);

  inline double getGravityCompen();
  inline void setGravityCompen(double value);

  inline double getVelFf();
  inline void setVelFf(double value);

  inline double getVelFb();
  inline void setVelFb(double value);

  inline double getVelCmd();
  inline void setVelCmd(double value);

  inline double getAccCmd();
  inline void setAccCmd(double value);

  inline double getAccCompenCmdBfFilter();
  inline void setAccCompenCmdBfFilter(double value);

  inline double getAccCompenCmdAfFilter();
  inline void setAccCompenCmdAfFilter(double value);

  inline double getAccErr();
  inline void setAccErr(double value);

  inline double getAccI();
  inline void setAccI(double value);

  inline double getSteerAngleCmd();
  inline void setSteerAngleCmd(double value);

  inline double getThrottleCmd();
  inline void setThrottleCmd(double value);

  inline double getBrakeCmd();
  inline void setBrakeCmd(double value);

  inline  ::uint32_t getGearCmd();
  inline void setGearCmd( ::uint32_t value);

  inline  ::int32_t getTurnSignalCmd();
  inline void setTurnSignalCmd( ::int32_t value);

  inline double getHeadingError();
  inline void setHeadingError(double value);

  inline double getHeadingErrorDelay();
  inline void setHeadingErrorDelay(double value);

  inline double getHeadingErrorPreview();
  inline void setHeadingErrorPreview(double value);

  inline double getLatDistanceError();
  inline void setLatDistanceError(double value);

  inline double getLatDistanceErrorDelay();
  inline void setLatDistanceErrorDelay(double value);

  inline double getLatDistanceErrorPreview();
  inline void setLatDistanceErrorPreview(double value);

  inline double getLatYawRateError();
  inline void setLatYawRateError(double value);

  inline double getLatYawRateErrorDelay();
  inline void setLatYawRateErrorDelay(double value);

  inline double getLatYawRateErrorPreview();
  inline void setLatYawRateErrorPreview(double value);

  inline double getLonDistanceError();
  inline void setLonDistanceError(double value);

  inline double getVelError();
  inline void setVelError(double value);

  inline double getStopDisErr();
  inline void setStopDisErr(double value);

  inline  ::uint32_t getStopPointIndex();
  inline void setStopPointIndex( ::uint32_t value);

  inline  ::uint32_t getExceedStopPointFlag();
  inline void setExceedStopPointFlag( ::uint32_t value);

  inline double getUtmPosX();
  inline void setUtmPosX(double value);

  inline double getUtmPosY();
  inline void setUtmPosY(double value);

  inline double getUtmVelX();
  inline void setUtmVelX(double value);

  inline double getUtmVelY();
  inline void setUtmVelY(double value);

  inline double getUtmAccX();
  inline void setUtmAccX(double value);

  inline double getUtmAccY();
  inline void setUtmAccY(double value);

  inline double getUtmRoll();
  inline void setUtmRoll(double value);

  inline double getUtmPitch();
  inline void setUtmPitch(double value);

  inline double getUtmPitchFilter();
  inline void setUtmPitchFilter(double value);

  inline double getUtmHeading();
  inline void setUtmHeading(double value);

  inline double getVehicleVelX();
  inline void setVehicleVelX(double value);

  inline double getVehicleAccX();
  inline void setVehicleAccX(double value);

  inline double getVehicleAccY();
  inline void setVehicleAccY(double value);

  inline double getVehicleAngularYawRate();
  inline void setVehicleAngularYawRate(double value);

  inline double getVehicleSteerAngle();
  inline void setVehicleSteerAngle(double value);

  inline double getVehicleThrottle();
  inline void setVehicleThrottle(double value);

  inline double getVehicleBrake();
  inline void setVehicleBrake(double value);

  inline  ::uint32_t getVehicleGear();
  inline void setVehicleGear( ::uint32_t value);

  inline  ::uint32_t getVehicleTurnLight();
  inline void setVehicleTurnLight( ::uint32_t value);

  inline  ::uint32_t getVehicleAutoEnable();
  inline void setVehicleAutoEnable( ::uint32_t value);

  inline  ::uint32_t getVehicleAccEnable();
  inline void setVehicleAccEnable( ::uint32_t value);

  inline  ::uint32_t getVehicleBrakeEnable();
  inline void setVehicleBrakeEnable( ::uint32_t value);

  inline  ::uint32_t getVehicleSteerEnable();
  inline void setVehicleSteerEnable( ::uint32_t value);

  inline  ::uint32_t getVehicleFlDoorState();
  inline void setVehicleFlDoorState( ::uint32_t value);

  inline  ::uint32_t getVehicleFrDoorState();
  inline void setVehicleFrDoorState( ::uint32_t value);

  inline  ::uint32_t getVehicleRlDoorState();
  inline void setVehicleRlDoorState( ::uint32_t value);

  inline  ::uint32_t getVehicleRrDoorState();
  inline void setVehicleRrDoorState( ::uint32_t value);

  inline  ::uint32_t getVehicleTrunkDoorState();
  inline void setVehicleTrunkDoorState( ::uint32_t value);

  inline  ::uint32_t getTrajectoryLength();
  inline void setTrajectoryLength( ::uint32_t value);

  inline  ::uint32_t getTrajRealstateUpdate();
  inline void setTrajRealstateUpdate( ::uint32_t value);

  inline  ::uint32_t getVehicleCurrentState();
  inline void setVehicleCurrentState( ::uint32_t value);

  inline double getTgtHeading();
  inline void setTgtHeading(double value);

  inline double getTgtHeadingDelay();
  inline void setTgtHeadingDelay(double value);

  inline double getTgtHeadingPreview();
  inline void setTgtHeadingPreview(double value);

  inline double getDeviationHeading();
  inline void setDeviationHeading(double value);

  inline double getAdaptiveHeading();
  inline void setAdaptiveHeading(double value);

  inline double getOriginHeading();
  inline void setOriginHeading(double value);

  inline double getMaxCurvature();
  inline void setMaxCurvature(double value);

  inline double getWeightYawRateErr();
  inline void setWeightYawRateErr(double value);

  inline double getAdrcTdVel();
  inline void setAdrcTdVel(double value);

  inline double getAdrcTdVelDot();
  inline void setAdrcTdVelDot(double value);

  inline double getAdrcObsEsoZ1();
  inline void setAdrcObsEsoZ1(double value);

  inline double getAdrcObsEsoZ2();
  inline void setAdrcObsEsoZ2(double value);

  inline double getAdrcObsEsoZ3();
  inline void setAdrcObsEsoZ3(double value);

  inline double getAdrcComputerU1();
  inline void setAdrcComputerU1(double value);

  inline double getAdrcComputerU2();
  inline void setAdrcComputerU2(double value);

  inline double getAdrcComputerU3();
  inline void setAdrcComputerU3(double value);

  inline double getAdrcComputerU();
  inline void setAdrcComputerU(double value);

  inline double getAdrcFhan();
  inline void setAdrcFhan(double value);

  inline double getTrajCurMax();
  inline void setTrajCurMax(double value);

  inline double getTrajCurMin();
  inline void setTrajCurMin(double value);

  inline double getTrajCurRateMid();
  inline void setTrajCurRateMid(double value);

  inline double getTrajCurRateHigh();
  inline void setTrajCurRateHigh(double value);

  inline double getTrajCurRateHigher();
  inline void setTrajCurRateHigher(double value);

  inline double getTrajCurRateFlag();
  inline void setTrajCurRateFlag(double value);

  inline double getTrajCurSteerAngleMinIndex();
  inline void setTrajCurSteerAngleMinIndex(double value);

  inline double getTrajCurSteerAngleMaxIndex();
  inline void setTrajCurSteerAngleMaxIndex(double value);

  inline double getTrajCurDeltaSteerAngleIndex();
  inline void setTrajCurDeltaSteerAngleIndex(double value);

  inline double getParkingPointA();
  inline void setParkingPointA(double value);

  inline double getParkingPointB();
  inline void setParkingPointB(double value);

  inline double getParkingPointC();
  inline void setParkingPointC(double value);

  inline double getParkingPointD();
  inline void setParkingPointD(double value);

  inline double getParkingPointParallelA();
  inline void setParkingPointParallelA(double value);

  inline double getParkingPointParallelB();
  inline void setParkingPointParallelB(double value);

  inline double getIntersectionPointLineTraj();
  inline void setIntersectionPointLineTraj(double value);

  inline double getSpeedObserver();
  inline void setSpeedObserver(double value);

  inline double getSlope();
  inline void setSlope(double value);

  inline double getSlopeCompensate();
  inline void setSlopeCompensate(double value);

  inline double getPadeXi();
  inline void setPadeXi(double value);

  inline double getDistancePreview();
  inline void setDistancePreview(double value);

  inline double getMotorSpeed2Vel();
  inline void setMotorSpeed2Vel(double value);

  inline double getLatWheelAngleFf();
  inline void setLatWheelAngleFf(double value);

  inline double getLatWheelAngleFb();
  inline void setLatWheelAngleFb(double value);

  inline double getLatOutput();
  inline void setLatOutput(double value);

  inline double getStandbyLog1();
  inline void setStandbyLog1(double value);

  inline double getStandbyLog2();
  inline void setStandbyLog2(double value);

  inline  ::uint32_t getTurnSteerDecision();
  inline void setTurnSteerDecision( ::uint32_t value);

  inline  ::uint32_t getTurnSteerDecisionLast();
  inline void setTurnSteerDecisionLast( ::uint32_t value);

  inline double getTrajSumDistance();
  inline void setTrajSumDistance(double value);

  inline double getLatHeadingErrFb();
  inline void setLatHeadingErrFb(double value);

  inline double getLatDistErrFb();
  inline void setLatDistErrFb(double value);

  inline double getParkStopDist();
  inline void setParkStopDist(double value);

  inline double getTorqueCmd();
  inline void setTorqueCmd(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ControlDebug::Pipeline {
public:
  typedef ControlDebug Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ControlDebug::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ControlDebug::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ControlDebug::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ControlDebug::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ControlDebug::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ControlDebug::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ControlDebug::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ControlDebug::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ControlDebug::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double ControlDebug::Reader::getMpcTrajectoryIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcTrajectoryIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcTrajectoryIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcUtmx() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcUtmx() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcUtmx(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcUtmy() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcUtmy() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcUtmy(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcAngleOffset() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcAngleOffset() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcAngleOffset(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcDeltaU() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcDeltaU() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcDeltaU(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcDeltaULimit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcDeltaULimit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcDeltaULimit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMpcCalculateTimeMs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMpcCalculateTimeMs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMpcCalculateTimeMs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getFrontWheelLastTime() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getFrontWheelLastTime() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setFrontWheelLastTime(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSteerLimit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSteerLimit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSteerLimit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSigmaCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSigmaCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSigmaCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajectoryStartIndexLat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajectoryStartIndexLat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajectoryStartIndexLat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajectoryStartIndexLatDelay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajectoryStartIndexLatDelay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajectoryStartIndexLatDelay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajectoryStartIndexLatPreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajectoryStartIndexLatPreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajectoryStartIndexLatPreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtPosX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtPosX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtPosX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtPosY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtPosY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtPosY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatPidOut() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatPidOut() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatPidOut(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatTotalErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatTotalErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatTotalErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtFrontRearAngle() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtFrontRearAngle() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtFrontRearAngle(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatPidMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatPidMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatPidMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatPidMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatPidMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatPidMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatPidI() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatPidI() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatPidI(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getImax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getImax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setImax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getImin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getImin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setImin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getPosTimeIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getPosTimeIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setPosTimeIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelTimeIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelTimeIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelTimeIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccTimeIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccTimeIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccTimeIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelI() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelI() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelI(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccFb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccFb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccFb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccFf() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccFf() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccFf(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getGravityCompen() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getGravityCompen() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setGravityCompen(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelFf() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelFf() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelFf(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelFb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelFb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelFb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccCompenCmdBfFilter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccCompenCmdBfFilter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccCompenCmdBfFilter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccCompenCmdAfFilter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccCompenCmdAfFilter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccCompenCmdAfFilter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAccI() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAccI() {
  return _builder.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAccI(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSteerAngleCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSteerAngleCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSteerAngleCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getThrottleCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getThrottleCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setThrottleCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getBrakeCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getBrakeCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setBrakeCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getGearCmd() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getGearCmd() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setGearCmd( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ControlDebug::Reader::getTurnSignalCmd() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ControlDebug::Builder::getTurnSignalCmd() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTurnSignalCmd( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getHeadingError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getHeadingError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setHeadingError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<42>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getHeadingErrorDelay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getHeadingErrorDelay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setHeadingErrorDelay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<43>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getHeadingErrorPreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getHeadingErrorPreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setHeadingErrorPreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<44>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatDistanceError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatDistanceError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatDistanceError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<45>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatDistanceErrorDelay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatDistanceErrorDelay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatDistanceErrorDelay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<46>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatDistanceErrorPreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatDistanceErrorPreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatDistanceErrorPreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<47>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatYawRateError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatYawRateError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatYawRateError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatYawRateErrorDelay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatYawRateErrorDelay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatYawRateErrorDelay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatYawRateErrorPreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatYawRateErrorPreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatYawRateErrorPreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLonDistanceError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLonDistanceError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLonDistanceError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<51>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVelError() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVelError() {
  return _builder.getDataField<double>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVelError(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getStopDisErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getStopDisErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setStopDisErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<53>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getStopPointIndex() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getStopPointIndex() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setStopPointIndex( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getExceedStopPointFlag() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getExceedStopPointFlag() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setExceedStopPointFlag( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmPosX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmPosX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmPosX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<55>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmPosY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmPosY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmPosY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<56>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmVelX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmVelX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmVelX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<57>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmVelY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmVelY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmVelY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<58>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmAccX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmAccX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmAccX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<59>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmAccY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmAccY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmAccY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<60>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmRoll() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmRoll() {
  return _builder.getDataField<double>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmRoll(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<61>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmPitch() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmPitch() {
  return _builder.getDataField<double>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmPitch(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<62>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmPitchFilter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmPitchFilter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmPitchFilter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<63>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getUtmHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getUtmHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setUtmHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleVelX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleVelX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleVelX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleAccX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleAccX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleAccX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleAccY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleAccY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleAccY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleAngularYawRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleAngularYawRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleAngularYawRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleSteerAngle() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleSteerAngle() {
  return _builder.getDataField<double>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleSteerAngle(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleThrottle() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleThrottle() {
  return _builder.getDataField<double>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleThrottle(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<70>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getVehicleBrake() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getVehicleBrake() {
  return _builder.getDataField<double>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleBrake(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<71>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleGear() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleGear() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleGear( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleTurnLight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleTurnLight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleTurnLight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleAutoEnable() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleAutoEnable() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleAutoEnable( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleAccEnable() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleAccEnable() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleAccEnable( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleBrakeEnable() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleBrakeEnable() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleBrakeEnable( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleSteerEnable() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleSteerEnable() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleSteerEnable( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleFlDoorState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleFlDoorState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleFlDoorState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<150>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleFrDoorState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleFrDoorState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleFrDoorState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<151>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleRlDoorState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleRlDoorState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleRlDoorState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<152>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleRrDoorState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleRrDoorState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleRrDoorState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<153>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleTrunkDoorState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleTrunkDoorState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleTrunkDoorState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<154>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getTrajectoryLength() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getTrajectoryLength() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajectoryLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<155>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getTrajRealstateUpdate() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getTrajRealstateUpdate() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajRealstateUpdate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<156>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getVehicleCurrentState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getVehicleCurrentState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setVehicleCurrentState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<157>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<79>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtHeadingDelay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtHeadingDelay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtHeadingDelay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<80>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTgtHeadingPreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTgtHeadingPreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTgtHeadingPreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<81>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getDeviationHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getDeviationHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setDeviationHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<82>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdaptiveHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdaptiveHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdaptiveHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<83>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getOriginHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getOriginHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setOriginHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<84>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMaxCurvature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMaxCurvature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMaxCurvature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<85>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getWeightYawRateErr() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getWeightYawRateErr() {
  return _builder.getDataField<double>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setWeightYawRateErr(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<86>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcTdVel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcTdVel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcTdVel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<87>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcTdVelDot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcTdVelDot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcTdVelDot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<88>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcObsEsoZ1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcObsEsoZ1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcObsEsoZ1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<89>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcObsEsoZ2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcObsEsoZ2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcObsEsoZ2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<90>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcObsEsoZ3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<91>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcObsEsoZ3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<91>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcObsEsoZ3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<91>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcComputerU1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcComputerU1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcComputerU1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<92>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcComputerU2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcComputerU2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcComputerU2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<93>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcComputerU3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcComputerU3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcComputerU3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<94>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcComputerU() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcComputerU() {
  return _builder.getDataField<double>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcComputerU(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<95>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getAdrcFhan() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getAdrcFhan() {
  return _builder.getDataField<double>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setAdrcFhan(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurRateMid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurRateMid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurRateMid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurRateHigh() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurRateHigh() {
  return _builder.getDataField<double>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurRateHigh(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurRateHigher() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurRateHigher() {
  return _builder.getDataField<double>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurRateHigher(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurRateFlag() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurRateFlag() {
  return _builder.getDataField<double>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurRateFlag(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<102>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurSteerAngleMinIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<103>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurSteerAngleMinIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<103>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurSteerAngleMinIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<103>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurSteerAngleMaxIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurSteerAngleMaxIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurSteerAngleMaxIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<104>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajCurDeltaSteerAngleIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<105>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajCurDeltaSteerAngleIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<105>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajCurDeltaSteerAngleIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<105>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<106>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<106>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<106>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointB() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<107>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointB() {
  return _builder.getDataField<double>(
      ::capnp::bounded<107>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointB(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<107>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointC() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointC() {
  return _builder.getDataField<double>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointC(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<108>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointD() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointD() {
  return _builder.getDataField<double>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointD(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<109>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointParallelA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<110>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointParallelA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<110>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointParallelA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<110>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkingPointParallelB() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<111>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkingPointParallelB() {
  return _builder.getDataField<double>(
      ::capnp::bounded<111>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkingPointParallelB(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<111>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getIntersectionPointLineTraj() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getIntersectionPointLineTraj() {
  return _builder.getDataField<double>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setIntersectionPointLineTraj(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSpeedObserver() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSpeedObserver() {
  return _builder.getDataField<double>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSpeedObserver(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSlope() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSlope() {
  return _builder.getDataField<double>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSlope(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getSlopeCompensate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getSlopeCompensate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setSlopeCompensate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getPadeXi() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getPadeXi() {
  return _builder.getDataField<double>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setPadeXi(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getDistancePreview() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getDistancePreview() {
  return _builder.getDataField<double>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setDistancePreview(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getMotorSpeed2Vel() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getMotorSpeed2Vel() {
  return _builder.getDataField<double>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setMotorSpeed2Vel(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatWheelAngleFf() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatWheelAngleFf() {
  return _builder.getDataField<double>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatWheelAngleFf(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatWheelAngleFb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatWheelAngleFb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatWheelAngleFb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatOutput() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatOutput() {
  return _builder.getDataField<double>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatOutput(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getStandbyLog1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getStandbyLog1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setStandbyLog1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<122>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getStandbyLog2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getStandbyLog2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setStandbyLog2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<123>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getTurnSteerDecision() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<248>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getTurnSteerDecision() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<248>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTurnSteerDecision( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<248>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ControlDebug::Reader::getTurnSteerDecisionLast() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<249>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ControlDebug::Builder::getTurnSteerDecisionLast() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<249>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTurnSteerDecisionLast( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<249>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTrajSumDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTrajSumDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTrajSumDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<125>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatHeadingErrFb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatHeadingErrFb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatHeadingErrFb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<126>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getLatDistErrFb() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getLatDistErrFb() {
  return _builder.getDataField<double>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setLatDistErrFb(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<127>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getParkStopDist() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getParkStopDist() {
  return _builder.getDataField<double>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setParkStopDist(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline double ControlDebug::Reader::getTorqueCmd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline double ControlDebug::Builder::getTorqueCmd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void ControlDebug::Builder::setTorqueCmd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

