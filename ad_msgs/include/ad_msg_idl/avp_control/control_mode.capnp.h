// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: control_mode.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d9fae82832b9f8a4);
CAPNP_DECLARE_SCHEMA(d62968c6059f0363);
CAPNP_DECLARE_SCHEMA(cbd630ae3ebe4c66);
CAPNP_DECLARE_SCHEMA(ca93e875b2c759cf);
enum class Type_ca93e875b2c759cf: uint16_t {
  HPP,
  HPS,
};
CAPNP_DECLARE_ENUM(Type, ca93e875b2c759cf);
CAPNP_DECLARE_SCHEMA(a38a23633ba055d1);
CAPNP_DECLARE_SCHEMA(b148f17a40b11d73);
CAPNP_DECLARE_SCHEMA(b672a308929db006);
CAPNP_DECLARE_SCHEMA(e737cba2c37c4f4e);
CAPNP_DECLARE_SCHEMA(dfcb8132920404ec);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_control {

struct NoneParam {
  NoneParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9fae82832b9f8a4, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApaParam {
  ApaParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d62968c6059f0363, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HpaParam {
  HpaParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Type_ca93e875b2c759cf Type;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbd630ae3ebe4c66, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HpmParam {
  HpmParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a38a23633ba055d1, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StandbyParam {
  StandbyParam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b148f17a40b11d73, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeModeRequest {
  ChangeModeRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Param;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b672a308929db006, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeModeRequest::Param {
  Param() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    APA_PARAM,
    HPA_PARAM,
    HPM_PARAM,
    STANDBY_PARAM,
    NONE_PARAM,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e737cba2c37c4f4e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChangeModeResponse {
  ChangeModeResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dfcb8132920404ec, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class NoneParam::Reader {
public:
  typedef NoneParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NoneParam::Builder {
public:
  typedef NoneParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NoneParam::Pipeline {
public:
  typedef NoneParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApaParam::Reader {
public:
  typedef ApaParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApaParam::Builder {
public:
  typedef ApaParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApaParam::Pipeline {
public:
  typedef ApaParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HpaParam::Reader {
public:
  typedef HpaParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_control::HpaParam::Type getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HpaParam::Builder {
public:
  typedef HpaParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::avp_control::HpaParam::Type getType();
  inline void setType( ::senseAD::msg::avp_control::HpaParam::Type value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HpaParam::Pipeline {
public:
  typedef HpaParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HpmParam::Reader {
public:
  typedef HpmParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HpmParam::Builder {
public:
  typedef HpmParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HpmParam::Pipeline {
public:
  typedef HpmParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StandbyParam::Reader {
public:
  typedef StandbyParam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StandbyParam::Builder {
public:
  typedef StandbyParam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StandbyParam::Pipeline {
public:
  typedef StandbyParam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeModeRequest::Reader {
public:
  typedef ChangeModeRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Param::Reader getParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeModeRequest::Builder {
public:
  typedef ChangeModeRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Param::Builder getParam();
  inline typename Param::Builder initParam();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeModeRequest::Pipeline {
public:
  typedef ChangeModeRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Param::Pipeline getParam();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeModeRequest::Param::Reader {
public:
  typedef Param Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isApaParam() const;
  inline bool hasApaParam() const;
  inline  ::senseAD::msg::avp_control::ApaParam::Reader getApaParam() const;

  inline bool isHpaParam() const;
  inline bool hasHpaParam() const;
  inline  ::senseAD::msg::avp_control::HpaParam::Reader getHpaParam() const;

  inline bool isHpmParam() const;
  inline bool hasHpmParam() const;
  inline  ::senseAD::msg::avp_control::HpmParam::Reader getHpmParam() const;

  inline bool isStandbyParam() const;
  inline bool hasStandbyParam() const;
  inline  ::senseAD::msg::avp_control::StandbyParam::Reader getStandbyParam() const;

  inline bool isNoneParam() const;
  inline bool hasNoneParam() const;
  inline  ::senseAD::msg::avp_control::NoneParam::Reader getNoneParam() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeModeRequest::Param::Builder {
public:
  typedef Param Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isApaParam();
  inline bool hasApaParam();
  inline  ::senseAD::msg::avp_control::ApaParam::Builder getApaParam();
  inline void setApaParam( ::senseAD::msg::avp_control::ApaParam::Reader value);
  inline  ::senseAD::msg::avp_control::ApaParam::Builder initApaParam();
  inline void adoptApaParam(::capnp::Orphan< ::senseAD::msg::avp_control::ApaParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::ApaParam> disownApaParam();

  inline bool isHpaParam();
  inline bool hasHpaParam();
  inline  ::senseAD::msg::avp_control::HpaParam::Builder getHpaParam();
  inline void setHpaParam( ::senseAD::msg::avp_control::HpaParam::Reader value);
  inline  ::senseAD::msg::avp_control::HpaParam::Builder initHpaParam();
  inline void adoptHpaParam(::capnp::Orphan< ::senseAD::msg::avp_control::HpaParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::HpaParam> disownHpaParam();

  inline bool isHpmParam();
  inline bool hasHpmParam();
  inline  ::senseAD::msg::avp_control::HpmParam::Builder getHpmParam();
  inline void setHpmParam( ::senseAD::msg::avp_control::HpmParam::Reader value);
  inline  ::senseAD::msg::avp_control::HpmParam::Builder initHpmParam();
  inline void adoptHpmParam(::capnp::Orphan< ::senseAD::msg::avp_control::HpmParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::HpmParam> disownHpmParam();

  inline bool isStandbyParam();
  inline bool hasStandbyParam();
  inline  ::senseAD::msg::avp_control::StandbyParam::Builder getStandbyParam();
  inline void setStandbyParam( ::senseAD::msg::avp_control::StandbyParam::Reader value);
  inline  ::senseAD::msg::avp_control::StandbyParam::Builder initStandbyParam();
  inline void adoptStandbyParam(::capnp::Orphan< ::senseAD::msg::avp_control::StandbyParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::StandbyParam> disownStandbyParam();

  inline bool isNoneParam();
  inline bool hasNoneParam();
  inline  ::senseAD::msg::avp_control::NoneParam::Builder getNoneParam();
  inline void setNoneParam( ::senseAD::msg::avp_control::NoneParam::Reader value);
  inline  ::senseAD::msg::avp_control::NoneParam::Builder initNoneParam();
  inline void adoptNoneParam(::capnp::Orphan< ::senseAD::msg::avp_control::NoneParam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_control::NoneParam> disownNoneParam();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeModeRequest::Param::Pipeline {
public:
  typedef Param Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChangeModeResponse::Reader {
public:
  typedef ChangeModeResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOk() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChangeModeResponse::Builder {
public:
  typedef ChangeModeResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getOk();
  inline void setOk(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChangeModeResponse::Pipeline {
public:
  typedef ChangeModeResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::senseAD::msg::avp_control::HpaParam::Type HpaParam::Reader::getType() const {
  return _reader.getDataField< ::senseAD::msg::avp_control::HpaParam::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_control::HpaParam::Type HpaParam::Builder::getType() {
  return _builder.getDataField< ::senseAD::msg::avp_control::HpaParam::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HpaParam::Builder::setType( ::senseAD::msg::avp_control::HpaParam::Type value) {
  _builder.setDataField< ::senseAD::msg::avp_control::HpaParam::Type>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename ChangeModeRequest::Param::Reader ChangeModeRequest::Reader::getParam() const {
  return typename ChangeModeRequest::Param::Reader(_reader);
}
inline typename ChangeModeRequest::Param::Builder ChangeModeRequest::Builder::getParam() {
  return typename ChangeModeRequest::Param::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ChangeModeRequest::Param::Pipeline ChangeModeRequest::Pipeline::getParam() {
  return typename ChangeModeRequest::Param::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ChangeModeRequest::Param::Builder ChangeModeRequest::Builder::initParam() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename ChangeModeRequest::Param::Builder(_builder);
}
inline  ::senseAD::msg::avp_control::ChangeModeRequest::Param::Which ChangeModeRequest::Param::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::senseAD::msg::avp_control::ChangeModeRequest::Param::Which ChangeModeRequest::Param::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ChangeModeRequest::Param::Reader::isApaParam() const {
  return which() == ChangeModeRequest::Param::APA_PARAM;
}
inline bool ChangeModeRequest::Param::Builder::isApaParam() {
  return which() == ChangeModeRequest::Param::APA_PARAM;
}
inline bool ChangeModeRequest::Param::Reader::hasApaParam() const {
  if (which() != ChangeModeRequest::Param::APA_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeModeRequest::Param::Builder::hasApaParam() {
  if (which() != ChangeModeRequest::Param::APA_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::ApaParam::Reader ChangeModeRequest::Param::Reader::getApaParam() const {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::APA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::ApaParam::Builder ChangeModeRequest::Param::Builder::getApaParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::APA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::setApaParam( ::senseAD::msg::avp_control::ApaParam::Reader value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::APA_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::ApaParam::Builder ChangeModeRequest::Param::Builder::initApaParam() {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::APA_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::adoptApaParam(
    ::capnp::Orphan< ::senseAD::msg::avp_control::ApaParam>&& value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::APA_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::ApaParam> ChangeModeRequest::Param::Builder::disownApaParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::APA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::ApaParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeModeRequest::Param::Reader::isHpaParam() const {
  return which() == ChangeModeRequest::Param::HPA_PARAM;
}
inline bool ChangeModeRequest::Param::Builder::isHpaParam() {
  return which() == ChangeModeRequest::Param::HPA_PARAM;
}
inline bool ChangeModeRequest::Param::Reader::hasHpaParam() const {
  if (which() != ChangeModeRequest::Param::HPA_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeModeRequest::Param::Builder::hasHpaParam() {
  if (which() != ChangeModeRequest::Param::HPA_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::HpaParam::Reader ChangeModeRequest::Param::Reader::getHpaParam() const {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::HpaParam::Builder ChangeModeRequest::Param::Builder::getHpaParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::setHpaParam( ::senseAD::msg::avp_control::HpaParam::Reader value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPA_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::HpaParam::Builder ChangeModeRequest::Param::Builder::initHpaParam() {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPA_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::adoptHpaParam(
    ::capnp::Orphan< ::senseAD::msg::avp_control::HpaParam>&& value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPA_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::HpaParam> ChangeModeRequest::Param::Builder::disownHpaParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPA_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpaParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeModeRequest::Param::Reader::isHpmParam() const {
  return which() == ChangeModeRequest::Param::HPM_PARAM;
}
inline bool ChangeModeRequest::Param::Builder::isHpmParam() {
  return which() == ChangeModeRequest::Param::HPM_PARAM;
}
inline bool ChangeModeRequest::Param::Reader::hasHpmParam() const {
  if (which() != ChangeModeRequest::Param::HPM_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeModeRequest::Param::Builder::hasHpmParam() {
  if (which() != ChangeModeRequest::Param::HPM_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::HpmParam::Reader ChangeModeRequest::Param::Reader::getHpmParam() const {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPM_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::HpmParam::Builder ChangeModeRequest::Param::Builder::getHpmParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPM_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::setHpmParam( ::senseAD::msg::avp_control::HpmParam::Reader value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPM_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::HpmParam::Builder ChangeModeRequest::Param::Builder::initHpmParam() {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPM_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::adoptHpmParam(
    ::capnp::Orphan< ::senseAD::msg::avp_control::HpmParam>&& value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::HPM_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::HpmParam> ChangeModeRequest::Param::Builder::disownHpmParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::HPM_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::HpmParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeModeRequest::Param::Reader::isStandbyParam() const {
  return which() == ChangeModeRequest::Param::STANDBY_PARAM;
}
inline bool ChangeModeRequest::Param::Builder::isStandbyParam() {
  return which() == ChangeModeRequest::Param::STANDBY_PARAM;
}
inline bool ChangeModeRequest::Param::Reader::hasStandbyParam() const {
  if (which() != ChangeModeRequest::Param::STANDBY_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeModeRequest::Param::Builder::hasStandbyParam() {
  if (which() != ChangeModeRequest::Param::STANDBY_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::StandbyParam::Reader ChangeModeRequest::Param::Reader::getStandbyParam() const {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::STANDBY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::StandbyParam::Builder ChangeModeRequest::Param::Builder::getStandbyParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::STANDBY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::setStandbyParam( ::senseAD::msg::avp_control::StandbyParam::Reader value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::STANDBY_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::StandbyParam::Builder ChangeModeRequest::Param::Builder::initStandbyParam() {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::STANDBY_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::adoptStandbyParam(
    ::capnp::Orphan< ::senseAD::msg::avp_control::StandbyParam>&& value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::STANDBY_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::StandbyParam> ChangeModeRequest::Param::Builder::disownStandbyParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::STANDBY_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::StandbyParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeModeRequest::Param::Reader::isNoneParam() const {
  return which() == ChangeModeRequest::Param::NONE_PARAM;
}
inline bool ChangeModeRequest::Param::Builder::isNoneParam() {
  return which() == ChangeModeRequest::Param::NONE_PARAM;
}
inline bool ChangeModeRequest::Param::Reader::hasNoneParam() const {
  if (which() != ChangeModeRequest::Param::NONE_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChangeModeRequest::Param::Builder::hasNoneParam() {
  if (which() != ChangeModeRequest::Param::NONE_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_control::NoneParam::Reader ChangeModeRequest::Param::Reader::getNoneParam() const {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::NONE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_control::NoneParam::Builder ChangeModeRequest::Param::Builder::getNoneParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::NONE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::setNoneParam( ::senseAD::msg::avp_control::NoneParam::Reader value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::NONE_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_control::NoneParam::Builder ChangeModeRequest::Param::Builder::initNoneParam() {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::NONE_PARAM);
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChangeModeRequest::Param::Builder::adoptNoneParam(
    ::capnp::Orphan< ::senseAD::msg::avp_control::NoneParam>&& value) {
  _builder.setDataField<ChangeModeRequest::Param::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChangeModeRequest::Param::NONE_PARAM);
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_control::NoneParam> ChangeModeRequest::Param::Builder::disownNoneParam() {
  KJ_IREQUIRE((which() == ChangeModeRequest::Param::NONE_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_control::NoneParam>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChangeModeResponse::Reader::getOk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ChangeModeResponse::Builder::getOk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ChangeModeResponse::Builder::setOk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

