// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: traffic_sign.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/ad_perception/base.capnp.h>
#include <ad_msg_idl/ad_perception/object_label.capnp.h>
#include <ad_msg_idl/std_msgs/typed_data_list.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f8baade6f291fde8);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_perception {

struct TrafficSign {
  TrafficSign() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8baade6f291fde8, 8, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TrafficSign::Reader {
public:
  typedef TrafficSign Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensorId() const;

  inline  ::senseAD::msg::avp_perception::ObjectLabel getLabel() const;

  inline float getTypeConfidence() const;

  inline float getExistenceConfidence() const;

  inline  ::int32_t getSubType() const;

  inline bool hasSubTypeProbs() const;
  inline  ::senseAD::msg::std_msgs::Float32List::Reader getSubTypeProbs() const;

  inline  ::int32_t getTrackId() const;

  inline float getTrackAgeTimeSecond() const;

  inline  ::uint64_t getLastMeasureUpdateTimestampNs() const;

  inline  ::uint64_t getCurrentPredictionTimestampNs() const;

  inline bool hasSizeInfo() const;
  inline  ::senseAD::msg::avp_perception::SizeInfo::Reader getSizeInfo() const;

  inline bool hasPolygonBox() const;
  inline  ::senseAD::msg::avp_perception::PolygonBox::Reader getPolygonBox() const;

  inline bool hasDirectionInfo() const;
  inline  ::senseAD::msg::avp_perception::DirectionInfo::Reader getDirectionInfo() const;

  inline bool hasMotionInfo() const;
  inline  ::senseAD::msg::avp_perception::MotionInfo::Reader getMotionInfo() const;

  inline  ::int32_t getMotionStatus() const;

  inline float getMotionStaticScore() const;

  inline  ::int32_t getMaintenanceStatus() const;

  inline  ::int32_t getOcclusionStatus() const;

  inline bool hasFeature() const;
  inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader getFeature() const;

  inline bool hasCameraBboxInfo() const;
  inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Reader getCameraBboxInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficSign::Builder {
public:
  typedef TrafficSign Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSensorId();
  inline void setSensorId( ::int32_t value);

  inline  ::senseAD::msg::avp_perception::ObjectLabel getLabel();
  inline void setLabel( ::senseAD::msg::avp_perception::ObjectLabel value);

  inline float getTypeConfidence();
  inline void setTypeConfidence(float value);

  inline float getExistenceConfidence();
  inline void setExistenceConfidence(float value);

  inline  ::int32_t getSubType();
  inline void setSubType( ::int32_t value);

  inline bool hasSubTypeProbs();
  inline  ::senseAD::msg::std_msgs::Float32List::Builder getSubTypeProbs();
  inline void setSubTypeProbs( ::senseAD::msg::std_msgs::Float32List::Reader value);
  inline  ::senseAD::msg::std_msgs::Float32List::Builder initSubTypeProbs();
  inline void adoptSubTypeProbs(::capnp::Orphan< ::senseAD::msg::std_msgs::Float32List>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float32List> disownSubTypeProbs();

  inline  ::int32_t getTrackId();
  inline void setTrackId( ::int32_t value);

  inline float getTrackAgeTimeSecond();
  inline void setTrackAgeTimeSecond(float value);

  inline  ::uint64_t getLastMeasureUpdateTimestampNs();
  inline void setLastMeasureUpdateTimestampNs( ::uint64_t value);

  inline  ::uint64_t getCurrentPredictionTimestampNs();
  inline void setCurrentPredictionTimestampNs( ::uint64_t value);

  inline bool hasSizeInfo();
  inline  ::senseAD::msg::avp_perception::SizeInfo::Builder getSizeInfo();
  inline void setSizeInfo( ::senseAD::msg::avp_perception::SizeInfo::Reader value);
  inline  ::senseAD::msg::avp_perception::SizeInfo::Builder initSizeInfo();
  inline void adoptSizeInfo(::capnp::Orphan< ::senseAD::msg::avp_perception::SizeInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::SizeInfo> disownSizeInfo();

  inline bool hasPolygonBox();
  inline  ::senseAD::msg::avp_perception::PolygonBox::Builder getPolygonBox();
  inline void setPolygonBox( ::senseAD::msg::avp_perception::PolygonBox::Reader value);
  inline  ::senseAD::msg::avp_perception::PolygonBox::Builder initPolygonBox();
  inline void adoptPolygonBox(::capnp::Orphan< ::senseAD::msg::avp_perception::PolygonBox>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::PolygonBox> disownPolygonBox();

  inline bool hasDirectionInfo();
  inline  ::senseAD::msg::avp_perception::DirectionInfo::Builder getDirectionInfo();
  inline void setDirectionInfo( ::senseAD::msg::avp_perception::DirectionInfo::Reader value);
  inline  ::senseAD::msg::avp_perception::DirectionInfo::Builder initDirectionInfo();
  inline void adoptDirectionInfo(::capnp::Orphan< ::senseAD::msg::avp_perception::DirectionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::DirectionInfo> disownDirectionInfo();

  inline bool hasMotionInfo();
  inline  ::senseAD::msg::avp_perception::MotionInfo::Builder getMotionInfo();
  inline void setMotionInfo( ::senseAD::msg::avp_perception::MotionInfo::Reader value);
  inline  ::senseAD::msg::avp_perception::MotionInfo::Builder initMotionInfo();
  inline void adoptMotionInfo(::capnp::Orphan< ::senseAD::msg::avp_perception::MotionInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::MotionInfo> disownMotionInfo();

  inline  ::int32_t getMotionStatus();
  inline void setMotionStatus( ::int32_t value);

  inline float getMotionStaticScore();
  inline void setMotionStaticScore(float value);

  inline  ::int32_t getMaintenanceStatus();
  inline void setMaintenanceStatus( ::int32_t value);

  inline  ::int32_t getOcclusionStatus();
  inline void setOcclusionStatus( ::int32_t value);

  inline bool hasFeature();
  inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder getFeature();
  inline void setFeature( ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder initFeature(unsigned int size);
  inline void adoptFeature(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> disownFeature();

  inline bool hasCameraBboxInfo();
  inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Builder getCameraBboxInfo();
  inline void setCameraBboxInfo( ::senseAD::msg::avp_perception::CameraBBox2DInfo::Reader value);
  inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Builder initCameraBboxInfo();
  inline void adoptCameraBboxInfo(::capnp::Orphan< ::senseAD::msg::avp_perception::CameraBBox2DInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::CameraBBox2DInfo> disownCameraBboxInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficSign::Pipeline {
public:
  typedef TrafficSign Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Float32List::Pipeline getSubTypeProbs();
  inline  ::senseAD::msg::avp_perception::SizeInfo::Pipeline getSizeInfo();
  inline  ::senseAD::msg::avp_perception::PolygonBox::Pipeline getPolygonBox();
  inline  ::senseAD::msg::avp_perception::DirectionInfo::Pipeline getDirectionInfo();
  inline  ::senseAD::msg::avp_perception::MotionInfo::Pipeline getMotionInfo();
  inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Pipeline getCameraBboxInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t TrafficSign::Reader::getSensorId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getSensorId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setSensorId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_perception::ObjectLabel TrafficSign::Reader::getLabel() const {
  return _reader.getDataField< ::senseAD::msg::avp_perception::ObjectLabel>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_perception::ObjectLabel TrafficSign::Builder::getLabel() {
  return _builder.getDataField< ::senseAD::msg::avp_perception::ObjectLabel>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setLabel( ::senseAD::msg::avp_perception::ObjectLabel value) {
  _builder.setDataField< ::senseAD::msg::avp_perception::ObjectLabel>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getTypeConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getTypeConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTypeConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getExistenceConfidence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getExistenceConfidence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setExistenceConfidence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficSign::Reader::getSubType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getSubType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setSubType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasSubTypeProbs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasSubTypeProbs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Float32List::Reader TrafficSign::Reader::getSubTypeProbs() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Float32List::Builder TrafficSign::Builder::getSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Float32List::Pipeline TrafficSign::Pipeline::getSubTypeProbs() {
  return  ::senseAD::msg::std_msgs::Float32List::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setSubTypeProbs( ::senseAD::msg::std_msgs::Float32List::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Float32List::Builder TrafficSign::Builder::initSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptSubTypeProbs(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Float32List>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Float32List> TrafficSign::Builder::disownSubTypeProbs() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Float32List>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TrafficSign::Reader::getTrackId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getTrackId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTrackId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getTrackAgeTimeSecond() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getTrackAgeTimeSecond() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setTrackAgeTimeSecond(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TrafficSign::Reader::getLastMeasureUpdateTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficSign::Builder::getLastMeasureUpdateTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setLastMeasureUpdateTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TrafficSign::Reader::getCurrentPredictionTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TrafficSign::Builder::getCurrentPredictionTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setCurrentPredictionTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasSizeInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasSizeInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::SizeInfo::Reader TrafficSign::Reader::getSizeInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::SizeInfo::Builder TrafficSign::Builder::getSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::SizeInfo::Pipeline TrafficSign::Pipeline::getSizeInfo() {
  return  ::senseAD::msg::avp_perception::SizeInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setSizeInfo( ::senseAD::msg::avp_perception::SizeInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::SizeInfo::Builder TrafficSign::Builder::initSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptSizeInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::SizeInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::SizeInfo> TrafficSign::Builder::disownSizeInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::SizeInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasPolygonBox() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasPolygonBox() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::PolygonBox::Reader TrafficSign::Reader::getPolygonBox() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::PolygonBox::Builder TrafficSign::Builder::getPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::PolygonBox::Pipeline TrafficSign::Pipeline::getPolygonBox() {
  return  ::senseAD::msg::avp_perception::PolygonBox::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setPolygonBox( ::senseAD::msg::avp_perception::PolygonBox::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::PolygonBox::Builder TrafficSign::Builder::initPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptPolygonBox(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::PolygonBox>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::PolygonBox> TrafficSign::Builder::disownPolygonBox() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::PolygonBox>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasDirectionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasDirectionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::DirectionInfo::Reader TrafficSign::Reader::getDirectionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::DirectionInfo::Builder TrafficSign::Builder::getDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::DirectionInfo::Pipeline TrafficSign::Pipeline::getDirectionInfo() {
  return  ::senseAD::msg::avp_perception::DirectionInfo::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setDirectionInfo( ::senseAD::msg::avp_perception::DirectionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::DirectionInfo::Builder TrafficSign::Builder::initDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptDirectionInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::DirectionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::DirectionInfo> TrafficSign::Builder::disownDirectionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::DirectionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasMotionInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasMotionInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::MotionInfo::Reader TrafficSign::Reader::getMotionInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::MotionInfo::Builder TrafficSign::Builder::getMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::MotionInfo::Pipeline TrafficSign::Pipeline::getMotionInfo() {
  return  ::senseAD::msg::avp_perception::MotionInfo::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setMotionInfo( ::senseAD::msg::avp_perception::MotionInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::MotionInfo::Builder TrafficSign::Builder::initMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptMotionInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::MotionInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::MotionInfo> TrafficSign::Builder::disownMotionInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::MotionInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int32_t TrafficSign::Reader::getMotionStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getMotionStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMotionStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float TrafficSign::Reader::getMotionStaticScore() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float TrafficSign::Builder::getMotionStaticScore() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMotionStaticScore(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficSign::Reader::getMaintenanceStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getMaintenanceStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setMaintenanceStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficSign::Reader::getOcclusionStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficSign::Builder::getOcclusionStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void TrafficSign::Builder::setOcclusionStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficSign::Reader::hasFeature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasFeature() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader TrafficSign::Reader::getFeature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder TrafficSign::Builder::getFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::setFeature( ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>::Builder TrafficSign::Builder::initFeature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void TrafficSign::Builder::adoptFeature(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>> TrafficSign::Builder::disownFeature() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_perception::ModelOutputFeature,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TrafficSign::Reader::hasCameraBboxInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficSign::Builder::hasCameraBboxInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Reader TrafficSign::Reader::getCameraBboxInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Builder TrafficSign::Builder::getCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Pipeline TrafficSign::Pipeline::getCameraBboxInfo() {
  return  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TrafficSign::Builder::setCameraBboxInfo( ::senseAD::msg::avp_perception::CameraBBox2DInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::CameraBBox2DInfo::Builder TrafficSign::Builder::initCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TrafficSign::Builder::adoptCameraBboxInfo(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::CameraBBox2DInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::CameraBBox2DInfo> TrafficSign::Builder::disownCameraBboxInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::CameraBBox2DInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

