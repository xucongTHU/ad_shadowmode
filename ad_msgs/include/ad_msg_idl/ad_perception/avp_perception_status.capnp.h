// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_perception_status.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8afaaec4ec90f002);
CAPNP_DECLARE_SCHEMA(8212696d347aef1d);
CAPNP_DECLARE_SCHEMA(ac2241c07dfb69a5);
enum class IndoorOutdoor_ac2241c07dfb69a5: uint16_t {
  UNKNOWN,
  INDOOR,
  OUTDOOR,
};
CAPNP_DECLARE_ENUM(IndoorOutdoor, ac2241c07dfb69a5);
CAPNP_DECLARE_SCHEMA(e46ef049620e6a46);
CAPNP_DECLARE_SCHEMA(b65fb5aea38f628f);
CAPNP_DECLARE_SCHEMA(de19c4058e6cf40d);
CAPNP_DECLARE_SCHEMA(d98cd29c610cd67a);
CAPNP_DECLARE_SCHEMA(cd6dc2dc87bd670f);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_perception {

struct FusionWarningOutput {
  FusionWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8afaaec4ec90f002, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FusionStatus {
  FusionStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8212696d347aef1d, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::IndoorOutdoor_ac2241c07dfb69a5 IndoorOutdoor;

struct FusionStatusInfo {
  FusionStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e46ef049620e6a46, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OdWarningOutput {
  OdWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b65fb5aea38f628f, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct OdStatusInfo {
  OdStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de19c4058e6cf40d, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RdWarningOutput {
  RdWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d98cd29c610cd67a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RdStatusInfo {
  RdStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd6dc2dc87bd670f, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FusionWarningOutput::Reader {
public:
  typedef FusionWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLoadModuleA() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionWarningOutput::Builder {
public:
  typedef FusionWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLoadModuleA();
  inline void setLoadModuleA(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionWarningOutput::Pipeline {
public:
  typedef FusionWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionStatus::Reader {
public:
  typedef FusionStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

  inline bool getOdReceived500ms() const;

  inline bool getHpmFsSaveFail() const;

  inline bool getHpmFsSaveSuccess() const;

  inline bool getInitConfigPathNotExist() const;

  inline bool getMissLoc() const;

  inline bool getMissOD() const;

  inline bool getMissFS() const;

  inline bool getMissSlot() const;

  inline bool getLocDrift() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionStatus::Builder {
public:
  typedef FusionStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

  inline bool getOdReceived500ms();
  inline void setOdReceived500ms(bool value);

  inline bool getHpmFsSaveFail();
  inline void setHpmFsSaveFail(bool value);

  inline bool getHpmFsSaveSuccess();
  inline void setHpmFsSaveSuccess(bool value);

  inline bool getInitConfigPathNotExist();
  inline void setInitConfigPathNotExist(bool value);

  inline bool getMissLoc();
  inline void setMissLoc(bool value);

  inline bool getMissOD();
  inline void setMissOD(bool value);

  inline bool getMissFS();
  inline void setMissFS(bool value);

  inline bool getMissSlot();
  inline void setMissSlot(bool value);

  inline bool getLocDrift();
  inline void setLocDrift(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionStatus::Pipeline {
public:
  typedef FusionStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FusionStatusInfo::Reader {
public:
  typedef FusionStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMsgId() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline  ::uint64_t getAvpStatusUid() const;

  inline bool hasFusionStatus() const;
  inline  ::senseAD::msg::avp_perception::FusionStatus::Reader getFusionStatus() const;

  inline bool hasFusionWarning() const;
  inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Reader getFusionWarning() const;

  inline  ::senseAD::msg::avp_perception::IndoorOutdoor getIndoorOutdoor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FusionStatusInfo::Builder {
public:
  typedef FusionStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline  ::uint64_t getAvpStatusUid();
  inline void setAvpStatusUid( ::uint64_t value);

  inline bool hasFusionStatus();
  inline  ::senseAD::msg::avp_perception::FusionStatus::Builder getFusionStatus();
  inline void setFusionStatus( ::senseAD::msg::avp_perception::FusionStatus::Reader value);
  inline  ::senseAD::msg::avp_perception::FusionStatus::Builder initFusionStatus();
  inline void adoptFusionStatus(::capnp::Orphan< ::senseAD::msg::avp_perception::FusionStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionStatus> disownFusionStatus();

  inline bool hasFusionWarning();
  inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Builder getFusionWarning();
  inline void setFusionWarning( ::senseAD::msg::avp_perception::FusionWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Builder initFusionWarning();
  inline void adoptFusionWarning(::capnp::Orphan< ::senseAD::msg::avp_perception::FusionWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionWarningOutput> disownFusionWarning();

  inline  ::senseAD::msg::avp_perception::IndoorOutdoor getIndoorOutdoor();
  inline void setIndoorOutdoor( ::senseAD::msg::avp_perception::IndoorOutdoor value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FusionStatusInfo::Pipeline {
public:
  typedef FusionStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_perception::FusionStatus::Pipeline getFusionStatus();
  inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Pipeline getFusionWarning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OdWarningOutput::Reader {
public:
  typedef OdWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OdWarningOutput::Builder {
public:
  typedef OdWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OdWarningOutput::Pipeline {
public:
  typedef OdWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OdStatusInfo::Reader {
public:
  typedef OdStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasOdWarning() const;
  inline  ::senseAD::msg::avp_perception::OdWarningOutput::Reader getOdWarning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OdStatusInfo::Builder {
public:
  typedef OdStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasOdWarning();
  inline  ::senseAD::msg::avp_perception::OdWarningOutput::Builder getOdWarning();
  inline void setOdWarning( ::senseAD::msg::avp_perception::OdWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_perception::OdWarningOutput::Builder initOdWarning();
  inline void adoptOdWarning(::capnp::Orphan< ::senseAD::msg::avp_perception::OdWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::OdWarningOutput> disownOdWarning();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OdStatusInfo::Pipeline {
public:
  typedef OdStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_perception::OdWarningOutput::Pipeline getOdWarning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RdWarningOutput::Reader {
public:
  typedef RdWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RdWarningOutput::Builder {
public:
  typedef RdWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RdWarningOutput::Pipeline {
public:
  typedef RdWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RdStatusInfo::Reader {
public:
  typedef RdStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasRdWarning() const;
  inline  ::senseAD::msg::avp_perception::RdWarningOutput::Reader getRdWarning() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RdStatusInfo::Builder {
public:
  typedef RdStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasRdWarning();
  inline  ::senseAD::msg::avp_perception::RdWarningOutput::Builder getRdWarning();
  inline void setRdWarning( ::senseAD::msg::avp_perception::RdWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_perception::RdWarningOutput::Builder initRdWarning();
  inline void adoptRdWarning(::capnp::Orphan< ::senseAD::msg::avp_perception::RdWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_perception::RdWarningOutput> disownRdWarning();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RdStatusInfo::Pipeline {
public:
  typedef RdStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_perception::RdWarningOutput::Pipeline getRdWarning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool FusionWarningOutput::Reader::getLoadModuleA() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool FusionWarningOutput::Builder::getLoadModuleA() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FusionWarningOutput::Builder::setLoadModuleA(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getOdReceived500ms() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getOdReceived500ms() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setOdReceived500ms(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getHpmFsSaveFail() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getHpmFsSaveFail() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setHpmFsSaveFail(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getHpmFsSaveSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getHpmFsSaveSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setHpmFsSaveSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getInitConfigPathNotExist() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getInitConfigPathNotExist() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setInitConfigPathNotExist(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getMissLoc() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getMissLoc() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setMissLoc(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getMissOD() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getMissOD() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setMissOD(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getMissFS() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getMissFS() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setMissFS(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getMissSlot() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getMissSlot() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setMissSlot(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatus::Reader::getLocDrift() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool FusionStatus::Builder::getLocDrift() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void FusionStatus::Builder::setLocDrift(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FusionStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader FusionStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder FusionStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline FusionStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FusionStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder FusionStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FusionStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> FusionStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t FusionStatusInfo::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FusionStatusInfo::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FusionStatusInfo::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus FusionStatusInfo::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus FusionStatusInfo::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FusionStatusInfo::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FusionStatusInfo::Reader::getAvpStatusUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FusionStatusInfo::Builder::getAvpStatusUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FusionStatusInfo::Builder::setAvpStatusUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FusionStatusInfo::Reader::hasFusionStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FusionStatusInfo::Builder::hasFusionStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::FusionStatus::Reader FusionStatusInfo::Reader::getFusionStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::FusionStatus::Builder FusionStatusInfo::Builder::getFusionStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::FusionStatus::Pipeline FusionStatusInfo::Pipeline::getFusionStatus() {
  return  ::senseAD::msg::avp_perception::FusionStatus::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FusionStatusInfo::Builder::setFusionStatus( ::senseAD::msg::avp_perception::FusionStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::FusionStatus::Builder FusionStatusInfo::Builder::initFusionStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FusionStatusInfo::Builder::adoptFusionStatus(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionStatus> FusionStatusInfo::Builder::disownFusionStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FusionStatusInfo::Reader::hasFusionWarning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FusionStatusInfo::Builder::hasFusionWarning() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Reader FusionStatusInfo::Reader::getFusionWarning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Builder FusionStatusInfo::Builder::getFusionWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Pipeline FusionStatusInfo::Pipeline::getFusionWarning() {
  return  ::senseAD::msg::avp_perception::FusionWarningOutput::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void FusionStatusInfo::Builder::setFusionWarning( ::senseAD::msg::avp_perception::FusionWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::FusionWarningOutput::Builder FusionStatusInfo::Builder::initFusionWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FusionStatusInfo::Builder::adoptFusionWarning(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::FusionWarningOutput> FusionStatusInfo::Builder::disownFusionWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::FusionWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::senseAD::msg::avp_perception::IndoorOutdoor FusionStatusInfo::Reader::getIndoorOutdoor() const {
  return _reader.getDataField< ::senseAD::msg::avp_perception::IndoorOutdoor>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_perception::IndoorOutdoor FusionStatusInfo::Builder::getIndoorOutdoor() {
  return _builder.getDataField< ::senseAD::msg::avp_perception::IndoorOutdoor>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FusionStatusInfo::Builder::setIndoorOutdoor( ::senseAD::msg::avp_perception::IndoorOutdoor value) {
  _builder.setDataField< ::senseAD::msg::avp_perception::IndoorOutdoor>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool OdWarningOutput::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool OdWarningOutput::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OdWarningOutput::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OdWarningOutput::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool OdWarningOutput::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OdWarningOutput::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool OdStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OdStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader OdStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder OdStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline OdStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OdStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder OdStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OdStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> OdStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool OdStatusInfo::Reader::hasOdWarning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OdStatusInfo::Builder::hasOdWarning() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::OdWarningOutput::Reader OdStatusInfo::Reader::getOdWarning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::OdWarningOutput::Builder OdStatusInfo::Builder::getOdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::OdWarningOutput::Pipeline OdStatusInfo::Pipeline::getOdWarning() {
  return  ::senseAD::msg::avp_perception::OdWarningOutput::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void OdStatusInfo::Builder::setOdWarning( ::senseAD::msg::avp_perception::OdWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::OdWarningOutput::Builder OdStatusInfo::Builder::initOdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OdStatusInfo::Builder::adoptOdWarning(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::OdWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::OdWarningOutput> OdStatusInfo::Builder::disownOdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::OdWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RdWarningOutput::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RdWarningOutput::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RdWarningOutput::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RdWarningOutput::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool RdWarningOutput::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RdWarningOutput::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RdStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RdStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RdStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RdStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RdStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RdStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RdStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RdStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RdStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RdStatusInfo::Reader::hasRdWarning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RdStatusInfo::Builder::hasRdWarning() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_perception::RdWarningOutput::Reader RdStatusInfo::Reader::getRdWarning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_perception::RdWarningOutput::Builder RdStatusInfo::Builder::getRdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_perception::RdWarningOutput::Pipeline RdStatusInfo::Pipeline::getRdWarning() {
  return  ::senseAD::msg::avp_perception::RdWarningOutput::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RdStatusInfo::Builder::setRdWarning( ::senseAD::msg::avp_perception::RdWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_perception::RdWarningOutput::Builder RdStatusInfo::Builder::initRdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RdStatusInfo::Builder::adoptRdWarning(
    ::capnp::Orphan< ::senseAD::msg::avp_perception::RdWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_perception::RdWarningOutput> RdStatusInfo::Builder::disownRdWarning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_perception::RdWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

