// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: vehicle.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_state_v3/uic_fsm_cmd.capnp.h>
#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a639187fcee9da02);
CAPNP_DECLARE_SCHEMA(ee5f6b94d1856713);
CAPNP_DECLARE_SCHEMA(a0ed0fddc00f30a5);
CAPNP_DECLARE_SCHEMA(bd4d9614a1130459);
CAPNP_DECLARE_SCHEMA(a16c058dad1ebfea);
CAPNP_DECLARE_SCHEMA(8e156ba0369c0277);
enum class CmdType_8e156ba0369c0277: uint16_t {
  CMD_NONE,
  CMD_PEDAL,
  CMD_PERCENT,
  CMD_TORQUE,
  CMD_DECEL,
};
CAPNP_DECLARE_ENUM(CmdType, 8e156ba0369c0277);
CAPNP_DECLARE_SCHEMA(96bc966f9e3e3d97);
enum class BrakeMode_96bc966f9e3e3d97: uint16_t {
  IDLE,
  APA_COMFORTABLE,
  L_APA_COMFORTABLE,
  EMERGENCY,
};
CAPNP_DECLARE_ENUM(BrakeMode, 96bc966f9e3e3d97);
CAPNP_DECLARE_SCHEMA(960cebbec10abf61);
CAPNP_DECLARE_SCHEMA(98ad5e507f735c6b);
CAPNP_DECLARE_SCHEMA(b9ed2af3aafb9b49);
enum class GearCommand_b9ed2af3aafb9b49: uint16_t {
  GEAR_NONE,
  GEAR_PARK,
  GEAR_REVERSE,
  GEAR_NEUTRAL,
  GEAR_DRIVE,
  GEAR_LOW,
};
CAPNP_DECLARE_ENUM(GearCommand, b9ed2af3aafb9b49);
CAPNP_DECLARE_SCHEMA(dde25f9b36b87c2e);
CAPNP_DECLARE_SCHEMA(c881b7556606e871);
CAPNP_DECLARE_SCHEMA(e0a99baa1bfc7ea1);
CAPNP_DECLARE_SCHEMA(800d0eef01d05a83);
CAPNP_DECLARE_SCHEMA(bc0d325796cefd4c);
CAPNP_DECLARE_SCHEMA(e687dbf57d23e5af);
CAPNP_DECLARE_SCHEMA(d85049168ba2f6f4);
enum class Gl8Mode_d85049168ba2f6f4: uint16_t {
  NONE,
  APA,
  ACC,
};
CAPNP_DECLARE_ENUM(Gl8Mode, d85049168ba2f6f4);
CAPNP_DECLARE_SCHEMA(9d5320e21be53a57);
enum class MotionMode_9d5320e21be53a57: uint16_t {
  ACKERMANN_MODE,
  SKEW_MODE,
  SPIN_MODE,
  LATERAL_MODE,
  NONE,
};
CAPNP_DECLARE_ENUM(MotionMode, 9d5320e21be53a57);
CAPNP_DECLARE_SCHEMA(d77521c71d88ef24);
CAPNP_DECLARE_SCHEMA(fd419287a08d6492);
CAPNP_DECLARE_SCHEMA(cd592f2d740c456d);
CAPNP_DECLARE_SCHEMA(c082914e7386031b);
CAPNP_DECLARE_SCHEMA(db7bdfdae7622c67);
enum class CmdType_db7bdfdae7622c67: uint16_t {
  CMD_NONE,
  CMD_ANGLE,
  CMD_TORQUE,
};
CAPNP_DECLARE_ENUM(CmdType, db7bdfdae7622c67);
CAPNP_DECLARE_SCHEMA(c3e70ae068881f52);
CAPNP_DECLARE_SCHEMA(b8321f8c09d7c2a6);
enum class ManInterveneFlag_b8321f8c09d7c2a6: uint16_t {
  MAN_INTERVENE_TRUE,
  MAN_INTERVENE_FALSE,
};
CAPNP_DECLARE_ENUM(ManInterveneFlag, b8321f8c09d7c2a6);
CAPNP_DECLARE_SCHEMA(a76dde9054a4c85e);
CAPNP_DECLARE_SCHEMA(c333a75103888196);
enum class CmdType_c333a75103888196: uint16_t {
  CMD_NONE,
  CMD_PEDAL,
  CMD_PERCENT,
  CMD_SPEED,
  CMD_SPEED_LATERAL,
  CMD_TORQUE,
};
CAPNP_DECLARE_ENUM(CmdType, c333a75103888196);
CAPNP_DECLARE_SCHEMA(c81d0273a7191982);
CAPNP_DECLARE_SCHEMA(fdf8ba86c79cf2cd);
CAPNP_DECLARE_SCHEMA(cb3add3fb6122a1c);
enum class CmdType_cb3add3fb6122a1c: uint16_t {
  CMD_NONE,
  CMD_MS2,
  CMD_PERCENT,
};
CAPNP_DECLARE_ENUM(CmdType, cb3add3fb6122a1c);
CAPNP_DECLARE_SCHEMA(e12407a4d81fe1d9);
CAPNP_DECLARE_SCHEMA(f8b9475bd79dd20e);
enum class ActualState_f8b9475bd79dd20e: uint16_t {
  STATE_ACTUAL_IN,
  STATE_ACTUAL_NO,
};
CAPNP_DECLARE_ENUM(ActualState, f8b9475bd79dd20e);
CAPNP_DECLARE_SCHEMA(b79ea888745f2abc);
enum class ManInterveneFlag_b79ea888745f2abc: uint16_t {
  MAN_INTERVENE_TRUE,
  MAN_INTERVENE_FALSE,
};
CAPNP_DECLARE_ENUM(ManInterveneFlag, b79ea888745f2abc);
CAPNP_DECLARE_SCHEMA(eee51a55b7b5ca56);
CAPNP_DECLARE_SCHEMA(cf8bdfa4acc6fe68);
enum class EpbReleasedCmd_cf8bdfa4acc6fe68: uint16_t {
  EPB_CMD_RELEASED,
  EPB_CMD_NOT_RELEASED,
};
CAPNP_DECLARE_ENUM(EpbReleasedCmd, cf8bdfa4acc6fe68);
CAPNP_DECLARE_SCHEMA(eb688e9cdc9ddcfa);
CAPNP_DECLARE_SCHEMA(ff2f13e99bf7a928);
enum class EpbReleasedState_ff2f13e99bf7a928: uint16_t {
  EPB_STATE_RELEASED,
  EPB_STATE_NOT_RELEASED,
  EPB_STATE_FAULT,
};
CAPNP_DECLARE_ENUM(EpbReleasedState, ff2f13e99bf7a928);
CAPNP_DECLARE_SCHEMA(f156ae93d87a4f42);
CAPNP_DECLARE_SCHEMA(c33fd6efdfea6ca8);
enum class ChargeState_c33fd6efdfea6ca8: uint16_t {
  NOT_CHARGED,
  SLOW,
  FAST,
  FAULT,
};
CAPNP_DECLARE_ENUM(ChargeState, c33fd6efdfea6ca8);
CAPNP_DECLARE_SCHEMA(e788f71a08398ff8);
CAPNP_DECLARE_SCHEMA(c46816b4d4d99076);
CAPNP_DECLARE_SCHEMA(e878b34a97261d06);
CAPNP_DECLARE_SCHEMA(9e967c4207315d4d);
CAPNP_DECLARE_SCHEMA(fd30b3a6ada94825);
enum class WireErrorCode_fd30b3a6ada94825: uint16_t {
  NONE,
  USER_SELECT_EXIT,
  USER_TAKE_OVER_E_P_B,
  USER_TAKE_OVER_THROTTLE,
  USER_TAKE_OVER_BRAKE,
  USER_TAKE_OVER_STEERING,
  USER_TAKE_OVER_GEAR,
  DOOR_OPENED,
  FRONT_LID_OPENED,
  REAR_LID_OPENED,
  DRIVER_SEAT_BELT_OPENED,
  REAR_MIRROR_FOLD,
  ESC_ACTIVE,
  ASSOCIATE_ERROR,
  SENSOR_ERROR,
  HARDWARE_ERROR,
  HOFTWARE_ERROR,
  IS_ABORT_R_P_A_SIGNAL_LOST,
  CONTROL_ABORT,
  CONTROL_ERROR,
  OVER_SPEED,
  MEB_COLLISION,
  OTHER_ERROR1,
  OTHER_ERROR2,
};
CAPNP_DECLARE_ENUM(WireErrorCode, fd30b3a6ada94825);
CAPNP_DECLARE_SCHEMA(a125ce3340855912);
enum class WireStatus_a125ce3340855912: uint16_t {
  INIT,
  IS_CONNECTING_WIRE,
  IS_IN_WIRE,
  IS_PENDING,
  IS_ABORT,
};
CAPNP_DECLARE_ENUM(WireStatus, a125ce3340855912);
CAPNP_DECLARE_SCHEMA(aa6d3ca427340a80);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace vehicle {

struct TimestampHist {
  TimestampHist() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a639187fcee9da02, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LongStopDriveOff {
  LongStopDriveOff() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee5f6b94d1856713, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlanningState {
  PlanningState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0ed0fddc00f30a5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Beam {
  Beam() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd4d9614a1130459, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BrakeCmd {
  BrakeCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CmdType_8e156ba0369c0277 CmdType;

  typedef ::capnp::schemas::BrakeMode_96bc966f9e3e3d97 BrakeMode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a16c058dad1ebfea, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BrakeReport {
  BrakeReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(960cebbec10abf61, 7, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Chassis {
  Chassis() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98ad5e507f735c6b, 13, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::GearCommand_b9ed2af3aafb9b49 GearCommand;

struct GearCmd {
  GearCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dde25f9b36b87c2e, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ApaCmd {
  ApaCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c881b7556606e871, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GearReport {
  GearReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0a99baa1bfc7ea1, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Imu {
  Imu() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(800d0eef01d05a83, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Misc {
  Misc() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc0d325796cefd4c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ModeCmd {
  ModeCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::Gl8Mode_d85049168ba2f6f4 Gl8Mode;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e687dbf57d23e5af, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::MotionMode_9d5320e21be53a57 MotionMode;

struct ModeReport {
  ModeReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d77521c71d88ef24, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Navi {
  Navi() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd419287a08d6492, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Sonar {
  Sonar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd592f2d740c456d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SteeringCmd {
  SteeringCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CmdType_db7bdfdae7622c67 CmdType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c082914e7386031b, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SteeringReport {
  SteeringReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ManInterveneFlag_b8321f8c09d7c2a6 ManInterveneFlag;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3e70ae068881f52, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ThrottleCmd {
  ThrottleCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CmdType_c333a75103888196 CmdType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a76dde9054a4c85e, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ThrottleReport {
  ThrottleReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c81d0273a7191982, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AccCmd {
  AccCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CmdType_cb3add3fb6122a1c CmdType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fdf8ba86c79cf2cd, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AccReport {
  AccReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ActualState_f8b9475bd79dd20e ActualState;

  typedef ::capnp::schemas::ManInterveneFlag_b79ea888745f2abc ManInterveneFlag;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e12407a4d81fe1d9, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EpbCmd {
  EpbCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EpbReleasedCmd_cf8bdfa4acc6fe68 EpbReleasedCmd;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eee51a55b7b5ca56, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EpbReport {
  EpbReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::EpbReleasedState_ff2f13e99bf7a928 EpbReleasedState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb688e9cdc9ddcfa, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BodyReport {
  BodyReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::ChargeState_c33fd6efdfea6ca8 ChargeState;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f156ae93d87a4f42, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleCmd {
  VehicleCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e788f71a08398ff8, 3, 13)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleReport {
  VehicleReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c46816b4d4d99076, 0, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RpaVehicleCmd {
  RpaVehicleCmd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e878b34a97261d06, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingHmiReport {
  ParkingHmiReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e967c4207315d4d, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::WireErrorCode_fd30b3a6ada94825 WireErrorCode;

typedef ::capnp::schemas::WireStatus_a125ce3340855912 WireStatus;

struct WireStatusReport {
  WireStatusReport() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa6d3ca427340a80, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TimestampHist::Reader {
public:
  typedef TimestampHist Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOdoTime() const;

  inline  ::uint64_t getVehReportTime() const;

  inline  ::uint64_t getTrajectoryTime() const;

  inline  ::uint64_t getSystemStateTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TimestampHist::Builder {
public:
  typedef TimestampHist Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getOdoTime();
  inline void setOdoTime( ::uint64_t value);

  inline  ::uint64_t getVehReportTime();
  inline void setVehReportTime( ::uint64_t value);

  inline  ::uint64_t getTrajectoryTime();
  inline void setTrajectoryTime( ::uint64_t value);

  inline  ::uint64_t getSystemStateTime();
  inline void setSystemStateTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TimestampHist::Pipeline {
public:
  typedef TimestampHist Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LongStopDriveOff::Reader {
public:
  typedef LongStopDriveOff Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getLongCtrlDriveOff() const;

  inline bool getLongCtrlDecToStopReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongStopDriveOff::Builder {
public:
  typedef LongStopDriveOff Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getLongCtrlDriveOff();
  inline void setLongCtrlDriveOff(bool value);

  inline bool getLongCtrlDecToStopReq();
  inline void setLongCtrlDecToStopReq(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongStopDriveOff::Pipeline {
public:
  typedef LongStopDriveOff Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlanningState::Reader {
public:
  typedef PlanningState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVehicleState() const;

  inline  ::uint32_t getSelectedSpeed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlanningState::Builder {
public:
  typedef PlanningState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getVehicleState();
  inline void setVehicleState( ::uint32_t value);

  inline  ::uint32_t getSelectedSpeed();
  inline void setSelectedSpeed( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlanningState::Pipeline {
public:
  typedef PlanningState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Beam::Reader {
public:
  typedef Beam Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getStopLamp() const;

  inline bool getTurnLeftLamp() const;

  inline bool getTurnRightLamp() const;

  inline bool getHarzardLamp() const;

  inline  ::uint8_t getNearLamp() const;

  inline bool hasReservedLamp() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getReservedLamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Beam::Builder {
public:
  typedef Beam Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getStopLamp();
  inline void setStopLamp(bool value);

  inline bool getTurnLeftLamp();
  inline void setTurnLeftLamp(bool value);

  inline bool getTurnRightLamp();
  inline void setTurnRightLamp(bool value);

  inline bool getHarzardLamp();
  inline void setHarzardLamp(bool value);

  inline  ::uint8_t getNearLamp();
  inline void setNearLamp( ::uint8_t value);

  inline bool hasReservedLamp();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getReservedLamp();
  inline void setReservedLamp( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReservedLamp(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initReservedLamp(unsigned int size);
  inline void adoptReservedLamp(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownReservedLamp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Beam::Pipeline {
public:
  typedef Beam Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BrakeCmd::Reader {
public:
  typedef BrakeCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCommand() const;

  inline  ::senseAD::msg::vehicle::BrakeCmd::CmdType getCommandType() const;

  inline bool getIgnore() const;

  inline  ::uint32_t getParkingBrake() const;

  inline  ::senseAD::msg::vehicle::BrakeCmd::BrakeMode getBrakeMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BrakeCmd::Builder {
public:
  typedef BrakeCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCommand();
  inline void setCommand(float value);

  inline  ::senseAD::msg::vehicle::BrakeCmd::CmdType getCommandType();
  inline void setCommandType( ::senseAD::msg::vehicle::BrakeCmd::CmdType value);

  inline bool getIgnore();
  inline void setIgnore(bool value);

  inline  ::uint32_t getParkingBrake();
  inline void setParkingBrake( ::uint32_t value);

  inline  ::senseAD::msg::vehicle::BrakeCmd::BrakeMode getBrakeMode();
  inline void setBrakeMode( ::senseAD::msg::vehicle::BrakeCmd::BrakeMode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BrakeCmd::Pipeline {
public:
  typedef BrakeCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BrakeReport::Reader {
public:
  typedef BrakeReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getPedalInput() const;

  inline float getPedalCommand() const;

  inline float getPedalActual() const;

  inline float getPercentCommand() const;

  inline float getPercentActual() const;

  inline float getTorqueInput() const;

  inline float getTorqueCommand() const;

  inline float getTorqueActual() const;

  inline float getDecelCommand() const;

  inline float getDecelActual() const;

  inline float getSensorBrakeTorque() const;

  inline float getSensorWheelTorque() const;

  inline bool getParkingBrakeActual() const;

  inline bool getBusFault() const;

  inline bool getDecelCommandValidity() const;

  inline bool getDecelActualValidity() const;

  inline  ::uint8_t getRemotePackingResp() const;

  inline  ::uint8_t getAssistBrakingStatus() const;

  inline bool getAccBrkngReqDenied() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BrakeReport::Builder {
public:
  typedef BrakeReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getPedalInput();
  inline void setPedalInput(float value);

  inline float getPedalCommand();
  inline void setPedalCommand(float value);

  inline float getPedalActual();
  inline void setPedalActual(float value);

  inline float getPercentCommand();
  inline void setPercentCommand(float value);

  inline float getPercentActual();
  inline void setPercentActual(float value);

  inline float getTorqueInput();
  inline void setTorqueInput(float value);

  inline float getTorqueCommand();
  inline void setTorqueCommand(float value);

  inline float getTorqueActual();
  inline void setTorqueActual(float value);

  inline float getDecelCommand();
  inline void setDecelCommand(float value);

  inline float getDecelActual();
  inline void setDecelActual(float value);

  inline float getSensorBrakeTorque();
  inline void setSensorBrakeTorque(float value);

  inline float getSensorWheelTorque();
  inline void setSensorWheelTorque(float value);

  inline bool getParkingBrakeActual();
  inline void setParkingBrakeActual(bool value);

  inline bool getBusFault();
  inline void setBusFault(bool value);

  inline bool getDecelCommandValidity();
  inline void setDecelCommandValidity(bool value);

  inline bool getDecelActualValidity();
  inline void setDecelActualValidity(bool value);

  inline  ::uint8_t getRemotePackingResp();
  inline void setRemotePackingResp( ::uint8_t value);

  inline  ::uint8_t getAssistBrakingStatus();
  inline void setAssistBrakingStatus( ::uint8_t value);

  inline bool getAccBrkngReqDenied();
  inline void setAccBrkngReqDenied(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BrakeReport::Pipeline {
public:
  typedef BrakeReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Chassis::Reader {
public:
  typedef Chassis Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVehicleMps() const;

  inline float getWheelSpeedFl() const;

  inline float getWheelSpeedFr() const;

  inline float getWheelSpeedRl() const;

  inline float getWheelSpeedRr() const;

  inline  ::int32_t getWheelPulseFl() const;

  inline  ::int32_t getWheelPulseFr() const;

  inline  ::int32_t getWheelPulseRl() const;

  inline  ::int32_t getWheelPulseRr() const;

  inline float getTirePressureFl() const;

  inline float getTirePressureFr() const;

  inline float getTirePressureRl() const;

  inline float getTirePressureRr() const;

  inline float getSuspensionFl() const;

  inline float getSuspensionFr() const;

  inline float getSuspensionRl() const;

  inline float getSuspensionRr() const;

  inline float getFuelLevel() const;

  inline  ::uint16_t getWheelSpeedFlD() const;

  inline  ::uint16_t getWheelSpeedFrD() const;

  inline  ::uint16_t getWheelSpeedRlD() const;

  inline  ::uint16_t getWheelSpeedRrD() const;

  inline float getFrontWheelLav() const;

  inline float getFrontWheelRav() const;

  inline float getRearWheelLav() const;

  inline float getRearWheelRav() const;

  inline  ::uint8_t getHoodStatus() const;

  inline  ::uint8_t getSysPwrMode() const;

  inline bool getPassengerSeatbelt() const;

  inline bool getDriverSeatbelt() const;

  inline bool getStandStill() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Chassis::Builder {
public:
  typedef Chassis Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVehicleMps();
  inline void setVehicleMps(float value);

  inline float getWheelSpeedFl();
  inline void setWheelSpeedFl(float value);

  inline float getWheelSpeedFr();
  inline void setWheelSpeedFr(float value);

  inline float getWheelSpeedRl();
  inline void setWheelSpeedRl(float value);

  inline float getWheelSpeedRr();
  inline void setWheelSpeedRr(float value);

  inline  ::int32_t getWheelPulseFl();
  inline void setWheelPulseFl( ::int32_t value);

  inline  ::int32_t getWheelPulseFr();
  inline void setWheelPulseFr( ::int32_t value);

  inline  ::int32_t getWheelPulseRl();
  inline void setWheelPulseRl( ::int32_t value);

  inline  ::int32_t getWheelPulseRr();
  inline void setWheelPulseRr( ::int32_t value);

  inline float getTirePressureFl();
  inline void setTirePressureFl(float value);

  inline float getTirePressureFr();
  inline void setTirePressureFr(float value);

  inline float getTirePressureRl();
  inline void setTirePressureRl(float value);

  inline float getTirePressureRr();
  inline void setTirePressureRr(float value);

  inline float getSuspensionFl();
  inline void setSuspensionFl(float value);

  inline float getSuspensionFr();
  inline void setSuspensionFr(float value);

  inline float getSuspensionRl();
  inline void setSuspensionRl(float value);

  inline float getSuspensionRr();
  inline void setSuspensionRr(float value);

  inline float getFuelLevel();
  inline void setFuelLevel(float value);

  inline  ::uint16_t getWheelSpeedFlD();
  inline void setWheelSpeedFlD( ::uint16_t value);

  inline  ::uint16_t getWheelSpeedFrD();
  inline void setWheelSpeedFrD( ::uint16_t value);

  inline  ::uint16_t getWheelSpeedRlD();
  inline void setWheelSpeedRlD( ::uint16_t value);

  inline  ::uint16_t getWheelSpeedRrD();
  inline void setWheelSpeedRrD( ::uint16_t value);

  inline float getFrontWheelLav();
  inline void setFrontWheelLav(float value);

  inline float getFrontWheelRav();
  inline void setFrontWheelRav(float value);

  inline float getRearWheelLav();
  inline void setRearWheelLav(float value);

  inline float getRearWheelRav();
  inline void setRearWheelRav(float value);

  inline  ::uint8_t getHoodStatus();
  inline void setHoodStatus( ::uint8_t value);

  inline  ::uint8_t getSysPwrMode();
  inline void setSysPwrMode( ::uint8_t value);

  inline bool getPassengerSeatbelt();
  inline void setPassengerSeatbelt(bool value);

  inline bool getDriverSeatbelt();
  inline void setDriverSeatbelt(bool value);

  inline bool getStandStill();
  inline void setStandStill(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Chassis::Pipeline {
public:
  typedef Chassis Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GearCmd::Reader {
public:
  typedef GearCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::GearCommand getCommand() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GearCmd::Builder {
public:
  typedef GearCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::GearCommand getCommand();
  inline void setCommand( ::senseAD::msg::vehicle::GearCommand value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GearCmd::Pipeline {
public:
  typedef GearCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ApaCmd::Reader {
public:
  typedef ApaCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getParkStopDist() const;

  inline float getParkMaxVel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ApaCmd::Builder {
public:
  typedef ApaCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getParkStopDist();
  inline void setParkStopDist( ::uint16_t value);

  inline float getParkMaxVel();
  inline void setParkMaxVel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ApaCmd::Pipeline {
public:
  typedef ApaCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GearReport::Reader {
public:
  typedef GearReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::GearCommand getCommand() const;

  inline  ::senseAD::msg::vehicle::GearCommand getActual() const;

  inline bool getBusFault() const;

  inline bool getManIntervene() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GearReport::Builder {
public:
  typedef GearReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::GearCommand getCommand();
  inline void setCommand( ::senseAD::msg::vehicle::GearCommand value);

  inline  ::senseAD::msg::vehicle::GearCommand getActual();
  inline void setActual( ::senseAD::msg::vehicle::GearCommand value);

  inline bool getBusFault();
  inline void setBusFault(bool value);

  inline bool getManIntervene();
  inline void setManIntervene(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GearReport::Pipeline {
public:
  typedef GearReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Imu::Reader {
public:
  typedef Imu Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAccelX() const;

  inline float getAccelY() const;

  inline float getAccelZ() const;

  inline float getGyroX() const;

  inline float getGyroY() const;

  inline float getGyroZ() const;

  inline float getAccAccelX() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Imu::Builder {
public:
  typedef Imu Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAccelX();
  inline void setAccelX(float value);

  inline float getAccelY();
  inline void setAccelY(float value);

  inline float getAccelZ();
  inline void setAccelZ(float value);

  inline float getGyroX();
  inline void setGyroX(float value);

  inline float getGyroY();
  inline void setGyroY(float value);

  inline float getGyroZ();
  inline void setGyroZ(float value);

  inline float getAccAccelX();
  inline void setAccAccelX(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Imu::Pipeline {
public:
  typedef Imu Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Misc::Reader {
public:
  typedef Misc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getDoorFl() const;

  inline bool getDoorFr() const;

  inline bool getDoorRl() const;

  inline bool getDoorRr() const;

  inline bool getDoorHood() const;

  inline bool getDoorTrunk() const;

  inline bool getBtnAccOnoff() const;

  inline bool getBtnAccCancel() const;

  inline bool getBtnAccResume() const;

  inline bool getBtnAccSet() const;

  inline bool getBtnAccDisPls() const;

  inline bool getBtnAccDisMns() const;

  inline bool getBtnAccLkaen() const;

  inline bool getBtnApa() const;

  inline bool getBtnAccReady() const;

  inline  ::uint8_t getDriverSeatBeltst() const;

  inline  ::uint8_t getLeftMirrorFoldUnfoldSt() const;

  inline  ::uint8_t getRightMirrorFoldUnfoldSt() const;

  inline bool hasReserved() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getReserved() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Misc::Builder {
public:
  typedef Misc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getDoorFl();
  inline void setDoorFl(bool value);

  inline bool getDoorFr();
  inline void setDoorFr(bool value);

  inline bool getDoorRl();
  inline void setDoorRl(bool value);

  inline bool getDoorRr();
  inline void setDoorRr(bool value);

  inline bool getDoorHood();
  inline void setDoorHood(bool value);

  inline bool getDoorTrunk();
  inline void setDoorTrunk(bool value);

  inline bool getBtnAccOnoff();
  inline void setBtnAccOnoff(bool value);

  inline bool getBtnAccCancel();
  inline void setBtnAccCancel(bool value);

  inline bool getBtnAccResume();
  inline void setBtnAccResume(bool value);

  inline bool getBtnAccSet();
  inline void setBtnAccSet(bool value);

  inline bool getBtnAccDisPls();
  inline void setBtnAccDisPls(bool value);

  inline bool getBtnAccDisMns();
  inline void setBtnAccDisMns(bool value);

  inline bool getBtnAccLkaen();
  inline void setBtnAccLkaen(bool value);

  inline bool getBtnApa();
  inline void setBtnApa(bool value);

  inline bool getBtnAccReady();
  inline void setBtnAccReady(bool value);

  inline  ::uint8_t getDriverSeatBeltst();
  inline void setDriverSeatBeltst( ::uint8_t value);

  inline  ::uint8_t getLeftMirrorFoldUnfoldSt();
  inline void setLeftMirrorFoldUnfoldSt( ::uint8_t value);

  inline  ::uint8_t getRightMirrorFoldUnfoldSt();
  inline void setRightMirrorFoldUnfoldSt( ::uint8_t value);

  inline bool hasReserved();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getReserved();
  inline void setReserved( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReserved(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initReserved(unsigned int size);
  inline void adoptReserved(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownReserved();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Misc::Pipeline {
public:
  typedef Misc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModeCmd::Reader {
public:
  typedef ModeCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnable() const;

  inline  ::uint32_t getMotionMode() const;

  inline  ::senseAD::msg::vehicle::ModeCmd::Gl8Mode getControlMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModeCmd::Builder {
public:
  typedef ModeCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnable();
  inline void setEnable(bool value);

  inline  ::uint32_t getMotionMode();
  inline void setMotionMode( ::uint32_t value);

  inline  ::senseAD::msg::vehicle::ModeCmd::Gl8Mode getControlMode();
  inline void setControlMode( ::senseAD::msg::vehicle::ModeCmd::Gl8Mode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModeCmd::Pipeline {
public:
  typedef ModeCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ModeReport::Reader {
public:
  typedef ModeReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnable() const;

  inline bool getThrottleEnable() const;

  inline bool getBrakeEnable() const;

  inline bool getSteeringEnable() const;

  inline bool getGearEnable() const;

  inline  ::senseAD::msg::vehicle::MotionMode getMotionMode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ModeReport::Builder {
public:
  typedef ModeReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnable();
  inline void setEnable(bool value);

  inline bool getThrottleEnable();
  inline void setThrottleEnable(bool value);

  inline bool getBrakeEnable();
  inline void setBrakeEnable(bool value);

  inline bool getSteeringEnable();
  inline void setSteeringEnable(bool value);

  inline bool getGearEnable();
  inline void setGearEnable(bool value);

  inline  ::senseAD::msg::vehicle::MotionMode getMotionMode();
  inline void setMotionMode( ::senseAD::msg::vehicle::MotionMode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ModeReport::Pipeline {
public:
  typedef ModeReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Navi::Reader {
public:
  typedef Navi Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLatitude() const;

  inline double getLongitude() const;

  inline double getAltitude() const;

  inline bool hasNmeaGga() const;
  inline  ::capnp::Text::Reader getNmeaGga() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Navi::Builder {
public:
  typedef Navi Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline bool hasNmeaGga();
  inline  ::capnp::Text::Builder getNmeaGga();
  inline void setNmeaGga( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNmeaGga(unsigned int size);
  inline void adoptNmeaGga(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNmeaGga();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Navi::Pipeline {
public:
  typedef Navi Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Sonar::Reader {
public:
  typedef Sonar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArray() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getArray() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Sonar::Builder {
public:
  typedef Sonar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasArray();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getArray();
  inline void setArray( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setArray(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initArray(unsigned int size);
  inline void adoptArray(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownArray();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Sonar::Pipeline {
public:
  typedef Sonar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SteeringCmd::Reader {
public:
  typedef SteeringCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCommand() const;

  inline  ::senseAD::msg::vehicle::SteeringCmd::CmdType getCommandType() const;

  inline float getVelocity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SteeringCmd::Builder {
public:
  typedef SteeringCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCommand();
  inline void setCommand(float value);

  inline  ::senseAD::msg::vehicle::SteeringCmd::CmdType getCommandType();
  inline void setCommandType( ::senseAD::msg::vehicle::SteeringCmd::CmdType value);

  inline float getVelocity();
  inline void setVelocity(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SteeringCmd::Pipeline {
public:
  typedef SteeringCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SteeringReport::Reader {
public:
  typedef SteeringReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getAngleCommand() const;

  inline float getAngleActual() const;

  inline float getTorqueCommand() const;

  inline float getTorqueActual() const;

  inline bool getBusFault() const;

  inline  ::uint32_t getAngleRotspd() const;

  inline  ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag getManIntervene() const;

  inline  ::uint8_t getAccEps() const;

  inline  ::uint32_t getManInterveneTorque() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SteeringReport::Builder {
public:
  typedef SteeringReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getAngleCommand();
  inline void setAngleCommand(float value);

  inline float getAngleActual();
  inline void setAngleActual(float value);

  inline float getTorqueCommand();
  inline void setTorqueCommand(float value);

  inline float getTorqueActual();
  inline void setTorqueActual(float value);

  inline bool getBusFault();
  inline void setBusFault(bool value);

  inline  ::uint32_t getAngleRotspd();
  inline void setAngleRotspd( ::uint32_t value);

  inline  ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag getManIntervene();
  inline void setManIntervene( ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag value);

  inline  ::uint8_t getAccEps();
  inline void setAccEps( ::uint8_t value);

  inline  ::uint32_t getManInterveneTorque();
  inline void setManInterveneTorque( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SteeringReport::Pipeline {
public:
  typedef SteeringReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThrottleCmd::Reader {
public:
  typedef ThrottleCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCommand() const;

  inline  ::senseAD::msg::vehicle::ThrottleCmd::CmdType getCommandType() const;

  inline bool getIgnore() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThrottleCmd::Builder {
public:
  typedef ThrottleCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCommand();
  inline void setCommand(float value);

  inline  ::senseAD::msg::vehicle::ThrottleCmd::CmdType getCommandType();
  inline void setCommandType( ::senseAD::msg::vehicle::ThrottleCmd::CmdType value);

  inline bool getIgnore();
  inline void setIgnore(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThrottleCmd::Pipeline {
public:
  typedef ThrottleCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThrottleReport::Reader {
public:
  typedef ThrottleReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getPedalInput() const;

  inline float getPedalCommand() const;

  inline float getPedalActual() const;

  inline float getPercentCommand() const;

  inline float getPercentActual() const;

  inline float getEngineRpm() const;

  inline bool getBusFault() const;

  inline  ::uint8_t getAccEcm() const;

  inline float getTorqueCommand() const;

  inline float getTorqueActual() const;

  inline bool getAccDriverOrvd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThrottleReport::Builder {
public:
  typedef ThrottleReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getPedalInput();
  inline void setPedalInput(float value);

  inline float getPedalCommand();
  inline void setPedalCommand(float value);

  inline float getPedalActual();
  inline void setPedalActual(float value);

  inline float getPercentCommand();
  inline void setPercentCommand(float value);

  inline float getPercentActual();
  inline void setPercentActual(float value);

  inline float getEngineRpm();
  inline void setEngineRpm(float value);

  inline bool getBusFault();
  inline void setBusFault(bool value);

  inline  ::uint8_t getAccEcm();
  inline void setAccEcm( ::uint8_t value);

  inline float getTorqueCommand();
  inline void setTorqueCommand(float value);

  inline float getTorqueActual();
  inline void setTorqueActual(float value);

  inline bool getAccDriverOrvd();
  inline void setAccDriverOrvd(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThrottleReport::Pipeline {
public:
  typedef ThrottleReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AccCmd::Reader {
public:
  typedef AccCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getCommandValue() const;

  inline  ::senseAD::msg::vehicle::AccCmd::CmdType getCommandType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AccCmd::Builder {
public:
  typedef AccCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getCommandValue();
  inline void setCommandValue(float value);

  inline  ::senseAD::msg::vehicle::AccCmd::CmdType getCommandType();
  inline void setCommandType( ::senseAD::msg::vehicle::AccCmd::CmdType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AccCmd::Pipeline {
public:
  typedef AccCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AccReport::Reader {
public:
  typedef AccReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::AccReport::ActualState getStateActual() const;

  inline float getValueActual() const;

  inline float getPedalPosition() const;

  inline  ::senseAD::msg::vehicle::AccReport::ManInterveneFlag getManIntervene() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AccReport::Builder {
public:
  typedef AccReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::AccReport::ActualState getStateActual();
  inline void setStateActual( ::senseAD::msg::vehicle::AccReport::ActualState value);

  inline float getValueActual();
  inline void setValueActual(float value);

  inline float getPedalPosition();
  inline void setPedalPosition(float value);

  inline  ::senseAD::msg::vehicle::AccReport::ManInterveneFlag getManIntervene();
  inline void setManIntervene( ::senseAD::msg::vehicle::AccReport::ManInterveneFlag value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AccReport::Pipeline {
public:
  typedef AccReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EpbCmd::Reader {
public:
  typedef EpbCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd getCommandValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EpbCmd::Builder {
public:
  typedef EpbCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd getCommandValue();
  inline void setCommandValue( ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EpbCmd::Pipeline {
public:
  typedef EpbCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EpbReport::Reader {
public:
  typedef EpbReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::EpbReport::EpbReleasedState getStateActual() const;

  inline bool getEpbIntervener() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EpbReport::Builder {
public:
  typedef EpbReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::EpbReport::EpbReleasedState getStateActual();
  inline void setStateActual( ::senseAD::msg::vehicle::EpbReport::EpbReleasedState value);

  inline bool getEpbIntervener();
  inline void setEpbIntervener(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EpbReport::Pipeline {
public:
  typedef EpbReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BodyReport::Reader {
public:
  typedef BodyReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStateFlags() const;

  inline  ::uint32_t getSunshineIntensity() const;

  inline  ::uint32_t getLightSignal() const;

  inline  ::senseAD::msg::vehicle::BodyReport::ChargeState getChargeState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BodyReport::Builder {
public:
  typedef BodyReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStateFlags();
  inline void setStateFlags( ::uint64_t value);

  inline  ::uint32_t getSunshineIntensity();
  inline void setSunshineIntensity( ::uint32_t value);

  inline  ::uint32_t getLightSignal();
  inline void setLightSignal( ::uint32_t value);

  inline  ::senseAD::msg::vehicle::BodyReport::ChargeState getChargeState();
  inline void setChargeState( ::senseAD::msg::vehicle::BodyReport::ChargeState value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BodyReport::Pipeline {
public:
  typedef BodyReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleCmd::Reader {
public:
  typedef VehicleCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasMode() const;
  inline  ::senseAD::msg::vehicle::ModeCmd::Reader getMode() const;

  inline bool hasThrottle() const;
  inline  ::senseAD::msg::vehicle::ThrottleCmd::Reader getThrottle() const;

  inline bool hasBrake() const;
  inline  ::senseAD::msg::vehicle::BrakeCmd::Reader getBrake() const;

  inline bool hasSteering() const;
  inline  ::senseAD::msg::vehicle::SteeringCmd::Reader getSteering() const;

  inline bool hasGear() const;
  inline  ::senseAD::msg::vehicle::GearCmd::Reader getGear() const;

  inline bool hasBeam() const;
  inline  ::senseAD::msg::vehicle::Beam::Reader getBeam() const;

  inline bool hasTimeStampHist() const;
  inline  ::senseAD::msg::vehicle::TimestampHist::Reader getTimeStampHist() const;

  inline bool hasLongStopDriveOff() const;
  inline  ::senseAD::msg::vehicle::LongStopDriveOff::Reader getLongStopDriveOff() const;

  inline bool hasPlanningState() const;
  inline  ::senseAD::msg::vehicle::PlanningState::Reader getPlanningState() const;

  inline bool hasAcc() const;
  inline  ::senseAD::msg::vehicle::AccCmd::Reader getAcc() const;

  inline bool hasEpb() const;
  inline  ::senseAD::msg::vehicle::EpbCmd::Reader getEpb() const;

  inline bool hasApa() const;
  inline  ::senseAD::msg::vehicle::ApaCmd::Reader getApa() const;

  inline  ::uint8_t getApaRearMirrorFoldReq() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getFuncType() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getMainStatus() const;

  inline bool getApaOnOffDisp() const;

  inline bool getLapaFunModeReq() const;

  inline bool getApaTRActiveSt() const;

  inline  ::uint8_t getApaVoiceModeSt() const;

  inline  ::uint8_t getApaSpeedModeSt() const;

  inline  ::uint8_t getApaSuggestSwSt() const;

  inline  ::uint8_t getApaSetSwSt() const;

  inline  ::uint8_t getApaStIconDisp() const;

  inline  ::uint8_t getLapaStIconDisp() const;

  inline  ::uint8_t getTraStIconDisp() const;

  inline  ::uint8_t getLapaSetSpeed() const;

  inline  ::uint8_t getLapaSetSpdDisp() const;

  inline  ::uint8_t getApaAutoParkProcessRem() const;

  inline  ::uint8_t getLapaTextRem() const;

  inline  ::uint8_t getApaTRRem() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleCmd::Builder {
public:
  typedef VehicleCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasMode();
  inline  ::senseAD::msg::vehicle::ModeCmd::Builder getMode();
  inline void setMode( ::senseAD::msg::vehicle::ModeCmd::Reader value);
  inline  ::senseAD::msg::vehicle::ModeCmd::Builder initMode();
  inline void adoptMode(::capnp::Orphan< ::senseAD::msg::vehicle::ModeCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::ModeCmd> disownMode();

  inline bool hasThrottle();
  inline  ::senseAD::msg::vehicle::ThrottleCmd::Builder getThrottle();
  inline void setThrottle( ::senseAD::msg::vehicle::ThrottleCmd::Reader value);
  inline  ::senseAD::msg::vehicle::ThrottleCmd::Builder initThrottle();
  inline void adoptThrottle(::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleCmd> disownThrottle();

  inline bool hasBrake();
  inline  ::senseAD::msg::vehicle::BrakeCmd::Builder getBrake();
  inline void setBrake( ::senseAD::msg::vehicle::BrakeCmd::Reader value);
  inline  ::senseAD::msg::vehicle::BrakeCmd::Builder initBrake();
  inline void adoptBrake(::capnp::Orphan< ::senseAD::msg::vehicle::BrakeCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeCmd> disownBrake();

  inline bool hasSteering();
  inline  ::senseAD::msg::vehicle::SteeringCmd::Builder getSteering();
  inline void setSteering( ::senseAD::msg::vehicle::SteeringCmd::Reader value);
  inline  ::senseAD::msg::vehicle::SteeringCmd::Builder initSteering();
  inline void adoptSteering(::capnp::Orphan< ::senseAD::msg::vehicle::SteeringCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringCmd> disownSteering();

  inline bool hasGear();
  inline  ::senseAD::msg::vehicle::GearCmd::Builder getGear();
  inline void setGear( ::senseAD::msg::vehicle::GearCmd::Reader value);
  inline  ::senseAD::msg::vehicle::GearCmd::Builder initGear();
  inline void adoptGear(::capnp::Orphan< ::senseAD::msg::vehicle::GearCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::GearCmd> disownGear();

  inline bool hasBeam();
  inline  ::senseAD::msg::vehicle::Beam::Builder getBeam();
  inline void setBeam( ::senseAD::msg::vehicle::Beam::Reader value);
  inline  ::senseAD::msg::vehicle::Beam::Builder initBeam();
  inline void adoptBeam(::capnp::Orphan< ::senseAD::msg::vehicle::Beam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Beam> disownBeam();

  inline bool hasTimeStampHist();
  inline  ::senseAD::msg::vehicle::TimestampHist::Builder getTimeStampHist();
  inline void setTimeStampHist( ::senseAD::msg::vehicle::TimestampHist::Reader value);
  inline  ::senseAD::msg::vehicle::TimestampHist::Builder initTimeStampHist();
  inline void adoptTimeStampHist(::capnp::Orphan< ::senseAD::msg::vehicle::TimestampHist>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::TimestampHist> disownTimeStampHist();

  inline bool hasLongStopDriveOff();
  inline  ::senseAD::msg::vehicle::LongStopDriveOff::Builder getLongStopDriveOff();
  inline void setLongStopDriveOff( ::senseAD::msg::vehicle::LongStopDriveOff::Reader value);
  inline  ::senseAD::msg::vehicle::LongStopDriveOff::Builder initLongStopDriveOff();
  inline void adoptLongStopDriveOff(::capnp::Orphan< ::senseAD::msg::vehicle::LongStopDriveOff>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::LongStopDriveOff> disownLongStopDriveOff();

  inline bool hasPlanningState();
  inline  ::senseAD::msg::vehicle::PlanningState::Builder getPlanningState();
  inline void setPlanningState( ::senseAD::msg::vehicle::PlanningState::Reader value);
  inline  ::senseAD::msg::vehicle::PlanningState::Builder initPlanningState();
  inline void adoptPlanningState(::capnp::Orphan< ::senseAD::msg::vehicle::PlanningState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::PlanningState> disownPlanningState();

  inline bool hasAcc();
  inline  ::senseAD::msg::vehicle::AccCmd::Builder getAcc();
  inline void setAcc( ::senseAD::msg::vehicle::AccCmd::Reader value);
  inline  ::senseAD::msg::vehicle::AccCmd::Builder initAcc();
  inline void adoptAcc(::capnp::Orphan< ::senseAD::msg::vehicle::AccCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::AccCmd> disownAcc();

  inline bool hasEpb();
  inline  ::senseAD::msg::vehicle::EpbCmd::Builder getEpb();
  inline void setEpb( ::senseAD::msg::vehicle::EpbCmd::Reader value);
  inline  ::senseAD::msg::vehicle::EpbCmd::Builder initEpb();
  inline void adoptEpb(::capnp::Orphan< ::senseAD::msg::vehicle::EpbCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::EpbCmd> disownEpb();

  inline bool hasApa();
  inline  ::senseAD::msg::vehicle::ApaCmd::Builder getApa();
  inline void setApa( ::senseAD::msg::vehicle::ApaCmd::Reader value);
  inline  ::senseAD::msg::vehicle::ApaCmd::Builder initApa();
  inline void adoptApa(::capnp::Orphan< ::senseAD::msg::vehicle::ApaCmd>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::ApaCmd> disownApa();

  inline  ::uint8_t getApaRearMirrorFoldReq();
  inline void setApaRearMirrorFoldReq( ::uint8_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType getFuncType();
  inline void setFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getMainStatus();
  inline void setMainStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline bool getApaOnOffDisp();
  inline void setApaOnOffDisp(bool value);

  inline bool getLapaFunModeReq();
  inline void setLapaFunModeReq(bool value);

  inline bool getApaTRActiveSt();
  inline void setApaTRActiveSt(bool value);

  inline  ::uint8_t getApaVoiceModeSt();
  inline void setApaVoiceModeSt( ::uint8_t value);

  inline  ::uint8_t getApaSpeedModeSt();
  inline void setApaSpeedModeSt( ::uint8_t value);

  inline  ::uint8_t getApaSuggestSwSt();
  inline void setApaSuggestSwSt( ::uint8_t value);

  inline  ::uint8_t getApaSetSwSt();
  inline void setApaSetSwSt( ::uint8_t value);

  inline  ::uint8_t getApaStIconDisp();
  inline void setApaStIconDisp( ::uint8_t value);

  inline  ::uint8_t getLapaStIconDisp();
  inline void setLapaStIconDisp( ::uint8_t value);

  inline  ::uint8_t getTraStIconDisp();
  inline void setTraStIconDisp( ::uint8_t value);

  inline  ::uint8_t getLapaSetSpeed();
  inline void setLapaSetSpeed( ::uint8_t value);

  inline  ::uint8_t getLapaSetSpdDisp();
  inline void setLapaSetSpdDisp( ::uint8_t value);

  inline  ::uint8_t getApaAutoParkProcessRem();
  inline void setApaAutoParkProcessRem( ::uint8_t value);

  inline  ::uint8_t getLapaTextRem();
  inline void setLapaTextRem( ::uint8_t value);

  inline  ::uint8_t getApaTRRem();
  inline void setApaTRRem( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleCmd::Pipeline {
public:
  typedef VehicleCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::vehicle::ModeCmd::Pipeline getMode();
  inline  ::senseAD::msg::vehicle::ThrottleCmd::Pipeline getThrottle();
  inline  ::senseAD::msg::vehicle::BrakeCmd::Pipeline getBrake();
  inline  ::senseAD::msg::vehicle::SteeringCmd::Pipeline getSteering();
  inline  ::senseAD::msg::vehicle::GearCmd::Pipeline getGear();
  inline  ::senseAD::msg::vehicle::Beam::Pipeline getBeam();
  inline  ::senseAD::msg::vehicle::TimestampHist::Pipeline getTimeStampHist();
  inline  ::senseAD::msg::vehicle::LongStopDriveOff::Pipeline getLongStopDriveOff();
  inline  ::senseAD::msg::vehicle::PlanningState::Pipeline getPlanningState();
  inline  ::senseAD::msg::vehicle::AccCmd::Pipeline getAcc();
  inline  ::senseAD::msg::vehicle::EpbCmd::Pipeline getEpb();
  inline  ::senseAD::msg::vehicle::ApaCmd::Pipeline getApa();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleReport::Reader {
public:
  typedef VehicleReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasMode() const;
  inline  ::senseAD::msg::vehicle::ModeReport::Reader getMode() const;

  inline bool hasThrottle() const;
  inline  ::senseAD::msg::vehicle::ThrottleReport::Reader getThrottle() const;

  inline bool hasBrake() const;
  inline  ::senseAD::msg::vehicle::BrakeReport::Reader getBrake() const;

  inline bool hasSteering() const;
  inline  ::senseAD::msg::vehicle::SteeringReport::Reader getSteering() const;

  inline bool hasGear() const;
  inline  ::senseAD::msg::vehicle::GearReport::Reader getGear() const;

  inline bool hasChassis() const;
  inline  ::senseAD::msg::vehicle::Chassis::Reader getChassis() const;

  inline bool hasBeam() const;
  inline  ::senseAD::msg::vehicle::Beam::Reader getBeam() const;

  inline bool hasImu() const;
  inline  ::senseAD::msg::vehicle::Imu::Reader getImu() const;

  inline bool hasNavi() const;
  inline  ::senseAD::msg::vehicle::Navi::Reader getNavi() const;

  inline bool hasSonar() const;
  inline  ::senseAD::msg::vehicle::Sonar::Reader getSonar() const;

  inline bool hasMisc() const;
  inline  ::senseAD::msg::vehicle::Misc::Reader getMisc() const;

  inline bool hasAcc() const;
  inline  ::senseAD::msg::vehicle::AccReport::Reader getAcc() const;

  inline bool hasEpb() const;
  inline  ::senseAD::msg::vehicle::EpbReport::Reader getEpb() const;

  inline bool hasBody() const;
  inline  ::senseAD::msg::vehicle::BodyReport::Reader getBody() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleReport::Builder {
public:
  typedef VehicleReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasMode();
  inline  ::senseAD::msg::vehicle::ModeReport::Builder getMode();
  inline void setMode( ::senseAD::msg::vehicle::ModeReport::Reader value);
  inline  ::senseAD::msg::vehicle::ModeReport::Builder initMode();
  inline void adoptMode(::capnp::Orphan< ::senseAD::msg::vehicle::ModeReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::ModeReport> disownMode();

  inline bool hasThrottle();
  inline  ::senseAD::msg::vehicle::ThrottleReport::Builder getThrottle();
  inline void setThrottle( ::senseAD::msg::vehicle::ThrottleReport::Reader value);
  inline  ::senseAD::msg::vehicle::ThrottleReport::Builder initThrottle();
  inline void adoptThrottle(::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleReport> disownThrottle();

  inline bool hasBrake();
  inline  ::senseAD::msg::vehicle::BrakeReport::Builder getBrake();
  inline void setBrake( ::senseAD::msg::vehicle::BrakeReport::Reader value);
  inline  ::senseAD::msg::vehicle::BrakeReport::Builder initBrake();
  inline void adoptBrake(::capnp::Orphan< ::senseAD::msg::vehicle::BrakeReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeReport> disownBrake();

  inline bool hasSteering();
  inline  ::senseAD::msg::vehicle::SteeringReport::Builder getSteering();
  inline void setSteering( ::senseAD::msg::vehicle::SteeringReport::Reader value);
  inline  ::senseAD::msg::vehicle::SteeringReport::Builder initSteering();
  inline void adoptSteering(::capnp::Orphan< ::senseAD::msg::vehicle::SteeringReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringReport> disownSteering();

  inline bool hasGear();
  inline  ::senseAD::msg::vehicle::GearReport::Builder getGear();
  inline void setGear( ::senseAD::msg::vehicle::GearReport::Reader value);
  inline  ::senseAD::msg::vehicle::GearReport::Builder initGear();
  inline void adoptGear(::capnp::Orphan< ::senseAD::msg::vehicle::GearReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::GearReport> disownGear();

  inline bool hasChassis();
  inline  ::senseAD::msg::vehicle::Chassis::Builder getChassis();
  inline void setChassis( ::senseAD::msg::vehicle::Chassis::Reader value);
  inline  ::senseAD::msg::vehicle::Chassis::Builder initChassis();
  inline void adoptChassis(::capnp::Orphan< ::senseAD::msg::vehicle::Chassis>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Chassis> disownChassis();

  inline bool hasBeam();
  inline  ::senseAD::msg::vehicle::Beam::Builder getBeam();
  inline void setBeam( ::senseAD::msg::vehicle::Beam::Reader value);
  inline  ::senseAD::msg::vehicle::Beam::Builder initBeam();
  inline void adoptBeam(::capnp::Orphan< ::senseAD::msg::vehicle::Beam>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Beam> disownBeam();

  inline bool hasImu();
  inline  ::senseAD::msg::vehicle::Imu::Builder getImu();
  inline void setImu( ::senseAD::msg::vehicle::Imu::Reader value);
  inline  ::senseAD::msg::vehicle::Imu::Builder initImu();
  inline void adoptImu(::capnp::Orphan< ::senseAD::msg::vehicle::Imu>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Imu> disownImu();

  inline bool hasNavi();
  inline  ::senseAD::msg::vehicle::Navi::Builder getNavi();
  inline void setNavi( ::senseAD::msg::vehicle::Navi::Reader value);
  inline  ::senseAD::msg::vehicle::Navi::Builder initNavi();
  inline void adoptNavi(::capnp::Orphan< ::senseAD::msg::vehicle::Navi>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Navi> disownNavi();

  inline bool hasSonar();
  inline  ::senseAD::msg::vehicle::Sonar::Builder getSonar();
  inline void setSonar( ::senseAD::msg::vehicle::Sonar::Reader value);
  inline  ::senseAD::msg::vehicle::Sonar::Builder initSonar();
  inline void adoptSonar(::capnp::Orphan< ::senseAD::msg::vehicle::Sonar>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Sonar> disownSonar();

  inline bool hasMisc();
  inline  ::senseAD::msg::vehicle::Misc::Builder getMisc();
  inline void setMisc( ::senseAD::msg::vehicle::Misc::Reader value);
  inline  ::senseAD::msg::vehicle::Misc::Builder initMisc();
  inline void adoptMisc(::capnp::Orphan< ::senseAD::msg::vehicle::Misc>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::Misc> disownMisc();

  inline bool hasAcc();
  inline  ::senseAD::msg::vehicle::AccReport::Builder getAcc();
  inline void setAcc( ::senseAD::msg::vehicle::AccReport::Reader value);
  inline  ::senseAD::msg::vehicle::AccReport::Builder initAcc();
  inline void adoptAcc(::capnp::Orphan< ::senseAD::msg::vehicle::AccReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::AccReport> disownAcc();

  inline bool hasEpb();
  inline  ::senseAD::msg::vehicle::EpbReport::Builder getEpb();
  inline void setEpb( ::senseAD::msg::vehicle::EpbReport::Reader value);
  inline  ::senseAD::msg::vehicle::EpbReport::Builder initEpb();
  inline void adoptEpb(::capnp::Orphan< ::senseAD::msg::vehicle::EpbReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::EpbReport> disownEpb();

  inline bool hasBody();
  inline  ::senseAD::msg::vehicle::BodyReport::Builder getBody();
  inline void setBody( ::senseAD::msg::vehicle::BodyReport::Reader value);
  inline  ::senseAD::msg::vehicle::BodyReport::Builder initBody();
  inline void adoptBody(::capnp::Orphan< ::senseAD::msg::vehicle::BodyReport>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::vehicle::BodyReport> disownBody();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleReport::Pipeline {
public:
  typedef VehicleReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::vehicle::ModeReport::Pipeline getMode();
  inline  ::senseAD::msg::vehicle::ThrottleReport::Pipeline getThrottle();
  inline  ::senseAD::msg::vehicle::BrakeReport::Pipeline getBrake();
  inline  ::senseAD::msg::vehicle::SteeringReport::Pipeline getSteering();
  inline  ::senseAD::msg::vehicle::GearReport::Pipeline getGear();
  inline  ::senseAD::msg::vehicle::Chassis::Pipeline getChassis();
  inline  ::senseAD::msg::vehicle::Beam::Pipeline getBeam();
  inline  ::senseAD::msg::vehicle::Imu::Pipeline getImu();
  inline  ::senseAD::msg::vehicle::Navi::Pipeline getNavi();
  inline  ::senseAD::msg::vehicle::Sonar::Pipeline getSonar();
  inline  ::senseAD::msg::vehicle::Misc::Pipeline getMisc();
  inline  ::senseAD::msg::vehicle::AccReport::Pipeline getAcc();
  inline  ::senseAD::msg::vehicle::EpbReport::Pipeline getEpb();
  inline  ::senseAD::msg::vehicle::BodyReport::Pipeline getBody();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RpaVehicleCmd::Reader {
public:
  typedef RpaVehicleCmd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint8_t getRpaRearMirrorFoldReq() const;

  inline  ::uint8_t getRpaNoticeDisp() const;

  inline  ::uint8_t getRpaPercentage() const;

  inline bool getRpaStFeedbackSt() const;

  inline bool getRpaLeaveParkStatus() const;

  inline bool getRpaStraightReadyFbSt() const;

  inline bool getRpaReadyFbSt() const;

  inline  ::uint8_t getRpaPrkgslotType() const;

  inline  ::uint8_t getRpaRemCtrlSts() const;

  inline bool getRpaSunroofReq() const;

  inline bool getRpaWinReq() const;

  inline  ::uint8_t getRpaDoorloclReq() const;

  inline  ::uint8_t getRpaPEPSReq() const;

  inline bool getRpaRearLeftVerticalDirectionSt() const;

  inline bool getRpaRearRightVerticalDirectionSt() const;

  inline bool getRpaFrontLeftVerticalDirectionSt() const;

  inline bool getRpaFrontRightVerticalDirectionSt() const;

  inline bool getRpaFrontLeftParrallelDirectionSt() const;

  inline bool getRpaFrontRightParrallelDirectionSt() const;

  inline bool getRpaFrontStraightDirectionSt() const;

  inline bool getRpaRearStraightDirectionSt() const;

  inline  ::uint8_t getRpaSuggestBestDirSt() const;

  inline  ::uint8_t getRpaParkButtonDispSt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RpaVehicleCmd::Builder {
public:
  typedef RpaVehicleCmd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint8_t getRpaRearMirrorFoldReq();
  inline void setRpaRearMirrorFoldReq( ::uint8_t value);

  inline  ::uint8_t getRpaNoticeDisp();
  inline void setRpaNoticeDisp( ::uint8_t value);

  inline  ::uint8_t getRpaPercentage();
  inline void setRpaPercentage( ::uint8_t value);

  inline bool getRpaStFeedbackSt();
  inline void setRpaStFeedbackSt(bool value);

  inline bool getRpaLeaveParkStatus();
  inline void setRpaLeaveParkStatus(bool value);

  inline bool getRpaStraightReadyFbSt();
  inline void setRpaStraightReadyFbSt(bool value);

  inline bool getRpaReadyFbSt();
  inline void setRpaReadyFbSt(bool value);

  inline  ::uint8_t getRpaPrkgslotType();
  inline void setRpaPrkgslotType( ::uint8_t value);

  inline  ::uint8_t getRpaRemCtrlSts();
  inline void setRpaRemCtrlSts( ::uint8_t value);

  inline bool getRpaSunroofReq();
  inline void setRpaSunroofReq(bool value);

  inline bool getRpaWinReq();
  inline void setRpaWinReq(bool value);

  inline  ::uint8_t getRpaDoorloclReq();
  inline void setRpaDoorloclReq( ::uint8_t value);

  inline  ::uint8_t getRpaPEPSReq();
  inline void setRpaPEPSReq( ::uint8_t value);

  inline bool getRpaRearLeftVerticalDirectionSt();
  inline void setRpaRearLeftVerticalDirectionSt(bool value);

  inline bool getRpaRearRightVerticalDirectionSt();
  inline void setRpaRearRightVerticalDirectionSt(bool value);

  inline bool getRpaFrontLeftVerticalDirectionSt();
  inline void setRpaFrontLeftVerticalDirectionSt(bool value);

  inline bool getRpaFrontRightVerticalDirectionSt();
  inline void setRpaFrontRightVerticalDirectionSt(bool value);

  inline bool getRpaFrontLeftParrallelDirectionSt();
  inline void setRpaFrontLeftParrallelDirectionSt(bool value);

  inline bool getRpaFrontRightParrallelDirectionSt();
  inline void setRpaFrontRightParrallelDirectionSt(bool value);

  inline bool getRpaFrontStraightDirectionSt();
  inline void setRpaFrontStraightDirectionSt(bool value);

  inline bool getRpaRearStraightDirectionSt();
  inline void setRpaRearStraightDirectionSt(bool value);

  inline  ::uint8_t getRpaSuggestBestDirSt();
  inline void setRpaSuggestBestDirSt( ::uint8_t value);

  inline  ::uint8_t getRpaParkButtonDispSt();
  inline void setRpaParkButtonDispSt( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RpaVehicleCmd::Pipeline {
public:
  typedef RpaVehicleCmd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingHmiReport::Reader {
public:
  typedef ParkingHmiReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint8_t getIviApaSwReq() const;

  inline  ::uint8_t getIviApaSwitchAppReq() const;

  inline  ::uint8_t getIviTrSwReq() const;

  inline  ::uint8_t getIviApaVoiceModeReq() const;

  inline  ::uint8_t getIviApaSpeedModeReq() const;

  inline  ::uint8_t getIviApaSuggestSwReq() const;

  inline  ::uint8_t getIviApaSetSwReq() const;

  inline  ::uint8_t getIviApaUserExamStatus() const;

  inline  ::uint8_t getIviHpaUserExamStatus() const;

  inline  ::uint8_t getIviFreeParkSwReq() const;

  inline  ::uint8_t getIviLapaSetSwReq() const;

  inline  ::uint8_t getIviSilentMappingSetSwReq() const;

  inline  ::uint8_t getIviVoiceAdjCruiseVehSpdReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingHmiReport::Builder {
public:
  typedef ParkingHmiReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint8_t getIviApaSwReq();
  inline void setIviApaSwReq( ::uint8_t value);

  inline  ::uint8_t getIviApaSwitchAppReq();
  inline void setIviApaSwitchAppReq( ::uint8_t value);

  inline  ::uint8_t getIviTrSwReq();
  inline void setIviTrSwReq( ::uint8_t value);

  inline  ::uint8_t getIviApaVoiceModeReq();
  inline void setIviApaVoiceModeReq( ::uint8_t value);

  inline  ::uint8_t getIviApaSpeedModeReq();
  inline void setIviApaSpeedModeReq( ::uint8_t value);

  inline  ::uint8_t getIviApaSuggestSwReq();
  inline void setIviApaSuggestSwReq( ::uint8_t value);

  inline  ::uint8_t getIviApaSetSwReq();
  inline void setIviApaSetSwReq( ::uint8_t value);

  inline  ::uint8_t getIviApaUserExamStatus();
  inline void setIviApaUserExamStatus( ::uint8_t value);

  inline  ::uint8_t getIviHpaUserExamStatus();
  inline void setIviHpaUserExamStatus( ::uint8_t value);

  inline  ::uint8_t getIviFreeParkSwReq();
  inline void setIviFreeParkSwReq( ::uint8_t value);

  inline  ::uint8_t getIviLapaSetSwReq();
  inline void setIviLapaSetSwReq( ::uint8_t value);

  inline  ::uint8_t getIviSilentMappingSetSwReq();
  inline void setIviSilentMappingSetSwReq( ::uint8_t value);

  inline  ::uint8_t getIviVoiceAdjCruiseVehSpdReq();
  inline void setIviVoiceAdjCruiseVehSpdReq( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingHmiReport::Pipeline {
public:
  typedef ParkingHmiReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WireStatusReport::Reader {
public:
  typedef WireStatusReport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::WireStatus getWireStatus() const;

  inline  ::senseAD::msg::vehicle::WireErrorCode getErrorCode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WireStatusReport::Builder {
public:
  typedef WireStatusReport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::senseAD::msg::vehicle::WireStatus getWireStatus();
  inline void setWireStatus( ::senseAD::msg::vehicle::WireStatus value);

  inline  ::senseAD::msg::vehicle::WireErrorCode getErrorCode();
  inline void setErrorCode( ::senseAD::msg::vehicle::WireErrorCode value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WireStatusReport::Pipeline {
public:
  typedef WireStatusReport Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t TimestampHist::Reader::getOdoTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TimestampHist::Builder::getOdoTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TimestampHist::Builder::setOdoTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TimestampHist::Reader::getVehReportTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TimestampHist::Builder::getVehReportTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TimestampHist::Builder::setVehReportTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TimestampHist::Reader::getTrajectoryTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TimestampHist::Builder::getTrajectoryTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TimestampHist::Builder::setTrajectoryTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t TimestampHist::Reader::getSystemStateTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TimestampHist::Builder::getSystemStateTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TimestampHist::Builder::setSystemStateTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool LongStopDriveOff::Reader::getLongCtrlDriveOff() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LongStopDriveOff::Builder::getLongCtrlDriveOff() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LongStopDriveOff::Builder::setLongCtrlDriveOff(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LongStopDriveOff::Reader::getLongCtrlDecToStopReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool LongStopDriveOff::Builder::getLongCtrlDecToStopReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LongStopDriveOff::Builder::setLongCtrlDecToStopReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlanningState::Reader::getVehicleState() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlanningState::Builder::getVehicleState() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setVehicleState( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlanningState::Reader::getSelectedSpeed() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlanningState::Builder::getSelectedSpeed() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlanningState::Builder::setSelectedSpeed( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Beam::Reader::getStopLamp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Beam::Builder::getStopLamp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Beam::Builder::setStopLamp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Beam::Reader::getTurnLeftLamp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Beam::Builder::getTurnLeftLamp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Beam::Builder::setTurnLeftLamp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Beam::Reader::getTurnRightLamp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Beam::Builder::getTurnRightLamp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Beam::Builder::setTurnRightLamp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Beam::Reader::getHarzardLamp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Beam::Builder::getHarzardLamp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Beam::Builder::setHarzardLamp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Beam::Reader::getNearLamp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Beam::Builder::getNearLamp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Beam::Builder::setNearLamp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Beam::Reader::hasReservedLamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Beam::Builder::hasReservedLamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Beam::Reader::getReservedLamp() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Beam::Builder::getReservedLamp() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Beam::Builder::setReservedLamp( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Beam::Builder::setReservedLamp(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Beam::Builder::initReservedLamp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Beam::Builder::adoptReservedLamp(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Beam::Builder::disownReservedLamp() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float BrakeCmd::Reader::getCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float BrakeCmd::Builder::getCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BrakeCmd::Builder::setCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::BrakeCmd::CmdType BrakeCmd::Reader::getCommandType() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::BrakeCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::BrakeCmd::CmdType BrakeCmd::Builder::getCommandType() {
  return _builder.getDataField< ::senseAD::msg::vehicle::BrakeCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BrakeCmd::Builder::setCommandType( ::senseAD::msg::vehicle::BrakeCmd::CmdType value) {
  _builder.setDataField< ::senseAD::msg::vehicle::BrakeCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeCmd::Reader::getIgnore() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool BrakeCmd::Builder::getIgnore() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void BrakeCmd::Builder::setIgnore(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BrakeCmd::Reader::getParkingBrake() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BrakeCmd::Builder::getParkingBrake() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BrakeCmd::Builder::setParkingBrake( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::BrakeCmd::BrakeMode BrakeCmd::Reader::getBrakeMode() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::BrakeCmd::BrakeMode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::BrakeCmd::BrakeMode BrakeCmd::Builder::getBrakeMode() {
  return _builder.getDataField< ::senseAD::msg::vehicle::BrakeCmd::BrakeMode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void BrakeCmd::Builder::setBrakeMode( ::senseAD::msg::vehicle::BrakeCmd::BrakeMode value) {
  _builder.setDataField< ::senseAD::msg::vehicle::BrakeCmd::BrakeMode>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getPedalInput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getPedalInput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setPedalInput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getPedalCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getPedalCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setPedalCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getPedalActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getPedalActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setPedalActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getPercentCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getPercentCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setPercentCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getPercentActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getPercentActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setPercentActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getTorqueInput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getTorqueInput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setTorqueInput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getTorqueCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getTorqueCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setTorqueCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getTorqueActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getTorqueActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setTorqueActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getDecelCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getDecelCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setDecelCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getDecelActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getDecelActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setDecelActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getSensorBrakeTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getSensorBrakeTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setSensorBrakeTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float BrakeReport::Reader::getSensorWheelTorque() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float BrakeReport::Builder::getSensorWheelTorque() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setSensorWheelTorque(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeReport::Reader::getParkingBrakeActual() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS);
}

inline bool BrakeReport::Builder::getParkingBrakeActual() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setParkingBrakeActual(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<384>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeReport::Reader::getBusFault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<385>() * ::capnp::ELEMENTS);
}

inline bool BrakeReport::Builder::getBusFault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<385>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setBusFault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<385>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeReport::Reader::getDecelCommandValidity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<386>() * ::capnp::ELEMENTS);
}

inline bool BrakeReport::Builder::getDecelCommandValidity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<386>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setDecelCommandValidity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<386>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeReport::Reader::getDecelActualValidity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<387>() * ::capnp::ELEMENTS);
}

inline bool BrakeReport::Builder::getDecelActualValidity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<387>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setDecelActualValidity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<387>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeReport::Reader::getRemotePackingResp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeReport::Builder::getRemotePackingResp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setRemotePackingResp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<49>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t BrakeReport::Reader::getAssistBrakingStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t BrakeReport::Builder::getAssistBrakingStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setAssistBrakingStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<50>() * ::capnp::ELEMENTS, value);
}

inline bool BrakeReport::Reader::getAccBrkngReqDenied() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<388>() * ::capnp::ELEMENTS);
}

inline bool BrakeReport::Builder::getAccBrkngReqDenied() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<388>() * ::capnp::ELEMENTS);
}
inline void BrakeReport::Builder::setAccBrkngReqDenied(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<388>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getVehicleMps() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getVehicleMps() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setVehicleMps(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getWheelSpeedFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getWheelSpeedFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getWheelSpeedFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getWheelSpeedFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getWheelSpeedRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getWheelSpeedRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getWheelSpeedRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getWheelSpeedRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Chassis::Reader::getWheelPulseFl() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Chassis::Builder::getWheelPulseFl() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelPulseFl( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Chassis::Reader::getWheelPulseFr() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Chassis::Builder::getWheelPulseFr() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelPulseFr( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Chassis::Reader::getWheelPulseRl() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Chassis::Builder::getWheelPulseRl() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelPulseRl( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Chassis::Reader::getWheelPulseRr() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Chassis::Builder::getWheelPulseRr() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelPulseRr( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getTirePressureFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getTirePressureFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setTirePressureFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getTirePressureFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getTirePressureFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setTirePressureFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getTirePressureRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getTirePressureRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setTirePressureRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getTirePressureRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getTirePressureRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setTirePressureRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getSuspensionFl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getSuspensionFl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setSuspensionFl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getSuspensionFr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getSuspensionFr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setSuspensionFr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getSuspensionRl() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getSuspensionRl() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setSuspensionRl(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getSuspensionRr() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getSuspensionRr() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setSuspensionRr(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getFuelLevel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getFuelLevel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setFuelLevel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Chassis::Reader::getWheelSpeedFlD() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Chassis::Builder::getWheelSpeedFlD() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedFlD( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Chassis::Reader::getWheelSpeedFrD() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Chassis::Builder::getWheelSpeedFrD() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedFrD( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Chassis::Reader::getWheelSpeedRlD() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Chassis::Builder::getWheelSpeedRlD() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedRlD( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Chassis::Reader::getWheelSpeedRrD() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Chassis::Builder::getWheelSpeedRrD() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setWheelSpeedRrD( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getFrontWheelLav() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getFrontWheelLav() {
  return _builder.getDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setFrontWheelLav(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getFrontWheelRav() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getFrontWheelRav() {
  return _builder.getDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setFrontWheelRav(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getRearWheelLav() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getRearWheelLav() {
  return _builder.getDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setRearWheelLav(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline float Chassis::Reader::getRearWheelRav() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline float Chassis::Builder::getRearWheelRav() {
  return _builder.getDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setRearWheelRav(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Chassis::Reader::getHoodStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Chassis::Builder::getHoodStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setHoodStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Chassis::Reader::getSysPwrMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Chassis::Builder::getSysPwrMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setSysPwrMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool Chassis::Reader::getPassengerSeatbelt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<784>() * ::capnp::ELEMENTS);
}

inline bool Chassis::Builder::getPassengerSeatbelt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<784>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setPassengerSeatbelt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<784>() * ::capnp::ELEMENTS, value);
}

inline bool Chassis::Reader::getDriverSeatbelt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<785>() * ::capnp::ELEMENTS);
}

inline bool Chassis::Builder::getDriverSeatbelt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<785>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setDriverSeatbelt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<785>() * ::capnp::ELEMENTS, value);
}

inline bool Chassis::Reader::getStandStill() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<786>() * ::capnp::ELEMENTS);
}

inline bool Chassis::Builder::getStandStill() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<786>() * ::capnp::ELEMENTS);
}
inline void Chassis::Builder::setStandStill(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<786>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::GearCommand GearCmd::Reader::getCommand() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::GearCommand GearCmd::Builder::getCommand() {
  return _builder.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GearCmd::Builder::setCommand( ::senseAD::msg::vehicle::GearCommand value) {
  _builder.setDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t ApaCmd::Reader::getParkStopDist() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ApaCmd::Builder::getParkStopDist() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ApaCmd::Builder::setParkStopDist( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ApaCmd::Reader::getParkMaxVel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ApaCmd::Builder::getParkMaxVel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ApaCmd::Builder::setParkMaxVel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::GearCommand GearReport::Reader::getCommand() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::GearCommand GearReport::Builder::getCommand() {
  return _builder.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GearReport::Builder::setCommand( ::senseAD::msg::vehicle::GearCommand value) {
  _builder.setDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::GearCommand GearReport::Reader::getActual() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::GearCommand GearReport::Builder::getActual() {
  return _builder.getDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GearReport::Builder::setActual( ::senseAD::msg::vehicle::GearCommand value) {
  _builder.setDataField< ::senseAD::msg::vehicle::GearCommand>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GearReport::Reader::getBusFault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool GearReport::Builder::getBusFault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void GearReport::Builder::setBusFault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool GearReport::Reader::getManIntervene() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool GearReport::Builder::getManIntervene() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void GearReport::Builder::setManIntervene(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccelX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccelY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccelZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccelZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccelZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getGyroZ() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getGyroZ() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setGyroZ(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float Imu::Reader::getAccAccelX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float Imu::Builder::getAccAccelX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setAccAccelX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorFl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorFl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorFl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorFr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorFr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorFr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorRl() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorRl() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorRl(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorRr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorRr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorRr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorHood() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorHood() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorHood(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getDoorTrunk() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getDoorTrunk() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDoorTrunk(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccOnoff() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccOnoff() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccOnoff(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccCancel() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccCancel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccCancel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccResume() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccResume() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccResume(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccSet() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccSet() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccSet(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccDisPls() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccDisPls() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccDisPls(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccDisMns() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccDisMns() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccDisMns(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccLkaen() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccLkaen() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccLkaen(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnApa() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnApa() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnApa(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::getBtnAccReady() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline bool Misc::Builder::getBtnAccReady() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setBtnAccReady(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Misc::Reader::getDriverSeatBeltst() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Misc::Builder::getDriverSeatBeltst() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setDriverSeatBeltst( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Misc::Reader::getLeftMirrorFoldUnfoldSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Misc::Builder::getLeftMirrorFoldUnfoldSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setLeftMirrorFoldUnfoldSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Misc::Reader::getRightMirrorFoldUnfoldSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Misc::Builder::getRightMirrorFoldUnfoldSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Misc::Builder::setRightMirrorFoldUnfoldSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Misc::Reader::hasReserved() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Misc::Builder::hasReserved() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Misc::Reader::getReserved() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Misc::Builder::getReserved() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Misc::Builder::setReserved( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Misc::Builder::setReserved(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Misc::Builder::initReserved(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Misc::Builder::adoptReserved(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Misc::Builder::disownReserved() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ModeCmd::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ModeCmd::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModeCmd::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ModeCmd::Reader::getMotionMode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ModeCmd::Builder::getMotionMode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModeCmd::Builder::setMotionMode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::ModeCmd::Gl8Mode ModeCmd::Reader::getControlMode() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::ModeCmd::Gl8Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::ModeCmd::Gl8Mode ModeCmd::Builder::getControlMode() {
  return _builder.getDataField< ::senseAD::msg::vehicle::ModeCmd::Gl8Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModeCmd::Builder::setControlMode( ::senseAD::msg::vehicle::ModeCmd::Gl8Mode value) {
  _builder.setDataField< ::senseAD::msg::vehicle::ModeCmd::Gl8Mode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModeReport::Reader::getEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ModeReport::Builder::getEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ModeReport::Reader::getThrottleEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ModeReport::Builder::getThrottleEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setThrottleEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ModeReport::Reader::getBrakeEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool ModeReport::Builder::getBrakeEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setBrakeEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ModeReport::Reader::getSteeringEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool ModeReport::Builder::getSteeringEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setSteeringEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ModeReport::Reader::getGearEnable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool ModeReport::Builder::getGearEnable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setGearEnable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::MotionMode ModeReport::Reader::getMotionMode() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::MotionMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::MotionMode ModeReport::Builder::getMotionMode() {
  return _builder.getDataField< ::senseAD::msg::vehicle::MotionMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ModeReport::Builder::setMotionMode( ::senseAD::msg::vehicle::MotionMode value) {
  _builder.setDataField< ::senseAD::msg::vehicle::MotionMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Navi::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Navi::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Navi::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Navi::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Navi::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Navi::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Navi::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Navi::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Navi::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Navi::Reader::hasNmeaGga() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Navi::Builder::hasNmeaGga() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Navi::Reader::getNmeaGga() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Navi::Builder::getNmeaGga() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Navi::Builder::setNmeaGga( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Navi::Builder::initNmeaGga(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Navi::Builder::adoptNmeaGga(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Navi::Builder::disownNmeaGga() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Sonar::Reader::hasArray() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Sonar::Builder::hasArray() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Sonar::Reader::getArray() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Sonar::Builder::getArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Sonar::Builder::setArray( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Sonar::Builder::setArray(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Sonar::Builder::initArray(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Sonar::Builder::adoptArray(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Sonar::Builder::disownArray() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float SteeringCmd::Reader::getCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SteeringCmd::Builder::getCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SteeringCmd::Builder::setCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::SteeringCmd::CmdType SteeringCmd::Reader::getCommandType() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::SteeringCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::SteeringCmd::CmdType SteeringCmd::Builder::getCommandType() {
  return _builder.getDataField< ::senseAD::msg::vehicle::SteeringCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SteeringCmd::Builder::setCommandType( ::senseAD::msg::vehicle::SteeringCmd::CmdType value) {
  _builder.setDataField< ::senseAD::msg::vehicle::SteeringCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float SteeringCmd::Reader::getVelocity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float SteeringCmd::Builder::getVelocity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SteeringCmd::Builder::setVelocity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float SteeringReport::Reader::getAngleCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float SteeringReport::Builder::getAngleCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setAngleCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float SteeringReport::Reader::getAngleActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float SteeringReport::Builder::getAngleActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setAngleActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float SteeringReport::Reader::getTorqueCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float SteeringReport::Builder::getTorqueCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setTorqueCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float SteeringReport::Reader::getTorqueActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float SteeringReport::Builder::getTorqueActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setTorqueActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SteeringReport::Reader::getBusFault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool SteeringReport::Builder::getBusFault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setBusFault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SteeringReport::Reader::getAngleRotspd() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SteeringReport::Builder::getAngleRotspd() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setAngleRotspd( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag SteeringReport::Reader::getManIntervene() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag SteeringReport::Builder::getManIntervene() {
  return _builder.getDataField< ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setManIntervene( ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag value) {
  _builder.setDataField< ::senseAD::msg::vehicle::SteeringReport::ManInterveneFlag>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SteeringReport::Reader::getAccEps() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SteeringReport::Builder::getAccEps() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setAccEps( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SteeringReport::Reader::getManInterveneTorque() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SteeringReport::Builder::getManInterveneTorque() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SteeringReport::Builder::setManInterveneTorque( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleCmd::Reader::getCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ThrottleCmd::Builder::getCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ThrottleCmd::Builder::setCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::ThrottleCmd::CmdType ThrottleCmd::Reader::getCommandType() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::ThrottleCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::ThrottleCmd::CmdType ThrottleCmd::Builder::getCommandType() {
  return _builder.getDataField< ::senseAD::msg::vehicle::ThrottleCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThrottleCmd::Builder::setCommandType( ::senseAD::msg::vehicle::ThrottleCmd::CmdType value) {
  _builder.setDataField< ::senseAD::msg::vehicle::ThrottleCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleCmd::Reader::getIgnore() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool ThrottleCmd::Builder::getIgnore() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void ThrottleCmd::Builder::setIgnore(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getPedalInput() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getPedalInput() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setPedalInput(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getPedalCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getPedalCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setPedalCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getPedalActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getPedalActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setPedalActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getPercentCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getPercentCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setPercentCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getPercentActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getPercentActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setPercentActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getEngineRpm() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getEngineRpm() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setEngineRpm(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleReport::Reader::getBusFault() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool ThrottleReport::Builder::getBusFault() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setBusFault(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ThrottleReport::Reader::getAccEcm() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ThrottleReport::Builder::getAccEcm() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setAccEcm( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getTorqueCommand() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getTorqueCommand() {
  return _builder.getDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setTorqueCommand(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float ThrottleReport::Reader::getTorqueActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float ThrottleReport::Builder::getTorqueActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setTorqueActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ThrottleReport::Reader::getAccDriverOrvd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}

inline bool ThrottleReport::Builder::getAccDriverOrvd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS);
}
inline void ThrottleReport::Builder::setAccDriverOrvd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<193>() * ::capnp::ELEMENTS, value);
}

inline float AccCmd::Reader::getCommandValue() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float AccCmd::Builder::getCommandValue() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AccCmd::Builder::setCommandValue(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::AccCmd::CmdType AccCmd::Reader::getCommandType() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::AccCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::AccCmd::CmdType AccCmd::Builder::getCommandType() {
  return _builder.getDataField< ::senseAD::msg::vehicle::AccCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AccCmd::Builder::setCommandType( ::senseAD::msg::vehicle::AccCmd::CmdType value) {
  _builder.setDataField< ::senseAD::msg::vehicle::AccCmd::CmdType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::AccReport::ActualState AccReport::Reader::getStateActual() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::AccReport::ActualState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::AccReport::ActualState AccReport::Builder::getStateActual() {
  return _builder.getDataField< ::senseAD::msg::vehicle::AccReport::ActualState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AccReport::Builder::setStateActual( ::senseAD::msg::vehicle::AccReport::ActualState value) {
  _builder.setDataField< ::senseAD::msg::vehicle::AccReport::ActualState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float AccReport::Reader::getValueActual() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float AccReport::Builder::getValueActual() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AccReport::Builder::setValueActual(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float AccReport::Reader::getPedalPosition() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float AccReport::Builder::getPedalPosition() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AccReport::Builder::setPedalPosition(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::AccReport::ManInterveneFlag AccReport::Reader::getManIntervene() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::AccReport::ManInterveneFlag>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::AccReport::ManInterveneFlag AccReport::Builder::getManIntervene() {
  return _builder.getDataField< ::senseAD::msg::vehicle::AccReport::ManInterveneFlag>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AccReport::Builder::setManIntervene( ::senseAD::msg::vehicle::AccReport::ManInterveneFlag value) {
  _builder.setDataField< ::senseAD::msg::vehicle::AccReport::ManInterveneFlag>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd EpbCmd::Reader::getCommandValue() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd EpbCmd::Builder::getCommandValue() {
  return _builder.getDataField< ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EpbCmd::Builder::setCommandValue( ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd value) {
  _builder.setDataField< ::senseAD::msg::vehicle::EpbCmd::EpbReleasedCmd>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::EpbReport::EpbReleasedState EpbReport::Reader::getStateActual() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::EpbReport::EpbReleasedState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::EpbReport::EpbReleasedState EpbReport::Builder::getStateActual() {
  return _builder.getDataField< ::senseAD::msg::vehicle::EpbReport::EpbReleasedState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EpbReport::Builder::setStateActual( ::senseAD::msg::vehicle::EpbReport::EpbReleasedState value) {
  _builder.setDataField< ::senseAD::msg::vehicle::EpbReport::EpbReleasedState>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool EpbReport::Reader::getEpbIntervener() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool EpbReport::Builder::getEpbIntervener() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void EpbReport::Builder::setEpbIntervener(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t BodyReport::Reader::getStateFlags() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t BodyReport::Builder::getStateFlags() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BodyReport::Builder::setStateFlags( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BodyReport::Reader::getSunshineIntensity() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BodyReport::Builder::getSunshineIntensity() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void BodyReport::Builder::setSunshineIntensity( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t BodyReport::Reader::getLightSignal() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t BodyReport::Builder::getLightSignal() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void BodyReport::Builder::setLightSignal( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::BodyReport::ChargeState BodyReport::Reader::getChargeState() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::BodyReport::ChargeState>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::BodyReport::ChargeState BodyReport::Builder::getChargeState() {
  return _builder.getDataField< ::senseAD::msg::vehicle::BodyReport::ChargeState>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void BodyReport::Builder::setChargeState( ::senseAD::msg::vehicle::BodyReport::ChargeState value) {
  _builder.setDataField< ::senseAD::msg::vehicle::BodyReport::ChargeState>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleCmd::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader VehicleCmd::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder VehicleCmd::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline VehicleCmd::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder VehicleCmd::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> VehicleCmd::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::ModeCmd::Reader VehicleCmd::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::ModeCmd::Builder VehicleCmd::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::ModeCmd::Pipeline VehicleCmd::Pipeline::getMode() {
  return  ::senseAD::msg::vehicle::ModeCmd::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setMode( ::senseAD::msg::vehicle::ModeCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::ModeCmd::Builder VehicleCmd::Builder::initMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptMode(
    ::capnp::Orphan< ::senseAD::msg::vehicle::ModeCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::ModeCmd> VehicleCmd::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasThrottle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasThrottle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::ThrottleCmd::Reader VehicleCmd::Reader::getThrottle() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::ThrottleCmd::Builder VehicleCmd::Builder::getThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::ThrottleCmd::Pipeline VehicleCmd::Pipeline::getThrottle() {
  return  ::senseAD::msg::vehicle::ThrottleCmd::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setThrottle( ::senseAD::msg::vehicle::ThrottleCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::ThrottleCmd::Builder VehicleCmd::Builder::initThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptThrottle(
    ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleCmd> VehicleCmd::Builder::disownThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasBrake() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasBrake() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::BrakeCmd::Reader VehicleCmd::Reader::getBrake() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::BrakeCmd::Builder VehicleCmd::Builder::getBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::BrakeCmd::Pipeline VehicleCmd::Pipeline::getBrake() {
  return  ::senseAD::msg::vehicle::BrakeCmd::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setBrake( ::senseAD::msg::vehicle::BrakeCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::BrakeCmd::Builder VehicleCmd::Builder::initBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptBrake(
    ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeCmd> VehicleCmd::Builder::disownBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasSteering() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasSteering() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::SteeringCmd::Reader VehicleCmd::Reader::getSteering() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::SteeringCmd::Builder VehicleCmd::Builder::getSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::SteeringCmd::Pipeline VehicleCmd::Pipeline::getSteering() {
  return  ::senseAD::msg::vehicle::SteeringCmd::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setSteering( ::senseAD::msg::vehicle::SteeringCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::SteeringCmd::Builder VehicleCmd::Builder::initSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptSteering(
    ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringCmd> VehicleCmd::Builder::disownSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::GearCmd::Reader VehicleCmd::Reader::getGear() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::GearCmd::Builder VehicleCmd::Builder::getGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::GearCmd::Pipeline VehicleCmd::Pipeline::getGear() {
  return  ::senseAD::msg::vehicle::GearCmd::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setGear( ::senseAD::msg::vehicle::GearCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::GearCmd::Builder VehicleCmd::Builder::initGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptGear(
    ::capnp::Orphan< ::senseAD::msg::vehicle::GearCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::GearCmd> VehicleCmd::Builder::disownGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasBeam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasBeam() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Beam::Reader VehicleCmd::Reader::getBeam() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Beam::Builder VehicleCmd::Builder::getBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Beam::Pipeline VehicleCmd::Pipeline::getBeam() {
  return  ::senseAD::msg::vehicle::Beam::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setBeam( ::senseAD::msg::vehicle::Beam::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Beam::Builder VehicleCmd::Builder::initBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptBeam(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Beam>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Beam> VehicleCmd::Builder::disownBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasTimeStampHist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasTimeStampHist() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::TimestampHist::Reader VehicleCmd::Reader::getTimeStampHist() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::TimestampHist::Builder VehicleCmd::Builder::getTimeStampHist() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::TimestampHist::Pipeline VehicleCmd::Pipeline::getTimeStampHist() {
  return  ::senseAD::msg::vehicle::TimestampHist::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setTimeStampHist( ::senseAD::msg::vehicle::TimestampHist::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::TimestampHist::Builder VehicleCmd::Builder::initTimeStampHist() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptTimeStampHist(
    ::capnp::Orphan< ::senseAD::msg::vehicle::TimestampHist>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::TimestampHist> VehicleCmd::Builder::disownTimeStampHist() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::TimestampHist>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasLongStopDriveOff() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasLongStopDriveOff() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::LongStopDriveOff::Reader VehicleCmd::Reader::getLongStopDriveOff() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::LongStopDriveOff::Builder VehicleCmd::Builder::getLongStopDriveOff() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::LongStopDriveOff::Pipeline VehicleCmd::Pipeline::getLongStopDriveOff() {
  return  ::senseAD::msg::vehicle::LongStopDriveOff::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setLongStopDriveOff( ::senseAD::msg::vehicle::LongStopDriveOff::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::LongStopDriveOff::Builder VehicleCmd::Builder::initLongStopDriveOff() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptLongStopDriveOff(
    ::capnp::Orphan< ::senseAD::msg::vehicle::LongStopDriveOff>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::LongStopDriveOff> VehicleCmd::Builder::disownLongStopDriveOff() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::LongStopDriveOff>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasPlanningState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasPlanningState() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::PlanningState::Reader VehicleCmd::Reader::getPlanningState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::PlanningState::Builder VehicleCmd::Builder::getPlanningState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::PlanningState::Pipeline VehicleCmd::Pipeline::getPlanningState() {
  return  ::senseAD::msg::vehicle::PlanningState::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setPlanningState( ::senseAD::msg::vehicle::PlanningState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::PlanningState::Builder VehicleCmd::Builder::initPlanningState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptPlanningState(
    ::capnp::Orphan< ::senseAD::msg::vehicle::PlanningState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::PlanningState> VehicleCmd::Builder::disownPlanningState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::PlanningState>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasAcc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasAcc() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::AccCmd::Reader VehicleCmd::Reader::getAcc() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::AccCmd::Builder VehicleCmd::Builder::getAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::AccCmd::Pipeline VehicleCmd::Pipeline::getAcc() {
  return  ::senseAD::msg::vehicle::AccCmd::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setAcc( ::senseAD::msg::vehicle::AccCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::AccCmd::Builder VehicleCmd::Builder::initAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptAcc(
    ::capnp::Orphan< ::senseAD::msg::vehicle::AccCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::AccCmd> VehicleCmd::Builder::disownAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasEpb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasEpb() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::EpbCmd::Reader VehicleCmd::Reader::getEpb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::EpbCmd::Builder VehicleCmd::Builder::getEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::EpbCmd::Pipeline VehicleCmd::Pipeline::getEpb() {
  return  ::senseAD::msg::vehicle::EpbCmd::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setEpb( ::senseAD::msg::vehicle::EpbCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::EpbCmd::Builder VehicleCmd::Builder::initEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptEpb(
    ::capnp::Orphan< ::senseAD::msg::vehicle::EpbCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::EpbCmd> VehicleCmd::Builder::disownEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool VehicleCmd::Reader::hasApa() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleCmd::Builder::hasApa() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::ApaCmd::Reader VehicleCmd::Reader::getApa() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::ApaCmd::Builder VehicleCmd::Builder::getApa() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::ApaCmd::Pipeline VehicleCmd::Pipeline::getApa() {
  return  ::senseAD::msg::vehicle::ApaCmd::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void VehicleCmd::Builder::setApa( ::senseAD::msg::vehicle::ApaCmd::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::ApaCmd::Builder VehicleCmd::Builder::initApa() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void VehicleCmd::Builder::adoptApa(
    ::capnp::Orphan< ::senseAD::msg::vehicle::ApaCmd>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::ApaCmd> VehicleCmd::Builder::disownApa() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ApaCmd>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline  ::uint8_t VehicleCmd::Reader::getApaRearMirrorFoldReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaRearMirrorFoldReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaRearMirrorFoldReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType VehicleCmd::Reader::getFuncType() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainFuncType VehicleCmd::Builder::getFuncType() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setFuncType( ::senseAD::msg::avp_state_v3::AvpMainFuncType value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainFuncType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus VehicleCmd::Reader::getMainStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus VehicleCmd::Builder::getMainStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setMainStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleCmd::Reader::getApaOnOffDisp() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool VehicleCmd::Builder::getApaOnOffDisp() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaOnOffDisp(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleCmd::Reader::getLapaFunModeReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool VehicleCmd::Builder::getLapaFunModeReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setLapaFunModeReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleCmd::Reader::getApaTRActiveSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline bool VehicleCmd::Builder::getApaTRActiveSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaTRActiveSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaVoiceModeSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaVoiceModeSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaVoiceModeSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaSpeedModeSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaSpeedModeSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaSpeedModeSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaSuggestSwSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaSuggestSwSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaSuggestSwSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaSetSwSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaSetSwSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaSetSwSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaStIconDisp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaStIconDisp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaStIconDisp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getLapaStIconDisp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getLapaStIconDisp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setLapaStIconDisp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getTraStIconDisp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getTraStIconDisp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setTraStIconDisp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getLapaSetSpeed() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getLapaSetSpeed() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setLapaSetSpeed( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getLapaSetSpdDisp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getLapaSetSpdDisp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setLapaSetSpdDisp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaAutoParkProcessRem() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaAutoParkProcessRem() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaAutoParkProcessRem( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getLapaTextRem() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getLapaTextRem() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setLapaTextRem( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleCmd::Reader::getApaTRRem() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleCmd::Builder::getApaTRRem() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void VehicleCmd::Builder::setApaTRRem( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleReport::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader VehicleReport::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder VehicleReport::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline VehicleReport::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder VehicleReport::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> VehicleReport::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasMode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasMode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::ModeReport::Reader VehicleReport::Reader::getMode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::ModeReport::Builder VehicleReport::Builder::getMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::ModeReport::Pipeline VehicleReport::Pipeline::getMode() {
  return  ::senseAD::msg::vehicle::ModeReport::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setMode( ::senseAD::msg::vehicle::ModeReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::ModeReport::Builder VehicleReport::Builder::initMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptMode(
    ::capnp::Orphan< ::senseAD::msg::vehicle::ModeReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::ModeReport> VehicleReport::Builder::disownMode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ModeReport>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasThrottle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasThrottle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::ThrottleReport::Reader VehicleReport::Reader::getThrottle() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::ThrottleReport::Builder VehicleReport::Builder::getThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::ThrottleReport::Pipeline VehicleReport::Pipeline::getThrottle() {
  return  ::senseAD::msg::vehicle::ThrottleReport::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setThrottle( ::senseAD::msg::vehicle::ThrottleReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::ThrottleReport::Builder VehicleReport::Builder::initThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptThrottle(
    ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::ThrottleReport> VehicleReport::Builder::disownThrottle() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::ThrottleReport>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasBrake() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasBrake() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::BrakeReport::Reader VehicleReport::Reader::getBrake() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::BrakeReport::Builder VehicleReport::Builder::getBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::BrakeReport::Pipeline VehicleReport::Pipeline::getBrake() {
  return  ::senseAD::msg::vehicle::BrakeReport::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setBrake( ::senseAD::msg::vehicle::BrakeReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::BrakeReport::Builder VehicleReport::Builder::initBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptBrake(
    ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::BrakeReport> VehicleReport::Builder::disownBrake() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BrakeReport>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasSteering() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasSteering() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::SteeringReport::Reader VehicleReport::Reader::getSteering() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::SteeringReport::Builder VehicleReport::Builder::getSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::SteeringReport::Pipeline VehicleReport::Pipeline::getSteering() {
  return  ::senseAD::msg::vehicle::SteeringReport::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setSteering( ::senseAD::msg::vehicle::SteeringReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::SteeringReport::Builder VehicleReport::Builder::initSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptSteering(
    ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::SteeringReport> VehicleReport::Builder::disownSteering() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::SteeringReport>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasGear() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasGear() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::GearReport::Reader VehicleReport::Reader::getGear() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::GearReport::Builder VehicleReport::Builder::getGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::GearReport::Pipeline VehicleReport::Pipeline::getGear() {
  return  ::senseAD::msg::vehicle::GearReport::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setGear( ::senseAD::msg::vehicle::GearReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::GearReport::Builder VehicleReport::Builder::initGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptGear(
    ::capnp::Orphan< ::senseAD::msg::vehicle::GearReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::GearReport> VehicleReport::Builder::disownGear() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::GearReport>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasChassis() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasChassis() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Chassis::Reader VehicleReport::Reader::getChassis() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Chassis::Builder VehicleReport::Builder::getChassis() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Chassis::Pipeline VehicleReport::Pipeline::getChassis() {
  return  ::senseAD::msg::vehicle::Chassis::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setChassis( ::senseAD::msg::vehicle::Chassis::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Chassis::Builder VehicleReport::Builder::initChassis() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptChassis(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Chassis>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Chassis> VehicleReport::Builder::disownChassis() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Chassis>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasBeam() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasBeam() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Beam::Reader VehicleReport::Reader::getBeam() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Beam::Builder VehicleReport::Builder::getBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Beam::Pipeline VehicleReport::Pipeline::getBeam() {
  return  ::senseAD::msg::vehicle::Beam::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setBeam( ::senseAD::msg::vehicle::Beam::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Beam::Builder VehicleReport::Builder::initBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptBeam(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Beam>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Beam> VehicleReport::Builder::disownBeam() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Beam>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasImu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasImu() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Imu::Reader VehicleReport::Reader::getImu() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Imu::Builder VehicleReport::Builder::getImu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Imu::Pipeline VehicleReport::Pipeline::getImu() {
  return  ::senseAD::msg::vehicle::Imu::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setImu( ::senseAD::msg::vehicle::Imu::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Imu::Builder VehicleReport::Builder::initImu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptImu(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Imu>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Imu> VehicleReport::Builder::disownImu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Imu>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasNavi() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasNavi() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Navi::Reader VehicleReport::Reader::getNavi() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Navi::Builder VehicleReport::Builder::getNavi() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Navi::Pipeline VehicleReport::Pipeline::getNavi() {
  return  ::senseAD::msg::vehicle::Navi::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setNavi( ::senseAD::msg::vehicle::Navi::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Navi::Builder VehicleReport::Builder::initNavi() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptNavi(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Navi>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Navi> VehicleReport::Builder::disownNavi() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Navi>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasSonar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasSonar() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Sonar::Reader VehicleReport::Reader::getSonar() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Sonar::Builder VehicleReport::Builder::getSonar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Sonar::Pipeline VehicleReport::Pipeline::getSonar() {
  return  ::senseAD::msg::vehicle::Sonar::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setSonar( ::senseAD::msg::vehicle::Sonar::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Sonar::Builder VehicleReport::Builder::initSonar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptSonar(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Sonar>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Sonar> VehicleReport::Builder::disownSonar() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Sonar>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasMisc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasMisc() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::Misc::Reader VehicleReport::Reader::getMisc() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::Misc::Builder VehicleReport::Builder::getMisc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::Misc::Pipeline VehicleReport::Pipeline::getMisc() {
  return  ::senseAD::msg::vehicle::Misc::Pipeline(_typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setMisc( ::senseAD::msg::vehicle::Misc::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::Misc::Builder VehicleReport::Builder::initMisc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptMisc(
    ::capnp::Orphan< ::senseAD::msg::vehicle::Misc>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::Misc> VehicleReport::Builder::disownMisc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::Misc>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasAcc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasAcc() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::AccReport::Reader VehicleReport::Reader::getAcc() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::AccReport::Builder VehicleReport::Builder::getAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::AccReport::Pipeline VehicleReport::Pipeline::getAcc() {
  return  ::senseAD::msg::vehicle::AccReport::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setAcc( ::senseAD::msg::vehicle::AccReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::AccReport::Builder VehicleReport::Builder::initAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptAcc(
    ::capnp::Orphan< ::senseAD::msg::vehicle::AccReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::AccReport> VehicleReport::Builder::disownAcc() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::AccReport>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasEpb() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasEpb() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::EpbReport::Reader VehicleReport::Reader::getEpb() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::EpbReport::Builder VehicleReport::Builder::getEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::EpbReport::Pipeline VehicleReport::Pipeline::getEpb() {
  return  ::senseAD::msg::vehicle::EpbReport::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setEpb( ::senseAD::msg::vehicle::EpbReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::EpbReport::Builder VehicleReport::Builder::initEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptEpb(
    ::capnp::Orphan< ::senseAD::msg::vehicle::EpbReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::EpbReport> VehicleReport::Builder::disownEpb() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::EpbReport>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool VehicleReport::Reader::hasBody() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleReport::Builder::hasBody() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::vehicle::BodyReport::Reader VehicleReport::Reader::getBody() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::vehicle::BodyReport::Builder VehicleReport::Builder::getBody() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::vehicle::BodyReport::Pipeline VehicleReport::Pipeline::getBody() {
  return  ::senseAD::msg::vehicle::BodyReport::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void VehicleReport::Builder::setBody( ::senseAD::msg::vehicle::BodyReport::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::vehicle::BodyReport::Builder VehicleReport::Builder::initBody() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void VehicleReport::Builder::adoptBody(
    ::capnp::Orphan< ::senseAD::msg::vehicle::BodyReport>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::vehicle::BodyReport> VehicleReport::Builder::disownBody() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::vehicle::BodyReport>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool RpaVehicleCmd::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RpaVehicleCmd::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader RpaVehicleCmd::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder RpaVehicleCmd::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline RpaVehicleCmd::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RpaVehicleCmd::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder RpaVehicleCmd::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RpaVehicleCmd::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> RpaVehicleCmd::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaRearMirrorFoldReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaRearMirrorFoldReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaRearMirrorFoldReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaNoticeDisp() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaNoticeDisp() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaNoticeDisp( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaPercentage() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaPercentage() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaPercentage( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaStFeedbackSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaStFeedbackSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaStFeedbackSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaLeaveParkStatus() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaLeaveParkStatus() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaLeaveParkStatus(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaStraightReadyFbSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaStraightReadyFbSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaStraightReadyFbSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaReadyFbSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaReadyFbSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaReadyFbSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaPrkgslotType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaPrkgslotType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaPrkgslotType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaRemCtrlSts() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaRemCtrlSts() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaRemCtrlSts( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaSunroofReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaSunroofReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaSunroofReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaWinReq() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaWinReq() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaWinReq(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaDoorloclReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaDoorloclReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaDoorloclReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaPEPSReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaPEPSReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaPEPSReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaRearLeftVerticalDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaRearLeftVerticalDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaRearLeftVerticalDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaRearRightVerticalDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaRearRightVerticalDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaRearRightVerticalDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaFrontLeftVerticalDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaFrontLeftVerticalDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaFrontLeftVerticalDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaFrontRightVerticalDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaFrontRightVerticalDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaFrontRightVerticalDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaFrontLeftParrallelDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaFrontLeftParrallelDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaFrontLeftParrallelDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaFrontRightParrallelDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaFrontRightParrallelDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaFrontRightParrallelDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<67>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaFrontStraightDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaFrontStraightDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaFrontStraightDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<68>() * ::capnp::ELEMENTS, value);
}

inline bool RpaVehicleCmd::Reader::getRpaRearStraightDirectionSt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}

inline bool RpaVehicleCmd::Builder::getRpaRearStraightDirectionSt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaRearStraightDirectionSt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<69>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaSuggestBestDirSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaSuggestBestDirSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaSuggestBestDirSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RpaVehicleCmd::Reader::getRpaParkButtonDispSt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RpaVehicleCmd::Builder::getRpaParkButtonDispSt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void RpaVehicleCmd::Builder::setRpaParkButtonDispSt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingHmiReport::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingHmiReport::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader ParkingHmiReport::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingHmiReport::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline ParkingHmiReport::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingHmiReport::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder ParkingHmiReport::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingHmiReport::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> ParkingHmiReport::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaSwitchAppReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaSwitchAppReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaSwitchAppReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviTrSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviTrSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviTrSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaVoiceModeReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaVoiceModeReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaVoiceModeReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaSpeedModeReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaSpeedModeReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaSpeedModeReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaSuggestSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaSuggestSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaSuggestSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaSetSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaSetSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaSetSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviApaUserExamStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviApaUserExamStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviApaUserExamStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviHpaUserExamStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviHpaUserExamStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviHpaUserExamStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviFreeParkSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviFreeParkSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviFreeParkSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviLapaSetSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviLapaSetSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviLapaSetSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviSilentMappingSetSwReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviSilentMappingSetSwReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviSilentMappingSetSwReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ParkingHmiReport::Reader::getIviVoiceAdjCruiseVehSpdReq() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ParkingHmiReport::Builder::getIviVoiceAdjCruiseVehSpdReq() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void ParkingHmiReport::Builder::setIviVoiceAdjCruiseVehSpdReq( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::WireStatus WireStatusReport::Reader::getWireStatus() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::WireStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::WireStatus WireStatusReport::Builder::getWireStatus() {
  return _builder.getDataField< ::senseAD::msg::vehicle::WireStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WireStatusReport::Builder::setWireStatus( ::senseAD::msg::vehicle::WireStatus value) {
  _builder.setDataField< ::senseAD::msg::vehicle::WireStatus>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::vehicle::WireErrorCode WireStatusReport::Reader::getErrorCode() const {
  return _reader.getDataField< ::senseAD::msg::vehicle::WireErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::vehicle::WireErrorCode WireStatusReport::Builder::getErrorCode() {
  return _builder.getDataField< ::senseAD::msg::vehicle::WireErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WireStatusReport::Builder::setErrorCode( ::senseAD::msg::vehicle::WireErrorCode value) {
  _builder.setDataField< ::senseAD::msg::vehicle::WireErrorCode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

