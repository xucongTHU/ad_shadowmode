// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Amap_navi_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(82b64fb858c513f2);
CAPNP_DECLARE_SCHEMA(e48e6039d8c4edfb);
CAPNP_DECLARE_SCHEMA(fa5cd1a4e811e6b5);
CAPNP_DECLARE_SCHEMA(84aa6ee31d004e00);
CAPNP_DECLARE_SCHEMA(e7aee25fc508aed7);
CAPNP_DECLARE_SCHEMA(dcde127265d35746);
CAPNP_DECLARE_SCHEMA(c9cb9ed291392f69);
CAPNP_DECLARE_SCHEMA(8c031304fff7329f);
CAPNP_DECLARE_SCHEMA(e495feda61990a32);
CAPNP_DECLARE_SCHEMA(8f988ee3e6cd8548);
CAPNP_DECLARE_SCHEMA(e9e5f493618dc115);
CAPNP_DECLARE_SCHEMA(aad7569ea25df590);
CAPNP_DECLARE_SCHEMA(9150785675061fcc);
CAPNP_DECLARE_SCHEMA(ee0e6d7a1cae6352);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace amap_navigation {

struct GlobalRouteList {
  GlobalRouteList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82b64fb858c513f2, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStep {
  NavStep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e48e6039d8c4edfb, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Link {
  Link() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa5cd1a4e811e6b5, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AmapNaviInfo {
  AmapNaviInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84aa6ee31d004e00, 5, 12)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ElectronicSpeedLimitInfo {
  ElectronicSpeedLimitInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7aee25fc508aed7, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WeatherInfo {
  WeatherInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcde127265d35746, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficEventInfo {
  TrafficEventInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9cb9ed291392f69, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TollGateInfo {
  TollGateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c031304fff7329f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CameraInfo {
  CameraInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e495feda61990a32, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLightInfo {
  TrafficLightInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f988ee3e6cd8548, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficLight {
  TrafficLight() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9e5f493618dc115, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneInfo {
  LaneInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aad7569ea25df590, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficFacilityInfo {
  TrafficFacilityInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9150785675061fcc, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TrafficStatus {
  TrafficStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee0e6d7a1cae6352, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class GlobalRouteList::Reader {
public:
  typedef GlobalRouteList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool hasSteps() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Reader getSteps() const;

  inline  ::uint32_t getRouteLength() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GlobalRouteList::Builder {
public:
  typedef GlobalRouteList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool hasSteps();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Builder getSteps();
  inline void setSteps( ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Builder initSteps(unsigned int size);
  inline void adoptSteps(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>> disownSteps();

  inline  ::uint32_t getRouteLength();
  inline void setRouteLength( ::uint32_t value);

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GlobalRouteList::Pipeline {
public:
  typedef GlobalRouteList Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStep::Reader {
public:
  typedef NavStep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStepId() const;

  inline  ::uint64_t getLength() const;

  inline bool hasStartPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getStartPoint() const;

  inline bool hasEndPoint() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getEndPoint() const;

  inline  ::uint8_t getMainAction() const;

  inline  ::uint8_t getAssistantAction() const;

  inline bool hasLinks() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Reader getLinks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStep::Builder {
public:
  typedef NavStep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStepId();
  inline void setStepId( ::uint64_t value);

  inline  ::uint64_t getLength();
  inline void setLength( ::uint64_t value);

  inline bool hasStartPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getStartPoint();
  inline void setStartPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initStartPoint();
  inline void adoptStartPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownStartPoint();

  inline bool hasEndPoint();
  inline  ::senseAD::msg::std_msgs::Point::Builder getEndPoint();
  inline void setEndPoint( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initEndPoint();
  inline void adoptEndPoint(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownEndPoint();

  inline  ::uint8_t getMainAction();
  inline void setMainAction( ::uint8_t value);

  inline  ::uint8_t getAssistantAction();
  inline void setAssistantAction( ::uint8_t value);

  inline bool hasLinks();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Builder getLinks();
  inline void setLinks( ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Builder initLinks(unsigned int size);
  inline void adoptLinks(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>> disownLinks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStep::Pipeline {
public:
  typedef NavStep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getStartPoint();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getEndPoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Link::Reader {
public:
  typedef Link Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getLinkId() const;

  inline  ::uint32_t getLength() const;

  inline  ::uint8_t getRoadClass() const;

  inline  ::uint8_t getFormway() const;

  inline  ::uint8_t getLinkType() const;

  inline bool hasLinkName() const;
  inline  ::capnp::Text::Reader getLinkName() const;

  inline  ::uint8_t getSpeedLimit() const;

  inline  ::uint8_t getLaneNum() const;

  inline  ::uint8_t getAvgSpeed() const;

  inline bool getIsInnerRd() const;

  inline bool getIsRestricted() const;

  inline bool getIsParkingRd() const;

  inline bool getIsToll() const;

  inline bool hasGeometry() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getGeometry() const;

  inline bool getHasMultiOut() const;

  inline bool getHasTrafficLight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Link::Builder {
public:
  typedef Link Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getLinkId();
  inline void setLinkId( ::uint64_t value);

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

  inline  ::uint8_t getRoadClass();
  inline void setRoadClass( ::uint8_t value);

  inline  ::uint8_t getFormway();
  inline void setFormway( ::uint8_t value);

  inline  ::uint8_t getLinkType();
  inline void setLinkType( ::uint8_t value);

  inline bool hasLinkName();
  inline  ::capnp::Text::Builder getLinkName();
  inline void setLinkName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLinkName(unsigned int size);
  inline void adoptLinkName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLinkName();

  inline  ::uint8_t getSpeedLimit();
  inline void setSpeedLimit( ::uint8_t value);

  inline  ::uint8_t getLaneNum();
  inline void setLaneNum( ::uint8_t value);

  inline  ::uint8_t getAvgSpeed();
  inline void setAvgSpeed( ::uint8_t value);

  inline bool getIsInnerRd();
  inline void setIsInnerRd(bool value);

  inline bool getIsRestricted();
  inline void setIsRestricted(bool value);

  inline bool getIsParkingRd();
  inline void setIsParkingRd(bool value);

  inline bool getIsToll();
  inline void setIsToll(bool value);

  inline bool hasGeometry();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getGeometry();
  inline void setGeometry( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initGeometry(unsigned int size);
  inline void adoptGeometry(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownGeometry();

  inline bool getHasMultiOut();
  inline void setHasMultiOut(bool value);

  inline bool getHasTrafficLight();
  inline void setHasTrafficLight(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Link::Pipeline {
public:
  typedef Link Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AmapNaviInfo::Reader {
public:
  typedef AmapNaviInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline bool getIsOutOfRoute() const;

  inline  ::uint8_t getNaviType() const;

  inline  ::uint8_t getIconType() const;

  inline  ::int32_t getCurRetainDistance() const;

  inline  ::int32_t getAllLength() const;

  inline  ::int32_t getPathRetainDistance() const;

  inline bool hasLaneInfo() const;
  inline  ::senseAD::msg::amap_navigation::LaneInfo::Reader getLaneInfo() const;

  inline  ::int32_t getCurSpeedLimit() const;

  inline  ::int32_t getCurLink() const;

  inline  ::int32_t getCurStep() const;

  inline  ::int32_t getDistanceToNextLink() const;

  inline bool hasCurRoadNameNavi() const;
  inline  ::capnp::Text::Reader getCurRoadNameNavi() const;

  inline  ::uint8_t getCurRoadLevelForNavi() const;

  inline bool hasCameraInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Reader getCameraInfo() const;

  inline bool hasTrafficFacilityInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Reader getTrafficFacilityInfo() const;

  inline bool hasTrafficLightInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Reader getTrafficLightInfo() const;

  inline  ::uint8_t getEntranceExit() const;

  inline bool hasNaviText() const;
  inline  ::capnp::Text::Reader getNaviText() const;

  inline bool hasTrafficInfo() const;
  inline  ::senseAD::msg::amap_navigation::TrafficStatus::Reader getTrafficInfo() const;

  inline  ::uint8_t getElevatedRoadStatus() const;

  inline  ::uint8_t getParallelRoadStatus() const;

  inline bool hasTollGateInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Reader getTollGateInfo() const;

  inline bool hasElectronicSpeedLimitInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Reader getElectronicSpeedLimitInfo() const;

  inline bool hasWeatherInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Reader getWeatherInfo() const;

  inline bool hasTrafficEventInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Reader getTrafficEventInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AmapNaviInfo::Builder {
public:
  typedef AmapNaviInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline bool getIsOutOfRoute();
  inline void setIsOutOfRoute(bool value);

  inline  ::uint8_t getNaviType();
  inline void setNaviType( ::uint8_t value);

  inline  ::uint8_t getIconType();
  inline void setIconType( ::uint8_t value);

  inline  ::int32_t getCurRetainDistance();
  inline void setCurRetainDistance( ::int32_t value);

  inline  ::int32_t getAllLength();
  inline void setAllLength( ::int32_t value);

  inline  ::int32_t getPathRetainDistance();
  inline void setPathRetainDistance( ::int32_t value);

  inline bool hasLaneInfo();
  inline  ::senseAD::msg::amap_navigation::LaneInfo::Builder getLaneInfo();
  inline void setLaneInfo( ::senseAD::msg::amap_navigation::LaneInfo::Reader value);
  inline  ::senseAD::msg::amap_navigation::LaneInfo::Builder initLaneInfo();
  inline void adoptLaneInfo(::capnp::Orphan< ::senseAD::msg::amap_navigation::LaneInfo>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::amap_navigation::LaneInfo> disownLaneInfo();

  inline  ::int32_t getCurSpeedLimit();
  inline void setCurSpeedLimit( ::int32_t value);

  inline  ::int32_t getCurLink();
  inline void setCurLink( ::int32_t value);

  inline  ::int32_t getCurStep();
  inline void setCurStep( ::int32_t value);

  inline  ::int32_t getDistanceToNextLink();
  inline void setDistanceToNextLink( ::int32_t value);

  inline bool hasCurRoadNameNavi();
  inline  ::capnp::Text::Builder getCurRoadNameNavi();
  inline void setCurRoadNameNavi( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCurRoadNameNavi(unsigned int size);
  inline void adoptCurRoadNameNavi(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCurRoadNameNavi();

  inline  ::uint8_t getCurRoadLevelForNavi();
  inline void setCurRoadLevelForNavi( ::uint8_t value);

  inline bool hasCameraInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Builder getCameraInfo();
  inline void setCameraInfo( ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Builder initCameraInfo(unsigned int size);
  inline void adoptCameraInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>> disownCameraInfo();

  inline bool hasTrafficFacilityInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Builder getTrafficFacilityInfo();
  inline void setTrafficFacilityInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Builder initTrafficFacilityInfo(unsigned int size);
  inline void adoptTrafficFacilityInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>> disownTrafficFacilityInfo();

  inline bool hasTrafficLightInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Builder getTrafficLightInfo();
  inline void setTrafficLightInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Builder initTrafficLightInfo(unsigned int size);
  inline void adoptTrafficLightInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>> disownTrafficLightInfo();

  inline  ::uint8_t getEntranceExit();
  inline void setEntranceExit( ::uint8_t value);

  inline bool hasNaviText();
  inline  ::capnp::Text::Builder getNaviText();
  inline void setNaviText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNaviText(unsigned int size);
  inline void adoptNaviText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNaviText();

  inline bool hasTrafficInfo();
  inline  ::senseAD::msg::amap_navigation::TrafficStatus::Builder getTrafficInfo();
  inline void setTrafficInfo( ::senseAD::msg::amap_navigation::TrafficStatus::Reader value);
  inline  ::senseAD::msg::amap_navigation::TrafficStatus::Builder initTrafficInfo();
  inline void adoptTrafficInfo(::capnp::Orphan< ::senseAD::msg::amap_navigation::TrafficStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::amap_navigation::TrafficStatus> disownTrafficInfo();

  inline  ::uint8_t getElevatedRoadStatus();
  inline void setElevatedRoadStatus( ::uint8_t value);

  inline  ::uint8_t getParallelRoadStatus();
  inline void setParallelRoadStatus( ::uint8_t value);

  inline bool hasTollGateInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Builder getTollGateInfo();
  inline void setTollGateInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Builder initTollGateInfo(unsigned int size);
  inline void adoptTollGateInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>> disownTollGateInfo();

  inline bool hasElectronicSpeedLimitInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Builder getElectronicSpeedLimitInfo();
  inline void setElectronicSpeedLimitInfo( ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Builder initElectronicSpeedLimitInfo(unsigned int size);
  inline void adoptElectronicSpeedLimitInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>> disownElectronicSpeedLimitInfo();

  inline bool hasWeatherInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Builder getWeatherInfo();
  inline void setWeatherInfo( ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Builder initWeatherInfo(unsigned int size);
  inline void adoptWeatherInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>> disownWeatherInfo();

  inline bool hasTrafficEventInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Builder getTrafficEventInfo();
  inline void setTrafficEventInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Builder initTrafficEventInfo(unsigned int size);
  inline void adoptTrafficEventInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>> disownTrafficEventInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AmapNaviInfo::Pipeline {
public:
  typedef AmapNaviInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::amap_navigation::LaneInfo::Pipeline getLaneInfo();
  inline  ::senseAD::msg::amap_navigation::TrafficStatus::Pipeline getTrafficInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ElectronicSpeedLimitInfo::Reader {
public:
  typedef ElectronicSpeedLimitInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getElectronicSpeedLimitType() const;

  inline  ::int32_t getSpeedLimitValue() const;

  inline  ::int32_t getElectronicSpeedLimitDist() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ElectronicSpeedLimitInfo::Builder {
public:
  typedef ElectronicSpeedLimitInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getElectronicSpeedLimitType();
  inline void setElectronicSpeedLimitType( ::uint8_t value);

  inline  ::int32_t getSpeedLimitValue();
  inline void setSpeedLimitValue( ::int32_t value);

  inline  ::int32_t getElectronicSpeedLimitDist();
  inline void setElectronicSpeedLimitDist( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ElectronicSpeedLimitInfo::Pipeline {
public:
  typedef ElectronicSpeedLimitInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WeatherInfo::Reader {
public:
  typedef WeatherInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWeatherName() const;
  inline  ::capnp::Text::Reader getWeatherName() const;

  inline bool hasAlertLevelName() const;
  inline  ::capnp::Text::Reader getAlertLevelName() const;

  inline  ::int32_t getWeatherId() const;

  inline  ::int32_t getAlertLevelId() const;

  inline  ::int32_t getDistanceToCar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WeatherInfo::Builder {
public:
  typedef WeatherInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWeatherName();
  inline  ::capnp::Text::Builder getWeatherName();
  inline void setWeatherName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWeatherName(unsigned int size);
  inline void adoptWeatherName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWeatherName();

  inline bool hasAlertLevelName();
  inline  ::capnp::Text::Builder getAlertLevelName();
  inline void setAlertLevelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlertLevelName(unsigned int size);
  inline void adoptAlertLevelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlertLevelName();

  inline  ::int32_t getWeatherId();
  inline void setWeatherId( ::int32_t value);

  inline  ::int32_t getAlertLevelId();
  inline void setAlertLevelId( ::int32_t value);

  inline  ::int32_t getDistanceToCar();
  inline void setDistanceToCar( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WeatherInfo::Pipeline {
public:
  typedef WeatherInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficEventInfo::Reader {
public:
  typedef TrafficEventInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getTrafficEventType() const;

  inline  ::uint8_t getOccupiedLaneType() const;

  inline  ::int32_t getTrafficEventDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficEventInfo::Builder {
public:
  typedef TrafficEventInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getTrafficEventType();
  inline void setTrafficEventType( ::uint8_t value);

  inline  ::uint8_t getOccupiedLaneType();
  inline void setOccupiedLaneType( ::uint8_t value);

  inline  ::int32_t getTrafficEventDistance();
  inline void setTrafficEventDistance( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficEventInfo::Pipeline {
public:
  typedef TrafficEventInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TollGateInfo::Reader {
public:
  typedef TollGateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLaneTypes() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getLaneTypes() const;

  inline  ::int32_t getDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TollGateInfo::Builder {
public:
  typedef TollGateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLaneTypes();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getLaneTypes();
  inline void setLaneTypes( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLaneTypes(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initLaneTypes(unsigned int size);
  inline void adoptLaneTypes(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownLaneTypes();

  inline  ::int32_t getDistance();
  inline void setDistance( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TollGateInfo::Pipeline {
public:
  typedef TollGateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CameraInfo::Reader {
public:
  typedef CameraInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCameraDistance() const;

  inline  ::uint32_t getCameraSpeed() const;

  inline  ::uint8_t getCameraType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CameraInfo::Builder {
public:
  typedef CameraInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCameraDistance();
  inline void setCameraDistance( ::uint32_t value);

  inline  ::uint32_t getCameraSpeed();
  inline void setCameraSpeed( ::uint32_t value);

  inline  ::uint8_t getCameraType();
  inline void setCameraType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CameraInfo::Pipeline {
public:
  typedef CameraInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLightInfo::Reader {
public:
  typedef TrafficLightInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLightInfo() const;
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Reader getTrafficLightInfo() const;

  inline  ::int32_t getLength() const;

  inline  ::int32_t getLinkIndex() const;

  inline  ::int32_t getLinkId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLightInfo::Builder {
public:
  typedef TrafficLightInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTrafficLightInfo();
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Builder getTrafficLightInfo();
  inline void setTrafficLightInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Builder initTrafficLightInfo(unsigned int size);
  inline void adoptTrafficLightInfo(::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>> disownTrafficLightInfo();

  inline  ::int32_t getLength();
  inline void setLength( ::int32_t value);

  inline  ::int32_t getLinkIndex();
  inline void setLinkIndex( ::int32_t value);

  inline  ::int32_t getLinkId();
  inline void setLinkId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLightInfo::Pipeline {
public:
  typedef TrafficLightInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficLight::Reader {
public:
  typedef TrafficLight Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getStartTime() const;

  inline  ::int64_t getEndTime() const;

  inline  ::uint8_t getTrafficLightState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficLight::Builder {
public:
  typedef TrafficLight Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getStartTime();
  inline void setStartTime( ::int64_t value);

  inline  ::int64_t getEndTime();
  inline void setEndTime( ::int64_t value);

  inline  ::uint8_t getTrafficLightState();
  inline void setTrafficLightState( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficLight::Pipeline {
public:
  typedef TrafficLight Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneInfo::Reader {
public:
  typedef LaneInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasForegroundLane() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getForegroundLane() const;

  inline bool hasBackgroundLane() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getBackgroundLane() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneInfo::Builder {
public:
  typedef LaneInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasForegroundLane();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getForegroundLane();
  inline void setForegroundLane( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setForegroundLane(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initForegroundLane(unsigned int size);
  inline void adoptForegroundLane(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownForegroundLane();

  inline bool hasBackgroundLane();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getBackgroundLane();
  inline void setBackgroundLane( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBackgroundLane(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initBackgroundLane(unsigned int size);
  inline void adoptBackgroundLane(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownBackgroundLane();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneInfo::Pipeline {
public:
  typedef LaneInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficFacilityInfo::Reader {
public:
  typedef TrafficFacilityInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTrafficFacilityDistance() const;

  inline  ::uint32_t getTrafficFacilitySpeed() const;

  inline  ::uint8_t getTrafficFacilityType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficFacilityInfo::Builder {
public:
  typedef TrafficFacilityInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTrafficFacilityDistance();
  inline void setTrafficFacilityDistance( ::uint32_t value);

  inline  ::uint32_t getTrafficFacilitySpeed();
  inline void setTrafficFacilitySpeed( ::uint32_t value);

  inline  ::uint8_t getTrafficFacilityType();
  inline void setTrafficFacilityType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficFacilityInfo::Pipeline {
public:
  typedef TrafficFacilityInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TrafficStatus::Reader {
public:
  typedef TrafficStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLength() const;

  inline  ::int32_t getStartLinkIdx() const;

  inline  ::int32_t getEndLinkIndex() const;

  inline  ::int32_t getStartSegmentIdx() const;

  inline  ::int32_t getEndSegmentIdx() const;

  inline  ::uint8_t getTrafficState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TrafficStatus::Builder {
public:
  typedef TrafficStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLength();
  inline void setLength(double value);

  inline  ::int32_t getStartLinkIdx();
  inline void setStartLinkIdx( ::int32_t value);

  inline  ::int32_t getEndLinkIndex();
  inline void setEndLinkIndex( ::int32_t value);

  inline  ::int32_t getStartSegmentIdx();
  inline void setStartSegmentIdx( ::int32_t value);

  inline  ::int32_t getEndSegmentIdx();
  inline void setEndSegmentIdx( ::int32_t value);

  inline  ::uint8_t getTrafficState();
  inline void setTrafficState( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TrafficStatus::Pipeline {
public:
  typedef TrafficStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool GlobalRouteList::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GlobalRouteList::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader GlobalRouteList::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder GlobalRouteList::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline GlobalRouteList::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GlobalRouteList::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder GlobalRouteList::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GlobalRouteList::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> GlobalRouteList::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GlobalRouteList::Reader::hasSteps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GlobalRouteList::Builder::hasSteps() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Reader GlobalRouteList::Reader::getSteps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Builder GlobalRouteList::Builder::getSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GlobalRouteList::Builder::setSteps( ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>::Builder GlobalRouteList::Builder::initSteps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GlobalRouteList::Builder::adoptSteps(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>> GlobalRouteList::Builder::disownSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::NavStep,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t GlobalRouteList::Reader::getRouteLength() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t GlobalRouteList::Builder::getRouteLength() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GlobalRouteList::Builder::setRouteLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GlobalRouteList::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GlobalRouteList::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GlobalRouteList::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t NavStep::Reader::getStepId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t NavStep::Builder::getStepId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStep::Builder::setStepId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t NavStep::Reader::getLength() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t NavStep::Builder::getLength() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavStep::Builder::setLength( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool NavStep::Reader::hasStartPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStep::Builder::hasStartPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStep::Reader::getStartPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStep::Builder::getStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStep::Pipeline::getStartPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavStep::Builder::setStartPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStep::Builder::initStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStep::Builder::adoptStartPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStep::Builder::disownStartPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NavStep::Reader::hasEndPoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavStep::Builder::hasEndPoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStep::Reader::getEndPoint() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStep::Builder::getEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStep::Pipeline::getEndPoint() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void NavStep::Builder::setEndPoint( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStep::Builder::initEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavStep::Builder::adoptEndPoint(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStep::Builder::disownEndPoint() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t NavStep::Reader::getMainAction() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t NavStep::Builder::getMainAction() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void NavStep::Builder::setMainAction( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t NavStep::Reader::getAssistantAction() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t NavStep::Builder::getAssistantAction() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void NavStep::Builder::setAssistantAction( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool NavStep::Reader::hasLinks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavStep::Builder::hasLinks() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Reader NavStep::Reader::getLinks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Builder NavStep::Builder::getLinks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavStep::Builder::setLinks( ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>::Builder NavStep::Builder::initLinks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavStep::Builder::adoptLinks(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>> NavStep::Builder::disownLinks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::Link,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Link::Reader::getLinkId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Link::Builder::getLinkId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLinkId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Link::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Link::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getRoadClass() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getRoadClass() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setRoadClass( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getFormway() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getFormway() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setFormway( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getLinkType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLinkType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLinkType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::hasLinkName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasLinkName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Link::Reader::getLinkName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Link::Builder::getLinkName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Link::Builder::setLinkName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Link::Builder::initLinkName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptLinkName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Link::Builder::disownLinkName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t Link::Reader::getSpeedLimit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getSpeedLimit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setSpeedLimit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getLaneNum() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getLaneNum() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setLaneNum( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Link::Reader::getAvgSpeed() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Link::Builder::getAvgSpeed() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setAvgSpeed( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::getIsInnerRd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getIsInnerRd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setIsInnerRd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<144>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::getIsRestricted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getIsRestricted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setIsRestricted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<145>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::getIsParkingRd() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getIsParkingRd() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setIsParkingRd(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<146>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::getIsToll() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getIsToll() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setIsToll(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<147>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::hasGeometry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Link::Builder::hasGeometry() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader Link::Reader::getGeometry() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Link::Builder::getGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Link::Builder::setGeometry( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Link::Builder::initGeometry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Link::Builder::adoptGeometry(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> Link::Builder::disownGeometry() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Link::Reader::getHasMultiOut() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getHasMultiOut() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setHasMultiOut(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<148>() * ::capnp::ELEMENTS, value);
}

inline bool Link::Reader::getHasTrafficLight() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}

inline bool Link::Builder::getHasTrafficLight() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS);
}
inline void Link::Builder::setHasTrafficLight(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<149>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader AmapNaviInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder AmapNaviInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline AmapNaviInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AmapNaviInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder AmapNaviInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> AmapNaviInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::getIsOutOfRoute() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AmapNaviInfo::Builder::getIsOutOfRoute() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setIsOutOfRoute(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AmapNaviInfo::Reader::getNaviType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getNaviType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setNaviType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AmapNaviInfo::Reader::getIconType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getIconType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setIconType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getCurRetainDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getCurRetainDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setCurRetainDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getAllLength() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getAllLength() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setAllLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getPathRetainDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getPathRetainDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setPathRetainDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasLaneInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasLaneInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::amap_navigation::LaneInfo::Reader AmapNaviInfo::Reader::getLaneInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::amap_navigation::LaneInfo::Builder AmapNaviInfo::Builder::getLaneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::amap_navigation::LaneInfo::Pipeline AmapNaviInfo::Pipeline::getLaneInfo() {
  return  ::senseAD::msg::amap_navigation::LaneInfo::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AmapNaviInfo::Builder::setLaneInfo( ::senseAD::msg::amap_navigation::LaneInfo::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::amap_navigation::LaneInfo::Builder AmapNaviInfo::Builder::initLaneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::adoptLaneInfo(
    ::capnp::Orphan< ::senseAD::msg::amap_navigation::LaneInfo>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::amap_navigation::LaneInfo> AmapNaviInfo::Builder::disownLaneInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::LaneInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t AmapNaviInfo::Reader::getCurSpeedLimit() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getCurSpeedLimit() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setCurSpeedLimit( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getCurLink() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getCurLink() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setCurLink( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getCurStep() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getCurStep() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setCurStep( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AmapNaviInfo::Reader::getDistanceToNextLink() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AmapNaviInfo::Builder::getDistanceToNextLink() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setDistanceToNextLink( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasCurRoadNameNavi() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasCurRoadNameNavi() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AmapNaviInfo::Reader::getCurRoadNameNavi() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AmapNaviInfo::Builder::getCurRoadNameNavi() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setCurRoadNameNavi( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AmapNaviInfo::Builder::initCurRoadNameNavi(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptCurRoadNameNavi(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AmapNaviInfo::Builder::disownCurRoadNameNavi() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t AmapNaviInfo::Reader::getCurRoadLevelForNavi() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getCurRoadLevelForNavi() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setCurRoadLevelForNavi( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasCameraInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasCameraInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getCameraInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getCameraInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setCameraInfo( ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initCameraInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptCameraInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownCameraInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::CameraInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasTrafficFacilityInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasTrafficFacilityInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getTrafficFacilityInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getTrafficFacilityInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setTrafficFacilityInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initTrafficFacilityInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptTrafficFacilityInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownTrafficFacilityInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficFacilityInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasTrafficLightInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasTrafficLightInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getTrafficLightInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setTrafficLightInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initTrafficLightInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptTrafficLightInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLightInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint8_t AmapNaviInfo::Reader::getEntranceExit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getEntranceExit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setEntranceExit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasNaviText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasNaviText() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AmapNaviInfo::Reader::getNaviText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AmapNaviInfo::Builder::getNaviText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setNaviText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AmapNaviInfo::Builder::initNaviText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptNaviText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AmapNaviInfo::Builder::disownNaviText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasTrafficInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasTrafficInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::amap_navigation::TrafficStatus::Reader AmapNaviInfo::Reader::getTrafficInfo() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::amap_navigation::TrafficStatus::Builder AmapNaviInfo::Builder::getTrafficInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::amap_navigation::TrafficStatus::Pipeline AmapNaviInfo::Pipeline::getTrafficInfo() {
  return  ::senseAD::msg::amap_navigation::TrafficStatus::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void AmapNaviInfo::Builder::setTrafficInfo( ::senseAD::msg::amap_navigation::TrafficStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::amap_navigation::TrafficStatus::Builder AmapNaviInfo::Builder::initTrafficInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::adoptTrafficInfo(
    ::capnp::Orphan< ::senseAD::msg::amap_navigation::TrafficStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::amap_navigation::TrafficStatus> AmapNaviInfo::Builder::disownTrafficInfo() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::amap_navigation::TrafficStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint8_t AmapNaviInfo::Reader::getElevatedRoadStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getElevatedRoadStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setElevatedRoadStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AmapNaviInfo::Reader::getParallelRoadStatus() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AmapNaviInfo::Builder::getParallelRoadStatus() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void AmapNaviInfo::Builder::setParallelRoadStatus( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline bool AmapNaviInfo::Reader::hasTollGateInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasTollGateInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getTollGateInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getTollGateInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setTollGateInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initTollGateInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptTollGateInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownTollGateInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TollGateInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasElectronicSpeedLimitInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasElectronicSpeedLimitInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getElectronicSpeedLimitInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getElectronicSpeedLimitInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setElectronicSpeedLimitInfo( ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initElectronicSpeedLimitInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptElectronicSpeedLimitInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownElectronicSpeedLimitInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::ElectronicSpeedLimitInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasWeatherInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasWeatherInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getWeatherInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getWeatherInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setWeatherInfo( ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initWeatherInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptWeatherInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownWeatherInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::WeatherInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool AmapNaviInfo::Reader::hasTrafficEventInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool AmapNaviInfo::Builder::hasTrafficEventInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Reader AmapNaviInfo::Reader::getTrafficEventInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::getTrafficEventInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void AmapNaviInfo::Builder::setTrafficEventInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>::Builder AmapNaviInfo::Builder::initTrafficEventInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void AmapNaviInfo::Builder::adoptTrafficEventInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>> AmapNaviInfo::Builder::disownTrafficEventInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficEventInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline  ::uint8_t ElectronicSpeedLimitInfo::Reader::getElectronicSpeedLimitType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ElectronicSpeedLimitInfo::Builder::getElectronicSpeedLimitType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ElectronicSpeedLimitInfo::Builder::setElectronicSpeedLimitType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ElectronicSpeedLimitInfo::Reader::getSpeedLimitValue() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ElectronicSpeedLimitInfo::Builder::getSpeedLimitValue() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ElectronicSpeedLimitInfo::Builder::setSpeedLimitValue( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ElectronicSpeedLimitInfo::Reader::getElectronicSpeedLimitDist() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ElectronicSpeedLimitInfo::Builder::getElectronicSpeedLimitDist() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ElectronicSpeedLimitInfo::Builder::setElectronicSpeedLimitDist( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool WeatherInfo::Reader::hasWeatherName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherInfo::Builder::hasWeatherName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherInfo::Reader::getWeatherName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherInfo::Builder::getWeatherName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WeatherInfo::Builder::setWeatherName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherInfo::Builder::initWeatherName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WeatherInfo::Builder::adoptWeatherName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherInfo::Builder::disownWeatherName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WeatherInfo::Reader::hasAlertLevelName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherInfo::Builder::hasAlertLevelName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherInfo::Reader::getAlertLevelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherInfo::Builder::getAlertLevelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void WeatherInfo::Builder::setAlertLevelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherInfo::Builder::initAlertLevelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void WeatherInfo::Builder::adoptAlertLevelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherInfo::Builder::disownAlertLevelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t WeatherInfo::Reader::getWeatherId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WeatherInfo::Builder::getWeatherId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WeatherInfo::Builder::setWeatherId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WeatherInfo::Reader::getAlertLevelId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WeatherInfo::Builder::getAlertLevelId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void WeatherInfo::Builder::setAlertLevelId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t WeatherInfo::Reader::getDistanceToCar() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t WeatherInfo::Builder::getDistanceToCar() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void WeatherInfo::Builder::setDistanceToCar( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficEventInfo::Reader::getTrafficEventType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficEventInfo::Builder::getTrafficEventType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficEventInfo::Builder::setTrafficEventType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficEventInfo::Reader::getOccupiedLaneType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficEventInfo::Builder::getOccupiedLaneType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEventInfo::Builder::setOccupiedLaneType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficEventInfo::Reader::getTrafficEventDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficEventInfo::Builder::getTrafficEventDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficEventInfo::Builder::setTrafficEventDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TollGateInfo::Reader::hasLaneTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TollGateInfo::Builder::hasLaneTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader TollGateInfo::Reader::getLaneTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder TollGateInfo::Builder::getLaneTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TollGateInfo::Builder::setLaneTypes( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TollGateInfo::Builder::setLaneTypes(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder TollGateInfo::Builder::initLaneTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TollGateInfo::Builder::adoptLaneTypes(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> TollGateInfo::Builder::disownLaneTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TollGateInfo::Reader::getDistance() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TollGateInfo::Builder::getDistance() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TollGateInfo::Builder::setDistance( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraInfo::Reader::getCameraDistance() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraInfo::Builder::getCameraDistance() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CameraInfo::Builder::setCameraDistance( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CameraInfo::Reader::getCameraSpeed() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CameraInfo::Builder::getCameraSpeed() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CameraInfo::Builder::setCameraSpeed( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t CameraInfo::Reader::getCameraType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t CameraInfo::Builder::getCameraType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CameraInfo::Builder::setCameraType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool TrafficLightInfo::Reader::hasTrafficLightInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TrafficLightInfo::Builder::hasTrafficLightInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Reader TrafficLightInfo::Reader::getTrafficLightInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Builder TrafficLightInfo::Builder::getTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TrafficLightInfo::Builder::setTrafficLightInfo( ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>::Builder TrafficLightInfo::Builder::initTrafficLightInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TrafficLightInfo::Builder::adoptTrafficLightInfo(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>> TrafficLightInfo::Builder::disownTrafficLightInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::amap_navigation::TrafficLight,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TrafficLightInfo::Reader::getLength() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficLightInfo::Builder::getLength() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setLength( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficLightInfo::Reader::getLinkIndex() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficLightInfo::Builder::getLinkIndex() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setLinkIndex( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficLightInfo::Reader::getLinkId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficLightInfo::Builder::getLinkId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficLightInfo::Builder::setLinkId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TrafficLight::Reader::getStartTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TrafficLight::Builder::getStartTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setStartTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t TrafficLight::Reader::getEndTime() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TrafficLight::Builder::getEndTime() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setEndTime( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficLight::Reader::getTrafficLightState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficLight::Builder::getTrafficLightState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TrafficLight::Builder::setTrafficLightState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool LaneInfo::Reader::hasForegroundLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneInfo::Builder::hasForegroundLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader LaneInfo::Reader::getForegroundLane() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LaneInfo::Builder::getForegroundLane() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneInfo::Builder::setForegroundLane( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LaneInfo::Builder::setForegroundLane(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LaneInfo::Builder::initForegroundLane(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LaneInfo::Builder::adoptForegroundLane(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> LaneInfo::Builder::disownForegroundLane() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LaneInfo::Reader::hasBackgroundLane() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LaneInfo::Builder::hasBackgroundLane() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader LaneInfo::Reader::getBackgroundLane() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LaneInfo::Builder::getBackgroundLane() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LaneInfo::Builder::setBackgroundLane( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void LaneInfo::Builder::setBackgroundLane(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LaneInfo::Builder::initBackgroundLane(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LaneInfo::Builder::adoptBackgroundLane(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> LaneInfo::Builder::disownBackgroundLane() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t TrafficFacilityInfo::Reader::getTrafficFacilityDistance() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TrafficFacilityInfo::Builder::getTrafficFacilityDistance() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficFacilityInfo::Builder::setTrafficFacilityDistance( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TrafficFacilityInfo::Reader::getTrafficFacilitySpeed() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TrafficFacilityInfo::Builder::getTrafficFacilitySpeed() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TrafficFacilityInfo::Builder::setTrafficFacilitySpeed( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficFacilityInfo::Reader::getTrafficFacilityType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficFacilityInfo::Builder::getTrafficFacilityType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void TrafficFacilityInfo::Builder::setTrafficFacilityType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double TrafficStatus::Reader::getLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double TrafficStatus::Builder::getLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficStatus::Reader::getStartLinkIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficStatus::Builder::getStartLinkIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setStartLinkIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficStatus::Reader::getEndLinkIndex() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficStatus::Builder::getEndLinkIndex() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setEndLinkIndex( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficStatus::Reader::getStartSegmentIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficStatus::Builder::getStartSegmentIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setStartSegmentIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TrafficStatus::Reader::getEndSegmentIdx() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TrafficStatus::Builder::getEndSegmentIdx() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setEndSegmentIdx( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TrafficStatus::Reader::getTrafficState() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TrafficStatus::Builder::getTrafficState() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void TrafficStatus::Builder::setTrafficState( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

