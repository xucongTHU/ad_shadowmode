// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: localization.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a50b4c636b0f29f6);
CAPNP_DECLARE_SCHEMA(d01a85b2885b6711);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_smart_slam {

struct OdomStateInfo {
  OdomStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a50b4c636b0f29f6, 5, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NavStateInfo {
  NavStateInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d01a85b2885b6711, 11, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class OdomStateInfo::Reader {
public:
  typedef OdomStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMeasurementTimeNs() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasDebugInfo() const;
  inline  ::capnp::Text::Reader getDebugInfo() const;

  inline bool hasPositionFlu() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPositionFlu() const;

  inline bool hasPositionFluStdDev() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPositionFluStdDev() const;

  inline double getRoll() const;

  inline double getPitch() const;

  inline double getYaw() const;

  inline bool hasAttitudeStdDev() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getAttitudeStdDev() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearAcceleration() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearAcceleration() const;

  inline bool hasAngularVelocity() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getAngularVelocity() const;

  inline  ::uint64_t getOriginId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OdomStateInfo::Builder {
public:
  typedef OdomStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMeasurementTimeNs();
  inline void setMeasurementTimeNs( ::uint64_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasDebugInfo();
  inline  ::capnp::Text::Builder getDebugInfo();
  inline void setDebugInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDebugInfo(unsigned int size);
  inline void adoptDebugInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDebugInfo();

  inline bool hasPositionFlu();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPositionFlu();
  inline void setPositionFlu( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPositionFlu();
  inline void adoptPositionFlu(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPositionFlu();

  inline bool hasPositionFluStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPositionFluStdDev();
  inline void setPositionFluStdDev( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPositionFluStdDev();
  inline void adoptPositionFluStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPositionFluStdDev();

  inline double getRoll();
  inline void setRoll(double value);

  inline double getPitch();
  inline void setPitch(double value);

  inline double getYaw();
  inline void setYaw(double value);

  inline bool hasAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Builder getAttitudeStdDev();
  inline void setAttitudeStdDev( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initAttitudeStdDev();
  inline void adoptAttitudeStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownAttitudeStdDev();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearAcceleration();

  inline bool hasAngularVelocity();
  inline  ::senseAD::msg::std_msgs::Point::Builder getAngularVelocity();
  inline void setAngularVelocity( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownAngularVelocity();

  inline  ::uint64_t getOriginId();
  inline void setOriginId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class OdomStateInfo::Pipeline {
public:
  typedef OdomStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPositionFlu();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPositionFluStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getAngularVelocity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NavStateInfo::Reader {
public:
  typedef NavStateInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMeasurementTimeNs() const;

  inline bool hasStatusInfo() const;
  inline  ::capnp::Text::Reader getStatusInfo() const;

  inline bool hasDebugInfo() const;
  inline  ::capnp::Text::Reader getDebugInfo() const;

  inline bool hasPositionEnu() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPositionEnu() const;

  inline bool hasPositionEnuStdDev() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPositionEnuStdDev() const;

  inline double getLongitude() const;

  inline double getLatitude() const;

  inline double getAltitude() const;

  inline double getRoll() const;

  inline double getPitch() const;

  inline double getYaw() const;

  inline bool hasAttitudeStdDev() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getAttitudeStdDev() const;

  inline bool hasLinearVelocity() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocity() const;

  inline bool hasLinearVelocityGlobal() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearVelocityGlobal() const;

  inline bool hasLinearAcceleration() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearAcceleration() const;

  inline bool hasLinearAccelerationGlobal() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLinearAccelerationGlobal() const;

  inline bool hasAngularVelocity() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getAngularVelocity() const;

  inline double getOriginLongitude() const;

  inline double getOriginLatitude() const;

  inline double getOriginAltitude() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NavStateInfo::Builder {
public:
  typedef NavStateInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMeasurementTimeNs();
  inline void setMeasurementTimeNs( ::uint64_t value);

  inline bool hasStatusInfo();
  inline  ::capnp::Text::Builder getStatusInfo();
  inline void setStatusInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusInfo(unsigned int size);
  inline void adoptStatusInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusInfo();

  inline bool hasDebugInfo();
  inline  ::capnp::Text::Builder getDebugInfo();
  inline void setDebugInfo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDebugInfo(unsigned int size);
  inline void adoptDebugInfo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDebugInfo();

  inline bool hasPositionEnu();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPositionEnu();
  inline void setPositionEnu( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPositionEnu();
  inline void adoptPositionEnu(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPositionEnu();

  inline bool hasPositionEnuStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPositionEnuStdDev();
  inline void setPositionEnuStdDev( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPositionEnuStdDev();
  inline void adoptPositionEnuStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPositionEnuStdDev();

  inline double getLongitude();
  inline void setLongitude(double value);

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getAltitude();
  inline void setAltitude(double value);

  inline double getRoll();
  inline void setRoll(double value);

  inline double getPitch();
  inline void setPitch(double value);

  inline double getYaw();
  inline void setYaw(double value);

  inline bool hasAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Builder getAttitudeStdDev();
  inline void setAttitudeStdDev( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initAttitudeStdDev();
  inline void adoptAttitudeStdDev(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownAttitudeStdDev();

  inline bool hasLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocity();
  inline void setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocity();
  inline void adoptLinearVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocity();

  inline bool hasLinearVelocityGlobal();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearVelocityGlobal();
  inline void setLinearVelocityGlobal( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearVelocityGlobal();
  inline void adoptLinearVelocityGlobal(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearVelocityGlobal();

  inline bool hasLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearAcceleration();

  inline bool hasLinearAccelerationGlobal();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLinearAccelerationGlobal();
  inline void setLinearAccelerationGlobal( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLinearAccelerationGlobal();
  inline void adoptLinearAccelerationGlobal(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLinearAccelerationGlobal();

  inline bool hasAngularVelocity();
  inline  ::senseAD::msg::std_msgs::Point::Builder getAngularVelocity();
  inline void setAngularVelocity( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownAngularVelocity();

  inline double getOriginLongitude();
  inline void setOriginLongitude(double value);

  inline double getOriginLatitude();
  inline void setOriginLatitude(double value);

  inline double getOriginAltitude();
  inline void setOriginAltitude(double value);

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NavStateInfo::Pipeline {
public:
  typedef NavStateInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPositionEnu();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPositionEnuStdDev();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getAttitudeStdDev();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocity();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearVelocityGlobal();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearAcceleration();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLinearAccelerationGlobal();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getAngularVelocity();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool OdomStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader OdomStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder OdomStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline OdomStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder OdomStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> OdomStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t OdomStateInfo::Reader::getMeasurementTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OdomStateInfo::Builder::getMeasurementTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void OdomStateInfo::Builder::setMeasurementTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool OdomStateInfo::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader OdomStateInfo::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder OdomStateInfo::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder OdomStateInfo::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void OdomStateInfo::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> OdomStateInfo::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasDebugInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasDebugInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader OdomStateInfo::Reader::getDebugInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder OdomStateInfo::Builder::getDebugInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::setDebugInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder OdomStateInfo::Builder::initDebugInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void OdomStateInfo::Builder::adoptDebugInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> OdomStateInfo::Builder::disownDebugInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasPositionFlu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasPositionFlu() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader OdomStateInfo::Reader::getPositionFlu() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::getPositionFlu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline OdomStateInfo::Pipeline::getPositionFlu() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setPositionFlu( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::initPositionFlu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptPositionFlu(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> OdomStateInfo::Builder::disownPositionFlu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasPositionFluStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasPositionFluStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader OdomStateInfo::Reader::getPositionFluStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::getPositionFluStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline OdomStateInfo::Pipeline::getPositionFluStdDev() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setPositionFluStdDev( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::initPositionFluStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptPositionFluStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> OdomStateInfo::Builder::disownPositionFluStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline double OdomStateInfo::Reader::getRoll() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double OdomStateInfo::Builder::getRoll() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void OdomStateInfo::Builder::setRoll(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double OdomStateInfo::Reader::getPitch() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double OdomStateInfo::Builder::getPitch() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void OdomStateInfo::Builder::setPitch(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double OdomStateInfo::Reader::getYaw() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double OdomStateInfo::Builder::getYaw() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void OdomStateInfo::Builder::setYaw(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool OdomStateInfo::Reader::hasAttitudeStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasAttitudeStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader OdomStateInfo::Reader::getAttitudeStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::getAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline OdomStateInfo::Pipeline::getAttitudeStdDev() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setAttitudeStdDev( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::initAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptAttitudeStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> OdomStateInfo::Builder::disownAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader OdomStateInfo::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder OdomStateInfo::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline OdomStateInfo::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder OdomStateInfo::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> OdomStateInfo::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader OdomStateInfo::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder OdomStateInfo::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline OdomStateInfo::Pipeline::getLinearAcceleration() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder OdomStateInfo::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> OdomStateInfo::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool OdomStateInfo::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool OdomStateInfo::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader OdomStateInfo::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline OdomStateInfo::Pipeline::getAngularVelocity() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void OdomStateInfo::Builder::setAngularVelocity( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder OdomStateInfo::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void OdomStateInfo::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> OdomStateInfo::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::uint64_t OdomStateInfo::Reader::getOriginId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t OdomStateInfo::Builder::getOriginId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void OdomStateInfo::Builder::setOriginId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool NavStateInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader NavStateInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder NavStateInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline NavStateInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder NavStateInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> NavStateInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t NavStateInfo::Reader::getMeasurementTimeNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t NavStateInfo::Builder::getMeasurementTimeNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setMeasurementTimeNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NavStateInfo::Reader::hasStatusInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasStatusInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStateInfo::Reader::getStatusInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStateInfo::Builder::getStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::setStatusInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStateInfo::Builder::initStatusInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NavStateInfo::Builder::adoptStatusInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStateInfo::Builder::disownStatusInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasDebugInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasDebugInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NavStateInfo::Reader::getDebugInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NavStateInfo::Builder::getDebugInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::setDebugInfo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NavStateInfo::Builder::initDebugInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void NavStateInfo::Builder::adoptDebugInfo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NavStateInfo::Builder::disownDebugInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasPositionEnu() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasPositionEnu() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStateInfo::Reader::getPositionEnu() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::getPositionEnu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStateInfo::Pipeline::getPositionEnu() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setPositionEnu( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::initPositionEnu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptPositionEnu(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStateInfo::Builder::disownPositionEnu() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasPositionEnuStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasPositionEnuStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStateInfo::Reader::getPositionEnuStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::getPositionEnuStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStateInfo::Pipeline::getPositionEnuStdDev() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setPositionEnuStdDev( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::initPositionEnuStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptPositionEnuStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStateInfo::Builder::disownPositionEnuStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline double NavStateInfo::Reader::getLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getRoll() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getRoll() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setRoll(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getPitch() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getPitch() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setPitch(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getYaw() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getYaw() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setYaw(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool NavStateInfo::Reader::hasAttitudeStdDev() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasAttitudeStdDev() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStateInfo::Reader::getAttitudeStdDev() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::getAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStateInfo::Pipeline::getAttitudeStdDev() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setAttitudeStdDev( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::initAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptAttitudeStdDev(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStateInfo::Builder::disownAttitudeStdDev() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasLinearVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasLinearVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader NavStateInfo::Reader::getLinearVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::getLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline NavStateInfo::Pipeline::getLinearVelocity() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setLinearVelocity( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::initLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptLinearVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> NavStateInfo::Builder::disownLinearVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasLinearVelocityGlobal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasLinearVelocityGlobal() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader NavStateInfo::Reader::getLinearVelocityGlobal() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::getLinearVelocityGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline NavStateInfo::Pipeline::getLinearVelocityGlobal() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setLinearVelocityGlobal( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::initLinearVelocityGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptLinearVelocityGlobal(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> NavStateInfo::Builder::disownLinearVelocityGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader NavStateInfo::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline NavStateInfo::Pipeline::getLinearAcceleration() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setLinearAcceleration( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> NavStateInfo::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasLinearAccelerationGlobal() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasLinearAccelerationGlobal() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader NavStateInfo::Reader::getLinearAccelerationGlobal() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::getLinearAccelerationGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline NavStateInfo::Pipeline::getLinearAccelerationGlobal() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setLinearAccelerationGlobal( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder NavStateInfo::Builder::initLinearAccelerationGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptLinearAccelerationGlobal(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> NavStateInfo::Builder::disownLinearAccelerationGlobal() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool NavStateInfo::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool NavStateInfo::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader NavStateInfo::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline NavStateInfo::Pipeline::getAngularVelocity() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void NavStateInfo::Builder::setAngularVelocity( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder NavStateInfo::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void NavStateInfo::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> NavStateInfo::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline double NavStateInfo::Reader::getOriginLongitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getOriginLongitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setOriginLongitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getOriginLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getOriginLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setOriginLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double NavStateInfo::Reader::getOriginAltitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double NavStateInfo::Builder::getOriginAltitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setOriginAltitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t NavStateInfo::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline  ::int16_t NavStateInfo::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void NavStateInfo::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

