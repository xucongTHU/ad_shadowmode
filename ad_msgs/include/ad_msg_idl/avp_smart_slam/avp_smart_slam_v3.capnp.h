// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_smart_slam_v3.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/avp_state_v3_def/avp_state_v3_def.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(88e5c878330abb19);
CAPNP_DECLARE_SCHEMA(f3001c0b130f7863);
enum class InitTrigger_f3001c0b130f7863: uint16_t {
  NONE,
  STATE_MACHINE,
  SENSOR_GNSS,
  SENSOR_DUAL_ANTENNA,
  BUTTON_MAP_SELECT,
};
CAPNP_DECLARE_ENUM(InitTrigger, f3001c0b130f7863);
CAPNP_DECLARE_SCHEMA(9c4b7d7b3406afae);
enum class SlamMode_9c4b7d7b3406afae: uint16_t {
  UNINITIALIZED,
  APA_SLAM,
  HPP_SLAM,
  HPP_LOCALIZATION,
  HPP_AUTO,
};
CAPNP_DECLARE_ENUM(SlamMode, 9c4b7d7b3406afae);
CAPNP_DECLARE_SCHEMA(942f96b607ed2764);
enum class LocalizationStatus_942f96b607ed2764: uint16_t {
  UNINITIALIZED,
  INITIALIZING,
  INIT_SUCCESSED,
  CAN_CRUISE,
};
CAPNP_DECLARE_ENUM(LocalizationStatus, 942f96b607ed2764);
CAPNP_DECLARE_SCHEMA(8ed8a5ca234ec033);
enum class LocType_8ed8a5ca234ec033: uint16_t {
  NONE,
  UNKNOWN_LOC,
  V_SLAM_LOC,
  DR_LOC,
};
CAPNP_DECLARE_ENUM(LocType, 8ed8a5ca234ec033);
CAPNP_DECLARE_SCHEMA(c91960152ad9b283);
CAPNP_DECLARE_SCHEMA(c63660a7133ea40e);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_smart_slam {

struct SlamWarningOutput {
  SlamWarningOutput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88e5c878330abb19, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::InitTrigger_f3001c0b130f7863 InitTrigger;

typedef ::capnp::schemas::SlamMode_9c4b7d7b3406afae SlamMode;

typedef ::capnp::schemas::LocalizationStatus_942f96b607ed2764 LocalizationStatus;

typedef ::capnp::schemas::LocType_8ed8a5ca234ec033 LocType;

struct SlamStatus {
  SlamStatus() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c91960152ad9b283, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SlamStatusInfo {
  SlamStatusInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c63660a7133ea40e, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SlamWarningOutput::Reader {
public:
  typedef SlamWarningOutput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitErr() const;

  inline bool getMapQueryErr() const;

  inline bool getMapLoadingErr() const;

  inline bool getMapSavingErr() const;

  inline bool getVehicleConfigeErr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamWarningOutput::Builder {
public:
  typedef SlamWarningOutput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitErr();
  inline void setInitErr(bool value);

  inline bool getMapQueryErr();
  inline void setMapQueryErr(bool value);

  inline bool getMapLoadingErr();
  inline void setMapLoadingErr(bool value);

  inline bool getMapSavingErr();
  inline void setMapSavingErr(bool value);

  inline bool getVehicleConfigeErr();
  inline void setVehicleConfigeErr(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamWarningOutput::Pipeline {
public:
  typedef SlamWarningOutput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamStatus::Reader {
public:
  typedef SlamStatus Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed() const;

  inline bool getInitFailed() const;

  inline  ::senseAD::msg::avp_smart_slam::SlamMode getMode() const;

  inline  ::senseAD::msg::avp_smart_slam::LocalizationStatus getLocState() const;

  inline bool getMappingFinished() const;

  inline  ::senseAD::msg::avp_smart_slam::InitTrigger getCurrentTrigger() const;

  inline  ::senseAD::msg::avp_smart_slam::LocType getLocType() const;

  inline  ::uint64_t getMapId() const;

  inline double getMileage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamStatus::Builder {
public:
  typedef SlamStatus Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getInitSuccessed();
  inline void setInitSuccessed(bool value);

  inline bool getInitFailed();
  inline void setInitFailed(bool value);

  inline  ::senseAD::msg::avp_smart_slam::SlamMode getMode();
  inline void setMode( ::senseAD::msg::avp_smart_slam::SlamMode value);

  inline  ::senseAD::msg::avp_smart_slam::LocalizationStatus getLocState();
  inline void setLocState( ::senseAD::msg::avp_smart_slam::LocalizationStatus value);

  inline bool getMappingFinished();
  inline void setMappingFinished(bool value);

  inline  ::senseAD::msg::avp_smart_slam::InitTrigger getCurrentTrigger();
  inline void setCurrentTrigger( ::senseAD::msg::avp_smart_slam::InitTrigger value);

  inline  ::senseAD::msg::avp_smart_slam::LocType getLocType();
  inline void setLocType( ::senseAD::msg::avp_smart_slam::LocType value);

  inline  ::uint64_t getMapId();
  inline void setMapId( ::uint64_t value);

  inline double getMileage();
  inline void setMileage(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamStatus::Pipeline {
public:
  typedef SlamStatus Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SlamStatusInfo::Reader {
public:
  typedef SlamStatusInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getMsgId() const;

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus() const;

  inline  ::uint64_t getAvpStatusUid() const;

  inline bool hasSlamStatus() const;
  inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Reader getSlamStatus() const;

  inline bool hasSlamWarnning() const;
  inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Reader getSlamWarnning() const;

  inline bool hasLastErrorString() const;
  inline  ::capnp::Text::Reader getLastErrorString() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SlamStatusInfo::Builder {
public:
  typedef SlamStatusInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getMsgId();
  inline void setMsgId( ::uint64_t value);

  inline  ::senseAD::msg::avp_state_v3::AvpMainStatus getAvpStatus();
  inline void setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value);

  inline  ::uint64_t getAvpStatusUid();
  inline void setAvpStatusUid( ::uint64_t value);

  inline bool hasSlamStatus();
  inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Builder getSlamStatus();
  inline void setSlamStatus( ::senseAD::msg::avp_smart_slam::SlamStatus::Reader value);
  inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Builder initSlamStatus();
  inline void adoptSlamStatus(::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamStatus>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamStatus> disownSlamStatus();

  inline bool hasSlamWarnning();
  inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Builder getSlamWarnning();
  inline void setSlamWarnning( ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Reader value);
  inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Builder initSlamWarnning();
  inline void adoptSlamWarnning(::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamWarningOutput> disownSlamWarnning();

  inline bool hasLastErrorString();
  inline  ::capnp::Text::Builder getLastErrorString();
  inline void setLastErrorString( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLastErrorString(unsigned int size);
  inline void adoptLastErrorString(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLastErrorString();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SlamStatusInfo::Pipeline {
public:
  typedef SlamStatusInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
  inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Pipeline getSlamStatus();
  inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Pipeline getSlamWarnning();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SlamWarningOutput::Reader::getInitErr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SlamWarningOutput::Builder::getInitErr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamWarningOutput::Builder::setInitErr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SlamWarningOutput::Reader::getMapQueryErr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool SlamWarningOutput::Builder::getMapQueryErr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlamWarningOutput::Builder::setMapQueryErr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SlamWarningOutput::Reader::getMapLoadingErr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool SlamWarningOutput::Builder::getMapLoadingErr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamWarningOutput::Builder::setMapLoadingErr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SlamWarningOutput::Reader::getMapSavingErr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool SlamWarningOutput::Builder::getMapSavingErr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SlamWarningOutput::Builder::setMapSavingErr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SlamWarningOutput::Reader::getVehicleConfigeErr() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool SlamWarningOutput::Builder::getVehicleConfigeErr() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SlamWarningOutput::Builder::setVehicleConfigeErr(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool SlamStatus::Reader::getInitSuccessed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SlamStatus::Builder::getInitSuccessed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setInitSuccessed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SlamStatus::Reader::getInitFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool SlamStatus::Builder::getInitFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setInitFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_smart_slam::SlamMode SlamStatus::Reader::getMode() const {
  return _reader.getDataField< ::senseAD::msg::avp_smart_slam::SlamMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_smart_slam::SlamMode SlamStatus::Builder::getMode() {
  return _builder.getDataField< ::senseAD::msg::avp_smart_slam::SlamMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setMode( ::senseAD::msg::avp_smart_slam::SlamMode value) {
  _builder.setDataField< ::senseAD::msg::avp_smart_slam::SlamMode>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_smart_slam::LocalizationStatus SlamStatus::Reader::getLocState() const {
  return _reader.getDataField< ::senseAD::msg::avp_smart_slam::LocalizationStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_smart_slam::LocalizationStatus SlamStatus::Builder::getLocState() {
  return _builder.getDataField< ::senseAD::msg::avp_smart_slam::LocalizationStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setLocState( ::senseAD::msg::avp_smart_slam::LocalizationStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_smart_slam::LocalizationStatus>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SlamStatus::Reader::getMappingFinished() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool SlamStatus::Builder::getMappingFinished() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setMappingFinished(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_smart_slam::InitTrigger SlamStatus::Reader::getCurrentTrigger() const {
  return _reader.getDataField< ::senseAD::msg::avp_smart_slam::InitTrigger>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_smart_slam::InitTrigger SlamStatus::Builder::getCurrentTrigger() {
  return _builder.getDataField< ::senseAD::msg::avp_smart_slam::InitTrigger>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setCurrentTrigger( ::senseAD::msg::avp_smart_slam::InitTrigger value) {
  _builder.setDataField< ::senseAD::msg::avp_smart_slam::InitTrigger>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_smart_slam::LocType SlamStatus::Reader::getLocType() const {
  return _reader.getDataField< ::senseAD::msg::avp_smart_slam::LocType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_smart_slam::LocType SlamStatus::Builder::getLocType() {
  return _builder.getDataField< ::senseAD::msg::avp_smart_slam::LocType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setLocType( ::senseAD::msg::avp_smart_slam::LocType value) {
  _builder.setDataField< ::senseAD::msg::avp_smart_slam::LocType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SlamStatus::Reader::getMapId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlamStatus::Builder::getMapId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setMapId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SlamStatus::Reader::getMileage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SlamStatus::Builder::getMileage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SlamStatus::Builder::setMileage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SlamStatusInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SlamStatusInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader SlamStatusInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder SlamStatusInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline SlamStatusInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SlamStatusInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder SlamStatusInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SlamStatusInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> SlamStatusInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SlamStatusInfo::Reader::getMsgId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlamStatusInfo::Builder::getMsgId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SlamStatusInfo::Builder::setMsgId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus SlamStatusInfo::Reader::getAvpStatus() const {
  return _reader.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::senseAD::msg::avp_state_v3::AvpMainStatus SlamStatusInfo::Builder::getAvpStatus() {
  return _builder.getDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SlamStatusInfo::Builder::setAvpStatus( ::senseAD::msg::avp_state_v3::AvpMainStatus value) {
  _builder.setDataField< ::senseAD::msg::avp_state_v3::AvpMainStatus>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SlamStatusInfo::Reader::getAvpStatusUid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SlamStatusInfo::Builder::getAvpStatusUid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SlamStatusInfo::Builder::setAvpStatusUid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SlamStatusInfo::Reader::hasSlamStatus() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SlamStatusInfo::Builder::hasSlamStatus() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Reader SlamStatusInfo::Reader::getSlamStatus() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Builder SlamStatusInfo::Builder::getSlamStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Pipeline SlamStatusInfo::Pipeline::getSlamStatus() {
  return  ::senseAD::msg::avp_smart_slam::SlamStatus::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SlamStatusInfo::Builder::setSlamStatus( ::senseAD::msg::avp_smart_slam::SlamStatus::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_smart_slam::SlamStatus::Builder SlamStatusInfo::Builder::initSlamStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SlamStatusInfo::Builder::adoptSlamStatus(
    ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamStatus>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamStatus> SlamStatusInfo::Builder::disownSlamStatus() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamStatus>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SlamStatusInfo::Reader::hasSlamWarnning() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SlamStatusInfo::Builder::hasSlamWarnning() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Reader SlamStatusInfo::Reader::getSlamWarnning() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Builder SlamStatusInfo::Builder::getSlamWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Pipeline SlamStatusInfo::Pipeline::getSlamWarnning() {
  return  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SlamStatusInfo::Builder::setSlamWarnning( ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::avp_smart_slam::SlamWarningOutput::Builder SlamStatusInfo::Builder::initSlamWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SlamStatusInfo::Builder::adoptSlamWarnning(
    ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::avp_smart_slam::SlamWarningOutput> SlamStatusInfo::Builder::disownSlamWarnning() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::avp_smart_slam::SlamWarningOutput>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SlamStatusInfo::Reader::hasLastErrorString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SlamStatusInfo::Builder::hasLastErrorString() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SlamStatusInfo::Reader::getLastErrorString() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SlamStatusInfo::Builder::getLastErrorString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SlamStatusInfo::Builder::setLastErrorString( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SlamStatusInfo::Builder::initLastErrorString(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SlamStatusInfo::Builder::adoptLastErrorString(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SlamStatusInfo::Builder::disownLastErrorString() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

