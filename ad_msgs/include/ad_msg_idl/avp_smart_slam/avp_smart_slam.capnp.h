// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: avp_smart_slam.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>
#include <ad_msg_idl/std_msgs/header.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(92506c616a293ed1);
CAPNP_DECLARE_SCHEMA(ed2e8f92c4859b29);
CAPNP_DECLARE_SCHEMA(dac7bb9236d33734);
CAPNP_DECLARE_SCHEMA(a08207d99576d0c8);
CAPNP_DECLARE_SCHEMA(edf3ac694480d098);
CAPNP_DECLARE_SCHEMA(f378287744de32a6);
CAPNP_DECLARE_SCHEMA(e4dfb5b31fc23530);
CAPNP_DECLARE_SCHEMA(c80659778288f9a0);
CAPNP_DECLARE_SCHEMA(cd2d4b239d1d35e7);
CAPNP_DECLARE_SCHEMA(d433a99a9d360472);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace avp_smart_slam {

struct MapInfo {
  MapInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92506c616a293ed1, 2, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ParkingSlot {
  ParkingSlot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed2e8f92c4859b29, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Arrow {
  Arrow() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dac7bb9236d33734, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Bump {
  Bump() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a08207d99576d0c8, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CrossWalk {
  CrossWalk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(edf3ac694480d098, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LaneLine {
  LaneLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f378287744de32a6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StopLine {
  StopLine() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4dfb5b31fc23530, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RegionInfo {
  RegionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c80659778288f9a0, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MixVprData {
  MixVprData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd2d4b239d1d35e7, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SuperPointData {
  SuperPointData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d433a99a9d360472, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MapInfo::Reader {
public:
  typedef MapInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasParkingSlots() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader getParkingSlots() const;

  inline bool hasLaneLines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Reader getLaneLines() const;

  inline bool hasStopLines() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Reader getStopLines() const;

  inline bool hasBumps() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Reader getBumps() const;

  inline bool hasCrossWalks() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Reader getCrossWalks() const;

  inline bool hasArrows() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Reader getArrows() const;

  inline bool hasParkingSlotsOptimize() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader getParkingSlotsOptimize() const;

  inline  ::uint64_t getMapId() const;

  inline bool hasRegionList() const;
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Reader getRegionList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInfo::Builder {
public:
  typedef MapInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasParkingSlots();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder getParkingSlots();
  inline void setParkingSlots( ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder initParkingSlots(unsigned int size);
  inline void adoptParkingSlots(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>> disownParkingSlots();

  inline bool hasLaneLines();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Builder getLaneLines();
  inline void setLaneLines( ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Builder initLaneLines(unsigned int size);
  inline void adoptLaneLines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>> disownLaneLines();

  inline bool hasStopLines();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Builder getStopLines();
  inline void setStopLines( ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Builder initStopLines(unsigned int size);
  inline void adoptStopLines(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>> disownStopLines();

  inline bool hasBumps();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Builder getBumps();
  inline void setBumps( ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Builder initBumps(unsigned int size);
  inline void adoptBumps(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>> disownBumps();

  inline bool hasCrossWalks();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Builder getCrossWalks();
  inline void setCrossWalks( ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Builder initCrossWalks(unsigned int size);
  inline void adoptCrossWalks(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>> disownCrossWalks();

  inline bool hasArrows();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Builder getArrows();
  inline void setArrows( ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Builder initArrows(unsigned int size);
  inline void adoptArrows(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>> disownArrows();

  inline bool hasParkingSlotsOptimize();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder getParkingSlotsOptimize();
  inline void setParkingSlotsOptimize( ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder initParkingSlotsOptimize(unsigned int size);
  inline void adoptParkingSlotsOptimize(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>> disownParkingSlotsOptimize();

  inline  ::uint64_t getMapId();
  inline void setMapId( ::uint64_t value);

  inline bool hasRegionList();
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Builder getRegionList();
  inline void setRegionList( ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Builder initRegionList(unsigned int size);
  inline void adoptRegionList(::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>> disownRegionList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInfo::Pipeline {
public:
  typedef MapInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ParkingSlot::Reader {
public:
  typedef ParkingSlot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getPsType() const;

  inline double getWidth() const;

  inline double getLength() const;

  inline bool hasCenter() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getCenter() const;

  inline bool hasWideDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getWideDirection() const;

  inline bool hasLongDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLongDirection() const;

  inline bool getIsOccupancy() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ParkingSlot::Builder {
public:
  typedef ParkingSlot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getPsType();
  inline void setPsType( ::uint32_t value);

  inline double getWidth();
  inline void setWidth(double value);

  inline double getLength();
  inline void setLength(double value);

  inline bool hasCenter();
  inline  ::senseAD::msg::std_msgs::Point::Builder getCenter();
  inline void setCenter( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initCenter();
  inline void adoptCenter(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownCenter();

  inline bool hasWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getWideDirection();
  inline void setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initWideDirection();
  inline void adoptWideDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownWideDirection();

  inline bool hasLongDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLongDirection();
  inline void setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLongDirection();
  inline void adoptLongDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLongDirection();

  inline bool getIsOccupancy();
  inline void setIsOccupancy(bool value);

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ParkingSlot::Pipeline {
public:
  typedef ParkingSlot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getCenter();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLongDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Arrow::Reader {
public:
  typedef Arrow Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getArrowType() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Arrow::Builder {
public:
  typedef Arrow Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getArrowType();
  inline void setArrowType( ::uint32_t value);

  inline bool hasPoints();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Arrow::Pipeline {
public:
  typedef Arrow Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Bump::Reader {
public:
  typedef Bump Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline float getHalfWidth() const;

  inline float getLength() const;

  inline bool hasEndPt() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getEndPt() const;

  inline bool hasWideDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getWideDirection() const;

  inline bool hasLongDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLongDirection() const;

  inline bool getIsOccupancy() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Bump::Builder {
public:
  typedef Bump Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline float getHalfWidth();
  inline void setHalfWidth(float value);

  inline float getLength();
  inline void setLength(float value);

  inline bool hasEndPt();
  inline  ::senseAD::msg::std_msgs::Point::Builder getEndPt();
  inline void setEndPt( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initEndPt();
  inline void adoptEndPt(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownEndPt();

  inline bool hasWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getWideDirection();
  inline void setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initWideDirection();
  inline void adoptWideDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownWideDirection();

  inline bool hasLongDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLongDirection();
  inline void setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLongDirection();
  inline void adoptLongDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLongDirection();

  inline bool getIsOccupancy();
  inline void setIsOccupancy(bool value);

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Bump::Pipeline {
public:
  typedef Bump Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getEndPt();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLongDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CrossWalk::Reader {
public:
  typedef CrossWalk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline float getHalfWidth() const;

  inline float getLength() const;

  inline bool hasEndPt() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getEndPt() const;

  inline bool hasWideDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getWideDirection() const;

  inline bool hasLongDirection() const;
  inline  ::senseAD::msg::std_msgs::Vector3::Reader getLongDirection() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CrossWalk::Builder {
public:
  typedef CrossWalk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline float getHalfWidth();
  inline void setHalfWidth(float value);

  inline float getLength();
  inline void setLength(float value);

  inline bool hasEndPt();
  inline  ::senseAD::msg::std_msgs::Point::Builder getEndPt();
  inline void setEndPt( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initEndPt();
  inline void adoptEndPt(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownEndPt();

  inline bool hasWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getWideDirection();
  inline void setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initWideDirection();
  inline void adoptWideDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownWideDirection();

  inline bool hasLongDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Builder getLongDirection();
  inline void setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value);
  inline  ::senseAD::msg::std_msgs::Vector3::Builder initLongDirection();
  inline void adoptLongDirection(::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> disownLongDirection();

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CrossWalk::Pipeline {
public:
  typedef CrossWalk Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getEndPt();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getWideDirection();
  inline  ::senseAD::msg::std_msgs::Vector3::Pipeline getLongDirection();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LaneLine::Reader {
public:
  typedef LaneLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline  ::uint32_t getLineType() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LaneLine::Builder {
public:
  typedef LaneLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline  ::uint32_t getLineType();
  inline void setLineType( ::uint32_t value);

  inline bool hasPoints();
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LaneLine::Pipeline {
public:
  typedef LaneLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StopLine::Reader {
public:
  typedef StopLine Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasStartPt() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getStartPt() const;

  inline bool hasEndPt() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getEndPt() const;

  inline  ::int16_t getRegionID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StopLine::Builder {
public:
  typedef StopLine Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasStartPt();
  inline  ::senseAD::msg::std_msgs::Point::Builder getStartPt();
  inline void setStartPt( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initStartPt();
  inline void adoptStartPt(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownStartPt();

  inline bool hasEndPt();
  inline  ::senseAD::msg::std_msgs::Point::Builder getEndPt();
  inline void setEndPt( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initEndPt();
  inline void adoptEndPt(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownEndPt();

  inline  ::int16_t getRegionID();
  inline void setRegionID( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StopLine::Pipeline {
public:
  typedef StopLine Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getStartPt();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getEndPt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RegionInfo::Reader {
public:
  typedef RegionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int16_t getFromRegionID() const;

  inline  ::int16_t getToRegionID() const;

  inline double getFromRegionHeight() const;

  inline double getToRegionHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RegionInfo::Builder {
public:
  typedef RegionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getId();
  inline void setId( ::int16_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int16_t getFromRegionID();
  inline void setFromRegionID( ::int16_t value);

  inline  ::int16_t getToRegionID();
  inline void setToRegionID( ::int16_t value);

  inline double getFromRegionHeight();
  inline void setFromRegionHeight(double value);

  inline double getToRegionHeight();
  inline void setToRegionHeight(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RegionInfo::Pipeline {
public:
  typedef RegionInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MixVprData::Reader {
public:
  typedef MixVprData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasDesc() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getDesc() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MixVprData::Builder {
public:
  typedef MixVprData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasDesc();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getDesc();
  inline void setDesc( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDesc(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initDesc(unsigned int size);
  inline void adoptDesc(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownDesc();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MixVprData::Pipeline {
public:
  typedef MixVprData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SuperPointData::Reader {
public:
  typedef SuperPointData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::senseAD::msg::std_msgs::Header::Reader getHeader() const;

  inline  ::uint64_t getTimestampNs() const;

  inline  ::uint64_t getDescCols() const;

  inline bool hasDesc() const;
  inline  ::capnp::Data::Reader getDesc() const;

  inline  ::uint64_t getKptsCols() const;

  inline bool hasKpts() const;
  inline  ::capnp::Data::Reader getKpts() const;

  inline bool hasScores() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getScores() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SuperPointData::Builder {
public:
  typedef SuperPointData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::senseAD::msg::std_msgs::Header::Builder getHeader();
  inline void setHeader( ::senseAD::msg::std_msgs::Header::Reader value);
  inline  ::senseAD::msg::std_msgs::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> disownHeader();

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline  ::uint64_t getDescCols();
  inline void setDescCols( ::uint64_t value);

  inline bool hasDesc();
  inline  ::capnp::Data::Builder getDesc();
  inline void setDesc( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDesc(unsigned int size);
  inline void adoptDesc(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDesc();

  inline  ::uint64_t getKptsCols();
  inline void setKptsCols( ::uint64_t value);

  inline bool hasKpts();
  inline  ::capnp::Data::Builder getKpts();
  inline void setKpts( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initKpts(unsigned int size);
  inline void adoptKpts(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownKpts();

  inline bool hasScores();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getScores();
  inline void setScores( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setScores(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initScores(unsigned int size);
  inline void adoptScores(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownScores();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SuperPointData::Pipeline {
public:
  typedef SuperPointData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool MapInfo::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader MapInfo::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder MapInfo::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline MapInfo::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MapInfo::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder MapInfo::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> MapInfo::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t MapInfo::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapInfo::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapInfo::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapInfo::Reader::hasParkingSlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasParkingSlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getParkingSlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getParkingSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setParkingSlots( ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initParkingSlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptParkingSlots(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownParkingSlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasLaneLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasLaneLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getLaneLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setLaneLines( ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initLaneLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptLaneLines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownLaneLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::LaneLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasStopLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasStopLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getStopLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getStopLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setStopLines( ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initStopLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptStopLines(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownStopLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::StopLine,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasBumps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasBumps() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getBumps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getBumps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setBumps( ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initBumps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptBumps(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownBumps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Bump,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasCrossWalks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasCrossWalks() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getCrossWalks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getCrossWalks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setCrossWalks( ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initCrossWalks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptCrossWalks(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownCrossWalks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::CrossWalk,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasArrows() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasArrows() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getArrows() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getArrows() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setArrows( ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initArrows(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptArrows(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownArrows() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::Arrow,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool MapInfo::Reader::hasParkingSlotsOptimize() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasParkingSlotsOptimize() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getParkingSlotsOptimize() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getParkingSlotsOptimize() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setParkingSlotsOptimize( ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initParkingSlotsOptimize(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptParkingSlotsOptimize(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownParkingSlotsOptimize() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::ParkingSlot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint64_t MapInfo::Reader::getMapId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapInfo::Builder::getMapId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapInfo::Builder::setMapId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MapInfo::Reader::hasRegionList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool MapInfo::Builder::hasRegionList() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Reader MapInfo::Reader::getRegionList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::getRegionList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void MapInfo::Builder::setRegionList( ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>::Builder MapInfo::Builder::initRegionList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void MapInfo::Builder::adoptRegionList(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>> MapInfo::Builder::disownRegionList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::avp_smart_slam::RegionInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline  ::uint64_t ParkingSlot::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ParkingSlot::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ParkingSlot::Reader::getPsType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ParkingSlot::Builder::getPsType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setPsType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ParkingSlot::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ParkingSlot::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ParkingSlot::Reader::getLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double ParkingSlot::Builder::getLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ParkingSlot::Reader::hasCenter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasCenter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader ParkingSlot::Reader::getCenter() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder ParkingSlot::Builder::getCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline ParkingSlot::Pipeline::getCenter() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setCenter( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder ParkingSlot::Builder::initCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptCenter(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> ParkingSlot::Builder::disownCenter() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasWideDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasWideDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader ParkingSlot::Reader::getWideDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder ParkingSlot::Builder::getWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline ParkingSlot::Pipeline::getWideDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder ParkingSlot::Builder::initWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptWideDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> ParkingSlot::Builder::disownWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::hasLongDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ParkingSlot::Builder::hasLongDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader ParkingSlot::Reader::getLongDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder ParkingSlot::Builder::getLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline ParkingSlot::Pipeline::getLongDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ParkingSlot::Builder::setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder ParkingSlot::Builder::initLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ParkingSlot::Builder::adoptLongDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> ParkingSlot::Builder::disownLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ParkingSlot::Reader::getIsOccupancy() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool ParkingSlot::Builder::getIsOccupancy() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setIsOccupancy(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t ParkingSlot::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int16_t ParkingSlot::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ParkingSlot::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Arrow::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Arrow::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Arrow::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Arrow::Reader::getArrowType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Arrow::Builder::getArrowType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Arrow::Builder::setArrowType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Arrow::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Arrow::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader Arrow::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Arrow::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Arrow::Builder::setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder Arrow::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Arrow::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> Arrow::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t Arrow::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Arrow::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Arrow::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Bump::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Bump::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Bump::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float Bump::Reader::getHalfWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Bump::Builder::getHalfWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Bump::Builder::setHalfWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Bump::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Bump::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Bump::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Bump::Reader::hasEndPt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Bump::Builder::hasEndPt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader Bump::Reader::getEndPt() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder Bump::Builder::getEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline Bump::Pipeline::getEndPt() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Bump::Builder::setEndPt( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder Bump::Builder::initEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Bump::Builder::adoptEndPt(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> Bump::Builder::disownEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Bump::Reader::hasWideDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Bump::Builder::hasWideDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Bump::Reader::getWideDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Bump::Builder::getWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Bump::Pipeline::getWideDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Bump::Builder::setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Bump::Builder::initWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Bump::Builder::adoptWideDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Bump::Builder::disownWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Bump::Reader::hasLongDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Bump::Builder::hasLongDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader Bump::Reader::getLongDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Bump::Builder::getLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline Bump::Pipeline::getLongDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Bump::Builder::setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder Bump::Builder::initLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Bump::Builder::adoptLongDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> Bump::Builder::disownLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Bump::Reader::getIsOccupancy() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool Bump::Builder::getIsOccupancy() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void Bump::Builder::setIsOccupancy(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Bump::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Bump::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Bump::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CrossWalk::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CrossWalk::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CrossWalk::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CrossWalk::Reader::getHalfWidth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float CrossWalk::Builder::getHalfWidth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CrossWalk::Builder::setHalfWidth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float CrossWalk::Reader::getLength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float CrossWalk::Builder::getLength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CrossWalk::Builder::setLength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CrossWalk::Reader::hasEndPt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CrossWalk::Builder::hasEndPt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader CrossWalk::Reader::getEndPt() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder CrossWalk::Builder::getEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline CrossWalk::Pipeline::getEndPt() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CrossWalk::Builder::setEndPt( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder CrossWalk::Builder::initEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CrossWalk::Builder::adoptEndPt(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> CrossWalk::Builder::disownEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CrossWalk::Reader::hasWideDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CrossWalk::Builder::hasWideDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader CrossWalk::Reader::getWideDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder CrossWalk::Builder::getWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline CrossWalk::Pipeline::getWideDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CrossWalk::Builder::setWideDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder CrossWalk::Builder::initWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CrossWalk::Builder::adoptWideDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> CrossWalk::Builder::disownWideDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CrossWalk::Reader::hasLongDirection() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CrossWalk::Builder::hasLongDirection() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Vector3::Reader CrossWalk::Reader::getLongDirection() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder CrossWalk::Builder::getLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Vector3::Pipeline CrossWalk::Pipeline::getLongDirection() {
  return  ::senseAD::msg::std_msgs::Vector3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CrossWalk::Builder::setLongDirection( ::senseAD::msg::std_msgs::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Vector3::Builder CrossWalk::Builder::initLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CrossWalk::Builder::adoptLongDirection(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Vector3> CrossWalk::Builder::disownLongDirection() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t CrossWalk::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t CrossWalk::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CrossWalk::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t LaneLine::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LaneLine::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LaneLine::Reader::getLineType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LaneLine::Builder::getLineType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setLineType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LaneLine::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LaneLine::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader LaneLine::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LaneLine::Builder::setPoints( ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>::Builder LaneLine::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LaneLine::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>> LaneLine::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::senseAD::msg::std_msgs::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t LaneLine::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t LaneLine::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void LaneLine::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t StopLine::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t StopLine::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StopLine::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StopLine::Reader::hasStartPt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasStartPt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader StopLine::Reader::getStartPt() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopLine::Builder::getStartPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline StopLine::Pipeline::getStartPt() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void StopLine::Builder::setStartPt( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopLine::Builder::initStartPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::adoptStartPt(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> StopLine::Builder::disownStartPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StopLine::Reader::hasEndPt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool StopLine::Builder::hasEndPt() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader StopLine::Reader::getEndPt() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopLine::Builder::getEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline StopLine::Pipeline::getEndPt() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void StopLine::Builder::setEndPt( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder StopLine::Builder::initEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void StopLine::Builder::adoptEndPt(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> StopLine::Builder::disownEndPt() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t StopLine::Reader::getRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t StopLine::Builder::getRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void StopLine::Builder::setRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RegionInfo::Reader::getId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RegionInfo::Builder::getId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RegionInfo::Builder::setId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RegionInfo::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RegionInfo::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RegionInfo::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RegionInfo::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RegionInfo::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RegionInfo::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RegionInfo::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RegionInfo::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t RegionInfo::Reader::getFromRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RegionInfo::Builder::getFromRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RegionInfo::Builder::setFromRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t RegionInfo::Reader::getToRegionID() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RegionInfo::Builder::getToRegionID() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RegionInfo::Builder::setToRegionID( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double RegionInfo::Reader::getFromRegionHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double RegionInfo::Builder::getFromRegionHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RegionInfo::Builder::setFromRegionHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double RegionInfo::Reader::getToRegionHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double RegionInfo::Builder::getToRegionHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RegionInfo::Builder::setToRegionHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool MixVprData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MixVprData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader MixVprData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder MixVprData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline MixVprData::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MixVprData::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder MixVprData::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MixVprData::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> MixVprData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t MixVprData::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MixVprData::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MixVprData::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MixVprData::Reader::hasDesc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MixVprData::Builder::hasDesc() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader MixVprData::Reader::getDesc() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder MixVprData::Builder::getDesc() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MixVprData::Builder::setDesc( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void MixVprData::Builder::setDesc(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder MixVprData::Builder::initDesc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MixVprData::Builder::adoptDesc(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> MixVprData::Builder::disownDesc() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SuperPointData::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SuperPointData::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Header::Reader SuperPointData::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Header::Builder SuperPointData::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Header::Pipeline SuperPointData::Pipeline::getHeader() {
  return  ::senseAD::msg::std_msgs::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SuperPointData::Builder::setHeader( ::senseAD::msg::std_msgs::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Header::Builder SuperPointData::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SuperPointData::Builder::adoptHeader(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Header>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Header> SuperPointData::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SuperPointData::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SuperPointData::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SuperPointData::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SuperPointData::Reader::getDescCols() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SuperPointData::Builder::getDescCols() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SuperPointData::Builder::setDescCols( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SuperPointData::Reader::hasDesc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SuperPointData::Builder::hasDesc() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SuperPointData::Reader::getDesc() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SuperPointData::Builder::getDesc() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SuperPointData::Builder::setDesc( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SuperPointData::Builder::initDesc(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SuperPointData::Builder::adoptDesc(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SuperPointData::Builder::disownDesc() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t SuperPointData::Reader::getKptsCols() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SuperPointData::Builder::getKptsCols() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SuperPointData::Builder::setKptsCols( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SuperPointData::Reader::hasKpts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SuperPointData::Builder::hasKpts() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SuperPointData::Reader::getKpts() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SuperPointData::Builder::getKpts() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SuperPointData::Builder::setKpts( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SuperPointData::Builder::initKpts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SuperPointData::Builder::adoptKpts(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SuperPointData::Builder::disownKpts() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SuperPointData::Reader::hasScores() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SuperPointData::Builder::hasScores() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SuperPointData::Reader::getScores() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SuperPointData::Builder::getScores() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SuperPointData::Builder::setScores( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void SuperPointData::Builder::setScores(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SuperPointData::Builder::initScores(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SuperPointData::Builder::adoptScores(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SuperPointData::Builder::disownScores() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

