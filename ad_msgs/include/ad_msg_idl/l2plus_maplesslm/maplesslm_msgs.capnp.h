// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: maplesslm_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/L2Plus_localmap_msgs/local_msgs.capnp.h>
#include <ad_msg_idl/l2plus_sdmap/sdmap_msgs.capnp.h>
#include <ad_msg_idl/std_msgs/geometry.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e71337eaa371e82d);
CAPNP_DECLARE_SCHEMA(c01fe4b0fd1ad62a);
CAPNP_DECLARE_SCHEMA(9b9e5308a752535c);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace maplesslm {

struct KeyNode {
  KeyNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e71337eaa371e82d, 6, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VehicleState {
  VehicleState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c01fe4b0fd1ad62a, 10, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SceneNaviMap {
  SceneNaviMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b9e5308a752535c, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class KeyNode::Reader {
public:
  typedef KeyNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getRefPointType() const;

  inline double getDistance() const;

  inline  ::uint64_t getNavEnterLinkId() const;

  inline double getNavEnterLinkHeading() const;

  inline  ::uint64_t getNavOutLinkId() const;

  inline double getNavOutLinkHeading() const;

  inline bool hasOtherEnterLinkIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getOtherEnterLinkIds() const;

  inline bool hasOtherEnterLinkHeadings() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getOtherEnterLinkHeadings() const;

  inline bool hasOtherOutLinkIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getOtherOutLinkIds() const;

  inline bool hasOtherOutLinkHeadings() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getOtherOutLinkHeadings() const;

  inline bool hasNodeId() const;
  inline  ::senseAD::msg::sdmap::NodeIDType::Reader getNodeId() const;

  inline bool hasPosition() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getPosition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KeyNode::Builder {
public:
  typedef KeyNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getRefPointType();
  inline void setRefPointType( ::uint8_t value);

  inline double getDistance();
  inline void setDistance(double value);

  inline  ::uint64_t getNavEnterLinkId();
  inline void setNavEnterLinkId( ::uint64_t value);

  inline double getNavEnterLinkHeading();
  inline void setNavEnterLinkHeading(double value);

  inline  ::uint64_t getNavOutLinkId();
  inline void setNavOutLinkId( ::uint64_t value);

  inline double getNavOutLinkHeading();
  inline void setNavOutLinkHeading(double value);

  inline bool hasOtherEnterLinkIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getOtherEnterLinkIds();
  inline void setOtherEnterLinkIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOtherEnterLinkIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initOtherEnterLinkIds(unsigned int size);
  inline void adoptOtherEnterLinkIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownOtherEnterLinkIds();

  inline bool hasOtherEnterLinkHeadings();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getOtherEnterLinkHeadings();
  inline void setOtherEnterLinkHeadings( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOtherEnterLinkHeadings(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initOtherEnterLinkHeadings(unsigned int size);
  inline void adoptOtherEnterLinkHeadings(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownOtherEnterLinkHeadings();

  inline bool hasOtherOutLinkIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getOtherOutLinkIds();
  inline void setOtherOutLinkIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOtherOutLinkIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initOtherOutLinkIds(unsigned int size);
  inline void adoptOtherOutLinkIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownOtherOutLinkIds();

  inline bool hasOtherOutLinkHeadings();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getOtherOutLinkHeadings();
  inline void setOtherOutLinkHeadings( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOtherOutLinkHeadings(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initOtherOutLinkHeadings(unsigned int size);
  inline void adoptOtherOutLinkHeadings(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownOtherOutLinkHeadings();

  inline bool hasNodeId();
  inline  ::senseAD::msg::sdmap::NodeIDType::Builder getNodeId();
  inline void setNodeId( ::senseAD::msg::sdmap::NodeIDType::Reader value);
  inline  ::senseAD::msg::sdmap::NodeIDType::Builder initNodeId();
  inline void adoptNodeId(::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType> disownNodeId();

  inline bool hasPosition();
  inline  ::senseAD::msg::std_msgs::Point::Builder getPosition();
  inline void setPosition( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownPosition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KeyNode::Pipeline {
public:
  typedef KeyNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::sdmap::NodeIDType::Pipeline getNodeId();
  inline  ::senseAD::msg::std_msgs::Point::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VehicleState::Reader {
public:
  typedef VehicleState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs() const;

  inline bool hasLla() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getLla() const;

  inline double getRoll() const;

  inline double getPitch() const;

  inline double getYaw() const;

  inline  ::uint64_t getLinkId() const;

  inline double getLinkHeading() const;

  inline  ::uint64_t getNextlinkId() const;

  inline double getNextLinkHeading() const;

  inline bool hasNextKeyNode() const;
  inline  ::senseAD::msg::maplesslm::KeyNode::Reader getNextKeyNode() const;

  inline bool hasNextNextKeyNode() const;
  inline  ::senseAD::msg::maplesslm::KeyNode::Reader getNextNextKeyNode() const;

  inline  ::uint8_t getNavDirection() const;

  inline  ::uint8_t getRefLaneId() const;

  inline  ::uint8_t getLaneNumber() const;

  inline  ::uint64_t getCurLaneId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VehicleState::Builder {
public:
  typedef VehicleState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampNs();
  inline void setTimestampNs( ::uint64_t value);

  inline bool hasLla();
  inline  ::senseAD::msg::std_msgs::Point::Builder getLla();
  inline void setLla( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initLla();
  inline void adoptLla(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownLla();

  inline double getRoll();
  inline void setRoll(double value);

  inline double getPitch();
  inline void setPitch(double value);

  inline double getYaw();
  inline void setYaw(double value);

  inline  ::uint64_t getLinkId();
  inline void setLinkId( ::uint64_t value);

  inline double getLinkHeading();
  inline void setLinkHeading(double value);

  inline  ::uint64_t getNextlinkId();
  inline void setNextlinkId( ::uint64_t value);

  inline double getNextLinkHeading();
  inline void setNextLinkHeading(double value);

  inline bool hasNextKeyNode();
  inline  ::senseAD::msg::maplesslm::KeyNode::Builder getNextKeyNode();
  inline void setNextKeyNode( ::senseAD::msg::maplesslm::KeyNode::Reader value);
  inline  ::senseAD::msg::maplesslm::KeyNode::Builder initNextKeyNode();
  inline void adoptNextKeyNode(::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode> disownNextKeyNode();

  inline bool hasNextNextKeyNode();
  inline  ::senseAD::msg::maplesslm::KeyNode::Builder getNextNextKeyNode();
  inline void setNextNextKeyNode( ::senseAD::msg::maplesslm::KeyNode::Reader value);
  inline  ::senseAD::msg::maplesslm::KeyNode::Builder initNextNextKeyNode();
  inline void adoptNextNextKeyNode(::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode> disownNextNextKeyNode();

  inline  ::uint8_t getNavDirection();
  inline void setNavDirection( ::uint8_t value);

  inline  ::uint8_t getRefLaneId();
  inline void setRefLaneId( ::uint8_t value);

  inline  ::uint8_t getLaneNumber();
  inline void setLaneNumber( ::uint8_t value);

  inline  ::uint64_t getCurLaneId();
  inline void setCurLaneId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VehicleState::Pipeline {
public:
  typedef VehicleState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getLla();
  inline  ::senseAD::msg::maplesslm::KeyNode::Pipeline getNextKeyNode();
  inline  ::senseAD::msg::maplesslm::KeyNode::Pipeline getNextNextKeyNode();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SceneNaviMap::Reader {
public:
  typedef SceneNaviMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRoadStructure() const;
  inline  ::senseAD::msg::localmap::RoadStruct::Reader getRoadStructure() const;

  inline bool hasVehicleState() const;
  inline  ::senseAD::msg::maplesslm::VehicleState::Reader getVehicleState() const;

  inline bool hasSdMap() const;
  inline  ::senseAD::msg::sdmap::SDMap::Reader getSdMap() const;

  inline bool hasVehicleStateMnop() const;
  inline  ::senseAD::msg::maplesslm::VehicleState::Reader getVehicleStateMnop() const;

  inline bool hasSdMapMnop() const;
  inline  ::senseAD::msg::sdmap::SDMap::Reader getSdMapMnop() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SceneNaviMap::Builder {
public:
  typedef SceneNaviMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRoadStructure();
  inline  ::senseAD::msg::localmap::RoadStruct::Builder getRoadStructure();
  inline void setRoadStructure( ::senseAD::msg::localmap::RoadStruct::Reader value);
  inline  ::senseAD::msg::localmap::RoadStruct::Builder initRoadStructure();
  inline void adoptRoadStructure(::capnp::Orphan< ::senseAD::msg::localmap::RoadStruct>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::localmap::RoadStruct> disownRoadStructure();

  inline bool hasVehicleState();
  inline  ::senseAD::msg::maplesslm::VehicleState::Builder getVehicleState();
  inline void setVehicleState( ::senseAD::msg::maplesslm::VehicleState::Reader value);
  inline  ::senseAD::msg::maplesslm::VehicleState::Builder initVehicleState();
  inline void adoptVehicleState(::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState> disownVehicleState();

  inline bool hasSdMap();
  inline  ::senseAD::msg::sdmap::SDMap::Builder getSdMap();
  inline void setSdMap( ::senseAD::msg::sdmap::SDMap::Reader value);
  inline  ::senseAD::msg::sdmap::SDMap::Builder initSdMap();
  inline void adoptSdMap(::capnp::Orphan< ::senseAD::msg::sdmap::SDMap>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap> disownSdMap();

  inline bool hasVehicleStateMnop();
  inline  ::senseAD::msg::maplesslm::VehicleState::Builder getVehicleStateMnop();
  inline void setVehicleStateMnop( ::senseAD::msg::maplesslm::VehicleState::Reader value);
  inline  ::senseAD::msg::maplesslm::VehicleState::Builder initVehicleStateMnop();
  inline void adoptVehicleStateMnop(::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState> disownVehicleStateMnop();

  inline bool hasSdMapMnop();
  inline  ::senseAD::msg::sdmap::SDMap::Builder getSdMapMnop();
  inline void setSdMapMnop( ::senseAD::msg::sdmap::SDMap::Reader value);
  inline  ::senseAD::msg::sdmap::SDMap::Builder initSdMapMnop();
  inline void adoptSdMapMnop(::capnp::Orphan< ::senseAD::msg::sdmap::SDMap>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap> disownSdMapMnop();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SceneNaviMap::Pipeline {
public:
  typedef SceneNaviMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::localmap::RoadStruct::Pipeline getRoadStructure();
  inline  ::senseAD::msg::maplesslm::VehicleState::Pipeline getVehicleState();
  inline  ::senseAD::msg::sdmap::SDMap::Pipeline getSdMap();
  inline  ::senseAD::msg::maplesslm::VehicleState::Pipeline getVehicleStateMnop();
  inline  ::senseAD::msg::sdmap::SDMap::Pipeline getSdMapMnop();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t KeyNode::Reader::getRefPointType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t KeyNode::Builder::getRefPointType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setRefPointType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double KeyNode::Reader::getDistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double KeyNode::Builder::getDistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setDistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t KeyNode::Reader::getNavEnterLinkId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KeyNode::Builder::getNavEnterLinkId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setNavEnterLinkId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double KeyNode::Reader::getNavEnterLinkHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double KeyNode::Builder::getNavEnterLinkHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setNavEnterLinkHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t KeyNode::Reader::getNavOutLinkId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KeyNode::Builder::getNavOutLinkId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setNavOutLinkId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double KeyNode::Reader::getNavOutLinkHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double KeyNode::Builder::getNavOutLinkHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void KeyNode::Builder::setNavOutLinkHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool KeyNode::Reader::hasOtherEnterLinkIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasOtherEnterLinkIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader KeyNode::Reader::getOtherEnterLinkIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::getOtherEnterLinkIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::setOtherEnterLinkIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void KeyNode::Builder::setOtherEnterLinkIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::initOtherEnterLinkIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KeyNode::Builder::adoptOtherEnterLinkIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> KeyNode::Builder::disownOtherEnterLinkIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KeyNode::Reader::hasOtherEnterLinkHeadings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasOtherEnterLinkHeadings() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader KeyNode::Reader::getOtherEnterLinkHeadings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::getOtherEnterLinkHeadings() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::setOtherEnterLinkHeadings( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void KeyNode::Builder::setOtherEnterLinkHeadings(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::initOtherEnterLinkHeadings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void KeyNode::Builder::adoptOtherEnterLinkHeadings(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> KeyNode::Builder::disownOtherEnterLinkHeadings() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool KeyNode::Reader::hasOtherOutLinkIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasOtherOutLinkIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader KeyNode::Reader::getOtherOutLinkIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::getOtherOutLinkIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::setOtherOutLinkIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void KeyNode::Builder::setOtherOutLinkIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::initOtherOutLinkIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void KeyNode::Builder::adoptOtherOutLinkIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> KeyNode::Builder::disownOtherOutLinkIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool KeyNode::Reader::hasOtherOutLinkHeadings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasOtherOutLinkHeadings() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader KeyNode::Reader::getOtherOutLinkHeadings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::getOtherOutLinkHeadings() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::setOtherOutLinkHeadings( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void KeyNode::Builder::setOtherOutLinkHeadings(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder KeyNode::Builder::initOtherOutLinkHeadings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void KeyNode::Builder::adoptOtherOutLinkHeadings(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> KeyNode::Builder::disownOtherOutLinkHeadings() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool KeyNode::Reader::hasNodeId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasNodeId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::NodeIDType::Reader KeyNode::Reader::getNodeId() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::NodeIDType::Builder KeyNode::Builder::getNodeId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::NodeIDType::Pipeline KeyNode::Pipeline::getNodeId() {
  return  ::senseAD::msg::sdmap::NodeIDType::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void KeyNode::Builder::setNodeId( ::senseAD::msg::sdmap::NodeIDType::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::NodeIDType::Builder KeyNode::Builder::initNodeId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::adoptNodeId(
    ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::NodeIDType> KeyNode::Builder::disownNodeId() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::NodeIDType>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool KeyNode::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool KeyNode::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader KeyNode::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder KeyNode::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline KeyNode::Pipeline::getPosition() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void KeyNode::Builder::setPosition( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder KeyNode::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void KeyNode::Builder::adoptPosition(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> KeyNode::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t VehicleState::Reader::getTimestampNs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VehicleState::Builder::getTimestampNs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setTimestampNs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleState::Reader::hasLla() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleState::Builder::hasLla() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader VehicleState::Reader::getLla() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder VehicleState::Builder::getLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline VehicleState::Pipeline::getLla() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VehicleState::Builder::setLla( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder VehicleState::Builder::initLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VehicleState::Builder::adoptLla(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> VehicleState::Builder::disownLla() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double VehicleState::Reader::getRoll() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double VehicleState::Builder::getRoll() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setRoll(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double VehicleState::Reader::getPitch() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double VehicleState::Builder::getPitch() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setPitch(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double VehicleState::Reader::getYaw() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double VehicleState::Builder::getYaw() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setYaw(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t VehicleState::Reader::getLinkId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VehicleState::Builder::getLinkId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setLinkId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double VehicleState::Reader::getLinkHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double VehicleState::Builder::getLinkHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setLinkHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t VehicleState::Reader::getNextlinkId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VehicleState::Builder::getNextlinkId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setNextlinkId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double VehicleState::Reader::getNextLinkHeading() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double VehicleState::Builder::getNextLinkHeading() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setNextLinkHeading(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool VehicleState::Reader::hasNextKeyNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleState::Builder::hasNextKeyNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::maplesslm::KeyNode::Reader VehicleState::Reader::getNextKeyNode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::maplesslm::KeyNode::Builder VehicleState::Builder::getNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::maplesslm::KeyNode::Pipeline VehicleState::Pipeline::getNextKeyNode() {
  return  ::senseAD::msg::maplesslm::KeyNode::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VehicleState::Builder::setNextKeyNode( ::senseAD::msg::maplesslm::KeyNode::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::maplesslm::KeyNode::Builder VehicleState::Builder::initNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VehicleState::Builder::adoptNextKeyNode(
    ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode> VehicleState::Builder::disownNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool VehicleState::Reader::hasNextNextKeyNode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool VehicleState::Builder::hasNextNextKeyNode() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::maplesslm::KeyNode::Reader VehicleState::Reader::getNextNextKeyNode() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::maplesslm::KeyNode::Builder VehicleState::Builder::getNextNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::maplesslm::KeyNode::Pipeline VehicleState::Pipeline::getNextNextKeyNode() {
  return  ::senseAD::msg::maplesslm::KeyNode::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VehicleState::Builder::setNextNextKeyNode( ::senseAD::msg::maplesslm::KeyNode::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::maplesslm::KeyNode::Builder VehicleState::Builder::initNextNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void VehicleState::Builder::adoptNextNextKeyNode(
    ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::maplesslm::KeyNode> VehicleState::Builder::disownNextNextKeyNode() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::KeyNode>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint8_t VehicleState::Reader::getNavDirection() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleState::Builder::getNavDirection() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setNavDirection( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleState::Reader::getRefLaneId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleState::Builder::getRefLaneId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setRefLaneId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t VehicleState::Reader::getLaneNumber() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t VehicleState::Builder::getLaneNumber() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setLaneNumber( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t VehicleState::Reader::getCurLaneId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VehicleState::Builder::getCurLaneId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void VehicleState::Builder::setCurLaneId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool SceneNaviMap::Reader::hasRoadStructure() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SceneNaviMap::Builder::hasRoadStructure() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::localmap::RoadStruct::Reader SceneNaviMap::Reader::getRoadStructure() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::localmap::RoadStruct::Builder SceneNaviMap::Builder::getRoadStructure() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::localmap::RoadStruct::Pipeline SceneNaviMap::Pipeline::getRoadStructure() {
  return  ::senseAD::msg::localmap::RoadStruct::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SceneNaviMap::Builder::setRoadStructure( ::senseAD::msg::localmap::RoadStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::localmap::RoadStruct::Builder SceneNaviMap::Builder::initRoadStructure() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SceneNaviMap::Builder::adoptRoadStructure(
    ::capnp::Orphan< ::senseAD::msg::localmap::RoadStruct>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::localmap::RoadStruct> SceneNaviMap::Builder::disownRoadStructure() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::localmap::RoadStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SceneNaviMap::Reader::hasVehicleState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SceneNaviMap::Builder::hasVehicleState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::maplesslm::VehicleState::Reader SceneNaviMap::Reader::getVehicleState() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::maplesslm::VehicleState::Builder SceneNaviMap::Builder::getVehicleState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::maplesslm::VehicleState::Pipeline SceneNaviMap::Pipeline::getVehicleState() {
  return  ::senseAD::msg::maplesslm::VehicleState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SceneNaviMap::Builder::setVehicleState( ::senseAD::msg::maplesslm::VehicleState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::maplesslm::VehicleState::Builder SceneNaviMap::Builder::initVehicleState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SceneNaviMap::Builder::adoptVehicleState(
    ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState> SceneNaviMap::Builder::disownVehicleState() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SceneNaviMap::Reader::hasSdMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SceneNaviMap::Builder::hasSdMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::SDMap::Reader SceneNaviMap::Reader::getSdMap() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::SDMap::Builder SceneNaviMap::Builder::getSdMap() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::SDMap::Pipeline SceneNaviMap::Pipeline::getSdMap() {
  return  ::senseAD::msg::sdmap::SDMap::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SceneNaviMap::Builder::setSdMap( ::senseAD::msg::sdmap::SDMap::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::SDMap::Builder SceneNaviMap::Builder::initSdMap() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SceneNaviMap::Builder::adoptSdMap(
    ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap> SceneNaviMap::Builder::disownSdMap() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SceneNaviMap::Reader::hasVehicleStateMnop() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SceneNaviMap::Builder::hasVehicleStateMnop() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::maplesslm::VehicleState::Reader SceneNaviMap::Reader::getVehicleStateMnop() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::maplesslm::VehicleState::Builder SceneNaviMap::Builder::getVehicleStateMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::maplesslm::VehicleState::Pipeline SceneNaviMap::Pipeline::getVehicleStateMnop() {
  return  ::senseAD::msg::maplesslm::VehicleState::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SceneNaviMap::Builder::setVehicleStateMnop( ::senseAD::msg::maplesslm::VehicleState::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::maplesslm::VehicleState::Builder SceneNaviMap::Builder::initVehicleStateMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SceneNaviMap::Builder::adoptVehicleStateMnop(
    ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::maplesslm::VehicleState> SceneNaviMap::Builder::disownVehicleStateMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::maplesslm::VehicleState>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SceneNaviMap::Reader::hasSdMapMnop() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SceneNaviMap::Builder::hasSdMapMnop() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::sdmap::SDMap::Reader SceneNaviMap::Reader::getSdMapMnop() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::sdmap::SDMap::Builder SceneNaviMap::Builder::getSdMapMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::sdmap::SDMap::Pipeline SceneNaviMap::Pipeline::getSdMapMnop() {
  return  ::senseAD::msg::sdmap::SDMap::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SceneNaviMap::Builder::setSdMapMnop( ::senseAD::msg::sdmap::SDMap::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::sdmap::SDMap::Builder SceneNaviMap::Builder::initSdMapMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SceneNaviMap::Builder::adoptSdMapMnop(
    ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::sdmap::SDMap> SceneNaviMap::Builder::disownSdMapMnop() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::sdmap::SDMap>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

