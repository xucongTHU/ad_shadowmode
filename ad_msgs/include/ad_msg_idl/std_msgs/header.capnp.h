// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: header.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <ad_msg_idl/std_msgs/geometry.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(94ea0c65056cd1ad);
CAPNP_DECLARE_SCHEMA(a903370a0421150c);
CAPNP_DECLARE_SCHEMA(d87c8057940cf824);
CAPNP_DECLARE_SCHEMA(97226e2d9360c3f6);
CAPNP_DECLARE_SCHEMA(861c4dbe19f0285d);

}  // namespace schemas
}  // namespace capnp

namespace senseAD {
namespace msg {
namespace std_msgs {

struct Time {
  Time() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(94ea0c65056cd1ad, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Header {
  Header() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a903370a0421150c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MapHeader {
  MapHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d87c8057940cf824, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TimeStamp {
  TimeStamp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97226e2d9360c3f6, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HistInfo {
  HistInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(861c4dbe19f0285d, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Time::Reader {
public:
  typedef Time Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNanoSec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Time::Builder {
public:
  typedef Time Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNanoSec();
  inline void setNanoSec( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Time::Pipeline {
public:
  typedef Time Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Header::Reader {
public:
  typedef Header Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq() const;

  inline bool hasTime() const;
  inline  ::senseAD::msg::std_msgs::Time::Reader getTime() const;

  inline bool hasFrameId() const;
  inline  ::capnp::Text::Reader getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Header::Builder {
public:
  typedef Header Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSeq();
  inline void setSeq( ::uint32_t value);

  inline bool hasTime();
  inline  ::senseAD::msg::std_msgs::Time::Builder getTime();
  inline void setTime( ::senseAD::msg::std_msgs::Time::Reader value);
  inline  ::senseAD::msg::std_msgs::Time::Builder initTime();
  inline void adoptTime(::capnp::Orphan< ::senseAD::msg::std_msgs::Time>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Time> disownTime();

  inline bool hasFrameId();
  inline  ::capnp::Text::Builder getFrameId();
  inline void setFrameId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFrameId(unsigned int size);
  inline void adoptFrameId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFrameId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Header::Pipeline {
public:
  typedef Header Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Time::Pipeline getTime();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapHeader::Reader {
public:
  typedef MapHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampns() const;

  inline  ::uint64_t getSensorid() const;

  inline  ::uint8_t getCoordtype() const;

  inline bool hasOrigin() const;
  inline  ::senseAD::msg::std_msgs::Point::Reader getOrigin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapHeader::Builder {
public:
  typedef MapHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTimestampns();
  inline void setTimestampns( ::uint64_t value);

  inline  ::uint64_t getSensorid();
  inline void setSensorid( ::uint64_t value);

  inline  ::uint8_t getCoordtype();
  inline void setCoordtype( ::uint8_t value);

  inline bool hasOrigin();
  inline  ::senseAD::msg::std_msgs::Point::Builder getOrigin();
  inline void setOrigin( ::senseAD::msg::std_msgs::Point::Reader value);
  inline  ::senseAD::msg::std_msgs::Point::Builder initOrigin();
  inline void adoptOrigin(::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> disownOrigin();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapHeader::Pipeline {
public:
  typedef MapHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::Point::Pipeline getOrigin();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TimeStamp::Reader {
public:
  typedef TimeStamp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsValid() const;

  inline  ::uint32_t getSec() const;

  inline  ::uint32_t getNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TimeStamp::Builder {
public:
  typedef TimeStamp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getIsValid();
  inline void setIsValid(bool value);

  inline  ::uint32_t getSec();
  inline void setSec( ::uint32_t value);

  inline  ::uint32_t getNsec();
  inline void setNsec( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TimeStamp::Pipeline {
public:
  typedef TimeStamp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HistInfo::Reader {
public:
  typedef HistInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId() const;

  inline  ::uint32_t getObstacleId() const;

  inline bool hasRawSensorCaptureTimestamp() const;
  inline  ::senseAD::msg::std_msgs::TimeStamp::Reader getRawSensorCaptureTimestamp() const;

  inline bool hasSensorPerceptionCaptureTimestamp() const;
  inline  ::senseAD::msg::std_msgs::TimeStamp::Reader getSensorPerceptionCaptureTimestamp() const;

  inline bool hasSensorPerceptionOutputTimestamp() const;
  inline  ::senseAD::msg::std_msgs::TimeStamp::Reader getSensorPerceptionOutputTimestamp() const;

  inline bool hasFusionCaptureTimestamp() const;
  inline  ::senseAD::msg::std_msgs::TimeStamp::Reader getFusionCaptureTimestamp() const;

  inline bool hasFusionOutputTimestamp() const;
  inline  ::senseAD::msg::std_msgs::TimeStamp::Reader getFusionOutputTimestamp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HistInfo::Builder {
public:
  typedef HistInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getSensorId();
  inline void setSensorId( ::int16_t value);

  inline  ::uint32_t getObstacleId();
  inline void setObstacleId( ::uint32_t value);

  inline bool hasRawSensorCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder getRawSensorCaptureTimestamp();
  inline void setRawSensorCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value);
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder initRawSensorCaptureTimestamp();
  inline void adoptRawSensorCaptureTimestamp(::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> disownRawSensorCaptureTimestamp();

  inline bool hasSensorPerceptionCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder getSensorPerceptionCaptureTimestamp();
  inline void setSensorPerceptionCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value);
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder initSensorPerceptionCaptureTimestamp();
  inline void adoptSensorPerceptionCaptureTimestamp(::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> disownSensorPerceptionCaptureTimestamp();

  inline bool hasSensorPerceptionOutputTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder getSensorPerceptionOutputTimestamp();
  inline void setSensorPerceptionOutputTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value);
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder initSensorPerceptionOutputTimestamp();
  inline void adoptSensorPerceptionOutputTimestamp(::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> disownSensorPerceptionOutputTimestamp();

  inline bool hasFusionCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder getFusionCaptureTimestamp();
  inline void setFusionCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value);
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder initFusionCaptureTimestamp();
  inline void adoptFusionCaptureTimestamp(::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> disownFusionCaptureTimestamp();

  inline bool hasFusionOutputTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder getFusionOutputTimestamp();
  inline void setFusionOutputTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value);
  inline  ::senseAD::msg::std_msgs::TimeStamp::Builder initFusionOutputTimestamp();
  inline void adoptFusionOutputTimestamp(::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value);
  inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> disownFusionOutputTimestamp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HistInfo::Pipeline {
public:
  typedef HistInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline getRawSensorCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline getSensorPerceptionCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline getSensorPerceptionOutputTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline getFusionCaptureTimestamp();
  inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline getFusionOutputTimestamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t Time::Reader::getNanoSec() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Time::Builder::getNanoSec() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Time::Builder::setNanoSec( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Header::Reader::getSeq() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Header::Builder::getSeq() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Header::Builder::setSeq( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Header::Reader::hasTime() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Header::Builder::hasTime() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Time::Reader Header::Reader::getTime() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Time::Builder Header::Builder::getTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Time::Pipeline Header::Pipeline::getTime() {
  return  ::senseAD::msg::std_msgs::Time::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Header::Builder::setTime( ::senseAD::msg::std_msgs::Time::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Time::Builder Header::Builder::initTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Header::Builder::adoptTime(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Time>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Time> Header::Builder::disownTime() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Time>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Header::Reader::hasFrameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Header::Builder::hasFrameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Header::Reader::getFrameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Header::Builder::getFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Header::Builder::setFrameId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Header::Builder::initFrameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Header::Builder::adoptFrameId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Header::Builder::disownFrameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t MapHeader::Reader::getTimestampns() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapHeader::Builder::getTimestampns() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapHeader::Builder::setTimestampns( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MapHeader::Reader::getSensorid() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MapHeader::Builder::getSensorid() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MapHeader::Builder::setSensorid( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MapHeader::Reader::getCoordtype() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MapHeader::Builder::getCoordtype() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void MapHeader::Builder::setCoordtype( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool MapHeader::Reader::hasOrigin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MapHeader::Builder::hasOrigin() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::Point::Reader MapHeader::Reader::getOrigin() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapHeader::Builder::getOrigin() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::Point::Pipeline MapHeader::Pipeline::getOrigin() {
  return  ::senseAD::msg::std_msgs::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MapHeader::Builder::setOrigin( ::senseAD::msg::std_msgs::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::Point::Builder MapHeader::Builder::initOrigin() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapHeader::Builder::adoptOrigin(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::Point>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::Point> MapHeader::Builder::disownOrigin() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TimeStamp::Reader::getIsValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TimeStamp::Builder::getIsValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setIsValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TimeStamp::Reader::getSec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TimeStamp::Builder::getSec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TimeStamp::Reader::getNsec() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TimeStamp::Builder::getNsec() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TimeStamp::Builder::setNsec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t HistInfo::Reader::getSensorId() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t HistInfo::Builder::getSensorId() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HistInfo::Builder::setSensorId( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t HistInfo::Reader::getObstacleId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t HistInfo::Builder::getObstacleId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void HistInfo::Builder::setObstacleId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool HistInfo::Reader::hasRawSensorCaptureTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasRawSensorCaptureTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Reader HistInfo::Reader::getRawSensorCaptureTimestamp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::getRawSensorCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline HistInfo::Pipeline::getRawSensorCaptureTimestamp() {
  return  ::senseAD::msg::std_msgs::TimeStamp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setRawSensorCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::initRawSensorCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptRawSensorCaptureTimestamp(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> HistInfo::Builder::disownRawSensorCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasSensorPerceptionCaptureTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasSensorPerceptionCaptureTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Reader HistInfo::Reader::getSensorPerceptionCaptureTimestamp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::getSensorPerceptionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline HistInfo::Pipeline::getSensorPerceptionCaptureTimestamp() {
  return  ::senseAD::msg::std_msgs::TimeStamp::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setSensorPerceptionCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::initSensorPerceptionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptSensorPerceptionCaptureTimestamp(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> HistInfo::Builder::disownSensorPerceptionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasSensorPerceptionOutputTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasSensorPerceptionOutputTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Reader HistInfo::Reader::getSensorPerceptionOutputTimestamp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::getSensorPerceptionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline HistInfo::Pipeline::getSensorPerceptionOutputTimestamp() {
  return  ::senseAD::msg::std_msgs::TimeStamp::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setSensorPerceptionOutputTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::initSensorPerceptionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptSensorPerceptionOutputTimestamp(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> HistInfo::Builder::disownSensorPerceptionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasFusionCaptureTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasFusionCaptureTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Reader HistInfo::Reader::getFusionCaptureTimestamp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::getFusionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline HistInfo::Pipeline::getFusionCaptureTimestamp() {
  return  ::senseAD::msg::std_msgs::TimeStamp::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setFusionCaptureTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::initFusionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptFusionCaptureTimestamp(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> HistInfo::Builder::disownFusionCaptureTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HistInfo::Reader::hasFusionOutputTimestamp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HistInfo::Builder::hasFusionOutputTimestamp() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Reader HistInfo::Reader::getFusionOutputTimestamp() const {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::getFusionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::senseAD::msg::std_msgs::TimeStamp::Pipeline HistInfo::Pipeline::getFusionOutputTimestamp() {
  return  ::senseAD::msg::std_msgs::TimeStamp::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void HistInfo::Builder::setFusionOutputTimestamp( ::senseAD::msg::std_msgs::TimeStamp::Reader value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::senseAD::msg::std_msgs::TimeStamp::Builder HistInfo::Builder::initFusionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HistInfo::Builder::adoptFusionOutputTimestamp(
    ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp>&& value) {
  ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::senseAD::msg::std_msgs::TimeStamp> HistInfo::Builder::disownFusionOutputTimestamp() {
  return ::capnp::_::PointerHelpers< ::senseAD::msg::std_msgs::TimeStamp>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

